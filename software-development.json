[{"course_info": "About this course: This course aims to teach everyone the basics of programming computers using Python. We cover the basics of how one constructs a program from a series of simple instructions in Python.  The course has no pre-requisites and avoids all but the simplest mathematics. Anyone with moderate computer experience should be able to master the materials in this course. This course will cover Chapters 1-5 of the textbook “Python for Everybody”.  Once a student completes this course, they will be ready to take more advanced programming courses. This course covers Python 3.", "title": "Programming for Everybody (Getting Started with Python)", "rating": "4.8", "level": null, "created_by": "University of Michigan", "package_name": "Python for Everybody Specialization ", "target_audience": null, "package_num": "1", "teach_by": [{"name": "Charles Severance", "department": "School of Information"}], "week_data": [{"description": "These are the course-wide materials as well as the first part of Chapter One where we explore what it means to write programs.  We finish Chapter One and have the quiz and first assignment in the third week of the class. Throughout the course you may want to come back and look at these materials.  This section should not take you an entire week. ", "video": ["Video: Welcome to Class - Dr. Chuck", "Reading: Welcome to The Class", "Video: Welcome to Python - Guido van Rossum", "Welcome to Python 3", "Textbook: Python for Everybody: Exploring Data in Python 3", "Submitting Assignments", "1.1 - Why Program", "1.2 - Hardware Overview", "1.3 - Python as a Language", "Audio Versions of All Lectures", "Fun: The Textbook Authors Meet @PyCon2015"], "title": "Chapter One - Why we Program?"}, {"description": "In this module you will set things up so you can write Python programs.  Not all activities in this module are required for this class so please read the \"Using Python in this Class\" material for details.", "video": ["Important Reading: Using Python in this Class", "Notes on Choice of Text Editor", "Demonstration: Using the Python Playground", "Notice for Auditing Learners: Assignment Submission", "Python Code Playground", "Windows 10: Installing Python and Writing A Program", "Windows: Taking Screen Shots", "Macintosh: Using Python and Writing A Program", "Macintosh: Taking Screen Shots", "Optional-  Installing Python Screen Shots", "Bonus: Eben Upton and the RaspBerry Pi"], "title": "Installing and Using Python"}, {"description": "In the first chapter we try to cover the \"big picture\" of programming so you get a \"table of contents\" of the rest of the book.   Don't worry if not everything makes perfect sense the first time you hear it.   This chapter is quite broad and you would benefit from reading the chapter in the book in addition to watching the lectures to help it all sink in.  You might want to come back and re-watch these lectures after you have funished a few more chapters.", "video": ["1.4 - Writing Paragraphs of Code", "Demonstration: Doing the \"Hello World\" Assignment", "Interview: Daphne Koller - Building Coursera", "Face-to-Face Office Hours: Milan, Italy", "Chapter 1", "Assignment: Write Hello World"], "title": "Chapter One: Why We Program (continued)"}, {"description": "In this chapter we cover how a program uses the computer's memory to store, retrieve and calculate information.", "video": ["2.1 - Expressions", "2.2 - Expressions Part 2", "2.3 - Expressions - Part 3", "Where is the worked exercise for Assignment 2.2?", "Worked Exercise: 2.3", "Interview: Pooja Sankar - Building Piazza", "Office Hours: Mountain View, CA", "Chapter 2", "Assignment 2.2", "Assignment 2.3"], "title": "Chapter Two: Variables and Expressions"}, {"description": "In this section we move from sequential code that simply runs one line of code after another to conditional code where some steps are skipped.  It is a very simple concept - but it is how computer software makes \"choices\".", "video": ["3.1 Conditional Statements", "3.2 More Conditional Statements", "Worked Exercise: 3.2", "Interview: Massimo Banzi: The Arduino", "Office Hours: Seoul Korea", "Chapter 3", "Assignment 3.1", "Assignment 3.3"], "title": "Chapter Three: Conditional Code"}, {"description": "This is a relatively short chapter.   We will learn about what functions are and how we can use them.   The programs in the first chapters of the book are not large enough to require us to develop functions, but as the book moves into more and more complex programs, functions will be an essential way for us to make sense of our code.", "video": ["4.1 - Using Functions", "4.2 - Building Functions", "Interview: Guido van Rossum: The Early Years of Python", "Office Hours: Manila Philippines", "Chapter 4", "Assignment 4.6"], "title": "Chapter Four: Functions"}, {"description": "Loops and iteration complete our four basic programming patterns.  Loops are the way we tell Python to do something over and over.   Loops are the way we build programs that stay with a problem until the problem is solved.", "video": ["5.1 - Loops and Iteration", "5.2 - Definite Loops", "5.3 - Finding the Largest Value", "5.4 - Loop Idioms", "Worked Exercise: 5.1", "Interview: Guido van Rossum - The Modern Era of Python", "Office Hours: Paris, France", "Please Rate this Course on Class-Central", "Chapter 5", "Assignment 5.2"], "title": "Chapter Five: Loops and Iteration"}]}, {"course_info": "About this course: If you're a software developer and new to blockchain, this is the course for you. Several experienced IBM blockchain developer advocates will lead you through a series of videos that describe high-level concepts, components, and strategies on building blockchain business networks. You'll also get hands-on experience modeling and building blockchain networks as well as create your first blockchain application. \n\nThe first part of this course covers basic concepts of blockchain, and no programming skills are required. However, to complete three of the four labs, you must understand basic software object-oriented programming and how to use the command line. It's also helpful, but not required, that you can write code in JavaScript. \n\nWhen you complete the course, you should understand what a blockchain business network is, how to build and model a simple blockchain solution, and the role of the developer in creating blockchain applications. \n\nIf you successfully complete the course, you'll receive a certificate of completion.  You'll need to pass several end-of-section quizzes and a final exam that include multiple choice, true and false, and fill in the blank questions. \n\nThis course does not cover Bitcoin or cryptocurrency in detail.", "title": "IBM Blockchain Foundation for Developers", "rating": "4.6", "level": "Intermediate", "created_by": "IBM", "package_name": null, "target_audience": "Who is this class for: Software developers who are new to blockchain. ", "package_num": null, "teach_by": [{"name": "Ant Cole", "department": "IBM Blockchain"}, {"name": "Dave Gorman", "department": "IBM Industry Platform "}], "week_data": [{"description": "In this module, you'll get an overview of the entire course including prerequisite software and hardware. You will also get introduced to IBM Blockchain. ", "video": ["About this course", "Prerequisites", "Notes and resources", "What is blockchain?", "The business backdrop", "Checkpoint", "The problem area", "Checkpoint", "Relation to Bitcoin", "Checkpoint", "Requirements for a blockchain in a business environment", "Checkpoint", "Requirements deep dive", "Checkpoint", "Discussion prompt", "Section quiz"], "title": "Welcome to this course"}, {"description": "This module describes the ways in which blockchain can help you build more secure and efficient business networks.", "video": ["Apply blockchain to business", "Why blockchain is relevant for business", "Checkpoint", "Consensus: Shared reference data example ", "Checkpoint", "Provenance: Supply chain example ", "Checkpoint", "Finality: Letter of credit example ", "Checkpoint", "Industry use cases ", "Checkpoint", "Customer adoption ", "Checkpoint", "Discussion prompt", "Section quiz"], "title": "Leverage blockchain benefits"}, {"description": "In this module, you'll get an overview of IBM and the Hyperledger Project, and get an introduction to Hyperledger Composer, a tool that helps you quickly model and build blockchain business networks. You'll also use Hyperledger Composer to model a simple business network that transfers a car among buyers, sellers, and other network participants. ", "video": ["How IBM can help you apply blockchain? ", "IBM and Hyperledger relationship: Blockchain for business ", "Checkpoint", "Hyperledger Composer overview", "Checkpoint", "IBM engagement model ", "Checkpoint", "Discussion prompt", "Transfer assets in a blockchain", "Blockchain asset transfer demo ", "Checkpoint", "Lab 1: Transfer assets", "Checkpoint", "Discussion prompt", "Section quiz"], "title": "Transform your business with blockchain"}, {"description": "Take a deeper dive into Hyperledger Composer, understand its underlying structures, and use it to model a simple car auction network.", "video": ["Hyperledger Composer overview", "Hyperledger Composer: a deeper dive", "Checkpoint", "An example business network", "Checkpoint", "Conceptual components and structure", "Checkpoint", "Demo - Hyperledger Composer", "Checkpoint", "Lab 2: Create a Hyperledger Composer solution", "Checkpoint", "Extensive, familiar, open tool set", "Checkpoint", "Discussion", "Section quiz"], "title": "Blockchain composed"}, {"description": "In this module, you'll learn more about the components of a blockchain solution and about the roles of people who model, build, and maintain that blockchain solution. You'll also learn to use command-line tools to build a simple application in JavaScript that queries and updates a prepopulated blockchain network ledger. You'll also learn more about the architecture of a blockchain network and about key considerations for developers, administrators, and network consensus. You'll also get hands-on experience working with a sample Hyperledger Fabric network that includes two organizations, two peer nodes, and an ordering service.", "video": ["Participants and components Overview", "Checkpoint", "Developer considerations", "Checkpoint", "Lab 3: Write your first blockchain application", "Checkpoint", "Discussion prompt", "Operator considerations", "Checkpoint", "Public and private blockchain", "Checkpoint", "Architect considerations", "Checkpoint", "Network considerations", "Checkpoint", "Lab 4: Build your own network", "Checkpoint", "Discussion prompt", "Section quiz"], "title": "Blockchain fabric development and architecture"}, {"description": "", "video": ["Summary", "Next steps", "Final quiz"], "title": "Wrap up"}]}, {"course_info": "About this course: This course covers the essential information that every serious programmer needs to know about algorithms and data structures, with emphasis on applications and scientific performance analysis of Java implementations. Part I covers elementary data structures, sorting, and searching algorithms. Part II focuses on graph- and string-processing algorithms.", "title": "Algorithms, Part I", "rating": "4.9", "level": "Intermediate", "created_by": "Princeton University", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Kevin Wayne", "department": "Computer Science"}, {"name": "Robert Sedgewick", "department": "Computer Science"}], "week_data": [{"description": "Welcome to Algorithms, Part I.", "video": ["Welcome to Algorithms, Part I", "Lecture Slides", "Course Introduction"], "title": "Course Introduction"}, {"description": "We illustrate our basic approach to developing and analyzing algorithms by considering the dynamic connectivity problem. We introduce the union−find data type and consider several implementations (quick find, quick union, weighted quick union, and weighted quick union with path compression). Finally, we apply the union−find data type to the percolation problem from physical chemistry.", "video": ["Overview", "Lecture Slides", "Dynamic Connectivity", "Quick Find", "Quick Union", "Quick-Union Improvements", "Union−Find Applications", "Interview Questions: Union–Find (ungraded)", "Percolation"], "title": "Union−Find"}, {"description": "The basis of our approach for analyzing the performance of algorithms is the scientific method. We begin by performing computational experiments to measure the running times of our programs. We use these measurements to develop hypotheses about performance. Next, we create mathematical models to explain their behavior. Finally, we consider analyzing the memory usage of our Java programs.", "video": ["Lecture Slides", "Analysis of Algorithms Introduction", "Observations", "Mathematical Models", "Order-of-Growth Classifications", "Theory of Algorithms", "Memory", "Interview Questions: Analysis of Algorithms (ungraded)"], "title": "Analysis of Algorithms"}, {"description": "We consider two fundamental data types for storing collections of objects: the stack and the queue. We implement each using either a singly-linked list or a resizing array. We introduce two advanced Java features—generics and iterators—that simplify client code. Finally, we consider various applications of stacks and queues ranging from parsing arithmetic expressions to simulating queueing systems.", "video": ["Overview", "Lecture Slides", "Stacks", "Resizing Arrays", "Queues", "Generics", "Iterators", "Stack and Queue Applications (optional)", "Interview Questions: Stacks and Queues (ungraded)", "Deques and Randomized Queues"], "title": "Stacks and Queues"}, {"description": "We introduce the sorting problem and Java's Comparable interface. We study two elementary sorting methods (selection sort and insertion sort) and a variation of one of them (shellsort). We also consider two algorithms for uniformly shuffling an array. We conclude with an application of sorting to computing the convex hull via the Graham scan algorithm.", "video": ["Lecture Slides", "Sorting Introduction", "Selection Sort", "Insertion Sort", "Shellsort", "Shuffling", "Convex Hull", "Interview Questions: Elementary Sorts (ungraded)"], "title": "Elementary Sorts"}, {"description": "We study the mergesort algorithm and show that it guarantees to sort any array of n items with at most n lg n compares. We also consider a nonrecursive, bottom-up version. We prove that any compare-based sorting algorithm must make at least  n lg n compares in the worst case. We discuss using different orderings for the objects that we are sorting and the related concept of stability.", "video": ["Overview", "Lecture Slides", "Mergesort", "Bottom-up Mergesort", "Sorting Complexity", "Comparators", "Stability", "Interview Questions: Mergesort (ungraded)", "Collinear Points"], "title": "Mergesort"}, {"description": "We introduce and implement the randomized quicksort algorithm and analyze its performance. We also consider randomized quickselect, a quicksort variant which finds the kth smallest item in linear time. Finally, we consider 3-way quicksort, a variant of quicksort that works especially well in the presence of duplicate keys.", "video": ["Lecture Slides", "Quicksort", "Selection", "Duplicate Keys", "System Sorts", "Interview Questions: Quicksort (ungraded)"], "title": "Quicksort"}, {"description": "We introduce the priority queue data type and an efficient implementation using the binary heap data structure. This implementation also leads to an efficient sorting algorithm known as heapsort. We conclude with an applications of priority queues where we simulate the motion of n particles subject to the laws of elastic collision. ", "video": ["Overview", "Lecture Slides", "APIs and Elementary Implementations", "Binary Heaps", "Heapsort", "Event-Driven Simulation (optional)", "Interview Questions: Priority Queues (ungraded)", "8 Puzzle"], "title": "Priority Queues"}, {"description": "We define an API for symbol tables (also known as associative arrays, maps, or dictionaries) and describe two elementary implementations using a sorted array (binary search) and an unordered list (sequential search). When the keys are Comparable, we define an extended API that includes the additional methods min, max floor, ceiling, rank, and select. To develop an efficient implementation of this API, we study the binary search tree data structure and analyze its performance.", "video": ["Lecture Slides", "Symbol Table API", "Elementary Implementations", "Ordered Operations", "Binary Search Trees", "Ordered Operations in BSTs", "Deletion in BSTs", "Interview Questions: Elementary Symbol Tables (ungraded)"], "title": "Elementary Symbol Tables"}, {"description": "In this lecture, our goal is to develop a symbol table with guaranteed logarithmic performance for search and insert (and many other operations). We begin with 2−3 trees, which are easy to analyze but hard to implement. Next, we consider red−black binary search trees, which we view as a novel way to implement 2−3 trees as binary search trees. Finally, we introduce B-trees, a generalization of 2−3 trees that are widely used to implement file systems.", "video": ["Overview", "Lecture Slides", "2−3 Search Trees", "Red-Black BSTs", "B-Trees (optional)", "Interview Questions: Balanced Search Trees (ungraded)"], "title": "Balanced Search Trees"}, {"description": "We start with 1d and 2d range searching, where the goal is to find all points in a given 1d or 2d interval. To accomplish this, we consider kd-trees, a natural generalization of BSTs when the keys are points in the plane (or higher dimensions). We also consider intersection problems, where the goal is to find all intersections among a set of line segments or rectangles.", "video": ["Lecture Slides", "1d Range Search", "Line Segment Intersection", "Kd-Trees", "Interval Search Trees", "Rectangle Intersection", "Kd-Trees"], "title": "Geometric Applications of BSTs"}, {"description": "We begin by describing the desirable properties of hash function and how to implement them in Java, including a fundamental tenet known as the uniform hashing assumption that underlies the potential success of a hashing application. Then, we consider two strategies for implementing hash tables—separate chaining and linear probing. Both strategies yield constant-time performance for search and insert under the uniform hashing assumption. ", "video": ["Overview", "Lecture Slides", "Hash Tables", "Separate Chaining", "Linear Probing", "Hash Table Context", "Interview Questions: Hash Tables (ungraded)"], "title": "Hash Tables"}, {"description": "We consider various applications of symbol tables including sets, dictionary clients, indexing clients, and sparse vectors.", "video": ["Lecture Slides", "Symbol Table Applications: Sets (optional)", "Symbol Table Applications: Dictionary Clients (optional)", "Symbol Table Applications: Indexing Clients (optional)", "Symbol Table Applications: Sparse Vectors (optional)"], "title": "Symbol Table Applications"}]}, {"course_info": "About this course: This course will introduce the learner to the basics of the python programming environment, including how to download and install python, expected fundamental python programming techniques, and how to find help with python programming questions. The course will also introduce data manipulation and cleaning techniques using the popular python pandas data science library and introduce the abstraction of the DataFrame as the central data structure for data analysis. The course will end with a statistics primer, showing how various statistical measures can be applied to pandas DataFrames. By the end of the course, students will be able to take tabular data, clean it,  manipulate it, and run basic inferential statistical analyses.\n\nThis course should be taken before any of the other Applied Data Science with Python courses:  Applied Plotting, Charting & Data Representation in Python, Applied Machine Learning in Python, Applied Text Mining in Python, Applied Social Network Analysis in Python.", "title": "Introduction to Data Science in Python", "rating": "4.5", "level": "Intermediate", "created_by": "University of Michigan", "package_name": "Applied Data Science with Python Specialization ", "target_audience": "Who is this class for: This course is part of “Applied Data Science with Python“ and is intended for learners who have basic python or programming background, and want to apply statistics, machine learning, information visualization, social network analysis, and text analysis techniques to gain new insight into data.\n\nOnly minimal statistics background is expected, and the first course contains a refresh of these basic concepts. There are no geographic restrictions. Learners with a formal training in Computer Science but without formal training in data science will still find the skills they acquire in these courses valuable in their studies and careers.", "package_num": "1", "teach_by": [{"name": "Christopher Brooks", "department": null}], "week_data": [{"description": "In this week you'll get an introduction to the field of data science, review common Python functionality and features which data scientists use, and be introduced to the Coursera Jupyter Notebook for the lectures. All of the course information on grading, prerequisites, and expectations are on the course syllabus, and you can find more information about the Jupyter Notebooks on our Course Resources page.", "video": ["Introduction to Specialization", "Syllabus", "Help us learn more about you!", "Data Science", "50 years of Data Science, David Donoho (optional)", "The Coursera Jupyter Notebook System", "Notice for Auditing Learners: Assignment Submission", "Week 1 Lectures Jupyter Notebook", "Python Functions", "Python Types and Sequences", "Python More on Strings", "Python Demonstration: Reading and Writing CSV files", "Python Dates and Times", "Advanced Python Objects, map()", "Advanced Python Lambda and List Comprehensions", "Advanced Python Demonstration: The Numerical Python Library (NumPy)", "Week One Quiz"], "title": "Week 1"}, {"description": "In this week of the course you'll learn the fundamentals of one of the most important toolkits Python has for data cleaning and processing -- pandas. You'll learn how to read in data into DataFrame structures, how to query these structures, and the details about such structures are indexed. The module ends with a programming assignment and a discussion question.", "video": ["Introduction", "Week 2 Lectures Jupyter Notebook", "The Series Data Structure", "Querying a Series", "The DataFrame Data Structure", "DataFrame Indexing and Loading", "Querying a DataFrame", "Indexing Dataframes", "Missing Values", "Hacked Data", "Assignment 2", "Assignment 2  Submission"], "title": "Week 2"}, {"description": "In this week you'll deepen your understanding of the python pandas library by learning how to merge DataFrames, generate summary tables, group data into logical pieces, and manipulate dates. We'll also refresh your understanding of scales of data, and discuss issues with creating metrics for analysis. The week ends with a more significant programming assignment.", "video": ["Week 3 Lectures Jupyter Notebook", "Merging Dataframes", "Pandas Idioms", "Group by", "Scales", "Pivot Tables", "Date Functionality", "Goodhart's Law", "Assignment 3", "Assignment 3 Submission"], "title": "Week 3"}, {"description": "In this week of the course you'll be introduced to a variety of statistical techniques such a distributions, sampling and t-tests. The majority of the week will be dedicated to your course project, where you'll engage in a real-world data cleaning activity and provide evidence for (or against!) a given hypothesis. This project is suitable for a data science portfolio, and will test your knowledge of cleaning, merging, manipulating, and test for significance in data. The week ends with two discussions of science and the rise of the fourth paradigm -- data driven discovery.", "video": ["Week 4 Lectures Jupyter Notebook", "Introduction", "Distributions", "More Distributions", "Hypothesis Testing in Python", "End of Theory", "Science Isn't Broken: p-hacking activity", "Assignment 4 - Project", "Post-course Survey", "Assignment 4 Submission"], "title": "Week 4"}]}, {"course_info": "About this course: The course covers basic algorithmic techniques and ideas for computational problems arising frequently in practical applications: sorting and searching, divide and conquer, greedy algorithms, dynamic programming. We will learn a lot of theory: how to sort data and how it helps for searching; how to break a large problem into pieces and solve them recursively; when it makes sense to proceed greedily; how dynamic programming is used in genomic studies. You will practice solving computational problems, designing new algorithms, and implementing solutions efficiently (so that they run in less than a second).", "title": "Algorithmic Toolbox", "rating": "4.6", "level": "Intermediate", "created_by": "University of California, San Diego, National Research University Higher School of Economics", "package_name": "Data Structures and Algorithms Specialization ", "target_audience": "Who is this class for: Programmers with basic experience looking to understand the practical and conceptual underpinnings of algorithms, with the goal of becoming more effective software engineers. Computer science students and researchers as well as interdisciplinary students (studying electrical engineering, mathematics, bioinformatics, etc.) aiming to get more\nprofound understanding of algorithms and hands-on experience implementing them and applying for real-world problems. Applicants who want to prepare for an interview in a high-tech company.", "package_num": "1", "teach_by": [{"name": "Alexander S. Kulikov", "department": "Department of Computer Science and Engineering"}, {"name": "Michael Levin", "department": "Computer Science"}, {"name": "Neil Rhodes", "department": "Computer Science and Engineering"}, {"name": "Pavel  Pevzner", "department": "Department of Computer Science and Engineering "}, {"name": "Daniel M Kane", "department": "Department of Computer Science and Engineering / Department of Mathematics"}], "week_data": [{"description": "Welcome to the first module of Data Structures and Algorithms! Here we will provide an overview of where algorithms and data structures are used (hint: everywhere) and walk you through a few sample programming challenges. The programming challenges represent an important (and often the most difficult!) part of this specialization because the only way to fully understand an algorithm is to implement it. Writing correct and efficient programs is hard; please don’t be surprised if they don’t work as you planned—our first programs did not work either! We will help you on your journey through the specialization by showing how to implement your first programming challenges. We will also introduce testing techniques that will help increase your chances of passing assignments on your first attempt. In case your program does not work as intended, we will show how to fix it, even if you don’t yet know which test your implementation is failing on.", "video": ["Welcome!", "Overview", "Available Programming Languages", "Solving the Problem (screencast)", "What's Up Next?", "Solving Programming Assignments", "Solving the Problem: Improving the Naive Solution, Testing, Debugging", "Solving the Problem: Improving the Naive Solution, Testing, Debugging", "Stress Testing: the [Almost] Silver Bullet for Debugging", "Stress Test - Implementation", "Stress Test - Find the Test and Debug", "Stress Test - More Testing, Submit and Pass!", "FAQ on Programming Assignments", "Solving Programming Assignments", "Acknowledgements", "A plus B", "Maximum Pairwise Product"], "title": "Welcome"}, {"description": "In this module you will learn that programs based on efficient algorithms can solve the same problem billions of times faster than programs based on naïve algorithms. You will learn how to estimate the running time and memory of an algorithm without even implementing it. Armed with this knowledge, you will be able to compare various algorithms, select the most efficient ones, and finally implement them as our programming challenges!", "video": ["Why Study Algorithms?", "Coming Up", "Problem Overview", "Naive Algorithm", "Efficient Algorithm", "Resources", "Problem Overview and Naive Algorithm", "Efficient Algorithm", "Resources", "Computing Runtimes", "Asymptotic Notation", "Big-O Notation", "Using Big-O", "Resources", "Course Overview", "Logarithms", "Big-O", "Growth rate", "Programming Assignment 1: Introduction"], "title": "Introduction"}, {"description": "In this module you will learn about seemingly naïve yet powerful class of algorithms called greedy algorithms. After you will learn the key idea behind the greedy algorithms, you may feel that they represent the algorithmic Swiss army knife that can be applied to solve nearly all programming challenges in this course. But be warned: with a few exceptions that we will cover, this intuitive idea rarely works in practice! For this reason, it is important to prove that a greedy algorithm always produces an optimal solution before using this algorithm. In the end of this module, we will test your intuition and taste for greedy algorithms by offering several programming challenges.", "video": ["Largest Number", "Car Fueling", "Car Fueling - Implementation and Analysis", "Main Ingredients of Greedy Algorithms", "Celebration Party Problem", "Efficient Algorithm for Grouping Children", "Analysis and Implementation of the Efficient Algorithm", "Long Hike", "Fractional Knapsack - Implementation, Analysis and Optimization", "Review of Greedy Algorithms", "Resources", "Greedy Algorithms", "Fractional Knapsack", "Programming Assignment 2: Greedy Algorithms"], "title": "Greedy Algorithms"}, {"description": "In this module you will learn about a powerful algorithmic technique called Divide and Conquer. Based on this technique, you will see how to search huge databases millions of times faster than using naïve linear search. You will even learn that the standard way to multiply numbers (that you learned in the grade school) is far from the being the fastest! We will then apply the divide-and-conquer technique to design two efficient algorithms (merge sort and quick sort) for sorting huge lists, a problem that finds many applications in practice. Finally, we will show that these two algorithms are optimal, that is, no algorithm can sort faster!", "video": ["Intro", "Linear Search", "Binary Search", "Binary Search Runtime", "Resources", "Problem Overview and Naïve Solution", "Naïve Divide and Conquer Algorithm", "Faster Divide and Conquer Algorithm", "Resources", "What is the Master Theorem?", "Proof of the Master Theorem", "Resources", "Problem Overview", "Selection Sort", "Merge Sort", "Lower Bound for Comparison Based Sorting", "Non-Comparison Based Sorting Algorithms", "Resources", "Overview", "Algorithm", "Random Pivot", "Running Time Analysis (optional)", "Equal Elements", "Final Remarks", "Resources", "Linear Search and Binary Search", "Polynomial Multiplication", "Master Theorem", "Sorting", "Quick Sort", "Programming Assignment 3: Divide and Conquer"], "title": "Divide-and-Conquer"}, {"description": "In this final module of the course you will learn about the powerful algorithmic technique for solving many optimization problems called Dynamic Programming. It turned out that dynamic programming can solve many problems that evade all attempts to solve them using greedy or divide-and-conquer strategy. There are countless applications of dynamic programming in practice: from maximizing the advertisement revenue of a TV station, to search for similar Internet pages, to gene finding (the problem where biologists need to find the minimum number of mutations to transform one gene into another). You will learn how the same idea helps to automatically make spelling corrections and to show the differences between two versions of the same text. ", "video": ["Change Problem", "Resources", "The Alignment Game", "Computing Edit Distance", "Reconstructing an Optimal Alignment", "Resources", "Problem Overview", "Knapsack with Repetitions", "Knapsack without Repetitions", "Final Remarks", "Resources", "Problem Overview", "Subproblems", "Algorithm", "Reconstructing a Solution", "Change Money", "Edit Distance", "Knapsack", "Maximum Value of an Arithmetic Expression", "Programming Assignment 4: Dynamic Programming"], "title": "Dynamic Programming"}]}, {"course_info": "About this course: This course will introduce the core data structures of the Python programming language. We will move past the basics of procedural programming and explore how we can use the Python built-in data structures such as lists, dictionaries, and tuples to perform increasingly complex data analysis. This course will cover Chapters 6-10 of the textbook “Python for Everybody”.  This course covers Python 3.", "title": "Python Data Structures", "rating": "4.8", "level": null, "created_by": "University of Michigan", "package_name": "Python for Everybody Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Charles Severance", "department": "School of Information"}], "week_data": [{"description": "In this class, we pick up where we left off in the previous class, starting in Chapter 6 of the textbook and covering Strings and moving into data structures.   The second week of this class is dedicated to getting Python installed if you want to actually run the applications on your desktop or laptop.  If you choose not to install Python, you can just skip to the third week and get a head start.", "video": ["Video Welcome - Dr. Chuck", "Reading: Welcome to Python Data Structures", "Textbook", "Welcome to Python 3", "Submitting Assignments", "6.1 - Strings", "6.2 - Manipulating Strings", "Notice for Auditing Learners: Assignment Submission", "Worked Exercise: 6.5", "Bonus: Office Hours New York City", "Bonus: Monash Museum of Computing History", "Fun: The Textbook Authors Meet @PyCon", "Audio Versions of All Lectures", "Chapter 6 Quiz", "Assignment 6.5"], "title": "Chapter Six: Strings"}, {"description": "In this module you will set things up so you can write Python programs.  We do not require installation of Python for this class.  You can write and test Python programs in the browser using the \"Python Code Playground\" in this lesson.  Please read the \"Using Python in this Class\" material for details.", "video": ["Important Reading: Using Python in this Class", "Notes on Choice of Text Editor", "Demonstration: Using the Python Playground", "Python Code Playground", "Windows 10: Installing Python and Writing A Program", "Windows: Taking Screen Shots", "Macintosh: Using Python and Writing A Program", "Macintosh: Taking Screen Shots", "Optional- Installing Python Screen Shots"], "title": "Unit: Installing and Using Python"}, {"description": "Up to now, we have been working with data that is read from the user or data in constants.   But real programs process much larger amounts of data by reading and writing files on the secondary storage on your computer.   In this chapter we start to write our first programs that read, scan, and process real data.  ", "video": ["7.1 - Files", "7.2 - Processing Files", "Demonstration: Worked Exercise 7.1", "Where is the 7.2 worked exercise?", "Bonus: Office Hours Barcelona", "Bonus: Gordon Bell - Building Blocks of Computing", "Chapter 7 Quiz", "Assignment 7.1", "Assignment 7.2"], "title": "Chapter Seven: Files"}, {"description": "As we want to solve more complex problems in Python, we need more powerful variables.  Up to now we have been using simple variables to store numbers or strings where we have a single value in a variable.  Starting with lists we will store many values in a single variable using an indexing scheme to store, organize, and retrieve different values from within a single variable.  We call these multi-valued variables \"collections\" or \"data structures\".", "video": ["8.1 - Lists", "8.2 - Manipulating Lists", "8.3 - Lists and Strings", "Fun: Python Lists in Paris", "Worked Exercise: Lists", "Bonus: Office Hours - Chicago", "Bonus: Rasmus Lerdorf - Inventing the PHP Language", "Chapter 8 Quiz", "Assignment 8.4", "Assignment 8.5"], "title": "Chapter Eight: Lists"}, {"description": "The Python dictionary is one of its most powerful data structures.  Instead of representing values in a linear list, dictionaries store data as key / value pairs.  Using key / value pairs gives us a simple in-memory \"database\" in a single Python variable.", "video": ["9.1 - Dictionaries", "9.2 - Counting with Dictionaries", "9.3 - Dictionaries and Files", "Worked Exercise: Dictionaries", "Bonus: Office Hours - Amsterdam", "Bonus: Brendan Eich - Inventing Javascript", "Fun: Dr. Chuck Goes Motocross Racing", "Chapter 9 Quiz", "Assignment 9.4"], "title": "Chapter Nine: Dictionaries"}, {"description": "Tuples are our third and final basic Python data structure.  Tuples are a simple version of lists.  We often use tuples in conjunction with dictionaries to accomplish multi-step tasks like sorting or looping through all of the data in a dictionary.", "video": ["10 - Tuples", "Worked Exercise: Tuples and Sorting", "Bonus: Office Hours - Puebla, Mexico", "Bonus: John Resig - Inventing JQuery", "Douglas Crockford: JavaScript Object Notation (JSON)", "Fun: The Greatest Taco in the World", "Chapter 10 Quiz", "Assignment 10.2"], "title": "Chapter Ten: Tuples"}, {"description": "To celebrate your making it to the halfway point in our Python for Everybody Specialization, we welcome you to attend our online graduation ceremony.  It is not very long, and it features a Commencement speaker and very short commencement speech.", "video": ["Graduation Ceremony", "Please Rate this Course on Class-Central"], "title": "Graduation"}]}, {"course_info": "About this course: This course teaches computer programming to those with little to no previous experience. It uses the programming system and language called MATLAB to do so because it is easy to learn, versatile and very useful for engineers and other professionals. MATLAB is a special-purpose language that is an excellent choice for writing moderate-size programs that solve problems involving the manipulation of numbers. The design of the language makes it possible to write a powerful program in a few lines. The problems may be relatively complex, while the MATLAB programs that solve them are relatively simple: relative, that is, to the equivalent program written in a general-purpose language, such as C++ or Java. As a result, MATLAB is being used in a wide variety of domains from the natural sciences, through all disciplines of engineering, to finance, and beyond, and it is heavily used in industry. Hence, a solid background in MATLAB is an indispensable skill in today’s job market.\n\nNevertheless, this course is not a MATLAB tutorial. It is an introductory programming course that uses MATLAB to illustrate general concepts in computer science and programming. Students who successfully complete this course will become familiar with general concepts in computer science, gain an understanding of the general concepts of programming, and obtain a solid foundation in the use of MATLAB.\n\nStudents taking the course will get a MATLAB Online license free of charge for the duration of the course. The students are encouraged to consult the eBook that this course is based on. More information about these resources can be found on the Resources menu on the right.", "title": "Introduction to Programming with MATLAB", "rating": "4.8", "level": "Beginner", "created_by": "Vanderbilt University", "package_name": null, "target_audience": "Who is this class for: This is an introductory college-level course in computer science for engineering and science students. However, it is also suitable for high school students who are interested in programming. The material assumes no background in mathematics beyond the standard high school curriculum. Students taking the course will get a MATLAB Online license free of charge for a three-month period.", "package_num": null, "teach_by": [{"name": "Akos Ledeczi", "department": "Electrical Engineering & Computer Science / Institute for Software Integrated Systems"}, {"name": "Mike Fitzpatrick", "department": "Electrical Engineering & Computer Science, Neurological Surgery, Radiology & Radiological Sciences"}], "week_data": [{"description": "", "video": ["Course Preview", "Syllabus", "Grading and Logistics", "Recommended Textbook"], "title": "Course Pages"}, {"description": "We will learn how to start MATLAB and will familiarize ourselves with its user interface. We will learn how to use MATLAB as a sophisticated calculator. We will learn about syntax and semantics. We will see ways in which MATLAB provides help. Finally, we will learn how to create plots in MATLAB.", "video": ["Lesson 1: The MATLAB Environment", "Introduction", "The MATLAB Environment", "MATLAB Online", "MATLAB as a Calculator", "Syntax and Semantics", "Help", "Plotting"], "title": "The MATLAB Environment"}, {"description": "The basic unit with which we work in MATLAB is the matrix. We solve problems by manipulating matrices, and operators are the primary means by which we manipulate them. We will learn how to define matrices, extract parts of them and combine them to form new matrices. We will learn how to use operators to add, subtract, multiply, and divide matrices, and we will learn that there are several different types of multiplication and division. Finally, we will learn MATLAB’s rules for determining the order in which operators are carried out when more than one of them appear in the same expression.", "video": ["Lesson 2: Matrices and Operators", "Introduction to Matrices and Operators", "The Colon Operator", "Accessing Parts of a Matrix", "Combining and Transforming Matrices", "Arithmetic Part 1", "Arithmetic Part 2", "Operator Precedence", "Lesson 2"], "title": "Matrices and Operators"}, {"description": "Functions let us break up complex problems into smaller, more manageable parts. We will learn how functions let us create reusable software components that can be applied in many different programs. We will learn how the environment inside a function is separated from the outside via a well defined interface through which it communicates with that outside world. We will learn how to define a function to allow input to it when it initiates its execution and output from it when it is done.", "video": ["Lesson 3: Functions", "Introduction to Functions", "Function I/O", "Formal Definition of Functions", "Subfunctions", "Scope", "Advantages of Functions", "Scripts", "Problem Solving", "HW 3 Solutions", "Homework 3"], "title": "Functions"}, {"description": "MATLAB has useful built-in functions and we will explore many of them in this section. We will learn about polymorphism and how MATLAB exploits it to change a function's behavior on the basis of the number and type of its inputs. Because random numbers play an important role in computer programming, we will learn how to use the MATLAB random number generator. We will learn how to get input from the keyboard, how to print to the Command Window, and how to plot graphs in a Figure window. Finally, we will learn how to find programming errors with the help of the debugger.", "video": ["Lesson 4: Programmer's Toolbox", "Introduction to Programmer's Toolbox", "Matrix Building", "Input / Output", "Plotting", "Debugging", "HW 4 Solutions", "Homework 4"], "title": "Programmer's Toolbox"}, {"description": "Selection is the means by which MATLAB makes decisions about the order in which it executes its statements. We will learn how to use the if-statement, which is the most important method of selection. We will learn how to use relational operators and logical operators. We will learn how to write polymorphic functions and how to make functions resistant to error.", "video": ["Lesson 5: Selection", "Selection", "If-Statements, Continued", "Relational and Logical Operators", "Nested If-Statements", "Variable Number of Function Arguments", "Robustness", "Persistent Variables", "HW 5 Solutions", "Homework 5"], "title": "Selection"}, {"description": "Loops give computers their power. We will learn how to use both of MATLAB's loop constructs: the for-loop and the while-loop. We will learn how the break-statement works, and we will use nested loops. We will learn how to make loops more efficient. We will learn about logical indexing and will see how to use it to produce implicit loops that are efficient and easy for a user to understand.", "video": ["Lesson 6: Loops", "For-Loops", "While-Loops", "Break Statements", "Logical Indexing", "Preallocation", "Homework 6 Solutions", "Homework 6"], "title": "Loops"}, {"description": "Computers operate on bits, but humans think in terms of numbers, words, and other types of data. Like any good language, MATLAB organizes bits into convenient data types. We will study those types in this section. We will learn that there are ten types of numbers and that there are conversion functions to change one type into another. We will learn much more about strings and how the characters in them are encoded as numbers. We will learn how to produce heterogeneous collections of data via structs and cells.", "video": ["Lesson 7: Data Types", "Introduction to Data Types", "Strings", "Structs", "Cells", "Homework 7 Solutions", "Homework 7"], "title": "Data Types"}, {"description": "Files are named areas in permanent memory for storing data that can be used as input or output to MATLAB and to other programs. We will be introduced to MATLAB’s most important methods for reading and writing files. We will learn how to create, read from, and write into MAT-files, Excel files, text files, and binary files. We will learn how to navigate among folders with MATLAB commands.", "video": ["Lesson 8: File I/O", "File Input/Output", "Excel Files", "Text Files", "Binary Files", "Homework 8 Solutions", "Homework 8"], "title": "File Input/Output"}]}, {"course_info": "About this course: This course will show how one can treat the Internet as a source of data.  We will scrape, parse, and read web data as well as access data using web APIs.  We will work with HTML, XML, and JSON data formats in Python.  This course will cover Chapters 11-13 of the textbook “Python for Everybody”. To succeed in this course, you should be familiar with the material covered in Chapters 1-10 of the textbook and the first two courses in this specialization.  These topics include variables and expressions, conditional execution (loops, branching, and try/except), functions, Python data structures (strings, lists, dictionaries, and tuples), and manipulating files.  This course covers Python 3.", "title": "Using Python to Access Web Data", "rating": "4.8", "level": null, "created_by": "University of Michigan", "package_name": "Python for Everybody Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Charles Severance", "department": "School of Information"}], "week_data": [{"description": "In this section you will install Python and a text editor.  In previous classes in the specialization this was an optional assignment, but in this class it is the first requirement to get started.  From this point forward we will stop using the browser-based Python grading environment because the browser-based Python environment (Skulpt) is not capable of running the more complex programs we will be developing in this class.", "video": ["Welcome to The Course", "Python Textbook", "Help us learn more about you!", "Welcome to Python - Guido van Rossum", "Welcome to Python 3", "Notes on Choice of Text Editor", "Notice for Auditing Learners: Assignment Submission", "Windows 10: Installing Python and Writing A Program", "Windows: Taking Screen Shots", "Macintosh: Using Python and Writing A Program", "Macintosh: Taking Screen Shots", "Peer Review: Installing and Running Python Screen Shots"], "title": "Getting Started"}, {"description": "Regular expressions are a very specialized language that allow us to succinctly search strings and extract data from strings.   Regular expressions are a language unto themselves.  It is not essential to know how to use regular expressions, but they can be quite useful and powerful.", "video": ["11.1 - Regular Expressions", "11.2 - Extracting Data", "Python Regular Expression Quick Guide", "Bonus: Office Hours - Den Haag", "Bonus Interview: Bjarne Stroustrup - C++", "Regular Expressions", "Extracting Data With Regular Expressions"], "title": "Regular Expressions (Chapter 11)"}, {"description": "In this section we learn about the protocols that web browsers use to retrieve documents and web applications use to interact with Application Program Interfaces (APIs).", "video": ["12.1 - Networked Technology", "12.2 - Hypertext Transfer Protocol (HTTP)", "Worked Example: Sockets (Chapter 12)", "If You Want to Learn More", "Bonus: Leonard Kleinrock - The First Two Packets on the ARPANET", "Bonus Video: Robert Cailliau - co-Inventor of the Web", "Bonus: Office Hours - Atlanta GA (Buckhead)", "Fun: Dr. Chuck @ CNN Reading the News", "Networks and Sockets", "Understanding the Request / Response Cycle"], "title": "Networks and Sockets (Chapter 12)"}, {"description": "In this section we learn to use Python to retrieve data from web sites and APIs over the Internet.", "video": ["12.3 - Unicode Characters and Strings", "12.4 - Retrieving Web Pages", "Worked Example: Using Urllib (Chapter 12)", "12.5 - Parsing Web Pages", "Worked Example: BeautifulSoup (Chapter 12)", "Notes Regarding the Use of BeautifulSoup", "Bonus: Office Hours - Montreal", "Bonus Interview: Tim Berners-Lee - Inventing the Web", "Fun: I Got My Mojo Working - Geneva, Switzerland", "Reading Web Data From Python", "Scraping HTML Data with BeautifulSoup", "Assignment: Following Links in HTML Using BeautifulSoup"], "title": "Programs that Surf the Web (Chapter 12)"}, {"description": "In this section, we learn how to retrieve and parse XML (eXtensible Markup Language) data.", "video": ["13.1 - Data on the Web", "13.2 eXtensible Markup Language (XML)", "13.3 - XML Schema", "13.4 - Parsing XML", "Worked Example: XML (Chapter 13)", "Interview: Roy Fielding - Understanding the REST Architecture", "Bonus: Office Hours - Boston", "Bonus Video: Ian Horrocks / RDF / OWL (Advanced)", "eXtensible Markup Language", "Extracting Data from XML"], "title": "Web Services and XML (Chapter 13)"}, {"description": "In this module, we work with Application Program Interfaces / Web Services using the JavaScript Object Notation (JSON) data format.", "video": ["13.5 - JavaScript Object Notation (JSON)", "Worked Example: JSON (Chapter 13)", "Interview: Douglas Crockford - Discovering JSON", "13.6 - Service Oriented Approach", "Video: Service Oriented Architectures", "13.7 - Using Application Programming Interfaces", "Worked Example: GeoJSON API (Chapter 13)", "13.8 - Securing API Requests", "Worked Example: Twitter API (Chapter 13)", "Bonus: Office Hours - Melbourne, AU", "Bonus: Office Hours - Santa Monica, CA", "Bonus: Class Reunion at Bletchley Park", "Please Rate this Course on Class-Central", "Post-Course Survey", "REST, JSON, and APIs", "Extracting Data from JSON", "Using the GeoJSON API"], "title": "JSON and the REST Architecture (Chapter 13)"}]}, {"course_info": "About this course: Behind every mouse click and touch-screen tap, there is a computer program that makes things happen. This course introduces the fundamental building blocks of programming and teaches you how to write fun and useful programs using the Python language.", "title": "Learn to Program: The Fundamentals", "rating": "4.7", "level": "Beginner", "created_by": "University of Toronto", "package_name": null, "target_audience": "Who is this class for: This course is primarily aimed at first-year university students and high school students who want to learn how to program.", "package_num": null, "teach_by": [{"name": "Jennifer Campbell", "department": "Department of Computer Science"}, {"name": "Paul Gries", "department": "Department of Computer Science"}], "week_data": [{"description": "This module gives an overview of the course, the editor we will use to write programs, and an introduction to fundamental concepts in Python including variables, mathematical expressions, and functions.", "video": ["Welcome to LTP", "Syllabus", "Course Logistics", "Resources", "Installing Python", "Installing Python", "Python as a Calculator", "Python as a Calculator", "Python and Computer Memory", "Python and Computer Memory", "Variables", "Variables", "Visualizing Assignment Statements", "Visualizing Assignment Statements", "Built-in Functions", "Built-in Functions", "Defining Functions", "Defining Functions", "Python, Variables, and Functions"], "title": "Python, Variables, and Functions"}, {"description": "This module introduces strings (a Python data type used to represent text), and a process to follow when creating a function.", "video": ["Type str", "Type str", "Input/Output and str Formatting", "Input/Output and str Formatting", "Docstrings and Function Help", "Docstrings and Function help", "Function Design Recipe", "Function Design Recipe", "Function Reuse", "Function Reuse", "Visualizing Function Calls", "Visualizing Function Calls", "Strings and Designing Functions", "Assignment 1: Time Zones"], "title": "Strings and Designing Functions"}, {"description": "This module introduces Booleans (logical values True and False), how to convert between types, how to use Boolean expressions in if statements to selectively run code, and the concept of a Python module.", "video": ["Functions, Variables, and the Call Stack", "Functions, Variables, and the Call Stack", "Type Bool", "Type Bool", "Converting Between int, str, and float", "Converting Between int, str, and float", "Import: Using Non-Built-in Functions", "Import: Using Non-Built-in Functions", "If Statements", "If Statements", "No if Required", "No if Required", "Structuring if Statements", "Structuring if statements", "Booleans, Import, Namespaces, and if Statements"], "title": "Booleans, Import, Namespaces, and if Statements"}, {"description": "This module introduces one way to repeat code (using a for loop), how to manipulate strings, and how to use a debugger to watch a program execute step by step.", "video": ["More str Operators", "More str Operators", "Str: Indexing and Slicing", "Str: Indexing and Slicing", "Str Methods: Functions Inside of Objects", "Str Methods: Functions Inside of Objects", "For Loop Over Str", "For Loop Over Str", "IDLE's Debugger", "IDLE's Debugger", "For Loops and Fancy String Manipulation", "Assignment 2: DNA Processing"], "title": "For Loops and Fancy String Manipulation"}, {"description": "This module introduces another way to repeat code (using a while loop), how to properly document your code to help other programmers understand it, Python's list data type, and the concept of mutation.", "video": ["While Loops", "While Loops", "Comments", "Comments", "Type list", "Type list", "list Methods", "list Methods", "Mutability and Aliasing", "Mutability and Aliasing", "range", "range", "While Loops, Lists, and Mutability"], "title": "While Loops, Lists, and Mutability"}, {"description": "This module introduces how to use a for loop over the indexes of a list, how to nest lists, and how to read a write files.", "video": ["For Loop Over Indices", "For Loop Over Indices", "Parallel Lists and Strings", "Parallel Lists and Strings", "Nested Lists", "Nested Lists", "Nested Loops", "Nested Loops", "Reading Files", "Reading Files", "Writing Files", "Writing Files", "Developing a Program ", "For Loops Over Indices, Parallel Lists and Strings, and Files", "Assignment 3"], "title": "For Loops Over Indices, Parallel and Nested Lists and Strings, and Files"}, {"description": "This module introduces tuples (an immutable version of lists), and Python's dictionary type.", "video": ["Tuples", "Tuples", "Type dict", "Type dict", "Inverting a Dictionary", "Inverting a Dictionary", "Populating a Dictionary ", "Tuples and Dictionaries", "Final Exam"], "title": "Tuples and Dictionaries"}]}, {"course_info": "About this course: This course is an introduction to Logic from a computational perspective. It shows how to encode information in the form of logical sentences; it shows how to reason with information in this form; and it provides an overview of logic technology and its applications - in mathematics, science, engineering, business, law, and so forth.", "title": "Introduction to Logic", "rating": "4.5", "level": "Intermediate", "created_by": "Stanford University", "package_name": null, "target_audience": "Who is this class for: The course was originally designed for use at the college level. However, experience has shown that it works for secondary school students as well, and it can be used at the start of graduate school for those who have not yet seen the material.  There are just two prerequisites. The course presumes that the student understands sets and set operations, such as union, intersection, and so forth. It also presumes that the student is comfortable with symbolic manipulation, as used, for example, in solving high-school algebra problems. Nothing else is required.", "package_num": null, "teach_by": [{"name": "Michael Genesereth", "department": "Computer Science Department"}], "week_data": [{"description": "", "video": ["Section 1.1 - Introduction", "Section 1.2 - Sorority World", "Section 1.3 - Logical Sentences", "Section 1.4 - Logical Entailment", "Section 1.5 - Logical Proofs", "Section 1.6 - Formalization", "Section 1.7 - Automation", "Section 1.8 - Study Guide", "Alice in Wonderland", "Exercise 1.1", "Exercise 1.2", "Exercise 1.3", "Exercise 1.4"], "title": "Lesson 1 - Introduction"}, {"description": "", "video": ["Section 2.1 - Introduction", "Section 2.2 - Syntax", "Section 2.3 - Semantics", "Section 2.4 - Evaluation", "Section 2.5 - Satisfaction", "Section 2.6 - Natural Language", "Section 2.7 - Digital Circuits", "The Big Game", "Exercise 2.1", "Exercise 2.2", "Exercise 2.3", "Exercise 2.4", "Exercise 2.5", "Exercise 2.6", "Exercise 2.7"], "title": "Lesson 2 - Propositional Logic"}, {"description": "", "video": ["Section 3.1 - Introduction", "Section 3.2 - Logical Properties", "Section 3.3 - Logical Equivalence", "Section 3.4 - Logical Entailment", "Section 3.5 - Logical Consistency", "Section 3.6 - Properties and Relationships", "Whodunnit", "Digital Circuits", "Exercise 3.1", "Exercise 3.2", "Exercise 3.3", "Exercise 3.4", "Exercise 3.5", "Exercise 3.6"], "title": "Lesson 3 - Propositional Analysis"}, {"description": "", "video": ["Section 4.1 - Propositional Proofs", "Section 4.2 - Linear Reasoning", "Section 4.3 - Hypothetical Reasoning", "Section 4.4 - Fitch", "Section 4.5 - Reasoning Tips", "Section 4.6 - Soundness and Completeness", "Exercise 4.1", "Exercise 4.2", "Exercise 4.3", "Exercise 4.4", "Exercise 4.5", "Exercise 4.6", "Exercise 4.7", "Exercise 4.8", "Exercise 4.9", "Exercise 4.10", "Exercise 4.11", "Exercise 4.12", "Exercise 4.13", "Exercise 4.14"], "title": "Lesson 4 - Propositional Proofs"}, {"description": "", "video": ["Section 5.1 - Propositional Resolution", "Section 5.2 - Clausal Form", "Section 5.3 - Resolution Principle", "Section 5.4 - Resolution Reasoning", "Box Logic (out of focus)", "Exercise 5.1", "Exercise 5.2", "Exercise 5.3", "Exercise 5.4"], "title": "Lesson 5 - Propositional Resolution"}, {"description": "", "video": ["Section 6.1 - Introduction", "Section 6.2 - Syntax", "Section 6.3 - Semantics", "Section 6.4 - Evaluation", "Section 6.5 - Satisfaction", "Section 6.6 - Sorority World", "Section 6.7 - Blocks World", "Section 6.8 - Modular Arithmetic", "Section 6.9 - Logical Properties", "Section 6.10 - Logical Entailment", "Section 6.11 - Relational Logic and Propositional Logic", "Cartoon - Logicians", "Exercise 6.1", "Exercise 6.2", "Exercise 6.3", "Exercise 6.4", "Exercise 6.5", "Exercise 6.6", "Exercise 6.7"], "title": "Lesson 6 - Relational Logic"}, {"description": "", "video": ["Section 7.1 - Introduction", "Section 7.2 - Truth Tables", "Section 7.3 - Semantic Trees", "Section 7.4 - Boolean Models", "Section 7.5 - Non-Boolean Models", "Sorority Life", "Minefinder", "Minefield", "Mineplanner", "Pelican Hunters", "Exercise 7.1", "Exercise 7.2", "Exercise 7.3"], "title": "Lesson 7 - Relational Analysis"}, {"description": "The description goes here", "video": ["Section 8.1 - Introduction", "Section 8.2 - Rules of Universal Quantifiers", "Section 8.3 - Rules for Existential Quantifiers", "Section 8.4 - Domain Closure", "Section 8.5 - Example", "Section 8.6 - Example", "Section 8.7 - Example", "Exercise 8.1", "Exercise 8.2", "Exercise 8.3", "Exercise 8.4", "Exercise 8.5", "Exercise 8.6", "Exercise 8.7", "Exercise 8.8"], "title": "Lesson 8 - Relational Proofs "}, {"description": "", "video": ["Section 9.1 - Introduction", "Section 9.2 - Syntax and Semantics", "Section 9.3 - Evaluation and Satisfaction", "Section 9.4 - Peano Arithmetic", "Section 9.5 - Linked Lists", "Section 9.6 - Pseudo English", "Section 9.7 - Metalevel Logic", "Section 9.8 - Undecidability", "Exercise 9.1", "Exercise 9.2", "Exercise 9.3", "Exercise 9.4", "Exercise 9.5"], "title": "Lesson 9 - Herbrand Logic"}, {"description": "", "video": ["Section 10.1 - Introduction", "Section 10.2 - Non-Compactness and Incompleteness", "Blocks World Programs"], "title": "Lesson 10 - Herbrand Proofs"}, {"description": "The description goes here", "video": ["Section 11.1 - Introduction", "Section 11.2 - Domain Closure", "Section 11.3 - Linear Induction", "Section 11.4 - Tree Induction", "Section 11.5 - Structural Induction", "Section 11.6 - Multidimensional Induction", "Section 11.7 - Embedded Induction", "Exercise 11.1", "Exercise 11.2", "Exercise 11.3", "Exercise 11.4", "Exercise 11.5", "Exercise 11.6"], "title": "Lesson 11 - Induction"}, {"description": "The description goes here", "video": ["Section 12.1 - Introduction", "Section 12.2 - Clausal Form", "Section 12.3 - Unification", "Section 12.4 - Resolution Principle", "Section 12.5 - Resolution Reasoning", "Section 12.6 - Unsatisfiability", "Section 12.7 - Logical Entailment", "Section 12.8 - Answer Extraction", "Section 12.9 - Strategies", "Exercise 12.1", "Exercise 12.2", "Exercise 12.3", "Exercise 12.4", "Exercise 12.5", "Exercise 12.6", "Exercise 12.7", "Exercise 12.8", "Exercise 12.9", "Exercise 12.10"], "title": "Lesson 12 - Resolution"}, {"description": "", "video": ["Satisfiability", "Equality", "First-Order Logic", "The Herbrand Manifesto"], "title": "Supplementary Material"}]}, {"course_info": "About this course: What you’ll achieve:\n\nIn this project-centered course*, you’ll design, build, and distribute your own unique application for the Android mobile platform. We’ll provide you with a set of customizable building blocks that you can assemble to create many different types of apps, and that will help you become familiar with many important specificities of Android development. When you complete the project, in addition to having a personalized app that you can use and share, you’ll have the skills and background you need to move on to more advanced coursework in Android development. \n\n What you’ll need to get started:\n\nThis project-centered course is designed for learners who have some prior experience programming in Java, such as an introductory college course or Coursera’s Java Programming Specialization (https://www.coursera.org/specializations/java-programming).\n\nYou will need a computer with a stable Internet connection, but you will not need an Android phone - we’ll use free software that you can use to emulate a phone on your computer. We'll use Android Studio as IDE; it is compatible with most computer and operating systems. You can find detailed system requirements here: https://developer.android.com/sdk/index.html#Requirements.\n\n*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share. \n\nTime: 10 hours of study, 10 hours of active project work", "title": "Build Your First Android App (Project-Centered Course)", "rating": "4.3", "level": null, "created_by": "CentraleSupélec", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Dr. Virginie Galtier", "department": "Computer Science"}, {"name": "Michel Ianotto ", "department": "Computer Science"}], "week_data": [{"description": "This module presents our pedagogic approach and demonstrates the kind of applications you will be able to build at the end of the course.", "video": ["Overview of the Course", "Overview of the Course", "Course’s Grading Policy", "Who are you? ", "Your Motivation(s)", "Hello, World!", "About the Exemplars", "Music Tutor App", "MOOC Motivation App", "Birth Date App", "What is a \"good\" app?"], "title": "Introduction"}, {"description": "In this module you will design your personalized app from a user's perspective. We will show you elements you can combine in your design, and how to  document it to get feedback from prospective users or to organize your thoughts. If you get stuck on the quiz or peer-reviewed assignment, you should post on the Discussion Forum to ask for help. And if you finish early, we hope you'll go there to help your fellow classmates as well. To get started, please jump into the first lesson below!", "video": ["What will you do in this module?", "Some components of the graphical user interface", "Layout: organize the views on your screens", "Add actions", "Quiz about Activities and GUI", "Notice about source code", "Block 1: Buttons and Toast", "Can you come up with an idea of application which uses only buttons and pop-up messages?", "Block 2: Clickable List in two Languages", "Block 3: Layouts", "Block 4: Playing Sounds (and Using a Switch)", "Block 5: Saving Preferences (and Radio Buttons)", "Block 6: Images (and Slider)", "Block 7: Web Pages", "Block 8: From one activity to the next", "Block 9: SMS", "Look for the building blocks in the Coursera app", "Wireframes, Mockups and Prototypes", "Favorite Tools?", "Quiz about Application Design", "General Rubric: Qualities of an Android App", "Your first application design"], "title": "Create the Storyboard for Your Application"}, {"description": "This module guides you in the development of an Android application using the Android Studio Integrated Development Environment (IDE). First it points you to the right place to install the Android Studio IDE and the Android Software Development Kit (SDK). Next it walks you through the steps of using them to create a basic \"Hello World\" application and it describes how to transfer the application for execution on a physical Android device and on an emulator. At the end of the module you will be familiar with Android tools.", "video": ["Create your first basic application with Android Studio", "Basic Knowledge about Android"], "title": "Install Tools, Create HelloWorld App"}, {"description": "In this module you associate for the first time a graphical user interface with an activity controlling it, resulting in a first interactive application. We will re-use this same schema next week when developing the 9 apps presented in week 2 (and so will your personalized app). ", "video": ["Create an interactive application", "Create an interactive application", "Code the \"km-miles conversion\" app"], "title": "Build Your First Interactive Application"}, {"description": "This module spans 2 weeks. This week, we walk you step by step in the development of 5 of the basic building blocks.", "video": ["How to use these lessons", "Block 1 Step-by-Step: part 1", "Source code for block 1 - part 1", "Block 1 Step-by-Step: part 2", "Source code for block 1 - part 2", "Block 1 Step-by-Step: part 3", "Source code for block 1 - part 3", "block 1", "Block 2 Step-by-Step", "Source code for block 2", "block 2", "Block 3 Step-by-Step", "Source code for block 3", "block 3: layouts", "Block 4 Step-by-Step", "Source code for block 4", "block 4", "Block 5 Step-by-Step", "Source code for block 5", "block 5"], "title": "Toward Your Application, Step-By-Step"}, {"description": "In this second part of the module, we develop the remaining 4 basic building blocks. All you have to do after that is to combine them to transform your idea of application into executable code!", "video": ["Block 6 Step-by-Step", "Source code for block 6", "block 6", "Block 7 Step-by-Step", "Source code for block 7", "block 7", "Block 8 Step-by-Step", "Source code for block 8", "block 8", "Warning", "Block 9 Step-by-Step", "Source code for block 9", "block 9", "Activity Life Cycle (and Crtl+F11, and telnet to emulator)", "Log", "Life Cycle and Log", "Final Quiz", "Code Your Application!"], "title": "Transform Your Storyboard Into Actual Application"}]}, {"course_info": "About this course: Welcome to our course on Object Oriented Programming in Java using data visualization. People come to this course with many different goals -- and we are really excited to work with all of you! Some of you want to be professional software developers, others want to improve your programming skills to implement that cool personal project that you’ve been thinking about, while others of you might not yet know why you’re here and are trying to figure out what this course is all about.\n\nThis is an intermediate Java course. We recommend this course to learners who have previous experience in software development or a background in computer science.  Our goal is that by the end of this course each and every one of you feels empowered to create a Java program that’s more advanced than any you have created in the past and that is personally interesting to you. In achieving this goal you will also learn the fundamentals of Object Oriented Programming, how to leverage the power of existing libraries, how to build graphical user interfaces, and how to use some core algorithms for searching and sorting data. And this course is project-based, so we’ll dive right into the project immediately!\n\nWe are excited to be offering a unique course structure, designed to support learners of different backgrounds in succeeding at their own pace. The first module explains how this will work and if this course is right for you. We also recommend taking a few minutes to explore the course site. A good place to start is the navigation bar on the left. Click Course Content to see what material we’ll cover each week, as well preview the assignments you’ll need to complete to pass the course. Click Discussions to see forums where you can discuss the course material with fellow students taking the class. Be sure to introduce yourself to everyone in the Meet and Greet forum.\n\nThis course should take about 6 weeks to complete. You can check out the recommended course schedule below to see a quick overview of the lessons and assignments you’ll complete each week.\n\nWe’re excited you’re here learning with us. Let’s get started!", "title": "Object Oriented Programming in Java", "rating": "4.7", "level": "Intermediate", "created_by": "University of California, San Diego", "package_name": "Object Oriented Programming in Java Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Mia Minnes", "department": "Computer Science and Engineering"}, {"name": "Leo Porter", "department": "Computer Science and Engineering"}, {"name": "Christine Alvarado", "department": "Computer Science and Engineering"}], "week_data": [{"description": "Welcome to the first week of our course.  In this week, we'll get started by introducing ourselves and the Google engineers who will be making appearances throughout the course.  We'll also give you of the unique video series we provide and help you understand how to navigate the course to get the most out of it given your background and learning speed.  Finally, we'll jump right into objects and designing classes.  This might be a bit of review for some of you who might have learned this in your first programming course.  If that's the case, feel free to jump ahead to the Practice Quiz at the end of the week. Let's get started!", "video": ["Course Opening Title", "A Customized Welcome to this Course", "Welcome (Object Oriented Java Programming: Data Structures and Beyond Specialization)", "Welcome (Object Oriented Programming in Java Specialization)", "After completing this course, you will be able to...", "Is this course right for me?", "Pre-Course Quiz", "Up Next: A short survey", "Survey: Your goals for the course", "Project overview", "Project prototype", "Your Path through the Course", "Concept Challenges: what and why?", "In the Real World: Welcome from Google Engineers", "Additional Resources and Support", "Introduction: Classes and Objects", "By the end of this week you will be able to...", "A note about the main method", "Core: Defining Classes and Creating Objects", "When I Struggled: Objects", "Core: Overloading Methods", "Core: Public vs. Private", "In the Real World: Public vs. Private access", "Basics of Objects", "What questions do you have about Objects?"], "title": "Welcome and Project Overview: Visualizing Data"}, {"description": "We hope you’re excited about the project that we're starting to build -- we sure are!  In this second part of this week, we'll walk you through setting up your system and working through your first assignment so you'll be having fun with it in no time. Before that though, we'll finish going over some of the fundamentals fundamentals of object oriented programming.  Specifically, being able to trace code is a key skill in becoming a stronger programmer. Like the end of last week, the first part of this week might be a bit of a review of material you already learned in your first Java programming course.  If that’s the case, you are always welcome to skip to the first graded assignment on Objects, Memory Models, and Scope.", "video": ["Introduction: Memory Models, Scope, and Project", "Remember to Choose Your Own Path", "By the end of this week, you will be able to...", "Getting ready to write code", "Project: Module 1 Assignment Overview", "Important note for learners working offline", "Setting Up Java and Eclipse on Windows (and Linux)", "Setting Up Java and Eclipse on Mac", "Setting Up Unfolding Maps", "Project: Setting up the starter code in Eclipse", "Support: Troubleshooting Common Issues", "Core: Drawing Memory Models with Primitive Data", "Where to next?", "Support:  Memory Models for Primitive Types", "Support: Setting Up and Running Examples in Eclipse", "Working with Code", "When I Struggled: Compiling and Running Code", "Core: Drawing Memory Models with Objects", "Concept Challenge: Memory Models 1", "Concept Challenge: Memory Models 2", "Support: Memory Model Drawing Example", "Core: Introduction to Scope", "Concept Challenge: Scope", "Support: Putting it all Together Part 1", "Support: Putting it all Together Part 2", "Congratulations and quiz answers", "Project: Module 1 Assignment Walkthrough", "Programming Assignment Instructions", "Congratulations and quiz answers", "Objects, memory models, and scope", "Programming Assignment Quiz (Do programming assignment FIRST)"], "title": "Memory Models, Scope, and Starting the Project"}, {"description": "Now that you have the tools to write and trace object oriented code, let’s get back to developing the project! In this first (real) part of the project, you will create an interactive graphical map that will display geospatial data. This is a highly interactive week, so make sure you’ve got Eclipse loaded up!  We encourage you to play around as you watch the videos.  Some of the code that we use in the videos is in the demos package in the starter code you set up for this course.  Open it up and experiment with it while you're watching the videos.  We also encourage you to dive right into the programming project, even before watching the videos, if you want.  The programming assignment instructions are in the last lesson of this week - you can watch a video walkthrough of the instructions and also read the step-by-step directions in the accompanying reading. There’s lots of room for creativity, too, so have fun!", "video": ["Module Introduction: Graphical User Interfaces (GUIs)", "By the end of this week you will be able to...", "Project: Module 3 Programming Assignment Overview", "Core: Graphical User Interfaces", "Core: Using PApplet", "When I struggled: GUIs", "Core: Resizing Images", "Core: Colors", "When I Struggled: Documentation", "Support: Setting up a Canvas", "Support: Drawing Happy Face", "Support: Loading and Displaying Images", "Core: Why Processing?", "Support: Using Documentation", "In the Real World: Documentation", "Core: Setting up map visualization", "Core: Adding markers", "Core: Using live data", "Support: Understanding Features and Markers", "Bonus: Visualizing life expectancy", "Bonus: Setting up the map", "Bonus: Representing data", "Bonus: Coloring markers", "Support: ArrayLists and Generics", "Project: Module 3 Programming Assignment Walkthrough", "Programming Assignment Instructions", "Congratulations and quiz answers", "Programming Assignment Quiz (Do programming assignment FIRST)"], "title": "Graphical output: Creating GUIs and Displaying Data"}, {"description": "Now that you’re in full swing with the project, let’s take a closer look at some concepts that you have already been using in your code.  Specifically, the keyword “extends”.  What exactly does it mean that your program “extends PApplet”? To answer this question we’ll need to dive into the details of how Java allows for Class Hierarchies through Inheritance and Polymorphism.  These fundamental and powerful concepts will serve you well in the future!  We’ll use these ideas to allow for displaying markers differently.  If you feel you’re already comfortable with Inheritance and Polymorphism, feel free to dive straight into the project (programming assignment) for this week.  As you work with the project, feel free to have some fun and introduce new levels of class hierarchies for improved functionality.    ", "video": ["Module Introduction: Inheritance and Polymorphism", "By the end of this week, you will be able to...", "Project: Module 4 Programming Assignment Overview", "Core: Why use Inheritance?", "Core: Extends", "In the Real World: Inheritance 1", "Core: Reference vs. Object Type", "When I struggled: the \"Is a\" relationship", "Concept Challenge: References and Objects", "Core: Visibility Modifiers", "When I Struggled: Inheritance", "Core: Object Creation in Java", "Core: Compiler Rules for Class Construction", "Core: Variable Initialization in a Class Hierarchy", "Concept Challenge: Inheritance Constructors 1", "Concept Challenge: Inheritance Constructors 2", "Core: Method Overriding", "Core: Introduction to Polymorphism", "When I struggled: Polymorphism", "Core: Rules to Follow for Polymorphism", "Core: Casting Objects", "Concept Challenge: Polymorphism Part 1", "Concept Challenge: Polymorphism Part 2", "Core: Abstract Classes and Interfaces", "In the Real World: Inheritance 2", "Project: Module 4 Programming Assignment Walkthrough", "Programming Assignment Instructions", "Congratulations and Quiz Answers", "Programming Assignment Quiz (Do programming assignment FIRST)"], "title": "Inheritance"}, {"description": "You’ve reached an exciting point in the project - in this week you’ll add interactivity to your map!  You’ll be learning how to design event-driven programs, using a new and powerful programming paradigm.  Your map will now respond to mouse hovers and clicks. As always, make sure you're writing code along with us as you watch the videos and work through the week.  Also, feel free to dive into the programming assignment (project) whenever you are ready", "video": ["Module Introduction: Responding to User Events", "By the end of this week, you will be able to...", "Project: Module 5 Programming Assignment Overview", "Core: Introduction to Event-Driven Programming", "In the Real World: Events", "Core: Implementing Events in UnfoldingMaps", "Core: Implementing Buttons in UnfoldingMaps", "When I Struggled: Buttons and GUIs", "Core: Listener Hierarchy", "Events", "Project: Module 5 Programming Assignment Walkthrough", "Programming Assignment Instructions", "Congratulations and Quiz Answers", "Programming Assignment Quiz (Do programming assignment FIRST)"], "title": "GUIs: Responding to User Events"}, {"description": "You've come a long way in this course, and you've got a great project to show for it. In this last module we'll shift gears a bit to talk about some very exciting and fundamental algorithms for finding and sorting data in an array.  Searching and sorting algorithms are not only fundamental to computer science, but also ideal for beginning to explore issues of algorithm efficiency. We will only begin to touch on issues of algorithm efficiency here.  We will say much more about it in the next course in this specialization, so we hope you will continue with us.   We'll also apply sorting to your project, and you'll wrap things up by finishing your project with an extension of your own choosing.", "video": ["Module Introduction: Searching and Sorting", "By the end of this week, you will be able to...", "Project Overview", "In the Real World: Searching and Sorting", "Core: Linear Search, Part 1", "Core: Linear Search, Part 2", "Core: Binary Search", "Core: Binary Search Example", "When I Struggled: Search", "Searching Quiz", "Core: Introduction to Sorting", "Core: Selection Sort Algorithm", "Core: Selection Sort Implementation", "Core: Selection Sort Analysis", "Concept Challenge: Selection Sort", "Core: Mystery Sort", "Core: Java's Built-In Sort", "Core: Comparable Interface, Revisited", "Concept Challenge: Which Sort?", "Project: Module 6 Programming Assignment Walkthrough", "Programming Assignment Instructions", "Congratulations and quiz answers", "Optional: Pre-grading Feedback on Programming Assignment Extension", "End of Course Message", "Programming Assignment Quiz (Do programming assignment FIRST)", "Programming Assignment Extension Peer Review"], "title": "Searching and Sorting: From Code to Algorithms"}]}, {"course_info": "About this course: This course will introduce students to the basics of the Structured Query Language (SQL) as well as basic database design for storing data as part of a multi-step data gathering, analysis, and processing effort.  The course will use SQLite3 as its database.  We will also build web crawlers and multi-step data gathering and visualization processes.  We will use the D3.js library to do basic data visualization.  This course will cover Chapters 14-15 of the book “Python for Everybody”. To succeed in this course, you should be familiar with the material covered in Chapters 1-13 of the textbook and the first three courses in this specialization. This course covers Python 3.", "title": "Using Databases with Python", "rating": "4.8", "level": null, "created_by": "University of Michigan", "package_name": "Python for Everybody Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Charles Severance", "department": "School of Information"}], "week_data": [{"description": "To start this class out we cover the basics of Object Oriented Python. We won't be writing our own objects, but since many of the things we use like BeautifulSoup, strings, dictionaries, database connections all use Object Oriented (OO) patterns we should at least understand some of its patterns and terminology.", "video": ["Welcome to Using Databases with Python", "Help us learn more about you!", "Python Textbook", "Coming from Python 2 - Encoding Data in Python 3", "Unicode Characters and Strings", "Notice for Auditing Learners: Assignment Submission", "14.1 - Object Oriented Definitions and Terminology", "14.2 - Our First Class and Object", "14.3 - Object Life Cycle", "14.4 - Object Inheritance", "Bonus: Interview - Software Engineering - Bertrand Meyer", "Bonus: Office Hours - London", "Using Encoded Data in Python 3", "Object Oriented Programming"], "title": "Object Oriented Python"}, {"description": "We learn the four core CRUD operations (Create, Read, Update, and Delete) to manage data stored in a database.", "video": ["15.1 Relational Databases", "15.2 - Using Databases", "15.3 - Single Table CRUD", "Worked Example: Counting Email in a Database", "Bonus: Office Hours Zagreb, Croatia", "Interview: Elizabeth Fong - The Early Years of SQL", "Worked Example: Twspider.py (Chapter 15)", "Single-Table SQL", "Our First Database", "Counting Email in a Database"], "title": "Basic Structured Query Language"}, {"description": "In this section we learn about how data is stored across multiple tables in a database and how rows are linked (i.e., we establish relationships) in the database.", "video": ["15.4 - Designing a Data Model", "15.5 - Representing a Data Model in Tables", "15.6 - Inserting Relational Data", "15.7 - Reconstructing Data with JOIN", "Worked Example: Tracks.py (Chapter 15)", "Bonus: Office Hours Perth, Australia", "Bonus Interview: Niklaus Wirth", "Bonus: Office Hours Barcelona", "Multi-Table Relational SQL", "Multi-Table Database - Tracks"], "title": "Data Models and Relational SQL"}, {"description": "In this section we explore how to model situations like students enrolling in courses where each course has many students and each student is enrolled in many courses.", "video": ["15.8 - Many-to-Many Relationships", "Worked Example: roster.py (Chapter 15)", "Bonus: Office Hours Mexico, City", "Bonus Interview: Andrew Tannenbaum - Minix", "Worked Example: Twfriends.py (Chapter 15)", "Many-to-Many Relationships and Python", "Many Students in Many Courses"], "title": "Many-to-Many Relationships in SQL"}, {"description": "In this section, we put it all together, retrieve and process some data and then use the Google Maps API to visualize our data.", "video": ["16.1 - Geocoding", "16.2 - Geocoding Visualization", "Worked Example: Geodata (Chapter 16)", "Bonus: Office Hours - Amsterdam", "Bonus Interview: Richard Stallman - Free Software Foundation", "Bonus Interview: Brian Behlendorf - Apache Foundation", "Please Rate this Course on Class-Central", "Post-Course Survey", "Databases and Visualization (peer-graded)"], "title": "Databases and Visualization"}]}, {"course_info": "About this course: The goal of the course is to introduce students to Python Version 3.x programming using hands on instruction. It will show how to install Python and use the Spyder IDE (Integrated Development Environment) for writing and debugging programs. The approach will be to present an example followed by a small exercise where the learner tries something similar to solidify a concept.  At the end of each module there will be an exercise where the student is required to write simple programs and submit them for grading.  It is intended for students with little or no programming background, although students with such a background should be able to move forward at their preferred pace.\n\nThe course is four modules long and is designed to be completed in four weeks.", "title": "Python Programming: A Concise Introduction", "rating": "4.6", "level": "Beginner", "created_by": "Wesleyan University", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Bill Boyd", "department": "Quantitative Analysis Center"}], "week_data": [{"description": "In this module we introduce writing functions in Python using the convenient Spyder development environment.  The lesson begins with instructions on installing the popular Anaconda distribution of Python, which includes Spyder. It continues by showing how to use  the editor in Spyder to type in a function and then run it. Each lesson alternates between introducing a concept by example and having the student test his/her understanding by constructing a function similar to that example.  The module lecture is contained in a single program source file named Exercises1.py. This file, which should be downloaded by the student at the beginning of the module, contains the complete lecture except the solutions to the ungraded exercises. The student should work each of these before viewing the instructor's solution. By using the unique capability of Spyder (using IPython Notebooks), the program file is segmented into cells each of which can be executed independently of the others. Thus the student does not have to manage multiple program files and finishes with a lecture file with filled-in student exercises that can be used for reference.  Python topics included in this module are print statement, arithmetic operators, input statement, combining of strings, if statement, while loop, and for loop.  The module ends with a series of small functions to write to be submitted for grading. Grading is done by custom software and should normally take only minutes with no limit to the number of re-submissions. Hopefully, you'll finish with a perfect score.", "video": ["Welcome and introduction", "Setting up Spyder", "Starting Python. Our first lecture and exercise file.", "Exercises1.py -- the exercise/lecture file for this module.", "Note about a minor problem with Spyder", "Introduction to the Spyder IDE", "Arithmetic operations", "Our first functions", "Creating strings and using them in print statements.", "The \"input\" statement and combining strings", "Using the \"if\" statement", "Converting strings to numbers. Using the remainder operator", "Introduction to loops - the \"while\" loop", "The \"for\" loop;  tracking down errors", "Practice functions for debugging Python code", "Programming problems for module 1"], "title": "Beginning to Program in Python"}, {"description": "Lists, datatypes, libraries, the random library.", "video": ["Exercises 2 -- the exercise/lecture file for this module.", "Introduction to lists", "Lists continued", "Stepping through lists using loops", "Introduction to datatypes", "Converting datatypes", "Working with lists of sublists; writing a small report", "Lists continued", "Introduction to libraries. The random library.", "More on Loops and Append", "Programming problems for module 2"], "title": "Working with Lists and Importing Libraries. The Random library."}, {"description": "So far, we have one collection data type, the list. In this module we take up two more: the tuple and the data dictionary.  After that we introduce reading and writing text files and give some illustrative examples. Finally, we take up reading and writing Comma Separated Value (CSV) files.", "video": ["Exercises3.py -- The exercise/lecture file for this module.", "Python files needed for this module.", "Text and CSV files used during this module.", "FAQ/Errata: Change in Spyder; Running in a Command Prompt", "Using tuples and data dictionaries", "Reading and writing files", "Running Python Programs (Windows)", "If python does not run, read this file.", "Installing Environments on a Mac", "Running Python Programs (Mac)", "Writing scripts in Python", "Reading and writing CSV files", "Programming problems for module 3"], "title": "Tuples, Data Dictionaries, Text and CSV Files"}, {"description": "In this lesson, we  take up a variety of topics and give an example using much of what we've covered in the course. First, we show how functions can return values. Then we show how to build lists of various types and how to sort these lists. After that we use the statistic library to introduce basic descriptive statistics. Finally, we show how to use formatting in print statements. As a recap, we work through an application making use of what we've learned to build a menu-driven program that maintains a small database.", "video": ["Exercises4.py -- the exercise/lecture file for this module.", "Additional program and data files needed for this module.", "Long strings, random library, building and sorting lists", "Descriptive statistics", "Formatting print statements", "Starting the database application", "Displaying the records", "Adding and deleting records", "Editing records", "Saving records to a CSV file", "Loading the records from the CSV file", "Running our database application as a stand-alone program", "Programming problems for module 4"], "title": "Functional Values, Sorting, Formatting, Statistics, and a Menu Driven Database Program"}]}, {"course_info": "About this course: This two-part course is designed to help students with very little or no computing background learn the basics of building simple interactive applications. Our language of choice, Python, is an easy-to learn, high-level computer language that is used in many of the computational courses offered on Coursera. To make learning Python easy, we have developed a new browser-based programming environment that makes developing interactive applications in Python simple. These applications will involve windows whose contents are graphical and respond to buttons, the keyboard and the mouse.\n\nIn part 1 of this course, we will introduce the basic elements of programming (such as expressions, conditionals, and functions) and then use these elements to create simple interactive applications such as a digital stopwatch.  Part 1 of this class will culminate in building a version of the classic arcade game \"Pong\".", "title": "An Introduction to Interactive Programming in Python (Part 1)", "rating": "4.8", "level": null, "created_by": "Rice University", "package_name": "Fundamentals of Computing Specialization ", "target_audience": "Who is this class for: Recommended Background - A knowledge of high school mathematics is required. The class is designed for students with no prior programming experience.", "package_num": "1", "teach_by": [{"name": "John Greiner", "department": "Department of Computer Science "}, {"name": "Stephen Wong", "department": "Computer Science"}, {"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Joe Warren", "department": "Computer Science"}], "week_data": [{"description": "Understand the structure of this class, explore Python as a calculator", "video": ["Introduction", "CodeSkulptor", "Arithmetic Expressions", "Practice Exercises for Expressions (optional)", "Variables", "Saving in CodeSkulptor", "Practice Exercises for Variables and Assignments (optional)", "Mini-project Video", "Mini-project Description", "Code Clinic Tips", "\"We want... a shrubbery!\"", "Quiz 0"], "title": "Week 0 - Statements, expressions, variables "}, {"description": "Learn the basic constructs of Python programming, create a program that plays a variant of Rock-Paper-Scissors", "video": ["Functions", "Visualizing Functions", "More Operations", "Practice Exercises for Functions (optional)", "Logic and Comparisons", "Conditionals", "Programming Tips - 1", "Practice Exercises for Logic and Conditionals (optional)", "Mini-project Video", "Mini-project Description", "Practice Mini-project: Mystical Octosphere (optional)", "Code Clinic Tips", "Quiz 1", "Rock-paper-scissors-lizard-Spock"], "title": "Week 1 - Functions, logic, conditionals"}, {"description": "Learn the basics of event-driven programming, understand difference between local and global variables, create an interactive program that plays a simple guessing game", "video": ["Event-Driven Programming", "Local vs. Global Variables", "SimpleGUI", "Practice Exercises for Interactive Applications (optional)", "Buttons", "Input Fields", "Visualizing Events", "Programming Tips - 2", "Practice Exercises for Button and Input Fields (optional)", "Mini-project Video", "Mini-project Description", "Practice Mini-project: Magical Octosphere Reloaded (optional)", "Code Clinic Tips", "Quiz 2a", "Quiz 2b", "\"Guess the Number!\""], "title": "Week 2 - Event-driven programming, local/global variables"}, {"description": "Create a canvas in Python, learn how to draw on the canvas, create a digital stopwatch", "video": ["Canvas and Drawing", "String Processing", "Interactive Drawing", "Practice Exercises for Drawing (optional)", "Timers", "Visualizing Drawing and Timers", "Programming Tips - 3", "Practice Exercises for Timers (optional)", "Mini-project Video", "Mini-project Description", "Code Clinic Tips", "Quiz 3a", "Quiz 3b", "Stopwatch: The Game"], "title": "Week 3 - Canvas, drawing, timers"}, {"description": "Learn the basics of lists in Python, model moving objects in Python, recreate the classic arcade game \"Pong\"", "video": ["Lists", "Keyboard Input", "Motion", "Collisions and Reflections", "Practice Exercises for Lists (optional)", "Velocity Control", "Visualizing Lists and Mutation", "Programming Tips - 4", "Practice Exercises for Keyboard (optional)", "Mini-project Video", "Mini-project Description", "Code Clinic Tips", "Quiz 4a", "Quiz 4b", "Pong"], "title": "Week 4 - Lists, keyboard input, the basics of modeling motion"}]}, {"course_info": "About this course: Functional programming is becoming increasingly widespread in industry. This trend is driven by the adoption of Scala as the main programming language for many applications. Scala fuses functional and object-oriented programming in a practical package. It interoperates seamlessly with both Java and Javascript. Scala is the implementation language of many important frameworks, including Apache Spark, Kafka, and Akka. It provides the core infrastructure for sites such as Twitter, Tumblr and also Coursera.\n\nIn this course you will discover the elements of the functional programming style and learn how to apply them usefully in your daily programming tasks. You will also develop a solid foundation for reasoning about functional programs, by touching upon proofs of invariants and the tracing of execution symbolically.\n\nThe course is hands on; most units introduce short programs that serve as illustrations of important concepts and invite you to play with them, modifying and improving them. The course is complemented by a series programming projects as homework assignments.\n\nLearning Outcomes. By the end of this course you will be able to:\n\n - understand the principles of functional programming,\n - write purely functional programs, using recursion,\n   pattern matching, and higher-order functions,\n - combine functional programming with objects and classes,\n - design immutable data structures,\n - reason about properties of functions,\n - understand generic types for functional programs\n\nRecommended background: You should have at least one year programming experience. Proficiency with Java or C# is ideal, but experience with other languages such as C/C++, Python, Javascript or Ruby is also sufficient. You should have some familiarity using the command line.", "title": "Functional Programming Principles in Scala", "rating": "4.8", "level": "Intermediate", "created_by": "École Polytechnique Fédérale de Lausanne", "package_name": "Functional Programming in Scala Specialization ", "target_audience": null, "package_num": "1", "teach_by": [{"name": "Martin Odersky", "department": "Computer Science"}], "week_data": [{"description": "Get up and running with Scala on your computer. Complete an example assignment to familiarize yourself with our unique way of submitting assignments. In this week, we'll learn the difference between functional imperative programming. We step through the basics of Scala; covering expressions, evaluation, conditionals, functions, and recursion", "video": ["Course Introduction", "Tools Setup for Linux", "Tools Setup for Mac OS X", "Tools Setup for Windows", "Example Assignment", "Tools Setup (Please read)", "Cheat Sheet", "IntelliJ IDEA Tutorial", "Eclipse Tutorial", "SBT tutorial and Submission of Assignments (Please read)", "Learning Resources", "Scala Tutorial", "Scala Style Guide", "Lecture 1.1 - Programming Paradigms", "Lecture 1.2 - Elements of Programming", "Lecture 1.3 - Evaluation Strategies and Termination", "Lecture 1.4 - Conditionals and Value Definitions", "Lecture 1.5 - Example: square roots with Newton's method", "Lecture 1.6 - Blocks and Lexical Scope", "Lecture 1.7 - Tail Recursion", "Recursion", "Learning check-in", "Recursion"], "title": "Getting Started + Functions & Evaluation"}, {"description": "This week, we'll learn about functions as first-class values, and higher order functions. We'll also learn about Scala's syntax and how it's formally defined. Finally, we'll learn about methods, classes, and data abstraction through the design of a data structure for rational numbers.", "video": ["Lecture 2.1 - Higher-Order Functions", "Lecture 2.2 - Currying", "Lecture 2.3 - Example: Finding Fixed Points", "Lecture 2.4 - Scala Syntax Summary", "Lecture 2.5 - Functions and Data", "Lecture 2.6 - More Fun With Rationals", "Lecture 2.7 - Evaluation and Operators", "Functional Sets", "Functional Sets"], "title": "Higher Order Functions"}, {"description": "This week, we'll cover traits, and we'll learn how to organize classes into hierarchies. We'll cover the hierarchy of standard Scala types, and see how to organize classes and traits into packages. Finally, we'll touch upon the different sorts of polymorphism in Scala.", "video": ["Lecture 3.1 - Class Hierarchies", "Lecture 3.2 - How Classes Are Organized", "Lecture 3.3 - Polymorphism", "Object-Oriented Sets", "Object-Oriented Sets"], "title": "Data and Abstraction"}, {"description": "This week we'll learn about the relationship between functions and objects in Scala; functions *are* objects! We'll zoom in on Scala's type system, covering subtyping and generics, and moving on to more advanced aspects of Scala's type system like variance. Finally, we'll cover Scala's most widely used data structure, Lists, and one of Scala's most powerful tools, pattern matching.", "video": ["Lecture 4.1 - Objects Everywhere", "Lecture 4.2 - Functions as Objects", "Lecture 4.3 - Subtyping and Generics", "Lecture 4.4 - Variance (Optional)", "Lecture 4.5 - Decomposition", "Lecture 4.6 - Pattern Matching", "Lecture 4.7 - Lists", "Huffman Coding", "Huffman Coding"], "title": "Types and Pattern Matching"}, {"description": "This week we dive into Lists, the most commonly-used data structure in Scala.", "video": ["Lecture 5.1 - More Functions on Lists", "Lecture 5.2 - Pairs and Tuples", "Lecture 5.3 - Implicit Parameters", "Lecture 5.4 - Higher-Order List Functions", "Lecture 5.5 - Reduction of Lists", "Lecture 5.6 - Reasoning About Concat", "Lecture 5.7 - A Larger Equational Proof on Lists"], "title": "Lists"}, {"description": "After a deep-dive into Lists, this week we'll explore other data structures; vectors, maps, ranges, arrays, and more. We'll dive into Scala's powerful and flexible for-comprehensions for querying data.", "video": ["Lecture 6.1 - Other Collections", "Lecture 6.2 - Combinatorial Search and For-Expressions", "Lecture 6.3 - Combinatorial Search Example", "Lecture 6.4 - Maps", "Lecture 6.5 - Putting the Pieces Together", "Conclusion", "Anagrams", "Anagrams"], "title": "Collections"}]}, {"course_info": "About this course: This course provides a rigorous introduction to the R programming language, with a  particular focus on using R for software development in a data science setting. Whether you are part of a data science team or working individually within a community of developers, this course will give you the knowledge of R needed to make useful contributions in those settings. As the first course in the Specialization, the course provides the essential foundation of R needed for the following courses. We cover basic R concepts and language fundamentals, key concepts like tidy data and related \"tidyverse\" tools, processing and manipulation of complex and large datasets, handling textual data, and basic data science tasks. Upon completing this course, learners will have fluency at the R console and will be able to create tidy datasets from a wide range of possible data sources.", "title": "The R Programming Environment", "rating": "4.4", "level": "Intermediate", "created_by": "Johns Hopkins University", "package_name": "Mastering Software Development in R Specialization ", "target_audience": "Who is this class for: This course is aimed at learners who have some experience programming computers but who are not familiar with the R environment. ", "package_num": "1", "teach_by": [{"name": "Roger D. Peng, PhD", "department": "Bloomberg School of Public Health"}, {"name": "Brooke Anderson", "department": "Colorado State University"}], "week_data": [{"description": "In this module, you'll learn the basics of R, including syntax, some tidy data principles and processes, and how to read data into R.  ", "video": ["Welcome to the R Programming Environment", "Course Textbook: Mastering Software Development in R", "Syllabus", "Swirl Assignments", "Datasets", "Lesson Introduction", "Evaluation", "Objects", "Numbers", "Creating Vectors", "Mixing Objects", "Explicit Coercion", "Matrices", "Lists", "Factors", "Missing Values", "Data Frames", "Names", "Attributes", "Summary", "The Importance of Tidy Data", "The “Tidyverse”", "Reading Tabular Data with the readr Package", "Reading Web-Based Data", "Flat files online", "Requesting data through a web API", "Scraping web data", "Parsing JSON, XML, or HTML data", "Swirl Lessons"], "title": "Basic R Language"}, {"description": "During this module, you'll learn to summarize, filter, merge, and otherwise manipulate data in R, including working through the challenges of dates and times. ", "video": ["Basic Data Manipulation", "Piping", "Summarizing data", "Selecting and filtering data", "Adding, changing, or renaming columns", "Spreading and gathering data", "Merging datasets", "Working with Dates, Times, Time Zones", "Converting to a date or date-time class", "Pulling out date and time elements", "Working with time zones", "Swirl Lessons"], "title": "Data Manipulation"}, {"description": "During this module, you'll learn to use R tools and packages to deal with text and regular expressions. You'll also learn how to manage and get the most from your computer's physical memory when working in R. ", "video": ["Text Processing and Regular Expressions", "Text Manipulation Functions in R", "Regular Expressions", "RegEx Functions in R", "The stringr Package", "Summary", "The Role of Physical Memory", "Back of the Envelope Calculations", "Internal Memory Management in R", "Swirl Lessons"], "title": "Text Processing, Regular Expression, & Physical Memory"}, {"description": "In this final module, you'll learn how to overcome the challenges of working with large datasets both in memory and out as well as how to diagnose problems and find help.", "video": ["Working with Large Datasets", "In-memory strategies", "Out-of-memory strategies", "Diagnosing Problems", "How to Google Your Way Out of a Jam", "Asking for Help", "Quiz Instructions", "Reading and Summarizing Data"], "title": "Large Datasets"}]}, {"course_info": "About this course: This course covers the essential information that every serious programmer needs to know about algorithms and data structures, with emphasis on applications and scientific performance analysis of Java implementations. Part I covers elementary data structures, sorting, and searching algorithms. Part II focuses on graph- and string-processing algorithms.", "title": "Algorithms, Part II", "rating": "4.9", "level": "Intermediate", "created_by": "Princeton University", "package_name": null, "target_audience": "Who is this class for: While this course was originally designed for first- and second-year undergraduates, it is appropriate not only for college students but also for professionals. Two-thirds of our learners are college graduates working in industry.", "package_num": null, "teach_by": [{"name": "Robert Sedgewick", "department": "Computer Science"}, {"name": "Kevin Wayne", "department": "Computer Science"}], "week_data": [{"description": "Welcome to Algorithms, Part II.", "video": ["Welcome to Algorithms, Part II", "Lecture Slides", "Course Introduction"], "title": "Introduction  "}, {"description": "We define an undirected graph API and consider the adjacency-matrix and adjacency-lists representations. We introduce two classic algorithms for searching a graph—depth-first search and breadth-first search. We also consider the problem of computing connected components and conclude with related problems and applications.", "video": ["Overview", "Lecture Slides", "Introduction to Graphs", "Graph API", "Depth-First Search", "Breadth-First Search", "Connected Components", "Graph Challenges", "Interview Questions: Undirected Graphs (ungraded)"], "title": "Undirected Graphs"}, {"description": "In this lecture we study directed graphs. We begin with depth-first search and breadth-first search in digraphs and describe applications ranging from garbage collection to web crawling. Next, we introduce a depth-first search based algorithm for computing the topological order of an acyclic digraph. Finally, we implement the Kosaraju−Sharir algorithm for computing the strong components of a digraph.", "video": ["Lecture Slides", "Introduction to Digraphs", "Digraph API", "Digraph Search", "Topological Sort ", "Strong Components", "Interview Questions: Directed Graphs (ungraded)", "WordNet"], "title": "Directed Graphs"}, {"description": "In this lecture we study the minimum spanning tree problem. We begin by considering a generic greedy algorithm for the problem. Next, we consider and implement two classic algorithm for the problem—Kruskal's algorithm and Prim's algorithm. We conclude with some applications and open problems.", "video": ["Overview", "Lecture Slides", "Introduction to MSTs", "Greedy Algorithm", "Edge-Weighted Graph API", "Kruskal's Algorithm", "Prim's Algorithm", "MST Context", "Interview Questions: Minimum Spanning Trees (ungraded)"], "title": "Minimum Spanning Trees"}, {"description": "In this lecture we study shortest-paths problems. We begin by analyzing some basic properties of shortest paths and a generic algorithm for the problem. We introduce and analyze Dijkstra's algorithm for shortest-paths problems with nonnegative weights. Next, we consider an even faster algorithm for DAGs, which works even if the weights are negative. We conclude with the Bellman−Ford−Moore algorithm for edge-weighted digraphs with no negative cycles. We also consider applications ranging from content-aware fill to arbitrage.", "video": ["Lecture Slides", "Shortest Paths APIs", "Shortest Path Properties", "Dijkstra's Algorithm", "Edge-Weighted DAGs", "Negative Weights", "Interview Questions: Shortest Paths (ungraded)", "Seam Carving"], "title": "Shortest Paths"}, {"description": "In this lecture we introduce the maximum flow and minimum cut problems. We begin with the Ford−Fulkerson algorithm. To analyze its correctness, we establish the maxflow−mincut theorem. Next, we consider an efficient implementation of the Ford−Fulkerson algorithm, using the shortest augmenting path rule. Finally, we consider applications, including bipartite matching and baseball elimination.", "video": ["Overview", "Lecture Slides", "Introduction to Maxflow", "Ford–Fulkerson Algorithm", "Maxflow–Mincut Theorem", "Running Time Analysis", "Java Implementation", "Maxflow Applications", "Interview Questions: Maximum Flow (ungraded)", "Baseball Elimination"], "title": "Maximum Flow and Minimum Cut"}, {"description": "In this lecture we consider specialized sorting algorithms for strings and related objects. We begin with a subroutine to sort integers in a small range. We then consider two classic radix sorting algorithms—LSD and MSD radix sorts. Next, we consider an especially efficient variant, which is a hybrid of MSD radix sort and quicksort known as 3-way radix quicksort. We conclude with suffix sorting and related applications.", "video": ["Lecture Slides", "Strings in Java", "Key-Indexed Counting", "LSD Radix Sort", "MSD Radix Sort", "3-way Radix Quicksort", "Suffix Arrays", "Interview Questions: Radix Sorts (ungraded)"], "title": "Radix Sorts"}, {"description": "In this lecture we consider specialized algorithms for symbol tables with string keys. Our goal is a data structure that is as fast as hashing and even more flexible than binary search trees. We begin with multiway tries; next we consider ternary search tries. Finally, we consider character-based operations, including prefix match and longest prefix, and related applications.", "video": ["Overview", "Lecture Slides", "R-way Tries", "Ternary Search Tries", "Character-Based Operations", "Interview Questions: Tries (ungraded)"], "title": "Tries"}, {"description": "In this lecture we consider algorithms for searching for a substring in a piece of text. We begin with a brute-force algorithm, whose running time is quadratic in the worst case. Next, we consider the ingenious Knuth−Morris−Pratt algorithm whose running time is guaranteed to be linear in the worst case. Then, we introduce the Boyer−Moore algorithm, whose running time is sublinear on typical inputs. Finally, we consider the Rabin−Karp fingerprint algorithm, which uses hashing in a clever way to solve the substring search and related problems.", "video": ["Lecture Slides", "Introduction to Substring Search", "Brute-Force Substring Search", "Knuth–Morris–Pratt", "Boyer–Moore", "Rabin–Karp", "Interview Questions: Substring Search (ungraded)", "Boggle"], "title": "Substring Search"}, {"description": "A regular expression is a method for specifying a set of strings. Our topic for this lecture is the famous grep algorithm that determines whether a given text contains any substring from the set. We examine an efficient implementation that makes use of our digraph reachability implementation from Week 1.", "video": ["Overview", "Lecture Slides", "Regular Expressions", "REs and NFAs", "NFA Simulation", "NFA Construction", "Regular Expression Applications", "Interview Questions: Regular Expressions (ungraded)"], "title": "Regular Expressions"}, {"description": "We study and implement several classic data compression schemes, including run-length coding, Huffman compression, and LZW compression. We develop efficient implementations from first principles using a Java library for manipulating binary data that we developed for this purpose, based on priority queue and symbol table implementations from earlier lectures.", "video": ["Lecture Slides", "Introduction to Data Compression", "Run-Length Coding", "Huffman Compression", "LZW Compression", "Interview Questions: Data Compression (ungraded)", "Burrows–Wheeler"], "title": "Data Compression"}, {"description": "Our lectures this week are centered on the idea of problem-solving models like maxflow and shortest path, where a new problem can be formulated as an instance of one of those problems, and then solved with a classic and efficient algorithm. To complete the course, we describe the classic unsolved problem from theoretical computer science that is centered on the concept of algorithm efficiency and guides us in the search for efficient solutions to difficult problems. ", "video": ["Overview", "Lecture Slides", "Introduction to Reductions", "Designing Algorithms", "Establishing Lower Bounds", "Classifying Problems", "Interview Questions: Reductions (ungraded)"], "title": "Reductions"}, {"description": "The quintessential problem-solving model is known as linear programming, and the simplex method for solving it is one of the most widely used algorithms. In this lecture, we given an overview of this central topic in operations research and describe its relationship to algorithms that we have considered.", "video": ["Lecture Slides", "Brewer's Problem", "Simplex Algorithm", "Simplex Implementations", "Linear Programming Reductions", "Interview Questions: Linear Programming (ungraded)"], "title": "Linear Programming (optional)"}, {"description": "Is there a universal problem-solving model to which all problems that we would like to solve reduce and for which we know an efficient algorithm? You may be surprised to learn that we do no know the answer to this question. In this lecture we introduce the complexity classes P, NP, and NP-complete, pose the famous P = NP question, and consider implications in the context of algorithms that we have treated in this course.", "video": ["Lecture Slides", "Introduction to Intractability", "Search Problems", "P vs. NP", "Classifying Problems", "NP-Completeness", "Coping with Intractability ", "Interview Questions: Intractability (ungraded)"], "title": "Intractability"}]}, {"course_info": "About this course: This course is for experienced C programmers who want to program in C++. The examples and exercises require a basic understanding of algorithms and object-oriented software.", "title": "C++ For C Programmers, Part A", "rating": "4.3", "level": null, "created_by": "University of California, Santa Cruz", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Ira Pohl", "department": "Computer Science"}], "week_data": [{"description": "How to convert an existing C program to C++. Use of type safe Input/Output. \nAvoiding the preprocessor.", "video": ["1.0 Module 1 Overview", "1.1 Overview and Course Organization", "1.2 Getting Started", "1.3 Converting a C Program to C++", "1.4 Using C++ Code", "1.5 C++ Improvements", "1.6 C++ Advantages", "1.7 C++ is Better Than C", "1.8 C Swap Function", "1.9 Swap Function in C++", "1.10\tGenerics", "Homework 1: Convert a C program to C++"], "title": "Module 1"}, {"description": "Review of Dijkstra's shortest path algorithm. C++ Functions and Generics. C++ classes and OO. \nPoint as an example.", "video": ["2.0 Module 2 Overview", "2.1 C++ Generics and Functions", "2.2 Multiple Template Arguments", "2.3 Graph Theory & Algorithms", "2.4 Graph as a Data Structure", "2.5 Dijkstra Shortest Path", "2.6 C++ Creating Types", "2.7 Enum & Operator Overloading", "2.8 Example: typedef days", "2.9 Natural Way to Build Widgets", "2.10 C++ Point"], "title": "Module 2"}, {"description": "Point: Default constructor and initializing syntax. Conversion Constructors. Copy Constructor. List and dynamic memory allocation. Deep Copy. ", "video": ["3.0 Module 3 Overview", "3.1 C++ Classes & Object Orientation", "3.2 Point and its Constructor", "3.3 More Constructors", "3.4 Using Dijkstra's Algorithm", "3.5 The is-connected Algorithm", "3.6 Complex Aggregates - Lists", "3.7 List", "3.8 Print() Chaining", "3.9 More Elaborate List", "3.10\tDeep vs. Shallow Copy", "3.11 Destructor", "3.12\tDynamic Data Structures in STL", "Homework 2: Implement Dijkstra's Algorithm"], "title": "Module 3"}, {"description": "Prim’s and Kruskal’s algorithms. Use of basic Container Classes. Tripod-Container, Iterator, Algorithm.", "video": ["4.0 Module 4 Overview", "4.1 MST", "4.2 Jarnik-Prim MST", "4.3 Jarnik-Prim MST: Another Look", "4.4 Kruskal's Algorithm", "4.5 Overloading and Function Selection", "4.6 STL and STL C++11", "4.7 STL Example", "4.8 C++11 Feature: auto", "4.9 Vector Methods", "4.10 More Code", "4.11\tC++11 Feature: for statement", "4.12\tSTL Input File", "4.13\tIterators Categories", "4.14\tOutput a Random Graph", "Homework 3: Compute the minimum spanning tree for an inputted graph"], "title": "Module 4"}, {"description": "Practice and final.", "video": ["Exam Practice 1", "Final Exam"], "title": "Final Exam"}]}, {"course_info": "About this course: Learn to code in Java and improve your programming and problem-solving skills. You will learn to design algorithms as well as develop and debug programs. Using custom open-source classes, you will write programs that access and transform images, websites, and other types of data. At the end of the course you will build a program that determines the popularity of different baby names in the US over time by analyzing comma separated value (CSV) files. \n\nAfter completing this course you will be able to:\n1. Edit, compile, and run a Java program;\n2. Use conditionals and loops in a Java program;\n3. Use Java API documentation in writing programs. \n4. Debug a Java program using the scientific method;\n5. Write a Java method to solve a specific problem;\n6. Develop a set of test cases as part of developing a program;\n7. Create a class with multiple methods that work together to solve a problem; and\n8. Use divide-and-conquer design techniques for a program that uses multiple methods.", "title": "Java Programming: Solving Problems with Software", "rating": "4.5", "level": "Beginner", "created_by": "Duke University", "package_name": "Object Oriented Programming in Java Specialization ", "target_audience": "Who is this class for: No prior Java programming experience is necessary; however, before taking this course, you should have a basic understanding of the programming concepts (variables, functions, conditionals, and for loops) that you can learn in the first course of this specialization, “Programming Foundations with JavaScript, HTML and CSS,” or in another introductory programming course. In addition, this course relies heavily on a seven-step approach to writing programs, also taught in  “Programming Foundations with JavaScript, HTML and CSS.” This is the second course of the Java Programming and Software Engineering Fundamentals Specialization, and provides the fundamentals of Java programming you will need to successfully complete the course series and the capstone project.", "package_num": "1", "teach_by": [{"name": "Owen Astrachan", "department": "Computer Science"}, {"name": "Robert Duvall", "department": "Computer Science"}, {"name": "Andrew D. Hilton", "department": "Electrical and Computer Engineering"}, {"name": "Susan H. Rodger", "department": "Computer Science"}], "week_data": [{"description": "Welcome to “Java Programming: Solving Problems with Software”! We are excited that you are starting our course to learn how to write programs in Java, one of the most popular programming languages in the world. In this introductory module, you will get to meet the instructor team from Duke University and have an overview of the course. Have fun!", "video": ["Introduction to the Course", "Programming Resources", "Resources to Help You Succeed", "Tips for Learning Programming", "Using Forums: How to Ask for Help Effectively", "Object Oriented Programming with Java Specialization"], "title": "Introduction to the Course"}, {"description": "In this module, you will learn to write and run your first Java programs, including one program that prints “Hello!” in various countries’ languages and another where you will analyze the perimeters and other information of shapes. To accomplish these tasks, you will learn the basics of Java syntax and how to design stepwise solutions with programs. By the end of this module, you will be able to: (1) Download and run BlueJ, the Java programming environment for this course; (2) Access the documentation for the Java libraries specially designed for this course; (3) Edit, compile, and run a Java program; (4) Construct methods, variables, if else statements, and for each loops in Java; and (5) Use Iterables (like DirectoryResource) to run a program that iterates over multiples lines in a document or webpage or multiple files in a directory.", "video": ["Module Learning Outcomes", "Why Use Java?", "Download BlueJ and Open Your First BlueJ Project", "Using BlueJ to Program in Java", "Getting Started with BlueJ", "Shapes: Collections of Points", "Why Semantics: Motivation to Read Code", "Variables", "Mathematical Operators", "Variables and Mathematical Operators", "Functions", "Conditionals", "Functions and Conditionals", "Classes", "New", "Methods", "Types", "For Each Loops", "Classes, Types, and For Each Loops", "Solving Programming: A Seven Step Approach", "Seven Steps in Action: Developing an Algorithm", "Seven Steps in Action: Testing the Algorithm", "Seven Steps in Action: Translating to Code", "Calculating the Perimeter of a Shape", "End of Module Survey", "Calculating the Perimeter of a Shape"], "title": "Fundamental Java Syntax and Semantics"}, {"description": "This module begins with a short presentation from Raluca Gordân, an assistant professor in Duke University’s Center for Genomic and Computational Biology, about an important problem genomics scientists encounter regularly: how to identify genes in a strand of DNA. To tackle this problem, you will need to understand strings: series of characters such as letters, digits, punctuation, etc. After learning about Java methods that work with strings, you will be able to find genes within a DNA string as well as tackle other string related problems, such as finding all of the links in a web page. By the end of this module, you will be able to: (1) Use important methods for the Java String class; (2) Use conditionals, for loops, and while loops appropriately in a Java program; (3) Find patterns in the data represented by strings to help develop the algorithm for your program; (4) Understand the importance of designing programs that keep different data processing steps separate; (5) Use the StorageResource iterable for this course to store some data for further processing; and (6) Rely on Java documentation to better understand how to use different Java packages and classes.", "video": ["What is a String", "Understanding Strings", "Developing an Algorithm", "Positions in Strings", "Translating into Code", "Java Math", "Programming Exercise: Finding a Gene and Web Links", "Finding a Gene in DNA", "Introduction", "Conceptual Understanding", "While Loops", "While Loop Syntax and Semantics", "Coding While Loops", "Three Stop Codons", "Coding Three Stop Codons - Part I", "Coding Three Stop Codons - Part II", "Logical And / Or", "Coding And / Or", "Finding Multiple Genes", "Translating to Code", "Programming Exercise: Finding Many Genes", "Finding All Genes in DNA", "Debugging: Part 1", "Debugging: Part 2", "Debugging First Steps", "Separation of Concerns", "StorageResource Class", "Coding StorageResource Class", "Programming Exercise: Storing All Genes", "Using StorageResource", "End of Module Survey", "Strings in Java"], "title": "Strings in Java"}, {"description": "A common format for storing tabular data (any data organized into columns and rows) is in comma separated values (CSV) files. In this module, you will learn how to analyze and manipulate data from multiple CSV data files using a powerful open-source software package: Apache Commons CSV. Using this library will empower you to solve problems that could prove too complex to solve with a spreadsheet. By the end of this module, you will be able to: (1) Use the open-source Apache Commons CSV package in your own Java programs; (2) Access data from one or many CSV files using Java; (3) Convert strings into numbers; (4) Understand how to use “null” in Java programs (when you want to represent “nothing”); (5) Devise an algorithm (and implement in Java) to answer questions about CSV data; and (6) Analyze CSV data across multiple CSV files (for example, find maximums, minimums, averages, and other simple statistical results).", "video": ["Module Learning Outcomes", "CSV Data: Comma Separated Values", "Using CSV Libraries", "Which Countries Export...? Developing an Algorithm", "Which Countries Export...? Translating into Code", "CSVExport: Summary", "Programming Exercise: Parsing Export Data", "Which Countries Export...?", "Hottest Day in a Year: Comma Separated Values", "Converting Strings to Numbers", "Maximum Temperature: Developing an Algorithm", "Java for Nothing—null: When You Don't Have an Object", "Maximum Temperature: Translating into Code", "Maximum Temperature: Testing Code", "Maximum Temperature from Multiple Datasets", "Maximum Temperature Refactored", "CSVMax: Summary", "Programming Exercise: Parsing Weather Data", "Weather Data", "End of Module Survey", "CSV Files and Basic Statistics in Java"], "title": "CSV Files and Basic Statistics in Java"}, {"description": "This module wraps up the course with a mini project that ties together the different practices, skills, and libraries you have gained across the course! Using data on the popularity of different baby names in the United States from the past several decades, you will be able to compare different names’ popularity over time. While the data we have collected for this course is from the United States, we welcome you to share data from other countries in the course discussion forums. Good luck with the mini project!", "video": ["Baby Names MiniProject: Overview", "Baby Names MiniProject: Data Overview", "Baby Names MiniProject: Total Births", "MiniProject Exercise Guide", "Extend Your Program", "End of Module Survey", "Batch Grayscale: Converting Many Files", "Grayscale Algorithm: Seven Step Approach", "Image Iterable in BlueJ: Grayscale", "Batch Processing Grayscale", "Saving Images with New Names", "Batch Grayscale Summary: Converting Many Files", "Programming Exercise: Batch Grayscale and Image Inversion", "Baby Names", "Batch Grayscale Images"], "title": "MiniProject: Baby Names"}]}, {"course_info": "About this course: This course will introduce the learner to text mining and text manipulation basics. The course begins with an understanding of how text is handled by python, the structure of text both to the machine and to humans, and an overview of the nltk framework for manipulating text. The second week focuses on common manipulation needs, including regular expressions (searching for text), cleaning text, and preparing text for use by machine learning processes. The third week will apply basic natural language processing methods to text, and demonstrate how text classification is accomplished. The final week will explore more advanced methods for detecting the topics in documents and grouping them by similarity (topic modelling). \n\nThis course should be taken after: Introduction to Data Science in Python, Applied Plotting, Charting & Data Representation in Python, and Applied Machine Learning in Python.", "title": "Applied Text Mining in Python", "rating": "4.0", "level": "Intermediate", "created_by": "University of Michigan", "package_name": "Applied Data Science with Python Specialization ", "target_audience": "Who is this class for: This course is part of “Applied Data Science with Python“ and is intended for learners who have basic python or programming background, and want to apply statistics, machine learning, information visualization, social network analysis, and text analysis techniques to gain new insight into data.\n\nOnly minimal statistics background is expected, and the first course contains a refresh of these basic concepts. There are no geographic restrictions. Learners with a formal training in Computer Science but without formal training in data science will still find the skills they acquire in these courses valuable in their studies and careers.", "package_num": "4", "teach_by": [{"name": "V. G. Vinod Vydiswaran", "department": "School of Information"}], "week_data": [{"description": "", "video": ["Course Syllabus", "Help us learn more about you!", "Introduction to Text Mining", "Handling Text in Python", "Notice for Auditing Learners: Assignment Submission", "Working with Text", "Regular Expressions", "Regex with Pandas and Named Groups", "Demonstration: Regex with Pandas and Named Groups", "Practice Quiz", "Internationalization and Issues with Non-ASCII Characters", "Introduce Yourself", "Resources: Common issues with free text", "Assignment 1", "Module 1 Quiz", "Assignment 1 Submission"], "title": "Module 1: Working with Text in Python"}, {"description": "", "video": ["Basic Natural Language Processing", "Module 2 (Python 3)", "Basic NLP tasks with NLTK", "Advanced NLP tasks with NLTK", "Practice Quiz", "Finding your own prepositional phrase attachment", "Assignment 2", "Module 2 Quiz", "Assignment 2 Submission"], "title": "Module 2: Basic Natural Language Processing"}, {"description": "", "video": ["Text Classification", "Identifying Features from Text", "Naive Bayes Classifiers", "Naive Bayes Variations", "Support Vector Machines", "Learning Text Classifiers in Python", "Case Study - Sentiment Analysis", "Demonstration: Case Study - Sentiment Analysis", "Assignment 3", "Module 3 Quiz", "Assignment 3 Submission"], "title": "Module 3: Classification of Text"}, {"description": "", "video": ["Semantic Text Similarity", "Topic Modeling", "Generative Models and LDA", "Practice Quiz", "Information Extraction", "Additional Resources & Readings", "Assignment 4", "Post-Course Survey", "Module 4 Quiz", "Assignment 4 Submission"], "title": "Module 4: Topic Modeling"}]}, {"course_info": "About this course: This course will introduce you to the wonderful world of Python programming!  We'll learn about the essential elements of programming and how to construct basic Python programs. We will cover expressions, variables, functions, logic, and conditionals, which are foundational concepts in computer programming. We will also teach you how to use Python modules, which enable you to benefit from the vast array of functionality that is already a part of the Python language. These concepts and skills will help you to begin to think like a computer programmer and to understand how to go about writing Python programs.\n\nBy the end of the course, you will be able to write short Python programs that are able to accomplish real, practical tasks. This course is the foundation for building expertise in Python programming. As the first course in a specialization, it provides the necessary building blocks for you to succeed at learning to write more complex Python programs.\n\nThis course uses Python 3.  While many Python programs continue to use Python 2, Python 3 is the future of the Python programming language. This first course will use a Python 3 version of the CodeSkulptor development environment, which is specifically designed to help beginning programmers learn quickly.  CodeSkulptor runs within any modern web browser and does not require you to install any software, allowing you to start writing and running small programs immediately.  In the later courses in this specialization,  we will help you to move to more sophisticated desktop development environments.", "title": "Python Programming Essentials", "rating": "4.7", "level": "Beginner", "created_by": "Rice University", "package_name": "Introduction to Scripting in Python Specialization ", "target_audience": "Who is this class for: This class is primarily for people with no prior programming experience who would like to learn Python.", "package_num": "1", "teach_by": [{"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Joe Warren", "department": "Computer Science"}], "week_data": [{"description": "This module will expose you to Python so that you can run your first simple programs.  You will use Python to compute the results of arithmetic expressions, as you would when using a calculator.", "video": ["Welcome!", "Course Overview", "Hello, world!", "Python Development Environments", "Using CodeSkulptor3", "Numbers", "Simple Expressions", "Compound Expressions", "Variables and Assignment", "Handling Errors in Python", "A Short Guide to Common Errors in Python", "Practice Exercise for Expressions", "Practice Exercises for Variables and Assignments", "Basic Python Syntax"], "title": "Python as a Calculator"}, {"description": "This module will teach you how to define and call functions. Functions allow you to write code once that you can execute repeatedly with different inputs.", "video": ["What is a Function?", "Calling Functions", "Defining Functions", "Local Variables", "Functions", "Understanding Function Evaluation", "Using Print and Return in Functions", "Practice Exercises for Functions", "Functions"], "title": "Functions"}, {"description": "This module will teach you how to use logic and conditionals to change the behavior of the program based upon values within the program.", "video": ["Boolean Logic", "Logical Expressions", "Comparisons", "Conditionals", "More Conditionals", "Conditionals in Python", "Using Python Documentation", "Following Coding Standards", "Coding Standards and Style", "Practice Exercises for Logic and Conditionals", "Logic and Conditionals"], "title": "Logic and Conditionals"}, {"description": "This module will introduce you to the concept of modules. Python modules allow code to be divided up into different files and reused in different programs.  Python provides many modules that you can use within your programs.", "video": ["Python Modules", "Python Modules", "The Datetime Module", "Datetime Module Quick Reference", "Coding the Practice Project - Part 1", "Coding the Practice Project - Part 2", "Practice Project: Rock-Paper-Scissors-Lizard-Spock", "RPSLS Video", "Tips for RPSLS", "Project Video", "Project Description: Working with Dates", "OwlTest: Automated Feedback and Assessment", "Project Submission History", "Project: Working with Dates"], "title": "Python Modules"}]}, {"course_info": "About this course: Are you interested in learning how to program (in Python) within a scientific setting?\n\nThis course will cover algorithms for solving various biological problems along with a handful of programming challenges helping you implement these algorithms in Python.  It offers a gently-paced introduction to our Bioinformatics Specialization (https://www.coursera.org/specializations/bioinformatics), preparing learners to take the first course in the Specialization, \"Finding Hidden Messages in DNA\" (https://www.coursera.org/learn/dna-analysis).\n\nEach of the four weeks in the course will consist of two required components.  First, an interactive textbook provides Python programming challenges that arise from real biological problems.  If you haven't programmed in Python before, not to worry! We provide \"Just-in-Time\" exercises from the Codecademy Python track (https://www.codecademy.com/learn/python). And each page in our interactive textbook has its own discussion forum, where you can interact with other learners. Second, each week will culminate in a summary quiz.\n\nLecture videos are also provided that accompany the material, but these videos are optional.", "title": "Biology Meets Programming: Bioinformatics for Beginners", "rating": "4.5", "level": "Beginner", "created_by": "University of California, San Diego", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Pavel  Pevzner", "department": "Department of Computer Science and Engineering "}, {"name": "Phillip Compeau", "department": "Department of Computer Science & Engineering"}], "week_data": [{"description": "Where in the Genome Does Replication Begin? (Part 1)", "video": ["Course Details", "(Optional) Week 1 FAQs", "Optional: Where in the Genome Does DNA Replication Begin? (Part 1) ", "Optional: Where in the Genome Does DNA Replication Begin? (Part 2) ", "Stepik Interactive Text for Week 1", "Week 1 Quiz"], "title": "Week 1"}, {"description": "Where in the Genome Does Replication Begin? (Part 2)", "video": ["(Optional) Week 2 FAQs", "Optional: Where in the Genome Does DNA Replication Begin? (Part 3) ", "Optional: Where in the Genome Does DNA Replication Begin? (Part 4) ", "Stepik Interactive Text for Week 2", "Week 2 Quiz"], "title": "Week 2"}, {"description": "Which DNA Patterns Play the Role of Molecular Clocks? (Part 1)", "video": ["(Optional) Week 3 FAQs", "Optional: From Implanted Patterns to Regulatory Motifs (Part 1) (10:09)", "Optional: From Implanted Patterns to Regulatory Motifs (Part 2) (05:06)", "Optional: From Implanted Patterns to Regulatory Motifs (Part 3) (07:22)", "Stepik Interactive Text for Week 3", "Week 3 Quiz"], "title": "Week 3"}, {"description": "Which DNA Patterns Play the Role of Molecular Clocks? (Part 2)", "video": ["(Optional) Week 4 FAQs", "Optional: How Rolling Dice Helps Us Find Regulatory Motifs (Part 1) (12:43)", "Optional: How Rolling Dice Helps Us Find Regulatory Motifs (Part 2) (05:37)", "Optional: How Rolling Dice Helps Us Find Regulatory Motifs (Part 3) (07:46)", "Stepik Interactive Text for Week 4", "Week 4 Quiz"], "title": "Week 4"}]}, {"course_info": "About this course: Have you ever heard about such technologies as HDFS, MapReduce, Spark? Always wanted to learn these new tools but missed concise starting material? Don’t miss this course either!\n \nIn this 6-week course you will:\n- learn some basic technologies of the modern Big Data landscape, namely: HDFS, MapReduce and Spark;\n- be guided both through systems internals and their applications;\n- learn about distributed file systems, why they exist and what function they serve;\n- grasp the MapReduce framework, a workhorse for many modern Big Data applications;\n- apply the framework to process texts and solve sample business cases;\n- learn about Spark, the next-generation computational framework;\n- build a strong understanding of Spark basic concepts;\n- develop skills to apply these tools to creating solutions in finance, social networks, telecommunications and many other fields.\n\nYour learning experience will be as close to real life as possible with the chance to evaluate your practical assignments on a real cluster. No mocking, a friendly considerate atmosphere to make the process of your learning smooth and enjoyable.\n \nGet ready to work with real datasets alongside with real masters!\n\nSpecial thanks to:\n- Prof. Mikhail Roytberg, APT dept., MIPT, who was the initial reviewer of the project, the supervisor and mentor of half of the BigData team. He was the one, who helped to get this show on the road.\n- Oleg Sukhoroslov (PhD, Senior Researcher at IITP RAS), who has been teaching  MapReduce, Hadoop  and friends since 2008. Now he is leading the infrastructure team.\n- Oleg Ivchenko (PhD student APT dept., MIPT), Pavel Akhtyamov (MSc. student at APT dept., MIPT) and Vladimir Kuznetsov (Assistant at P.G. Demidov Yaroslavl State University), superbrains who have developed and now maintain the infrastructure used for practical assignments in this course.\n- Asya Roitberg, Eugene Baulin, Marina Sudarikova. These people never sleep to babysit this course day and night, to make your learning experience productive, smooth and exciting.", "title": "Big Data Essentials: HDFS, MapReduce and Spark RDD", "rating": "4.1", "level": "Intermediate", "created_by": "Yandex", "package_name": "Big Data for Data Engineers Specialization ", "target_audience": "Who is this class for: This course is aimed to everybody, who feel interest in Big Data. As the technologies covered throughout the course operate in Unix environment, we expect you to have basic understanding of the subject. Things like processes and files assumed to be familiar for the learner. Python is required to complete programming assignments.", "package_num": "1", "teach_by": [{"name": "Ivan Puzyrevskiy", "department": null}, {"name": "Alexey A. Dral", "department": "Algorithms and Programming Technologies dept. MIPT"}, {"name": "Emeli Dral ", "department": null}, {"name": "Evgeniy Ryabenko", "department": null}], "week_data": [{"description": "", "video": ["Why BigData?", "Issues BigData can solve", "BigData Applications", "What is BigData Essentials?", "Course Structure", "Meet Emeli", "Meet Alexey", "Meet Ivan"], "title": "Welcome"}, {"description": "", "video": ["File system exploration", "File system managing", "File content exploration 1", "File content exploration 2", "Processes", "Basic Bash Commands", "HDFS Lesson Introduction", "Scaling Distributed File System", "Block and Replica States, Recovery Process 1", "Block and Replica States, Recovery Process 2", "HDFS Client", "Gentle Introduction into \"curl\"", "Web UI, REST API", "Namenode Architecture", "Distributed File Systems", "Introduction", "Text formats", "Binary formats 1", "Binary formats 2", "File formats extra (optional)", "Compression", "Demo Assignment", "How to submit your first assignment", "HDFS CLI Playground", "Rate this week", "Big Data and Distributed File Systems", "Demo Assignment", "Distributed File Systems"], "title": "What are BigData and distributed file systems (e.g. HDFS)?"}, {"description": "", "video": ["Unreliable Components 1", "Unreliable Components 2", "MapReduce", "Distributed Shell", "Fault Tolerance", "Fault Tolerance. Live Demo", "Hadoop MapReduce Intro", "Streaming", "Streaming in Python", "WordCount in Python", "Distributed Cache", "Environment, Counters", "Testing", "MapReduce Streaming", "MapReduce Features", "Combiner", "Partitioner", "Comparator", "Speculative Execution / Backup Tasks", "Compression", "Hadoop Streaming assignments", "Rate this week", "Hadoop Streaming Final"], "title": "Solving Problems with MapReduce"}, {"description": "", "video": ["Hadoop Streaming assignments", "Rate this week", "Hadoop Streaming assignment 0: Word Count", "Hadoop Streaming assignment 1: Words Rating", "Hadoop Streaming assignment 2: Stop Words", "Hadoop Streaming assignment 3: Name Count", "Hadoop Streaming assignment 4: Word Groups"], "title": "Solving Problems with MapReduce (practice week)"}, {"description": "", "video": ["Welcome", "RDDs", "Transformations 1", "Transformations 2", "Actions", "Resiliency", "Execution & Scheduling", "Caching & Persistence", "Broadcast variables", "Accumulator variables", "Getting started with Spark & Python", "Working with text files", "Joins", "Broadcast & Accumulator variables", "Spark UI", "Cluster mode", "Spark Assignments Intro", "Rate this week", "Lesson 1 Quiz", "Lesson 2 Quiz"], "title": " Introduction to Apache Spark"}, {"description": "", "video": ["Spark assignments Intro", "Rate this week", "Building an intuition behind the PMI definition", "Spark assignment 1: Pairs", "Spark assignment 2: Collocations"], "title": "Introduction to Apache Spark (practice week)"}, {"description": "", "video": ["Sampling", "Estimating proportions", "Means", "Medians", "Data and code", "Map and Reduce Side Joins", "Tabular Data, KeyFieldSelection", "Data Skew, Salting", "telecom-sms-call-internet-mi Dataset", "Advanced MapReduce Techniques", "Twitter graph case study", "Shortest path", "Jupyter Notebook Sandbox", "Rate this week", "Sample estimates", "Reconstructing the path", "Real-World Applications", "Real-World Applications: TF-IDF"], "title": "Real-World Applications"}]}, {"course_info": "About this course: In the capstone, students will build a series of applications to retrieve, process and visualize data using Python.   The projects will involve all the elements of the specialization.  In the first part of the capstone, students will do some visualizations to become familiar with the technologies in use and then will pursue their own project to visualize some other data that they have or can find.  Chapters 15 and 16 from the book “Python for Everybody” will serve as the backbone for the capstone. This course covers Python 3.", "title": "Capstone: Retrieving, Processing, and Visualizing Data with Python", "rating": "4.6", "level": null, "created_by": "University of Michigan", "package_name": "Python for Everybody Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Charles Severance", "department": "School of Information"}], "week_data": [{"description": "Congratulations to everyone for making it this far. Before you begin, please view the Introduction video and read the Capstone Overview. The Course Resources section contains additional course-wide material that you may want to refer to in future weeks.", "video": ["Introduction: Welcome to the Class", "Capstone Overview", "Help Us Learn More About You!", "Python Textbook", "Coming from Python 2 - Encoding Data in Python 3", "Unicode Characters and Strings", "Notice for Auditing Learners: Assignment Submission", "Office Hours in Den Haag, Netherlands", "Interview: John Resig and Pam Fox - Khan Academy", "Using Encoded Data in Python 3"], "title": "Welcome to the Capstone"}, {"description": "This week we will download and run a simple version of the Google PageRank Algorithm and practice spidering some content. The assignment is peer-graded, and the first of three required assignments in the course. This a continuation of the material covered in Course 4 of the specialization, and is based on Chapter 16 of the textbook. ", "video": ["Building a Search Engine - Introduction", "Page Rank Overview", "Worked Example: Page Rank - Spidering (Chapter 16)", "Worked Example: Page Rank - Computation (Chapter 16)", "Worked Example: Page Rank - Visualization (Chapter 16)", "Office Hours Detroit, Michigan", "Interview: Anil Jain - Image Processing", "Peer Grade: Page Rank"], "title": "Building a Search Engine"}, {"description": "The optional Capstone project is your opportunity to select, process, and visualize the data of your choice, and receive feedback from your peers.  The project is not graded, and can be as simple or complex as you like. This week's assignment is to identify a data source and make a short discussion forum post describing the data source and outlining some possible analysis that could be done with it. You will not be required to use the data source presented here for your actual analysis.", "video": ["Identifying Your Data Source - Introduction", "List of Data Sources (Instructional Staff Curated)", "Identifying a Data Source", "Dr. Chuck's New Kitten - Sakaiger", "Interview: Bruce Schneier - The Security Mindset"], "title": "Exploring Data Sources (Project)"}, {"description": "In our second required assignment, we will retrieve and process email data from the Sakai open source project. Video lectures will walk you through the process of retrieving, cleaning up, and modeling the data.", "video": ["Spidering and Modeling Email Data - Introduction", "Gmane Introduction", "Worked Example: Gmane / Mail - Retrieval (Chapter 16)", "Worked Example: Gmane / Mail - Model (Chapter 16)", "Office Hours Baltimore, MD", "Interview: Bruce Schneier - Building Cryptographic Systems", "Loading and Modeling Mail Data"], "title": "Spidering and Modeling Email Data"}, {"description": "The task for this week is to make a discussion thread post that reflects the progress you have made to date in retrieving and cleaning up your data source so can perform your analysis.  Feedback from other students is encouraged to help you refine the process.", "video": ["Accessing New Data Sources - Introduction", "Analyzing a Data Source", "Office Hours: Dr. Chuck Pretends to be Anthony Bourdain"], "title": "Accessing New Data Sources (Project)"}, {"description": "In the final required assignment, we will do two visualizations of the email data you have retrieved and processed: a word cloud to visualize the frequency distribution and a timeline to show how the data is changing over time.", "video": ["Visualizing Email Data", "Worked Example: Gmane / Mail - Visualization (Chapter 16)", "Office Hours, Montreal, Canada", "Interview: Nathaniel Borenstein - The Father of MIME", "Visualizing Email Data"], "title": "Visualizing Email Data"}, {"description": "This week you will discuss the analysis of your data to the class. While many of the projects will result in a visualization of the data, any other results of analyzing the data are equally valued, so use whatever form of analysis and display is most appropriate to the data set you have selected.", "video": ["Visualizing new Data Sources - Introduction", "Data Analysis and Visualization", "Office Hours - Dr. Chuck's Office - Ann Arbor, Michigan", "Video: Steve Jobs, NeXT and the Internet", "Post-Course Survey"], "title": "Visualizing new Data Sources (Project)"}]}, {"course_info": "About this course: This course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones.\n\nThis course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.\n\nThe course assumes some prior experience with programming, as described in more detail in the first module.\n\nThe course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  The three parts are not quite equal in length: Part A is almost as substantial as Part B and Part C combined.\n\nWeek 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.", "title": "Programming Languages, Part A", "rating": "4.9", "level": "Intermediate", "created_by": "University of Washington", "package_name": null, "target_audience": "Who is this class for: The course assumes students are familiar with programming covered by most introductory courses, but it is explicitly designed not to be a particularly advanced course. Students should be comfortable with variables, conditionals, arrays, linked lists, stacks, and recursion (though recursion will be reviewed and expanded upon), and the difference between an interface and an implementation. Students should be eager to write programs in languages new to them. Part C of the course analyzes basic object-oriented concepts and contrast them with those of other languages, so familiarity with Java or a closely related language (e.g., C#) might be helpful for Part C, but it is not necessary for the assignments.\n\nThis course is based on a course designed for second- and third-year undergraduates: not a first computer science course, but not an advanced course either. So it certainly will not cover everything in the beautiful world of programming languages, but it is a solid introduction.  It is designed to be eye-opening and fascinating both for learners seeking a \"third or fourth programming course\" and for learners with more experience who are looking for a clear and precise foundation in programming languages.\n\nThe assignments in the course are designed to be challenging, but with everything you need in the course content.\n\nAn introductory video and another reading discuss assumed background in some more detail in Week 1 of the course.", "package_num": null, "teach_by": [{"name": "Dan  Grossman", "department": "Computer Science & Engineering"}], "week_data": [{"description": "Welcome! Start here!  Learn about this course and how it's organized.", "video": ["Start here!", "Welcome! (And Some Course Mechanics)", "Optional: Who I Am / Acknowledgments", "What the Course is About / Initial Motivation", "Recommended Background", "Why Part A, Part B, Part C", "Grading Policy", "Optional: Very High-Level Outline", "About the Course", "Some More Perspective on Recommended Background", "Why are there 3 courses (Part A, Part B, Part C)?", "Grading Policy Details", "Discussion Forums: Why Are You Participating?"], "title": "Introduction and Course-Wide Information (Start Here)"}, {"description": "This module contains two things: (1) The information for the [unusual] software you need to install for Programming Languages Part A. (2) An optional \"fake\" homework that you can turn in for auto-grading and peer assessment to get used to the mechanics of assignment turn-in that we will use throughout the course. You can do this module either before or after watching the first few \"actual course content\" videos in the next module, but you will want to get the software installed soon so you can learn by actively trying out variations on the code in the videos.  You will need to install the software to do the homework.", "video": ["Part A Software Installation and Use: SML and Emacs", "Why Emacs? (Optional)", "Software Installation Introduction", "Emacs installation", "SML installation", "SML Mode installation", "Homework 0 (Auto-Grader)", "Homework 0 Detailed Peer-Assessment Instructions", "Homework 0 (Peer Assessment) "], "title": "Software Installation and Homework 0"}, {"description": "It's time to dive in!  Start with a careful reading of the \"Section 1 Welcome Message\" and go from there.", "video": ["Section 1 Welcome Message", "Section 1 Reading Notes", "Code Files for All Section 1 Videos", "ML Variable Bindings and Expressions", "Rules for Expressions", "The REPL and Errors", "Shadowing", "Functions Informally", "Functions Formally", "Pairs and Other Tuples", "Introducing Lists", "List Functions", "Let Expressions", "Nested Functions", "Let and Efficiency", "Options", "Booleans and Comparison Operations", "Benefits of No Mutation", "Optional: Java Mutation", "Pieces of a Language", "Homework 1 Detailed Guidelines for Peer Assessment", "Hints and Gotchas for Homework 1", "Extra Practice Problems", "Homework 1 (Auto-Grader)", "Homework 1"], "title": "Section 1 and Homework 1"}, {"description": "This section is a particularly rewarding one where a lot of ideas come together to reveal a surprisingly elegant underlying structure in ML.  As usual, start with the welcome reading, dive into the material, and leave plenty of time to approach the programming assignment methodically.", "video": ["Section 2 Welcome Message", "Section 2 Reading Notes", "Code Files for All Section 2 Videos", "Building Compound Types", "Records", "Tuples as Syntactic Sugar", "Datatype Bindings", "Case Expressions", "Useful Datatypes", "Pattern Matching So Far", "Another Expression Example", "Type Synonyms", "Lists and Options are Datatypes", "Polymorphic Datatypes", "Each of Pattern Matching / Truth About Functions", "A Little Type Inference", "Polymorphic and Equality Types", "Nested Patterns", "More Nested Patterns", "Nested Patterns Precisely", "Optional: Function Patterns", "Exceptions", "Tail Recursion", "Accumulators for Tail Recursion", "Perspective on Tail Recursion", "Homework 2 Detailed Guidelines for Peer Assessment", "Hints and Gotchas for Homework 2", "Extra Practice Problems", "Homework 2", "Homework 2"], "title": "Section 2 and Homework 2"}, {"description": "This section is all about higher-order functions -- the feature that gives functional programming much of its expressiveness and elegance -- and its name!  As usual, the first reading below introduces you to the section, but it will make more sense once you dive in to the lectures.  \n\nAlso be sure not to miss the material on course motivation that we have put in a \"lesson\" between the other videos for this week and the homework assignment.  The material is \"optional\" in the sense that it is not needed for the homeworks or next week's exam, but it is still very highly encouraged to better understand why the course (including Parts B and C) covers what it does and, hopefully, will change the way you look at software forever.  ", "video": ["Section 3 Welcome Message", "Section 3 Reading Notes", "Code Files for All Section 3 Videos", "Introduction to First-Class Functions", "Functions as Arguments", "Polymorphic Types and Functions as Arguments", "Anonymous Functions", "Unnecessary Function Wrapping", "Map and Filter", "Generalizing Prior Topics", "Lexical Scope", "Lexical Scope and Higher-Order Functions", "Why Lexical Scope", "Closures and Recomputation", "Fold and More Closures", "Closure Idiom: Combining Functions", "Closure Idiom: Currying", "Partial Application", "Currying Wrapup", "Mutable References", "Closure Idiom: Callbacks", "Standard-Library Documentation", "Optional: Abstract Data Types With Closures", "Optional: Closure Idioms Without Closures", "Optional: Java Without Closures", "Optional: C Without Closures", "Course-Motivation Introduction", "Why Study General PL Concepts?", "Are All PLs the Same?", "Why Functional Languages?", "Why ML, Racket, and Ruby?", "Homework 3 Detailed Guidelines for Peer Assessment", "Hints and Gotchas for Section 3", "Extra Practice Problems", "Homework 3", "Homework 3"], "title": "Section 3 and Homework 3 -- and Course Motivation"}, {"description": "We finish Part A of the course with this module.  As explained in more detail in the welcome message, we discuss type inference, ML's module system, and the fundamental idea in computing of two computations being equivalent.  There is no programming assignment -- instead there is an exam covering all of Part A.  Finally, there is a brief wrap-up video for the end of Part A that also looks ahead to Part B and Part C -- we have put it after the exam, so don't overlook it.", "video": ["Section 4 Welcome Message", "Section 4 Reading Notes", "Code Files for All Section 4 Videos", "Section Introduction", "What is Type Inference", "ML Type Inference", "Type Inference Examples", "Polymorphic Examples", "Optional: The Value Restriction and  Other Type-Inference Challenges", "Mutual Recursion", "Modules for Namespace Management", "Signatures and Hiding Things", "A Module Example", "Signatures for Our Example", "Signature Matching", "An Equivalent Structure", "Another Equivalent Structure", "Different Modules Define Different Types", "Equivalent Functions", "Standard Equivalences", "Equivalence Versus Performance", "Nothing (yet) (explanation)", "Information About the Exam (Required Reading)", "Practice Exam for Part A", "Part A Wrap-Up & Parts B&C Preview", "Exam for Part A"], "title": "Section 4 and Part-A Exam"}]}, {"course_info": "About this course: Programming is an increasingly important skill, whether you aspire to a career in software development, or in other fields. This course is the first in the specialization Introduction to Programming in C, but its lessons extend to any language you might want to learn. This is because programming is fundamentally about figuring out how to solve a class of problems and writing the algorithm, a clear set of steps to solve any problem in its class. This course will introduce you to a powerful problem-solving process—the Seven Steps—which you can use to solve any programming problem. In this course, you will learn how to develop an algorithm, then progress to reading code and understanding how programming concepts relate to algorithms.", "title": "Programming Fundamentals", "rating": "4.7", "level": "Beginner", "created_by": "Duke University", "package_name": null, "target_audience": "Who is this class for: This course is for learners who have an interest in learning how to program, for people with no programming experience or for people with some experience who would like to gain solid fundamentals and a deeper understanding of how to program effectively.", "package_num": null, "teach_by": [{"name": "Andrew D. Hilton", "department": "Electrical and Computer Engineering"}, {"name": "Genevieve M. Lipp", "department": "Electrical and Computer Engineering/Mechanical Engineering"}, {"name": "Anne Bracy", "department": "Computer Science, Cornell University"}], "week_data": [{"description": "This module introduces a powerful process for solving any programming problem—the Seven Steps. You will learn how to approach a programming problem methodically, so you can formulate an algorithm that is specific and correct. You will work through examples with sequences of numbers and graphical patterns to develop the skill of algorithm development.", "video": ["Why You Should Learn to Program", "Overview of the Seven Steps", "Algorithms", "Step 1: Work an Example Yourself", "Step 2: Write Down What You Just Did", "Step 3: Generalize Your Steps", "Step 4: Test Your Algorithm", "Testing an Algorithm for a Numerical Sequence", "Steps 1–4", "A Pattern of Squares", "A Pattern of Squares", "Testing a Pattern of Squares", "Drawing a Rectangle", "Closest Point", "Generalizing Closest Point", "Algorithm Practice", "Next Steps", "Algorithms"], "title": "Introduction"}, {"description": "In this module, you will learn to read code—this means you will be able to execute a piece of code by hand, and clearly illustrate what each statement does and what the state of the program is. Understanding how to read code is the only way to be sure you can write correct code. By the end of this module, you will be able to read and understand code with functions, conditional statements, iteration, and other fundamental techniques.", "video": ["Why You Should Learn to Read Code", "Declaring a Variable", "Assigning a Variable", "Declaring and Assigning a Variable", "Expressions with Common Operators", "Examples of Expressions", "Variables and Expressions", "Using Functions for Abstraction", "Anatomy of a Function", "How to Evaluate a Function", "Execution of Function Calls", "Scope", "Functions", "Printing", "Printing Example", "Printing", "Conditional Statements", "Logical Operators", "If/Else", "Execution of If/Else", "Switch/Case", "Execution of Switch/Case", "Conditional Statements", "Loops for Repetition", "While Loops", "While Loops", "While Loops", "Do/While Loops", "Shorthand", "For Loops", "Equivalent For and While Loops", "Execution of Nested Loops", "Continue and Break", "Execution of Continue", "Loops", "Higher-level Meaning", "Reading Code"], "title": "Reading Code"}, {"description": "Everything is a number to a computer, but types determine the size and interpretation of numbers. In this module you will learn about types beyond integers, both their conceptual representations, and their hardware representations in binary. You will learn basic data types, \"non-number\" types, and complex, custom types, as well as some important caveats, so you will avoid type-related programming mistakes.", "video": ["Introduction to Types", "Converting between Decimal and Binary", "Looking under the Hood", "Decimal, Hex, and Binary", "Basic Data Types", "char", "int", "float and double", "Printing redux", "Types and Formatted Output", "Basic Data Types", "Expressions Have Types", "Type Conversion", "Casting", "Type Conversion", "Overflow and Underflow", "Expressions Have Types", "\"Non-numbers\"", "Strings", "Images", "Sound and Video", "Everything Is a Number", "\"Non-numbers\"", "Structs", "Struct for a Rectangle", "Typedef", "Uses of Typedef", "Enumerated Types", "Enumerated Types", "Complex, Custom Data Types", "Types"], "title": "Types"}, {"description": "You have learned a lot about designing algorithms and the programming concepts that will help you implement them. For this project, you will develop and test your own algorithm for sorting data. This module will reinforce the importance of being specific when you write an algorithm and provide an opportunity for you to do so yourself, for a very common computational task: sorting.", "video": ["Importance of Writing a Specific Algorithm", "Sample PB&J Algorithm with Feedback", "Introduction to Sorting", "Writing a Sorting Algorithm"], "title": "Project"}]}, {"course_info": "About this course: This course concentrates mainly on Javascript based front-end frameworks, and in particular the Angular framework (Currently Ver. 4.x). This course will use Typescript for developing Angular application. Typescript features will be introduced in the context of Angular as part of the exercises. You will also get an introduction to the use of Angular Material and Angular Flex-Layout for responsive UI design. You will be introduced to various aspects of Angular including components, directives and services. You will learn about data binding, Angular router and its use for developing single-page applications. You will also learn about designing both template-driven forms and reactive forms. A quick introduction to Observables, reactive programming and RxJS in the context of Angular is included. You will then learn about Angular support for client-server communication and the use of REST API on the server side. You will use Restangular for communicating with a server supporting the REST API. A quick tour through Angular animation support and Angular testing rounds off the course. You must have either completed the previous course in the specialization on Bootstrap 4, or have a working knowledge of front end web-UI frameworks to be able to navigate this course. Also a good working knowledge of JavaScript, especially ES 5 is strongly recommended.\n\nAt the end of this course you will:\n\n- Be familiar with client-side Javascript frameworks and the Angular framework\n- Be able to implement single page applications in Angular\n- Be able to use various Angular features including directives, components and services\n- Be able to implement a functional front-end web application using Angular\n- Be able to use Angular Material and Angular Flex-Layout for designing responsive Angular applications\n- Be able to use Observables and RxJS in the context of Angular applications", "title": "Front-End JavaScript Frameworks: Angular", "rating": "4.8", "level": "Intermediate", "created_by": "The Hong Kong University of Science and Technology", "package_name": "Full Stack Web and Multiplatform Mobile App Development Specialization ", "target_audience": "Who is this class for: This course is aimed at students with sufficient knowledge of Web technologies like HTML, CSS and JavaScript. A good working knowledge of JavaScript, especially ES 5 is strongly recommended. ", "package_num": "2", "teach_by": [{"name": "Jogesh K. Muppala", "department": "Department of Computer Science and Engineering"}], "week_data": [{"description": "In this module we get a quick introduction to front-end JavaScript frameworks, followed by an introduction to Angular. We will also learn about Angular components and their templates.", "video": ["Welcome to Front-End JavaScript Frameworks: Angular", "How to Use the Learning Resources", "Welcome to Front-End JavaScript Frameworks: Angular: Additional Resources", "Full Stack Web Development: The Big Picture: Objectives and Outcomes", "What is Full-Stack Web Development?", "Full Stack Web Development: Additional Resources", "Setting up Your Development Environment: Git and Node: Objectives and Outcomes", "Setting up your Development Environment", "Exercise (Video): Setting up Git", "Exercise (Instructions): Setting up Git", "Exercise (Video): Basic Git Commands", "Exercise (Instructions): Basic Git Commands", "Exercise (Video): Online Git Repositories", "Exercise (Instructions): Online Git Repositories", "Node.js and NPM", "Exercise (Video): Setting up Node.js and NPM", "Exercise (Instructions): Setting up Node.js and NPM", "Exercise (Video): Basics of Node.js and NPM", "Exercise (Instructions): Basics of Node.js and NPM", "Setting up your Development Environment: Git and Node: Additional Resources", "Introduction to Angular: Objectives and Outcomes", "Front-end JavaScript Frameworks Overview", "Introduction to Angular", "Exercise (Video): Getting Started with Angular", "Exercise (Instructions): Getting Started with Angular", "Angular Application Architecture Overview", "Exercise (Video): Configuring your Angular Application", "Exercise (Instructions): Configuring your Angular Application", "Introduction to Angular: Additional Resources", "Angular Components: Objectives and Outcomes", "Angular Components", "Exercise (Video): Angular Components Part 1", "Exercise (Instructions): Angular Components Part 1", "Structural Directives", "Exercise (Video): Angular Components Part 2", "Exercise (Instructions): Angular Components Part 2", "Angular Components: Additional Resources", "Assignment 1 Requirements (Video): Angular Components", "Assignment 1: Angular Components: Additional Resources", "Ideation: Objectives and Outcomes", "Ideation Report Template", "Ideation: Additional Resources", "Angular Components", "Ideation"], "title": "Front-End JavaScript Frameworks Overview: Angular"}, {"description": "In this week, you learn about data binding in Angular. You will learn how to design basic services. You will learn about Angular router and its use in designing single page applications. You will also learn about single page applications and use Angular Router to design single page applications.", "video": ["Data Binding: Objectives and Outcomes", "Data Binding", "Exercise (Video): Data Binding", "Exercise (Instructions): Data Binding", "Data Binding: Additional Resources", "Angular Service Basics: Objectives and Outcomes", "MVC and MVVM", "Angular Services", "Dependency Injection", "Exercise (Video): Angular Service Basics", "Exercise (Instructions): Angular Service Basics", "Angular Service Basics: Additional Resources", "Angular Routing: Objectives and Outcomes", "Exercise (Video): Header and Footer", "Exercise (Instructions): Header and Footer", "Angular Routing Basics", "Exercise (Video): Angular Routing Basics", "Exercise (Instructions): Angular Routing Basics", "Angular Routing: Additional Resources", "Single Page Applications: Objectives and Outcomes", "Single Page Applications", "Exercise (Video): Single Page Applications Part 1", "Exercise (Instructions): Single Page Applications Part 1", "Angular Router: Parameters", "Exercise (Video): Single Page Applications Part 2", "Exercise (Instructions): Single Page Applications Part 2", "Single Page Applications: Additional Resources", "Assignment 2 Requirements (Video): Angular Services, Routing and Single Page Applications", "Assignment 2: Angular Services, Routing and Single Page Applications: Additional Resources", "UI Design and Prototyping: Objectives and Outcomes", "UI Design and Prototyping Report Template", "UI Design and Prototyping: Additional Resources", "Angular Services, Routing and Single Page Applications", "UI Design and Prototyping"], "title": "Angular Services, Routing and Single Page Applications"}, {"description": "In this module we study Angular support for forms and form validation. Both template-driven forms and reactive forms will be introduced. You will also learn about Promises. Then you will learn briefly about reactive programming, RxJs and its use in Angular.", "video": ["Angular Template-driven Forms: Objectives and Outcomes", "Angular Template-driven Forms", "Exercise (Video): Angular Template-driven Forms Part 1", "Exercise (Instructions): Angular Template-driven Forms Part 1", "Angular Template-driven Form Validation", "Exercise (Video): Angular Template-driven Forms Part 2", "Exercise (Instructions): Angular Template-driven Forms Part 2", "Angular Template-driven Forms: Additional Resources", "Angular Reactive Forms: Objectives and Outcomes", "Angular Reactive Forms", "Exercise (Video): Angular Reactive Forms Part 1", "Exercise (Instructions): Angular Reactive Forms Part 1", "Angular Reactive Form Validation", "Exercise (Video): Angular Reactive Forms Part 2", "Exercise (Instructions): Angular Reactive Forms Part 2", "Angular Reactive Forms: Additional Resources", "Angular and Promise: Objectives and Outcomes", "Promises", "Exercise (Video): Angular and Promise Part 1", "Exercise (Instructions): Angular and Promise Part 1", "Exercise (Video): Angular and Promise Part 2", "Exercise (Instructions): Angular and Promise Part 2", "Angular and Promise: Additional Resources", "Angular and RxJS: Objectives and Outcomes", "Angular and RxJS", "Exercise (Video): Angular and RxJS Part 1", "Exercise (Instructions): Angular and RxJS Part 1", "Exercise (Video): Angular and RxJS Part 2", "Exercise (Instructions): Angular and RxJS Part 2", "Exercise (Video): Angular Reactive Forms Part 3", "Exercise (Instructions): Angular Reactive Forms Part 3", "Angular and RxJS: Additional Resources", "Assignment 3 Requirements (Video): Single Page Applications and Angular Forms", "Assignment 3: Single Page Applications and Angular Forms: Additional Resources", "Angular Forms and Reactive Programming"], "title": "Angular Forms, Angular and Reactive JavaScript"}, {"description": "In this module you will explore client-server communication using both Angular HTTP module and the REST API. You will get a brief introduction to animation support in Angular and create a custom attribute directive. You will also learn about testing, building and deploying Angular applications.", "video": ["Client-Server Communication: Objectives and Outcomes", "Networking Essentials", "Exercise (Video): Setting up a Server using json-server", "Exercise (Instructions): Setting up a Server using json-server", "Client-Server Communication: Additional Resources", "Angular HTTP Client: Objectives and Outcomes", "Angular HTTP Client", "Exercise (Video): Angular HTTP Client", "Exercise (Instructions): Angular HTTP Client", "Exercise (Video): Angular HTTP Client: Error Handling", "Exercise (Instructions): Angular HTTP Client: Error Handling", "Angular HTTP Client: Additional Resources", "Angular and REST: Objectives and Outcomes", "Brief Representational State Transfer (REST)", "Restangular", "Exercise (Video): Angular and REST", "Exercise (Instructions): Angular and REST", "Exercise (Video): Angular and REST: Saving Changes to Server", "Exercise (Instructions): Angular and REST: Saving Changes to Server", "Angular and REST: Additional Resources", "Animation and Directives: Objectives and Outcomes", "Attribute Directives", "Exercise (Video): Custom Attribute Directives", "Exercise (Instructions): Custom Attribute Directives", "Angular Animations", "Exercise (Video): Angular Animations Part 1", "Exercise (Instructions): Angular Animations Part 1", "Exercise (Video): Angular Animations Part 2", "Exercise (Instructions): Angular Animations Part 2", "Animation and Directives: Additional Resources", "Testing Angular Applications: Objectives and Outcomes", "Angular Testing", "Exercise (Video): Angular Testing", "Exercise (Instructions): Angular Testing", "End-to-End Testing Angular Applications", "Exercise (Video): End-to-End Testing Angular Applications", "Exercise (Instructions): End-to-End Testing Angular Applications", "Testing Angular Applications: Additional Resources", "Building and Deployment: Objectives and Outcomes", "Introduction to Webpack", "Exercise (Video): Building and Deploying the Angular Application", "Exercise (Instructions): Building and Deploying the Angular Application", "Building and Deployment: Additional Resources", "Assignment 4 Requirements (Video): Client-Server Communication", "Assignment 4: Client-Server Communication: Additional Resources", "Conclusions", "Conclusions: Additional Resources", "Project Implementation: Objectives and Outcomes", "Final Report Template", "Client-Server Communication", "Project Implementation and Final Report"], "title": "Client-Server Communication"}]}, {"course_info": "About this course: Have you ever wished you knew how to program, but had no idea where to start from? This course will teach you how to program in Scratch, an easy to use visual programming language. More importantly, it will introduce you to the fundamental principles of computing and it will help you think like a software engineer.", "title": "Code Yourself! An Introduction to Programming", "rating": "4.7", "level": null, "created_by": "The University of Edinburgh, Universidad ORT Uruguay", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Areti Manataki", "department": "School of Informatics"}, {"name": "Inés Friss de Kereki", "department": "Engineering School, Universidad ORT Uruguay"}], "week_data": [{"description": "In this unit you’ll create your very first computer program! You’ll be introduced to basic programming concepts and you’ll familiarise yourself with Scratch. ", "video": ["Welcome to Code Yourself!", "About the Course", "Syllabus", "Course Logistics", "How to use the Discussion Forums", "Course Team", "Copyright", "Resources for Unit 1", "Algorithms and Sequence", "Representation of Algorithms", "Precision and Assumptions", "Introduction to Scratch", "Options for Using Scratch", "Programming in Scratch", "Selection ", "Selection in Scratch", "Conditions within Selection", "Iteration: Infinite Loops", "Balloon Party! Changing the Looks of our Sprites", "Modifying Programs in Scratch ", "Blow the Clouds Away! ", "A Movie with Two Characters", "Summary", "Interview with an Informatics Researcher", "Interview with an Audiovisual Producer (Spanish with English subtitles)", "Quiz 1"], "title": "Your First Computer Program"}, {"description": "In this unit you’ll keep working with control structures, you’ll find out how to use events in your programs and how to incorporate visual and sound effects in Scratch. You’ll also start thinking about the requirements and the design of your program. \n", "video": ["Introduction", "Resources for Unit 2", "Count-controlled Loops", "Condition-controlled Loops", "Recreating a Tune ", "Music Video", "Drawing Squares ", "Birthday Card - Butterfly Behaviour", "Birthday Card - Cake Behaviour ", "Birthday Card - Extend with If-then-else ", "Birthday Card - Extend with Sounds", "Face Effects with Event-driven Programming ", "Software Design ", "Cut the Fruit! ", "Software Requirements", "Helicopter Game Design", "Helicopter Game Implementation", "Summary", "Interview with a Software Engineer (Spanish with English subtitles)", "Interview with an Architect", "Quiz 2"], "title": "Code Gone Loopy!"}, {"description": "In this unit you’ll have a go at modifying and extending existing games to create new versions. You’ll also learn about software engineering practices for testing and documenting your programs. ", "video": ["Introduction", "Resources for Unit 3", "Helicopter Game Extension with Variables", "Analysing the Pong Game", "Modifying Pong with Complex Conditions", "Modifying Pong into Pizza Pong ", "Modifying Pong into a Penalty Shootout Game", "Guess the Number! ", "A Flower Garden with Nested Loops", "Summary ", "How-to guide for peer-reviewed projects", "Interview on Football-playing Robots", "Interview with a Biotechnologist (Spanish with English subtitles)", "Quiz 3", "Project 1"], "title": "Remixing Games"}, {"description": "In this unit you’ll be introduced to procedures and cloning in Scratch, and you’ll apply these ideas to reuse your code. ", "video": ["Introduction", "Resources for Unit 4", "Catch the Mouse with Procedures", "Generalising a Program for Drawing Squares", "Staircase", "Hunting Ghosts with Cloning", "Fireworks", "A Modular Program for Bursting Bubbles", "Wave", "Summary", "Interview on Entrepreneurship and Programming (Spanish with English subtitles)", "Interview with a Jewelry Designer", "Quiz 4"], "title": "Reusing Your Code"}, {"description": "In this unit you’ll follow all the steps of software development to create a fun computer game. You’ll also learn about message broadcasting and concurrency. ", "video": ["Introduction", "Resources for Unit 5", "Zombie Game: Requirements and Interface Design", "Zombie Game: Code Design", "Zombie Game: Implementation of the Interface, Broom and Zombie", "Zombie Game: Implementation of the Zombie Clones & Message Broadcasting", "Zombie Game: Implementation of the Backdrop and Flower", "Zombie Game: Implementation of Invasion and Extensions", "Sharing your Projects in Scratch & Links with Python", "Summary", "Interview with a Computer Science Student", "Interview with a Game Developer (Spanish with English subtitles)", "Quiz 5", "Project 2"], "title": "Think Like a Software Engineer"}]}, {"course_info": "About this course: The explosive growth of the “Internet of Things” is changing our world and the rapid drop in price for typical IoT components is allowing people to innovate new designs and products at home. In this first class in the specialization you will learn the importance of IoT in society, the current components of typical IoT devices and trends for the future. IoT design considerations, constraints and interfacing between the physical world and your device will also be covered. You will also learn how to make design trade-offs between hardware and software. We'll also cover key components of networking to ensure that students understand how to connect their device to the Internet. Please note that this course does not include discussion forums.\n\nUpon completing this course, you will be able to:\n1.       Define the term “Internet of Things”\n2.       State the technological trends which have led to IoT\n3.       Describe the impact of IoT on society\n4.       Define what an embedded system is in terms of its interface\n5.       Enumerate and describe the components of an embedded system\n6.       Describe the interactions of embedded systems with the physical world\n7.       Name the core hardware components most commonly used in IoT devices\n8.       Describe the interaction between software and hardware in an IoT device\n9.       Describe the role of an operating system to support software in an IoT device\n10.     Explain the use of networking and basic networking hardware\n11.     Describe the structure of the Internet\n12.     Describe the meaning of a “network protocol”\n13.     Explain MANETs and their relation to IoT", "title": "Introduction to the Internet of Things and Embedded Systems", "rating": "4.5", "level": null, "created_by": "University of California, Irvine", "package_name": "An Introduction to Programming the Internet of Things (IOT) Specialization ", "target_audience": null, "package_num": "1", "teach_by": [{"name": "Ian Harris", "department": "Department of Computer Science"}], "week_data": [{"description": "The Internet of Things (IoT) is a popular buzzword right now, but unlike many fads which have come and gone, the Internet of Things describes an important trend which is having lasting effects on society at large. The term itself, “Internet of Things”, is used to mean a variety of ideas, depending on the motivation and background of the speaker. This course will start by providing a definition of the term. We will talk about how various trends have enabled the Internet of Things, and how it changes the way design is performed. We will also discuss some of the ramifications that IoT is having on society today.", "video": ["Pre-Course Survey", "Prof. Harris' Introduction", "Course Overview", "Module 1 Objectives", "Module 1 Reading", "Module 1 Introduction", "Prof. Harris Takes You on a Tour of His Lab", "Lecture 1.1: IoT Example: The Refrigerator", "Lecture 1.2: IoT Devices", "Lecture 1.3: IoT Devices vs. Computers", "Lecture 2.1: Trends in the Adoption of IoT", "Lecture 2.2: IoT Is Powerful and Pervasive", "Lecture 3.1: Societal Benefits of IoT", "Lecture 3.2: Risks, Privacy, and Security", "Module 1 Quiz", "Module 1 Peer Review: Identify and Analyze a Device"], "title": "What Is the Internet of Things (IoT)?"}, {"description": "In Module 1, we introduced the concept of the Internet of Things at a high level, defining the term and outlining its implications. In this module we explore some of the details involved in the design and implementation of IoT devices. Unlike traditional computer-based systems, IoT devices are “embedded” within other devices in order to provide enhanced functionality without exposing the user to the complexities of a computer. The users interact with the device in a natural way, similar to their interactions with any other objects in the world. In this way, an embedded system has an interface that conforms to the expectations and needs of the users. Establishing a natural interface requires that the embedded system interface with the physical world directly through sensors, which read the state of the world, and actuators, which change the state of the world. In this module we will discuss the structure of embedded systems and describe these interactions with the physical world.", "video": ["Module 2 Objectives", "Module 2 Reading", "Module 2 Introduction", "Lecture 1.1: What Are Embedded Systems?", "Lecture 1.2: More on Embedded Systems", "Lecture 1.3: Generic Embedded Systems Structure", "Lecture 2.1: Components of Embedded Systems", "Lecture 2.2: More on Components of Embedded Systems", "Lecture 2.3: Sensors and Actuators (in the Lab)", "Lecture 3.1: Analog/Digital Conversion", "Lecture 3.2: Basic Equipment", "Module 2 Quiz", "Module 2 Peer Review"], "title": "Embedded Systems"}, {"description": "IoT devices are implemented using both hardware and software components. Dedicated hardware components are used to implement the interface with the physical world, and to perform tasks which are more computationally complex. Microcontrollers are used to execute software that interprets inputs and controls the system. This module discusses the roles of both the hardware and software components in the system. The functions of common hardware components are described and the interface between the software and hardware through the microcontroller is explained. IoT devices often use an operating system to support the interaction between the software and the microcontroller. We will define the role of an operating system in an IoT device and how an IoT operating system differs from a standard one.", "video": ["Module 3 Objectives", "Module 3 Readings", "Module 3 Introduction", "Lecture 1.1: Hardware and Software", "Lecture 1.2: Integrated Circuits", "Lecture 1.3: Microcontroller Properties", "Lecture 2.1: Microcontroller Components", "Lecture 2.2: Compilation and Interpretation", "Lecture 2.3: Python vs. C/C++", "Lecture 3.1: Operating Systems", "Lecture 3.2: Task Support", "Module 3 Quiz", "Module 3 Peer Review"], "title": "Hardware and Software"}, {"description": "An important aspect of the Internet of Things is that devices are networked in some way, and often connected to the Internet. Networking enables devices to communicate with other IoT devices and larger cloud-based servers. IoT devices can often be thought of as small parts of a much larger collective system which includes large servers based in the cloud. This module will introduce the basics of networking and the Internet protocol in particular. Eventually, most IoT devices are connected to the Internet, so understanding the protocols associated with the Internet is important to the design of IoT devices. We will also introduce the concept of a Mobile Ad Hoc Network, or MANET, which describes small, local networks of IoT devices.", "video": ["Module 4 Objectives", "Module 4 Readings", "Module 4 Introduction", "Lecture 1.1: Why is Networking Needed?", "Lecture 1.2: WAN Structure", "Lecture 1.3: Networking Components (Lab Tour)", "Lecture 2.1: Internet Structure", "Lecture 2.2: Protocols", "Lecture 2.3: Protocol Stack", "Lecture 3.1: TCP/IP Application Layer", "Lecture 3.2: MANETs", "Lecture 3.3: Packet Capture Demo", "End-of-Course Survey", "Module 4 Quiz", "Module 4 Peer Review"], "title": "Networking and the Internet"}]}, {"course_info": "About this course: Not so long ago, the job of product manager was about assessing market data, creating requirements, and managing the hand-off to sales/marketing. Maybe you’d talk to a customer somewhere in there and they’d tell you what features they wanted. But companies that manage product that way are dying.\n\nBeing a product person today is a new game, and product managers are at the center of it. Today, particularly if your product is mostly digital, you might update it several times a day. Massive troves of data are available for making decisions and, at the same time, deep insights into customer motivation and experience are more important than ever. The job of the modern product manager is to charter a direction and create a successful working environment for all the actors involved in product success.  It’s not a simple job or an easy job, but it is a meaningful job where you’ll be learning all the time. \n\nThis course will help you along your learning journey and prepare you with the skills and perspective you need to:\n\nCreate the actionable focus to successfully manage your product (week 1)\nFocus your work using modern product management methods (week 2)\nManage new products and explore new product ideas (week 3)\nManage and amplify existing products (week 4)\n\nThis course is ideal for current product or general  managers interested in today's modern product management methods.\n\nThis course was developed with the generous support of the Batten Institute at UVA’s Darden School of Business. The Batten Institute’s mission is to improve the world through entrepreneurship and innovation: www.batteninstitute.org.", "title": "Digital Product Management: Modern Fundamentals", "rating": "4.7", "level": "Beginner", "created_by": "University of Virginia", "package_name": null, "target_audience": "Who is this class for: This course is designed for anyone interested in becoming a product manager, including current project or product managers who want to learn modern fundamentals.", "package_num": null, "teach_by": [{"name": "Alex Cowan", "department": "Darden School of Business"}], "week_data": [{"description": "As a product manager, you and your team will always have more ideas and more requests than you can possibly manage. Making matters still more complicated, part of your job is to develop and then ‘sell’ a particular view of what should happen with your product to diverse stakeholders (engineering, marketing, etc.). How do you do it? Success requires an actionable, testable focus. The successful product manager identifies vivid, testable customer outcomes and creates focus around them. This week we’ll show you how to interface effectively with all your stakeholders to create that actionable focus.", "video": ["Tomorrow's Product Manager", "Course Overview & Requirements", "Get to know your classmates", "You, the Product Manager", "Why Is a Product Never a Product?", "You and Your Customer", "Practice Quiz on the #Winning PM", "You and Your Design Team", "You and Your Development Team", "Product Manager vs. Product Owner", "Greg Cohen on PM vs. PO?", "What Is Data Science?", "You and Your Data Science Team", "Meet Enable Quiz, Our Startup Company Example", "You and Your Consulting and/or Support Team", "Focal Tool: The Customer Journey", "Nastia Root on Creating a Strong Interface with Support", "You and Your Sales and Marketing Team", "You and Your Finance/Accounting and Legal Teams", "You and Your Project Manager", "You and Your Management Team", "Issues interfacing with various teams?", "Practice Quiz on Many Areas, One Focus", "Week 1 Takeaways", "Week 1 Final Quiz"], "title": "Achieving Focus and #Winning"}, {"description": "You’ve probably heard that the days of ‘build it and they will come’ are over. But what exactly should you be doing instead? There’s no shortage of material out there on how to be innovative--but you only have so much time. This week we’ll step through the method’s today’s most successful product managers are using and give you tips to “sell” those methods to your stakeholders. We’ll also show you how to analyze growth, engagement and monetization using qualitative and quantitative methods. You’ll finish the week with an understanding of which methods to apply when and hear from practitioners who are using these methods to make breakthrough products. ", "video": ["Module intro: Ready for Week 2", "What Kind of PM Are You?", "Methods and PMs", "Agile and Product Management", "Design Thinking and the Product Manager", "Lean Startup and the Product Manager", "Managing Habits: Trigger and Action", "Managing Habits: Variable Reward and Investment", "Nir Eyal on Managing Habits", "Practice Quiz on Solving the Right Problem", "User Story Mapping for Product Managers", "Prototyping for Product Managers", "Usability Testing for Product Managers", "Practice Quiz on Creating the Right Solution", "Collaborating with Enterprise Customers--Tips 1-4", "Collaborating with Enterprise Customers--Tips 5-9", "David Bland on Avoiding the Product Death Cycle", "Shaping Your Funnel Part 1", "Shaping Your Funnel Part 2", "Managing a Product with Hardware", "Making Time to Do Things Right", "Practice Quiz on Applications in Product Management", "What did you learn from this week's guest speakers?", "Week 2 Takeaways", "Week 2 Final Quiz"], "title": "Using Today's Product Management Methods"}, {"description": "Something on the order of 9 out of 10 new products fail. Those sound like daunting odds, but through disciplined exploration an effective PM knows how to make even the improbable probable. This week we’ll show you how to apply your understanding of modern PM methods to exploring new product ideas. \n\nWe’ll step through customer discovery, idea testing/validation, early development, and business model design. By the end you’ll have a durable process you can both execute and communicate to your team. ", "video": ["Ready for Week 3?", "Learning vs. Scaling", "The Importance of Good Enough: \"Cooped Up\" MVPs", "The Importance of Good Enough: \"Greener Air\" MVPs", "Non-Titular Product Managers", "David Chait on Non-Titular PMs", "Practice Quiz on Learning vs. Scaling", "Horizons of Growth", "Corporate Innovation Pipeline", "Creating a Healthy Innovation Pipeline", "David Bland on New Ventures Inside the Corporation", "Practice Quiz on Innovating in the Corporation", "Business Model Design I: Proposition Design", "Business Model Design II: Customer Journeys", "Practice Quiz: From Proposition to Business Model", "Week 3 Takeaways", "Week 3 Final Quiz: Exploring a New Product Idea"], "title": "Exploring a New Product Idea"}, {"description": "If you want a product that does more than make a big splash, you’ll need to apply what you’ve learned here every week, every sprint to keep that product fresh and relevant. It’s not hard to let a great product get sidetracked and become irrelevant to its users--this happens all the time. Some figures show the portion of features on successful products that are regularly used to be well under 50%. Yikes! In this week, we’ll look at how successful product managers keep their products fresh and focused on valuable outcomes for their users. You’ll learn how to put a focused, sustainable, program in place to keep your product competitive. \n", "video": ["Ready for Week 4?", "Identifying Business Model Types", "Business Model Design III: Delivery and Execution", "Tamara Carleton on Strategic Foresight", "The Trouble with New Features", "The Importance of Good Enough: Seedling Features", "Actionable Analytics", "Eric Qi Dong on Disciplined Analytics for the Product Manager", "Kiran Kadambi on Structuring Problems in Product Management", "Applying Data Science", "Andrew Kritzer on Data Science for the MBA", "Jim Rose on Continuous Integration and Delivery", "Jim Rose on Monolithic Architectures and Microservices", "Practice Quiz: Focused Tuning and Testing", "Managing a Channel or Modality", "Nastia Root on Being a Growth PM", "It's Not a Meeting l", "It's Not a Meeting II", "Roadmap?", "Practice Quiz: Driving Growth through Focus", "Course and week close: Let's Not Make This Good-Bye", "Week 4 Final Quiz"], "title": "Amplifying an Existing Product"}]}, {"course_info": "About this course: This course deals with all things server-side. We base the entire course around the NodeJS platform. We start with a brief overview of the Web protocols: HTTP and HTTPS. We examine NodeJS and NodeJS modules: Express for building web servers. On the database side, we review basic CRUD operations, NoSQL databases, in particular MongoDB and Mongoose for accessing MongoDB from NodeJS. We examine the REST concepts and building a RESTful API. We touch upon authentication and security. Finally we review backend as a service (BaaS) approaches, including mobile BaaS, both open-source and commercial BaaS services.\n\nAt the end of this course, you will be able to:\n\n- Demonstrate an understanding of server-side concepts, CRUD and REST\n- Build and configure a backend server using NodeJS framework\n- Build a RESTful API for the front-end to access backend services", "title": "Server-side Development with NodeJS, Express and MongoDB", "rating": "5.0", "level": "Intermediate", "created_by": "The Hong Kong University of Science and Technology", "package_name": "Full Stack Web and Multiplatform Mobile App Development Specialization ", "target_audience": "Who is this class for: This course is aimed at students with sufficient knowledge of Web technologies like HTML, CSS and JavaScript. A good working knowledge of JavaScript, especially ES 5 is strongly recommended. ", "package_num": "5", "teach_by": [{"name": "Jogesh K. Muppala", "department": "Department of Computer Science and Engineering"}], "week_data": [{"description": "In this module you will be introduced to Node, Node modules and the Node HTTP server. You will learn about the Express framework and how to set up a REST API using Express.", "video": ["Welcome to Server-Side Development with NodeJS, Express and MongoDB", "How to Use the Learning Resources", "Welcome to Server-Side Development with NodeJS, Express and MongoDB: Additional Resources", "Full Stack Web Development: The Big Picture: Objectives and Outcomes", "What is Full-Stack Web Development?", "Full Stack Web Development: Additional Resources", "Setting up Your Development Environment: Git: Objectives and Outcomes", "Setting up your Development Environment", "Exercise (Video): Setting up Git", "Exercise (Instructions): Setting up Git", "Exercise (Video): Basic Git Commands", "Exercise (Instructions): Basic Git Commands", "Exercise (Video): Online Git Repositories", "Exercise (Instructions): Online Git Repositories", "Setting up your Development Environment: Git: Additional Resources", "Introduction to Node.js and NPM: Objectives and Outcomes", "Node.js and NPM", "Exercise (Video): Setting up Node.js and NPM", "Exercise (Instructions): Setting up Node.js and NPM", "Introduction to Node.js and NPM: Additional Resources", "Node Modules: Objectives and Outcomes", "Node Modules", "Exercise (Video): Understanding Node Modules", "Exercise (Instructions): Understanding Node Modules", "Node Modules: Callbacks and Error Handling", "Exercise (Video):Node Modules: Callbacks and Error Handling", "Exercise (Instructions):Node Modules: Callbacks and Error Handling", "Node Modules: Additional Resources", "Node and HTTP: Objectives and Outcomes", "Networking Essentials", "Node and the HTTP Module", "Exercise (Video): Node and the HTTP Module", "Exercise (Instructions): Node and the HTTP Module", "Node and HTTP: Additional Resources", "Introduction to Express: Objectives and Outcomes", "Introduction to Express", "Exercise (Video): Introduction to Express", "Exercise (Instructions): Introduction to Express", "Brief Representational State Transfer (REST)", "Express Router", "Exercise (Video): Express Router", "Exercise (Instructions): Express Router", "Introduction to Express: Additional Resources", "Assignment 1 Requirements (Video): Node Modules, Express and REST API", "Assignment 1: Node Modules, Express and REST API: Additional Resources", "Ideation: Objectives and Outcomes", "Ideation Report Template", "Ideation: Additional Resources", "Assignment 1: Node Modules, Express and REST API", "Ideation"], "title": "Introduction to Server-side Development"}, {"description": "This module looks in detail at data storage with MongoDB, the popular NoSQL database. You will learn first about Express generator for scaffolding an Express application. Then you will learn about MongoDB. You will learn how to interact with MongoDB from a Node application. Then you will learn the Mongoose ODM to create schemas and models, and interact with MongoDB server.", "video": ["Express Generator: Objectives and Outcomes", "Express Generator", "Exercise (Video): Express Generator", "Exercise (Instructions): Express Generator", "Express Generator: Additional Resources", "Introduction to MongoDB: Objectives and Outcomes", "Introduction to MongoDB", "Exercise (Video): Introduction to MongoDB", "Exercise (Instructions): Introduction to MongoDB", "Introduction to MongoDB: Additional Resources", "Node and MongoDB: Objectives and Outcomes", "Node and MongoDB", "Exercise (Video): Node and MongoDB Part 1", "Exercise (Instructions): Node and MongoDB Part 1", "Exercise (Video): Node and MongoDB Part 2", "Exercise (Instructions): Node and MongoDB Part 2", "Callback Hell and Promises", "Exercise (Video): Callback Hell and Promises", "Exercise (Instructions): Callback Hell and Promises", "Node and MongoDB: Additional Resources", "Mongoose ODM: Objectives and Outcomes", "Mongoose ODM", "Exercise (Video): Mongoose ODM Part 1", "Exercise (Instructions): Mongoose ODM Part 1", "Exercise (Video): Mongoose ODM Part 2", "Exercise (Instructions): Mongoose ODM Part 2", "Mongoose ODM: Additional Resources", "REST API with Express, MongoDB and Mongoose: Objectives and Outcomes", "REST API with Express, MongoDB and Mongoose", "Exercise (Video): REST API with Express, MongoDB and Mongoose Part 1", "Exercise (Instructions): REST API with Express, MongoDB and Mongoose Part 1", "Exercise (Video): REST API with Express, MongoDB and Mongoose Part 2", "Exercise (Instructions): REST API with Express, MongoDB and Mongoose Part 2", "REST API with Express, MongoDB and Mongoose: Additional Resources", "Assignment 2 Requirements (Video): MongoDB: Requirements", "Assignment 2: MongoDB: Additional Resources", "Architecture Design and Software Structure: Objectives and Outcomes", "Architecture Design and Software Structure Report", "Architecture Design and Software Structure: Additional Resources", "Assignment 2: MongoDB", "Architecture Design and Software Structure Report"], "title": "Data, Data, Where art Thou Data?"}, {"description": "This module is dedicated to user authentication. We first develop a full-fledged REST API server with Express, Mongo and Mongoose. Thereafter we examine basic authentication and session-based authentication briefly. We then develop token-based authentication with the support of JSON web tokens and the Passport module.", "video": ["Basic Authentication: Objectives and Outcomes", "Basic Authentication", "Exercise (Video): Basic Authentication", "Exercise (Instructions): Basic Authentication", "Basic Authentication: Additional Resources", "Cookies, Tea and err ... Express Sessions: Objectives and Outcomes", "Cookies, Tea and err ... Express Sessions", "Exercise (Video): Using Cookies", "Exercise (Instructions): Using Cookies", "Exercise (Video): Express Sessions Part 1", "Exercise (Instructions): Express Sessions Part 1", "Exercise (Video): Express Sessions Part 2", "Exercise (Instructions): Express Sessions Part 2", "Cookies, Tea and err . . . Express Sessions: Additional Resources", "User Authentication with Passport: Objectives and Outcomes", "Passport", "Exercise (Video): User Authentication with Passport", "Exercise (Instructions): User Authentication with Passport", "Token Based Authentication", "Exercise (Video): User Authentication with Passport and JSON Web Token", "Exercise (Instructions): User Authentication with Passport and JSON Web Token", "User Authentication with Passport: Additional Resources", "Mongoose Population: Objectives and Outcomes", "Mongoose Population", "Exercise (Video): Mongoose Population", "Exercise (Instructions): Mongoose Population", "Mongoose Population: Additional Resources", "Assignment 3 Requirements (Video): User Authentication", "Assignment 3: Additional Resources", "User Authentication"], "title": "Halt! Who goes there?"}, {"description": "In this module we learn about Mongoose population, a way of cross-referencing documents and populating the documents from other documents. We then review secure communication using HTTPS. We look at Backend as a Service (BaaS) and take a brief look at Loopback.", "video": ["HTTPS and Secure Communication: Objectives and Outcomes", "HTTPS and Secure Communication", "Exercise (Video): HTTPS and Secure Communication", "Exercise (Instructions): HTTPS and Secure Communication", "HTTPS and Secure Communication: Additional Resources", "Uploading Files: Objectives and Outcomes", "Uploading Files", "Exercise (Video): Uploading Files", "Exercise (Instructions): Uploading Files", "Uploading Files: Additional Resources", "Cross-Origin Resource Sharing: Objectives and Outcomes", "Cross-Origin Resource Sharing", "Exercise (Video): Cross-Origin Resource Sharing", "Exercise (Instructions): Cross-Origin Resource Sharing", "Cross-Origin Resource Sharing: Additional Resources", "OAuth and User Authentication: Objectives and Outcomes", "OAuth and User Authentication", "Exercise (Video): Using OAuth with Passport and Facebook", "Exercise (Instructions): Using OAuth with Passport and Facebook", "OAuth and User Authentication: Additional Resources", "Assignment 4 Requirements (Video): Backend as a Service", "Assignment 4: Additional Resources", "ConFusion: Integrating the Client and Server: Objectives and Outcomes", "ConFusion: Integrating the Client and Server", "Exercise (Video): Integrating the Client and Server: Updating the REST Server", "Exercise (Instructions): Integrating the Client and Server: Updating the REST Server", "Exercise (Video): Integrating the Client and Server: The Angular Client", "Exercise (Instructions): Integrating the Client and Server: The Angular Client", "ConFusion: Integrating the Client and Server: Additional Resources", "Backend as a Service: Objectives and Outcomes", "Backend as a Service", "Exercise (Video): Firebase", "Exercise (Video): Angular Application using Firebase as BaaS", "Exercise (Instructions): Angular Application using Firebase as BaaS", "Backend as a Service (BaaS): Firebase: Additional Resources", "Backend as a Service: Loopback: Objectives and Outcomes", "Exercise (Video): Getting Started with Loopback", "Exercise (Instructions): Getting Started with Loopback", "Exercise (Video): Loopback Data Sources and Access Control", "Exercise (Instructions): Loopback Data Sources and Access Control", "Exercise (Video): Loopback Relations", "Exercise (Instructions): Loopback Relations", "Exercise (Video): Angular Application using Loopback as BaaS", "Exercise (Instructions): Angular Application using Loopback as BaaS", "Backend as a Service: Loopback: Additional Resources", "Project Implementation: Objectives and Outcomes", "Final Report Template", "Backend as a Service", "Project Implementation and Final Report"], "title": "Backend as a Service (BaaS)"}]}, {"course_info": "About this course: This course will introduce the learner to network analysis  through the NetworkX library. The course begins with an understanding of what network analysis is  and motivations for why we might model phenomena as networks. The second week introduces the concept of connectivity and network robustness.. The third week will explore ways of measuring the importance or centrality of a node in a network. The final week will explore the evolution of networks over time and cover models of network generation and the link prediction problem.\n\nThis course should be taken after: Introduction to Data Science in Python, Applied Plotting, Charting & Data Representation in Python, and Applied Machine Learning in Python.", "title": "Applied Social Network Analysis in Python", "rating": "4.6", "level": "Intermediate", "created_by": "University of Michigan", "package_name": "Applied Data Science with Python Specialization ", "target_audience": "Who is this class for: This course is part of “Applied Data Science with Python“ and is intended for learners who have basic python or programming background, and want to apply statistics, machine learning, information visualization, social network analysis, and text analysis techniques to gain new insight into data. Only minimal statistics background is expected, and the first course in the specialization contains a refresh of these basic concepts. There are no geographic restrictions. Learners with a formal training in Computer Science but without formal training in data science will still find the skills they acquire in these courses valuable in their studies and careers.", "package_num": "5", "teach_by": [{"name": "Daniel Romero", "department": "School of Information"}], "week_data": [{"description": "Module One introduces you to different types of networks in the real world and why we study them. You'll learn about the basic elements of networks, as well as different types of networks. You'll also learn how to represent and manipulate networked data using the NetworkX library. The assignment will give you an opportunity to use NetworkX to analyze a networked dataset of employees in a small company.", "video": ["Course Syllabus", "Help us learn more about you!", "Networks: Definition and Why We Study Them", "Network Definition and Vocabulary", "Node and Edge Attributes", "Bipartite Graphs", "Notice for Auditing Learners: Assignment Submission", "Loading Graphs in NetworkX", "TA Demonstration: Loading Graphs in NetworkX", "Assignment 1", "Module 1 Quiz", "Assignment 1 Submission"], "title": "Why Study Networks and Basics on NetworkX"}, {"description": "In Module Two you'll learn how to analyze the connectivity of a network based on measures of distance, reachability, and redundancy of paths between nodes. In the assignment, you will practice using NetworkX to compute measures of connectivity of a network of email communication among the employees of a mid-size manufacturing company. ", "video": ["Clustering Coefficient", "Distance Measures", "Connected Components", "Network Robustness", "Simple Network Visualizations in NetworkX", "TA Demonstration: Simple Network Visualizations in NetworkX", "Assignment 2", "Module 2 Quiz", "Assignment 2 Submission"], "title": "Network Connectivity"}, {"description": "In Module Three, you'll explore ways of measuring the importance or centrality of a node in a network, using measures such as Degree, Closeness, and Betweenness centrality, Page Rank, and Hubs and Authorities. You'll learn about the assumptions each measure makes, the algorithms we can use to compute them, and the different functions available on NetworkX to measure centrality. In the assignment, you'll practice choosing the most appropriate centrality measure on a real-world setting.", "video": ["Degree and Closeness Centrality", "Betweenness Centrality", "Basic Page Rank", "Scaled Page Rank", "Hubs and Authorities", "Centrality Examples", "PageRank and Centrality in a real-life network", "Assignment 3", "Module 3 Quiz", "Assignment 3 Submission"], "title": "Influence Measures and Network Centralization"}, {"description": "In Module Four, you'll explore the evolution of networks over time, including the different models that generate networks with realistic features, such as the Preferential Attachment Model and Small World Networks. You will also explore the link prediction problem, where you will learn useful features that can predict whether a pair of disconnected nodes will be connected in the future. In the assignment, you will be challenged to identify which model generated a given network. Additionally, you will have the opportunity to combine different concepts of the course by predicting the salary, position, and future connections of the employees of a company using their logs of email exchanges. \n", "video": ["Preferential Attachment Model", "Power Laws and Rich-Get-Richer Phenomena (Optional)", "Small World Networks", "Link Prediction", "Extracting Features from Graphs", "The Small-World Phenomenon (Optional)", "Assignment 4", "Post-Course Survey", "Module 4 Quiz", "Assignment 4 Submission"], "title": "Network Evolution"}]}, {"course_info": "About this course: The Beginning Game Programming with C# course is all about learning how to develop video games using the C# programming language. Why use C# instead of C++, Java, ActionScript, or some other programming language you may have heard of? First, using C# lets us use the open-source MonoGame framework, which help us quickly develop games for Windows, Android, iOS, Mac OS X, and others. Second, the Unity game engine is very popular with indie game developers, and C# is one of the programming languages you can use in the Unity environment. And finally, C# is a really good language for learning how to program.\n\nThat learning how to program comment is important because this course doesn't assume you have any previous programming experience. Don't worry if you've never written code before; we'll start at the very beginning and work our way up to building a small, complete game by the end of the course. Throughout the course you'll learn core programming concepts that apply to lots of programming languages, including C#, and you'll also learn how to apply those concepts when you develop games: drawing all the entities in the game world, updating the game world based on user input and simple physics, playing music and sound effects in your games, and so on.\n\nComputer programming is really fun in general, and programming games is even better!\n\nCaution: Beginning (assuming no prior programming knowledge) is not the same as easy (not hard to do). Learning to program IS hard to do, especially since this course is essentially a freshman-level college course. Meeting the course challenges while you master the material will be rewarding to you, but doing that will require hard work and maybe even a few expletives along the way.", "title": "Beginning Game Programming with C#", "rating": "4.7", "level": null, "created_by": "University of Colorado System", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Dr. Tim \"Dr. T\" Chamillard", "department": "Computer Science"}], "week_data": [{"description": "Learn about the course structure, the course programming environment, and Dr. T; Learn how to write a C# program; Learn how we use data types, variables, and constants to store data in our programs; Complete and submit Programming Assignment 1", "video": ["It's Time to Build Games!", "1.1 Course Introduction", "1.2 Navigating the Course", "1.3 Visual Studio and XNA", "1.4 Meet the Instructor (Optional)", "2.1 Your First C# Program", "2.2 Commenting and You", "3.1 Bits and Bytes", "3.2 Data Types, Variables, and Constants", "3.3 Integer Data Types", "3.4 Real Number Data Types", "3.5 Other Value Types", "Week 1 Resources", "Labs 1, 2, and 3", "Setting Up Your Development Environment", "Flow and Course Structure", "Advice for Beginners and Nonbeginners", "Course Coding Standards", "Course Topic Index", "Programming Assignment 1 FAQ", "Programming Assignment 1"], "title": "Course Introduction, First C# Program, and Storing Data"}, {"description": "Learn some foundational Object-Oriented concepts; Learn the basics of MonoGame/XNA; Complete and submit Programming Assignment 2; Complete and submit Peer Review of Programming Assignment 1", "video": ["Welcome to Week 2", "4.1 Intro to Classes and Objects", "4.2 Using a Class: Constructor and Properties", "4.3 Using a Class: Methods", "4.4 Designing a Class", "5.1 MonoGame vs XNA", "5.2 Intro to XNA", "5.3 Your First XNA Game: Resolution and Loading Content", "5.4 Your First XNA Game: Drawing", "5.5 More XNA Practice", "Week 2 Resources", "Labs 4, 5, and 6", "Programming Assignment 2 FAQ", "Programming Assignment 2"], "title": "Classes and Objects, MonoGame/XNA Basics"}, {"description": "Learn about using C# strings; Learn how we make decisions in our code; Complete and submit Programming Assignment 3; Complete and submit Peer Review of Programming Assignment 2", "video": ["It's Week 3 Already", "6.1 Intro to Strings", "6.2 String Operations", "7.1 Selection: If Statements", "7.2 Selection: Switch Statements", "7.3 Selection in Games", "Week 3 Resources", "Labs 7, 8, 9, and 10", "Programming Assignment 3 FAQ", "Programming Assignment 3"], "title": "Strings and Selection"}, {"description": "Reflect on previous course material with no new material this week; Complete and submit Project Increment 1; Complete and submit Peer Review of Programming Assignment 3", "video": ["The First Recovery Week", "Project Summary", "Project Increment 1 Solution", "Project Increment 1 FAQ", "Project Increment 1"], "title": "Recovery week"}, {"description": "Learn how to use mice and controllers for input; Learn how to store larger amounts of data; Complete and submit Programming Assignment 4; Complete and submit Peer Review of Project Increment 1", "video": ["An Exciting Week 5", "8.1 XNA Mouse Location Processing", "8.2 XNA Mouse Button Processing", "8.3 XNA Controller Thumbstick Processing", "8.4 XNA Controller Button Processing", "9.1 Arrays", "9.2 Collection Classes", "Week 5 Resources", "Labs 11 and 12", "Programming Assignment 4 FAQ", "Programming Assignment 4"], "title": "MonoGame/XNA Mice and Controllers, Arrays and Collection Classes"}, {"description": "Reflect on previous course material with no new material this week; Complete and submit Project Increment 2; Complete and submit Peer Review of Programming Assignment 4", "video": ["The Second Recovery Week", "Project Increment 2 Solution", "Project Increment 2 FAQ", "Project Increment 2"], "title": "Recovery week"}, {"description": "Learn how to do things multiple times; Complete and submit Programming Assignment 5; Complete and submit Peer Review of Project Increment 2", "video": ["Another Big Week of Learning", "10.1 For Loops: The Basics", "10.2 For Loops: Dead Teddies", "10.3 Foreach Loops", "10.4 While Loops", "Week 7 Resources", "Labs 13 and 14", "Programming Assignment 5"], "title": "Iteration"}, {"description": "Reflect on previous course material with no new material this week; Complete and submit Project Increment 3; Complete and submit Peer Review of Programming Assignment 5", "video": ["Another Recovery Week, But ...", "Project Increment 3 Solution", "Project Increment 3"], "title": "Recovery week"}, {"description": "Learn how to design and implement classes; Complete and submit Programming Assignment 6; Complete and submit Peer Review of Project Increment 3", "video": ["Our Own Classes!", "11.1 Console Class: Fields and Properties", "11.2 Console Class: Constructors", "11.3 Console Class: Method", "11.4 XNA Class: Fields and Properties", "11.5 XNA Class: Constructor and Methods Part 1", "11.6 XNA Class: Constructor and Methods Part 2", "11.7 XNA Class Use Part 1", "11.8 XNA Class Use Part 2", "Week 9 Resources", "Programming Assignment 6"], "title": "Class Design and Implementation"}, {"description": "Reflect on previous course material with no new material this week; Complete and submit Project Increment 4; Complete and submit Peer Review of Programming Assignment 6", "video": ["The Final Recovery Week", "Project Increment 4 Solution", "Project Increment 4"], "title": "Recovery Week"}, {"description": "Learn how to play music and sound effects in MonoGame/XNA; Learn how to process keyboard input and display text in MonoGame/XNA; Complete and submit Project Increment 5; Complete and submit Peer Review of Project Increment 4", "video": ["The Last of the New Material", "12.1 XNA Audio Without XACT", "13.1 XNA Keyboard Input", "13.2 XNA Text Output", "Week 11 Resources", "Labs 15 and 16", "Project Increment 5 Solution", "Project Increment 5"], "title": "MonoGame/XNA Audio, MonoGame/XNA Text IO"}, {"description": "The description goes here", "video": ["The Final Week", "Concept Understanding Self Evaluation", "Optional Project", "Course Wrapup", "Final Exam"], "title": "The Final Week"}]}, {"course_info": "About this course: This course is an introduction to the finite element method as applicable to a range of problems in physics and engineering sciences. The treatment is mathematical, but only for the purpose of clarifying the formulation. The emphasis is on coding up the formulations in a modern, open-source environment that can be expanded to other applications, subsequently.\n\nThe course includes about 45 hours of lectures covering the material I normally teach in an\nintroductory graduate class at University of Michigan. The treatment is mathematical, which is\nnatural for a topic whose roots lie deep in functional analysis and variational calculus. It is not\nformal, however, because the main goal of these lectures is to turn the viewer into a\ncompetent developer of finite element code. We do spend time in rudimentary functional\nanalysis, and variational calculus, but this is only to highlight the mathematical basis for the\nmethods, which in turn explains why they work so well. Much of the success of the Finite\nElement Method as a computational framework lies in the rigor of its mathematical\nfoundation, and this needs to be appreciated, even if only in the elementary manner\npresented here. A background in PDEs and, more importantly, linear algebra, is assumed,\nalthough the viewer will find that we develop all the relevant ideas that are needed.\n\nThe development itself focuses on the classical forms of partial differential equations (PDEs):\nelliptic, parabolic and hyperbolic. At each stage, however, we make numerous connections to\nthe physical phenomena represented by the PDEs. For clarity we begin with elliptic PDEs in\none dimension (linearized elasticity, steady state heat conduction and mass diffusion). We\nthen move on to three dimensional elliptic PDEs in scalar unknowns (heat conduction and\nmass diffusion), before ending the treatment of elliptic PDEs with three dimensional problems\nin vector unknowns (linearized elasticity). Parabolic PDEs in three dimensions come next\n(unsteady heat conduction and mass diffusion), and the lectures end with hyperbolic PDEs in\nthree dimensions (linear elastodynamics). Interspersed among the lectures are responses to\nquestions that arose from a small group of graduate students and post-doctoral scholars who\nfollowed the lectures live. At suitable points in the lectures, we interrupt the mathematical\ndevelopment to lay out the code framework, which is entirely open source, and C++ based.\n\nBooks:\nThere are many books on finite element methods. This class does not have a required\ntextbook. However, we do recommend the following books for more detailed and broader\ntreatments than can be provided in any form of class:\n\nThe Finite Element Method: Linear Static and Dynamic Finite Element Analysis, T.J.R.\nHughes, Dover Publications, 2000.\n\nThe Finite Element Method: Its Basis and Fundamentals, O.C. Zienkiewicz, R.L. Taylor and\nJ.Z. Zhu, Butterworth-Heinemann, 2005.\n\nA First Course in Finite Elements, J. Fish and T. Belytschko, Wiley, 2007.\n\nResources:\nYou can download the deal.ii library at dealii.org. The lectures include coding tutorials where\nwe list other resources that you can use if you are unable to install deal.ii on your own\ncomputer. You will need cmake to run deal.ii. It is available at cmake.org.", "title": "The Finite Element Method for Problems in Physics", "rating": "4.6", "level": "Intermediate", "created_by": "University of Michigan", "package_name": null, "target_audience": "Who is this class for: This class is aimed at the beginning graduate student, or the well-prepared undergraduate in engineering, mathematics or the physical sciences. A working knowledge of linear algebra (matrix-vector manipulations) is needed. Some exposure to partial differential equations would be very helpful. Experience with programming\nis a must. This could be Matlab or a language such as Fortran, C or Python.", "package_num": null, "teach_by": [{"name": "Krishna Garikipati, Ph.D.", "department": null}], "week_data": [{"description": "This unit is an introduction to a simple one-dimensional problem that can be solved by the finite element method.", "video": ["Help us learn more about you!", "01.01. Introduction. Linear elliptic partial differential equations - I ", "01.02. Introduction. Linear elliptic partial differential equations - II ", "01.03. Boundary conditions ", "01.04. Constitutive relations ", "01.05. Strong form of the partial differential equation. Analytic solution ", "01.06. Weak form of the partial differential equation - I ", "01.07. Weak form of the partial differential equation - II ", "01.08. Equivalence between the strong and weak forms ", "01.08ct.1. Intro to C++ (running your code, basic structure, number types, vectors) ", "01.08ct.2. Intro to C++ (conditional statements, “for” loops, scope) ", "01.08ct.3. Intro to C++ (pointers, iterators) ", "\"Paper and pencil\" practice assignment on strong and weak forms", "Unit 1 Quiz"], "title": "1"}, {"description": "In this unit you will be introduced to the approximate, or finite-dimensional, weak form for the one-dimensional problem.", "video": ["02.01. The Galerkin, or finite-dimensional weak form  ", "02.01q. Response to a question ", "02.02. Basic Hilbert spaces - I ", "02.03. Basic Hilbert spaces - II ", "02.04. The finite element method for the one-dimensional, linear, elliptic partial differential equation ", "02.04q. Response to a question ", "02.05. Basis functions - I ", "02.06. Basis functions - II ", "02.07. The bi-unit domain - I ", "02.08. The bi-unit domain - II ", "02.09. The finite dimensional weak form as a sum over element subdomains - I ", "02.10. The finite dimensional weak form as a sum over element subdomains - II ", "02.10ct.1. Intro to C++ (functions) ", "02.10ct.2. Intro to C++ (C++ classes) ", "Unit 2 Quiz"], "title": "2"}, {"description": "In this unit, you will write the finite-dimensional weak form in a matrix-vector form. You also will be introduced to coding in the deal.ii framework.", "video": ["03.01. The matrix-vector weak form - I - I ", "03.02. The matrix-vector weak form - I - II ", "03.03. The matrix-vector weak form - II - I ", "03.04. The matrix-vector weak form - II - II ", "03.05. The matrix-vector weak form - III - I ", "03.06. The matrix-vector weak form - III - II ", "03.06ct.1. Dealii.org, running deal.II on a virtual machine with Oracle VirtualBox", "03.06ct.2. Intro to AWS, using AWS on Windows", "03.06ct.2c. In-Video Correction", "03.06ct.3. Using AWS on Linux and Mac OS", "03.07. The final finite element equations in matrix-vector form - I ", "03.08. The final finite element equations in matrix-vector form - II ", "03.08q. Response to a question ", "03.08ct. Coding assignment 1 (main1.cc, overview of C++ class in FEM1.h) ", "Unit 3 Quiz", "Coding Assignment 1"], "title": "3"}, {"description": "This unit develops further details on boundary conditions, higher-order basis functions, and numerical quadrature. You also will learn about the templates for the first coding assignment.", "video": ["04.01. The pure Dirichlet problem - I ", "04.02. The pure Dirichlet problem - II ", "04.02c. In-Video Correction ", "04.03. Higher polynomial order basis functions - I ", "04.03c0. In-Video Correction ", "04.03c1. In-Video Correction ", "04.04. Higher polynomial order basis functions - I - II ", "04.05. Higher polynomial order basis functions - II - I ", "04.06. Higher polynomial order basis functions - III ", "04.06ct. Coding assignment 1 (functions: class constructor to “basis_gradient”) ", "04.07. The matrix-vector equations for quadratic basis functions - I - I ", "04.08. The matrix-vector equations for quadratic basis functions - I - II ", "04.09. The matrix-vector equations for quadratic basis functions - II - I ", "04.10. The matrix-vector equations for quadratic basis functions - II - II ", "04.11. Numerical integration -- Gaussian quadrature ", "04.11ct.1. Coding assignment 1 (functions: “generate_mesh” to “setup_system”) ", "04.11ct.2. Coding assignment 1 (functions: “assemble_system”) ", "Unit 4 Quiz"], "title": "4"}, {"description": "This unit outlines the mathematical analysis of the finite element method.", "video": ["05.01. Norms - I ", "05.01c. In-Video Correction ", "05.01ct.1. Coding assignment 1 (functions: “solve” to “l2norm_of_error”) ", "05.01ct.2. Visualization tools", "05.02. Norms - II ", "05.02. Response to a question ", "05.03. Consistency of the finite element method ", "05.04. The best approximation property ", "05.05. The \"Pythagorean Theorem\" ", "05.05q. Response to a question ", "05.06. Sobolev estimates and convergence of the finite element method ", "05.07. Finite element error estimates ", "Unit 5 Quiz"], "title": "5"}, {"description": "This unit develops an alternate derivation of the weak form, which is applicable to certain physical problems.", "video": ["06.01. Functionals. Free energy - I ", "06.02. Functionals. Free energy - II ", "06.03. Extremization of functionals ", "06.04. Derivation of the weak form using a variational principle ", "Unit 6 Quiz"], "title": "6"}, {"description": "In this unit, we develop the finite element method for three-dimensional scalar problems, such as the heat conduction or mass diffusion problems.", "video": ["07.01. The strong form of steady state heat conduction and mass diffusion - I ", "07.02. The strong form of steady state heat conduction and mass diffusion - II ", "07.02q. Response to a question ", "07.03. The strong form, continued ", "07.03c. In-Video Correction ", "07.04. The weak form ", "07.05. The finite-dimensional weak form - I ", "07.06. The finite-dimensional weak form - II ", "07.07. Three-dimensional hexahedral finite elements ", "07.08. Aside: Insight to the basis functions by considering the two-dimensional case ", "07.08c In-Video Correction ", "07.09. Field derivatives. The Jacobian - I ", "07.10. Field derivatives. The Jacobian - II ", "07.11. The integrals in terms of degrees of freedom ", "07.12. The integrals in terms of degrees of freedom - continued ", "07.13. The matrix-vector weak form - I ", "07.14. The matrix-vector weak form II ", "07.15.The matrix-vector weak form, continued - I ", "07.15c. In-Video Correction ", "07.16. The matrix-vector weak form, continued - II ", "07.17. The matrix vector weak form, continued further - I ", "07.17c. In-Video Correction ", "07.18. The matrix-vector weak form, continued further - II ", "07.18c. In-Video Correction ", "Unit 7 Quiz"], "title": "7"}, {"description": "In this unit, you will complete some details of the three-dimensional formulation that depend on the choice of basis functions, as well as be introduced to the second coding assignment.", "video": ["08.01. Lagrange basis functions in 1 through 3 dimensions - I ", "08.01c. In-Video Correction ", "08.02. Lagrange basis functions in 1 through 3 dimensions - II ", "08.02ct. Coding assignment 2 (2D problem) - I ", "08.03. Quadrature rules in 1 through 3 dimensions ", "08.03ct.1. Coding assignment 2 (2D problem) - II ", "08.03ct.2. Coding assignment 2 (3D problem) ", "08.04. Triangular and tetrahedral elements - Linears - I ", "08.05. Triangular and tetrahedral elements - Linears - II ", "Unit 8 Quiz", "Coding Assignment 2"], "title": "8"}, {"description": "In this unit, we take a detour to study the two-dimensional formulation for scalar problems, such as the steady state heat or diffusion equations.", "video": ["09.01. The finite-dimensional weak form and basis functions - I ", "09.02. The finite-dimensional weak form and basis functions - II ", "09.03. The matrix-vector weak form ", "09.03c. In-Video Correction ", "09.04. The matrix-vector weak form - II ", "09.04c. In-Video Correction ", "Unit 9 Quiz"], "title": "9"}, {"description": "This unit introduces the problem of three-dimensional, linearized elasticity at steady state, and also develops the finite element method for this problem. Aspects of the code templates are also examined.", "video": ["10.01. The strong form of linearized elasticity in three dimensions - I ", "10.02. The strong form of linearized elasticity in three dimensions - II ", "10.02c. In-Video Correction ", "10.03. The strong form, continued ", "10.04. The constitutive relations of linearized elasticity ", "10.05. The weak form - I ", "10.05q. Response to a question ", "10.06. The weak form - II ", "10.07. The finite-dimensional weak form - Basis functions - I ", "10.08. The finite-dimensional weak form - Basis functions - II ", "10.09. Element integrals - I ", "10.09c. In-Video Correction ", "10.10. Element integrals - II ", "10.11. The matrix-vector weak form - I ", "10.12. The matrix-vector weak form - II ", "10.13. Assembly of the global matrix-vector equations - I ", "10.14. Assembly of the global matrix-vector equations - II ", "10.14c. In Video Correction ", "10.14ct.1. Coding assignment 3 - I ", "10.14ct.2. Coding assignment 3 - II ", "10.15. Dirichlet boundary conditions - I ", "10.16. Dirichlet boundary conditions - II ", "Unit 10 Quiz", "Coding Assignment 3"], "title": "10"}, {"description": "In this unit, we study the unsteady heat conduction, or mass diffusion, problem, as well as its finite element formulation.", "video": ["11.01. The strong form ", "11.01c In-Video Correction ", "11.02. The weak form, and finite-dimensional weak form - I ", "11.03. The weak form, and finite-dimensional weak form - II ", "11.04. Basis functions, and the matrix-vector weak form - I ", "11.04c In-Video Correction ", "11.05. Basis functions, and the matrix-vector weak form - II ", "11.05. Response to a question ", "11.06. Dirichlet boundary conditions; the final matrix-vector equations ", "11.07. Time discretization; the Euler family - I ", "11.08. Time discretization; the Euler family - II ", "11.09. The v-form and d-form ", "11.09ct.1. Coding assignment 4 - I ", "11.09ct.2. Coding assignment 4 - II ", "11.10. Analysis of the integration algorithms for first order, parabolic equations; modal decomposition - I ", "11.11. Analysis of the integration algorithms for first order, parabolic equations; modal decomposition - II ", "11.11c. In-Video Correction ", "11.12. Modal decomposition and modal equations - I ", "11.13. Modal decomposition and modal equations - II ", "11.14. Modal equations and stability of the time-exact single degree of freedom systems - I ", "11.15. Modal equations and stability of the time-exact single degree of freedom systems - II ", "11.15q. Response to a question ", "11.16. Stability of the time-discrete single degree of freedom systems ", "11.17. Behavior of higher-order modes; consistency - I ", "11.18. Behavior of higher-order modes; consistency - II ", "11.19. Convergence - I  ", "11.20. Convergence - II ", "Unit 11 Quiz", "Coding Assignment 4"], "title": "11"}, {"description": "In this unit we study the problem of elastodynamics, and its finite element formulation.", "video": ["12.01. The strong and weak forms ", "12.02. The finite-dimensional and matrix-vector weak forms - I ", "12.03. The finite-dimensional and matrix-vector weak forms - II ", "12.04. The time-discretized equations ", "12.05. Stability - I", "12.06. Stability - II ", "12.07. Behavior of higher-order modes ", "12.08. Convergence ", "12.08c. In-Video Correction ", "Unit 12 Quiz"], "title": "12"}, {"description": "This is a wrap-up, with suggestions for future study.", "video": ["Conclusion, and the Road Ahead", "Post-course Survey"], "title": "113"}]}, {"course_info": "About this course: Database Management Essentials provides the foundation you need for a career in database development, data warehousing, or business intelligence, as well as for the entire Data Warehousing for Business Intelligence specialization. In this course, you will create relational databases, write SQL statements to extract information to satisfy business reporting requests, create entity relationship diagrams (ERDs) to design databases, and analyze table designs for excessive redundancy. As you develop these skills, you will use either Oracle or MySQL to execute SQL statements and a database diagramming tool such as the ER Assistant to create ERDs. We’ve designed this course to ensure a common foundation for specialization learners. Everyone taking the course can jump right in with writing SQL statements in Oracle or MySQL.", "title": "Database Management Essentials", "rating": "4.6", "level": null, "created_by": "University of Colorado System", "package_name": "Data Warehousing for Business Intelligence Specialization ", "target_audience": null, "package_num": "1", "teach_by": [{"name": "Michael Mannino", "department": "Business School, University of Colorado Denver"}], "week_data": [{"description": "Module 1 provides the context for Database Management Essentials. When you’re done, you’ll understand the objectives for the course and know what topics and assignments to expect. Keeping these course objectives in mind will help you succeed throughout the course! You should read about the database software requirements in the last lesson of module 1. I recommend that you try to install the DBMS software this week before assignments begin in week 2.", "video": ["Specialization Introduction video lesson", "Course introduction video lecture", "Course objectives video lecture", "Powerpoint lecture notes for lesson 1", "Topics and  assignments video lecture", "Powerpoint lecture notes for lesson 2", "Optional textbook", "Overview of database management software requirements", "Oracle installation notes", "Making a connection to a database on a local Oracle server"], "title": "Course Introduction"}, {"description": "We’ll launch into an exploration of databases and database technology and their impact on organizations in Module 2. We’ll investigate database characteristics, database technology features, including non-procedural access, two key processing environments, and an evolution of the database software industry. This short informational module will ensure that we all have the same background and context, which is critical for success in the later modules that emphasize details and hands-on skills.\n", "video": ["Database characteristics video lecture", "Powerpoint lecture notes for lesson 1 and extras", "Learning check-in", "Organizational Roles video lecture", "Powerpoint lecture notes for lesson 2", "DBMS overview and database definition feature video lecture", "Powerpoint lecture notes for lesson 3", "Non-procedural access video lecture", "Powerpoint lecture notes for lesson 4", "Transaction processing overview video lecture", "Powerpoint lecture notes for lesson 5", "Data warehouse processing overview video lecture", "Powerpoint lecture notes for lesson 6", "DBMS technology evolution video lecture", "Powerpoint lecture notes for lesson 7", "Optional reading", "Module02 Quiz"], "title": "Introduction to Databases and DBMSs"}, {"description": "Now that you have the informational context for database features and environments, you’ll start building! In this module, you’ll learn relational data model terminology, integrity rules, and the CREATE TABLE statement. You’ll apply what you’ve learned in practice and graded problems using a database management system (DBMS), either Oracle or MySQL, creating tables using the SQL CREATE TABLE statement and populating your tables using given SQL INSERT statements.\n", "video": ["Basics of relational databases video lecture", "Powerpoint lecture notes for lesson 1 and extras", "Integrity rules video lecture", "Powerpoint lecture notes for lesson 2", "Basic SQL CREATE TABLE statement video lecture", "Powerpoint lecture notes for lesson 3", "University database statements for Oracle and MySQL", "Integrity constraint syntax video lecture", "Powerpoint lecture notes for lesson 4", "Assignment 1 Notes video lecture", "Powerpoint lecture notes for lesson 5", "Optional reading", "DBMS installation and configuration notes", "Practice Problems for Module 3", "Quiz for Module 3 practice problems", "Extra Problems for Module 3", "Assignment for Module 3", "Module 3 Assignment"], "title": "Relational Data Model and the CREATE TABLE Statement"}, {"description": "This module is all about acquiring query formulation skills. Now that you know the relational data model and have basic skills with the CREATE TABLE statement, we can cover basic syntax of the SQL SELECT statement and the join operator for combining tables. SELECT statement examples are presented for single table conditions, join operations, and grouping operations. You’ll practice writing simple SELECT statements using the tables that you created in the assignment for module 3.\n", "video": ["SQL Overview video lecture", "Powerpoint lecture notes for lesson 1", "University database examples", "SELECT statement introduction video lecture", "Powerpoint lecture notes for lesson 2", "Join Operator video lecture", "Powerpoint lecture notes for lesson 3", "Using Join operations in SQL SELECT statements video lecture", "Powerpoint lecture notes for lesson 4", "GROUP BY clause video lecture", "Powerpoint lecture notes for lesson 5", "Practice Problems for Module 4", "Quiz for Module 4 Practice Problems", "Extra Problems for Module 4", "Assignment for Module 4", "Optional reading", "DBMS installation and configuration notes", "Module 4 Assignment"], "title": "Basic Query Formulation with SQL"}, {"description": "Now that you can identify and use the SELECT statement and the join operator, you’ll extend your problem solving skills in this module so you can gain confidence on more complex queries. You will work on retrieval problems with multiple tables and grouping. In addition, you’ll learn to use the UNION operator in the SQL SELECT statement and write SQL modification statements.\n", "video": ["Query formulation guidelines video lecture", "Powerpoint lecture notes for lesson 1 and extras", "Multiple table problems video lecture", "Powerpoint lecture notes for lesson 2", "Problems involving join and grouping operations video lecture", "Powerpoint lecture notes for lesson 3", "SQL set operators video lecture", "Powerpoint lecture notes for lesson 4", "SQL modification statements video lecture", "Powerpoint lecture notes for lesson 5", "Optional textbook reading material", "DBMS installation and configuration notes", "Practice Problems for Module 5", "Quiz for Module 5 Practice Problems", "Extra Problems for Module 5", "Assignment for Module 5", "Module 5 Assignment"], "title": "Extended Query Formulation with SQL"}, {"description": "Module 6 represents another shift in your learning. In previous modules, you’ve created and populated tables and developed query formulation skills using the SQL SELECT statement. Now you’ll start to develop skills that allow you to create a database design to support business requirements. You’ll learn basic notation used in entity relationship diagrams (ERDs), a graphical notation for data modeling. You will create simple ERDs using basic diagram symbols and relationship variations to start developing your data modeling skills. \n", "video": ["Database development goals video lecture", "Powerpoint lecture notes for lesson 1 and extras", "Basic ERD notation video lecture", "Powerpoint lecture notes for lesson 2", "Relationship variations I video lecture", "Powerpoint lecture notes for lesson 3", "Relationship variations II video lecture", "Powerpoint lecture notes for lesson 4", "Optional textbook reading material", "Practice Problems for Module 6", "Assignment for Module 6", "Module 6 Assignment"], "title": "Notation for Entity Relationship Diagrams"}, {"description": "Module 7 builds on your knowledge of database development using basic ERD symbols and relationship variations. We’ll be practicing precise usage of ERD notation and basic problem solving skills. You will learn about diagram rules and work problems to help you gain confidence using and creating ERDs.\n", "video": ["Basic diagram rules video lecture", "Powerpoint lecture notes for lesson 1 and extras", "Extended diagram rules video lecture", "Powerpoint lecture notes for lesson 2", "ERD problems I video lecture", "Powerpoint lecture notes for lesson 3", "ERD problems II video lecture", "Powerpoint lecture notes for lesson 4", "ER Assistant Demonstration video", "ER Assistant download", "Optional textbook reading material", "Practice Problems for Module 7", "Assignment for Module 7", "Module 7 Assignment"], "title": "ERD Rules and Problem Solving"}, {"description": "In Module 8, you’ll use your ERD notation skills and your ability to avoid diagram errors to develop ERDs that satisfy specific business data requirements. You will learn and practice powerful problem-solving skills as you analyze narrative statements and transformations to generate alternative ERDs.\n", "video": ["Conceptual data modeling goals and challenges", "Powerpoint lecture notes for lesson 1 and extras", "Analyzing narrative problems", "Powerpoint lecture notes for lesson 2", "Design transformations I", "Powerpoint lecture notes for lesson 3", "Design transformations II video lecture", "Powerpoint lecture notes for lesson 4", "Optional textbook reading material", "Practice Problems for Module 8", "Assignment for Module 8", "Module 8 Assignment "], "title": "Developing Business Data Models"}, {"description": "Now that you have practiced data modeling techniques, you’ll get to wrestle with narrative problem analyses and transformations for generating alternative database designs in Module 9. At the end of this module, you’ll learn guidelines for documentation and detection of design errors that will serve you well as you design databases for business situations.\n", "video": ["Data modeling problems I video lecture", "Powerpoint lecture notes for lesson 1 and extras", "Data modeling problems II video lecture", "Powerpoint lecture notes for lesson 2", "Finalizing an ERD video lecture", "Powerpoint lecture notes for lesson 3", "Optional textbook reading material", "Practice Problems for Module 9", "Assignment for Module 9", "Module 9 Assignment"], "title": "Data Modeling Problems and Completion of an ERD"}, {"description": "Modules 6 to 9 covered conceptual data modeling, emphasizing precise usage of ERD notation, analysis of narrative problems, and generation of alternative designs. Modules 10 and 11 cover logical database design, the next step in the database development process. In Module 10, we’ll cover schema conversion, the first step in the logical database design phase. You will learn to convert an ERD into a table design that can be implemented on a relational DBMS.\n", "video": ["Goals and steps of logical database design video lecture", "Powerpoint lecture notes for lesson 1 and extras", "Conversion rules video lecture", "Powerpoint lecture notes for lesson 2", "Conversion problems video lecture", "Powerpoint lecture notes for lesson 3", "Optional textbook reading material", "Practice Problems for Module 10", "Assignment for Module 10", "Module 10 Assignment"], "title": "Schema Conversion"}, {"description": "Module 11 covers normalization, the second part of the logical database design process. Normalization provides tools to remove unwanted redundancy in a table design. You’ll discover the motivation for normalization, constraints to reason about unwanted redundancy, and rules that detect excessive redundancy in a table design. You’ll practice integrating and applying normalization techniques in the final lesson of this course.\n", "video": ["Modification anomalies video lecture", "Powerpoint lecture notes for lesson 1 and extras", "Functional dependencies video lecture", "Powerpoint lecture notes for lesson 2", "Normal forms video lecture", "Powerpoint lecture notes for lesson 3", "Practical concerns video lecture", "Powerpoint lecture notes for lesson 4", "Normalization problems video lecture", "Powerpoint lecture notes for lesson 5", "Course Conclusion", "Optional textbook reading materials", "Practice Problems for Module 11", "Assignment for Module 11", "Module 11 Assignment"], "title": "Normalization Concepts and Practice"}]}, {"course_info": "About this course: Unix forms a foundation that is often very helpful for accomplishing other goals you might have for you and your computer, whether that goal is running a business, writing a book, curing disease, or creating the next great app. The means to these goals are sometimes carried out by writing software. Software can’t be mined out of the ground, nor can software seeds be planted in spring to harvest by autumn. Software isn’t produced in factories on an assembly line. Software is a hand-made, often bespoke good. If a software developer is an artisan, then Unix is their workbench. Unix provides an essential and simple set of tools in a distraction-free environment. Even if you’re not a software developer learning Unix can open you up to new methods of thinking and novel ways to scale your ideas. \n\nThis course is intended for folks who are new to programming and new to Unix-like operating systems like macOS and Linux distributions like Ubuntu. Most of the technologies discussed in this course will be accessed via a command line interface. Command line interfaces can seem alien at first, so this course attempts to draw parallels between using the command line and actions that you would normally take while using your mouse and keyboard. You’ll also learn how to write little pieces of software in a programming language called Bash, which allows you to connect together the tools we’ll discuss. My hope is that by the end of this course you be able to use different Unix tools as if they’re interconnecting Lego bricks.", "title": "The Unix Workbench", "rating": "4.7", "level": "Beginner", "created_by": "Johns Hopkins University", "package_name": null, "target_audience": "Who is this class for: This course is for people in who want to use the command line, Bash, and Git for data science, machine learning, and artificial intelligence. ", "package_num": null, "teach_by": [{"name": "Sean Kross", "department": "Bloomberg School of Public Health"}, {"name": "Jeff Leek, PhD", "department": "Bloomberg School of Public Health "}, {"name": "Brian Caffo, PhD", "department": "Bloomberg School of Public Health"}, {"name": "Roger D. Peng, PhD", "department": "Bloomberg School of Public Health"}], "week_data": [{"description": "This week we'll help you get access to Unix (you may already be using it), and you'll start using the command line. We'll draw parallels between using your mouse and keyboard with your computer's graphics versus only using the command line.", "video": ["Welcome to Week 1", "Introduction", "The Unix Workbench Book", "What is Unix?", "Mac & Ubuntu Users", "Windows", "Hello Terminal!", "Hello Terminal! Exercises", "Navigating the Command Line", "Navigating the Command Line Exercises", "Creation and Inspection", "Creation and Inspection Exercises", "Migration and Destruction", "Migration and Destruction Exercises", "Command Line Basics"], "title": "Unix and Command Line Basics"}, {"description": "Now we'll get into the power of different Unix tools. We'll walk through several scenarios where you could use Unix to perform tasks at a much faster speed than you would be able to normally.", "video": ["Welcome to Week 2", "Self-Help", "Self-Help Exercises", "Get Wild", "Get Wild Exercises", "Regular Expressions", "Metacharacters", "Character Sets", "Escaping, Anchors, Odds, and Ends", "Find", "Search Exercises", "History", "Customizing Bash", "Differentiate", "Pipes", "Pipes Exercises", "Make", "Working with Unix"], "title": "Working with Unix"}, {"description": "During this week we'll unleash the command line's usefulness as a programming language. By the end of this week you'll be writing your own little computer programs that you can use on the command line.", "video": ["Welcome to Week 3", "Math", "Math Exercises", "Variables", "Variables Exercises", "User Input", "User Input Exercise", "Conditional Execution", "Conditional Expressions", "If and Else", "Logic and If/Else Exercises", "Arrays", "Arrays Exercises", "Braces", "Braces Exercise", "for", "while", "Nesting", "Loops Exercises", "Writing Functions", "Getting Values from Functions", "Functions Exercises", "The Unix Philosophy", "Making Programs Executable", "Environmental Variables", "Writing Programs Exercises", "Bash Programming"], "title": "Bash Programming"}, {"description": "First you'll learn how to use Git, which is like \"track changes\" for your code and plain text files, but much more powerful. We'll then explore how to use Git with GitHub, a social coding network where you can publish you projects and explore other's code. ", "video": ["Welcome to Week 4", "What are Git and GitHub?", "Setting Up Git and GitHub", "Getting Started with Git", "Git Exercises", "Gitting Help, Logs, and Diffs", "Ignoring Files", "Important Git Features Exercises", "Branching, Part 1", "Branching, Part 2", "Branching Exercises", "GitHub", "Markdown", "Pull Requests", "Pages", "Forking", "GitHub Exercises", "Git & GitHub", "Bash, Make, Git, and GitHub"], "title": "Git and GitHub"}, {"description": "Finally we'll set up a cloud computing environment so we can explore how computers communicate with each other using the internet.", "video": ["Introduction to Cloud Computing", "Setting Up DigitalOcean", "Connecting to the Cloud", "Moving Files In and Out of the Cloud", "Talking to Other Servers", "Automating Tasks", "Cloud Computing Exercises", "Shutting Down a Server", "Next Steps", "Giving Feedback", "Using This Book", "Nephology"], "title": "Nephology"}]}, {"course_info": "About this course: Despite everyone's good intentions, hard work and solid ideas, too many projects end up creating unneeded, unusable, and unsellable products. But it doesn't have to be this way. Agile and design thinking offer a different--and effective--approach to product development, one that results in valuable solutions to meaningful problems. In this course, you’ll learn how to determine what's valuable to a user early in the process--to frontload value--by focusing your team on testable narratives about the user and creating a strong shared perspective. \n\nWe’ll show you how to:\n- Explain key concepts and practices from the agile product development methodology\n- Create a strong shared perspective and drive to value using personas and problem scenarios\n- Diagnose what software to develop and why using a set of agile user stories and prototypes\n- Facilitate narrative collaboration with user stories and prototypes \n- Allow for early testing and validation by analyzing and deciding on story backlogs\n\nAs a  Project Management Institute (PMI®) Registered Education Provider, the University of Virginia Darden School of Business has been approved by PMI to issue 25 professional development units (PDUs) for this course, which focuses on core competencies recognized by PMI. (Provider #2122) \n\nThis course is supported by the Batten Institute at UVA’s Darden School of Business. The Batten Institute’s mission is to improve the world through entrepreneurship and innovation: www.batteninstitute.org.", "title": "Getting Started: Agile Meets Design Thinking", "rating": "4.7", "level": null, "created_by": "University of Virginia", "package_name": "Agile Development Specialization ", "target_audience": null, "package_num": "1", "teach_by": [{"name": "Alex Cowan", "department": "Darden School of Business"}], "week_data": [{"description": "The practices that deliver excellent product are well understood, but rarely seen. In this module, we’ll identify what’s hard about creating excellent products and how agile can help. We'll begin with a discussion of the Agile Manifesto, introduce key agile terminology, and explore how agile arose from previous development practices. Then we'll look at what makes implementing agile so challenging and make a case for why it's worth it and how to do it. By the end of this module, you'll have a solid understanding of agile processes and be prepared to use the Venture Design Template to work through project development and drive toward valuable outcomes.", "video": ["Welcome to the Agile Specialization", "Welcome to the Agile Specialization (Spanish)", "Welcome to the Agile Specialization (Chinese)", "Course Overview & Requirements", "Get to Know Your Classmates in Discussion Forums", "What Is Agile?", "Agile for Managers", "Agile for Specialists", "Agile 101", "Today's Best Practices", "Scale Friendly vs. Innovation Friendly", "What Makes Agile Hard", "The Blue Button Moment", "Culture of Experimentation", "The Manifesto in Practice", "The Venture Design Framework", "Greg Cohen on Getting Started with Agile", "Bill Wake on Getting Started with Agile", "How We Learn", "The Venture Design Template", "Week 1 Slides", "Week 1 Quiz"], "title": "Problems Agile Solves"}, {"description": "The best way to avoid building something nobody wants is to start with somebody in mind. That \"somebody\" is a persona. Personas and problem scenarios tie development to the end user and help you drive toward a valuable solution. In this module, you’ll learn to develop personas, problem scenarios, and alternatives using best practices from design thinking.", "video": ["Design Thinking for Agile User Stories", "Meet the Companies: HVAC in a Hurry and Enable Quiz", "Creating and Using Personas", "Focusing Your Persona: Think, See, Feel, Do", "Demo: Using the Venture Design Template", "Demo: Drafting Personas", "Demo: Drafting Think, See, Feel, Do", "Designing User Stories: Problem Scenarios", "Needfinding with Problem Scenarios", "Skit: Meet the HVAC in a Hurry Team", "Skit: Dani's Meeting with the CEO", "Practice for the Assignment: Write a Persona", "Week 2 Slides", "Week 2 Quiz"], "title": "Agile Design with Personas, Problem Scenarios, and Alternatives"}, {"description": "Creating software that meets users' need begins with understanding that user--and user stories are a tool that helps teams understand the end-user perspective.The agile user story is the focal point for just about everything that follows. This is where we diagnose what we think we should do for the user and why, and how we’ll know if we did something relevant (or created waste). In this module, you'll learn how to conduct effective, efficient discovery, from creating an interview guide to interviewing users. You'll finish with creating Google AdWords-ready copy and drafting your personas, problem scenarios and alternatives.", "video": ["User Research for Busy People", "Researching Personas", "Demo: Creating an Interview Guide: Personas", "Demo: Creating an Interview Guide: Problem Scenarios", "Skit: Interviewing Trent the Technician", "Demo: Designing Google AdWords", "Enhancing Your Problem Hypothesis", "Preparing for Great User Stories", "Writing Great User Stories", "Adding Test Cases to User Stories", "Skit: From Problem Scenarios to Epic User Stories", "Demo: Drafting Epic User Stories", "Demo: Storyboarding an Epic", "Demo: Drafting Child Stories", "Practice for the Assignment: User Stories", "Week 3 Slides", "Personas for Needfinding, Design, and Growth", "The Customer Discovery Handbook: Persona and Problem Hypothesis", "Personas, Problem Scenarios & Propositions"], "title": "Writing Great Agile User Stories"}, {"description": "Now that you've \"discovered\" your user, you'll write your user story--and you'll make it great by layering in details. In this module, you'll learn to create detailed, specific user stories to anchor your project.", "video": ["Better Narrative, Better Story", "Investable Stories", "Bill Wake on INVEST", "Coaching for Better User Stories", "A Prototype Is Worth a Thousand  Meetings", "Designing a Meeting with User Stories", "Using \"Day in the Life\" to Drive Empathy", "Skit: Drafting Epics from Problem Scenarios", "Skit: Storyboarding an Epic", "Skit: Child Stories and Test Cases", "Demo: Drafting Problem Scenarios, Alternatives, and Value Propositions", "And on to Course 2!", "Your Best Agile User Story", "Week 4 Slides", "Quiz on User Stories", "User Stories"], "title": "Enhancing Your User Story"}]}, {"course_info": "About this course: This course takes Java beginners to the next level by covering object-oriented analysis and design. You will discover how to create modular, flexible, and reusable software, by applying object-oriented design principles and guidelines. And, you will be able to communicate these designs in a visual notation known as Unified Modelling Language (UML).\n\nYou will be challenged in the Capstone Project to apply your knowledge of object-oriented design by evolving and documenting the Java codebase for an Android application with corresponding UML documentation.\n\nAfter completing this course, you will be able to: \n• Apply the Class Responsibility Collaborator (CRC) technique to analyze and design the object-oriented model for a problem.\t\n• Explain and apply object-oriented modeling principles and their purpose (e.g., abstraction, encapsulation, decomposition, generalization).\n• Explain and apply different types of inheritance\n• Explain the difference between association, aggregation, and composition dependencies.\n• Express object-oriented models as Unified Modeling Language (UML) class diagrams.\n• Translate between UML class diagrams and equivalent Java code.\n• Apply design guidelines for modularity, separation of concerns, information hiding, and conceptual integrity to create a flexible, reusable, maintainable design.\n• Explain the tradeoff between cohesion and coupling.", "title": "Object-Oriented Design", "rating": "4.5", "level": "Intermediate", "created_by": "University of Alberta", "package_name": "Software Design and Architecture Specialization ", "target_audience": "Who is this class for: This course is primarily for learners with beginner level of object-oriented programming experience in Java, that are interested in software engineering through the application of design principles, patterns, and architectures, to create reusable, flexible and testable software applications and systems.", "package_num": "1", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "Good software design begins before coding. After establishing the initial software requirements, design practices involve two main activities: conceptual design and technical design. In this module, you will realize the importance of design and object-oriented thinking, and learn how to design software using techniques like CRC cards.", "video": ["Meet Your Presenter – Sam Jeffery", "Meet Your Facilitator – Christopher Djuric", "1.1.1 – Welcome to Software Design and Architecture", "1.1.2 – Software Architect and Design Roles in Industry", "Java Knowledge", "Java Proficiency Quiz 1", "Java Proficiency Quiz 2", "Java Proficiency Quiz 3", "Object Oriented Design Course Notes", "Course Glossary", "1.1.3 – Object-Oriented Modeling", "Discussion: Introduce Yourself", "1.1.4 – Software Requirements, Conceptual and Technical Designs", "Expressing Requirements with User Stories", "Categories of Objects in Design", "1.1.5 – Competing Qualities and Trade-offs", "1.1.6 – Record, Organize, and Refine Components", "Discussion: Modeling CRC", "Module 1 Review"], "title": "Object-Oriented Analysis and Design"}, {"description": "Best software design practices have evolved alongside programming languages. Today, all developers should be familiar with abstraction, encapsulation, decomposition, and generalization, which are fundamental principles in object-oriented design. You will learn all of these principles and how they are expressed in Java and communicated visually in Unified Modelling Language.", "video": ["1.2.1 – Models: Bridging Concepts and Solutions", "1.2.2 – Languages Evolution", "Discussion: Design Principles and Language Evolution", "1.2.3 – Abstraction", "1.2.4 – Encapsulation", "1.2.5 – Decomposition", "1.2.6 – Generalization", "1.2.7 – Abstraction in Java and UML", "1.2.8 – Encapsulation in Java and UML", "1.2.9 – Decomposition in Java and UML", "1.2.10 – Generalization with Inheritance in Java and UML", "1.2.11 – Generalization with Interfaces in Java and UML", "Ungraded Assignment -  UML Class Diagram", "Ungraded Assignment - UML Class Diagram (Solution)", "Capstone Assignment 1.1 - UML Class Diagram (Solution)", "Capstone Assignment 1.1 – UML Class Diagram", "Module 2 Review"], "title": "Object-Oriented Modeling"}, {"description": "Additional design principles will help you to create code that is flexible, reusable, and maintainable. In this module you will learn about coupling and cohesion, separation of concerns, information hiding, and conceptual integrity. You will also learn to avoid common pitfalls with inheritance, and ways to express software behavior in UML.", "video": ["1.3.1 – Coupling and Cohesion", "Discussion: Coupling and Cohesion", "1.3.2 – Separation of Concerns", "1.3.3 – Information Hiding", "1.3.4 – Conceptual Integrity", "Discussion: Design Principles", "1.3.5 – Inheritance Issues", "1.3.6 – UML Sequence Diagram", "Ungraded Assignment – UML Sequence Diagram", "Ungraded Assignment - UML Sequence Diagram (Solution)", "Capstone Assignment 1.2 - UML Sequence Diagram (Solution)", "1.3.7 – UML State Diagram", "Ungraded Assignment – UML State Diagram", "Ungraded Assignment - UML State Diagram (Solution)", "Capstone Assignment 1.3 - UML State Diagram (Solution)", "1.3.8 – Model Checking", "Capstone Assignment 1.2 – UML Sequence Diagram", "Capstone Assignment 1.3 – UML State Diagram", "Module 3 Review"], "title": "Design Principles"}, {"description": "In the previous modules you were introduced to object-oriented analysis and design, object-oriented modeling, and design principles. To cement your understanding of this material, you created a UML class diagram from an example Android code base, and used your understanding of the code base to make sequence and state diagrams to model its behavior. Now, in the final module of the course, given a description of new functionality and an updated UML class diagram, you will implement the updated design into the Android code base. After completing this development task, you will be ready to complete the final exam.\n", "video": ["Capstone Assignment 1.4 - Update the Application (Solution)", "Discussion: Last Word – Object-Oriented Design", "Acknowledgements", "Credits", "Capstone Assignment 1.4 – Update the Application", "Final Exam"], "title": "Capstone Challenge"}]}, {"course_info": "About this course: This course will get you up and running with MongoDB quickly, and teach you how to leverage its power for data analytics.\n\nWe'll start by mastering the fundamentals of MongoDB, including MongoDB’s Document data model, importing data into a cluster, working with our CRUD API and Aggregation Framework. These topics will be taught through a demo application which will give you a great first encounter of how simple and practical it can be to build applications with MongoDB.\n\nIn addition to these essential topics, you will also learn and work with useful MongoDB tools and services. You will work with Atlas, MongoDB's database as a service, MongoDB Compass, a schema visualization tool, as well as many other useful command-line utilities.", "title": "Introduction to MongoDB", "rating": "4.7", "level": "Intermediate", "created_by": "MongoDB Inc.", "package_name": null, "target_audience": "Who is this class for: This course has been primarily designed for learners who have prior experience as a data analyst or data scientist. You should already have experience with Python and Jupyter Notebooks.", "package_num": null, "teach_by": [{"name": "Norberto Leite", "department": "Engineering"}, {"name": "Kirby Kohlmorgen", "department": "Education"}, {"name": "Shannon Bradshaw", "department": "Education"}], "week_data": [{"description": "", "video": ["Welcome!", "MongoDB Document Model", "Creating an Atlas Free-Tier Cluster", "Creating an Atlas Free-Tier Cluster", "Installing MongoDB on Windows", "Installing MongoDB on OSX", "Setting Up Your Course Environment", "Getting Data Into MongoDB", "Getting Data Into MongoDB", "Using Compass to View Data in an Atlas Cluster", "Using Compass to View Data in an Atlas Cluster", "Working with Data in MongoDB", "Working with Data in MongoDB", "How to Connect to Your Atlas Cluster from Python", "How to Connect to Your Atlas Cluster from Python", "Intro to the Aggregation Framework", "Intro to the Aggregation Framework", "Your First Aggregation (Using $group)", "Your First Aggregation (Using $group)", "Incremental Improvements with $sort and $sortByCount", "Incremental Improvements with $sort and $sortByCount", "Wowza! You can do that? ($facet)", "Filtering on Scalar Fields ($match, find(), and Compass)", "Connecting to Atlas", "Analyzing Data with Aggregation"], "title": "Week 1"}, {"description": "", "video": ["Projecting Queries (Part 1)", "Projecting Queries (Part 2)", "Projecting Queries (Part 3)", "Updating Documents (Part 1)", "Updating Documents (Part 2)", "Bulk Updates", "Data Types in MongoDB", "Data Types in MongoDB", "Filtering on Array Fields", "Setting Up MFlix", "How MFlix Works with MongoDB", "Sort, Skip, and Limit", "Sort, Skip, and Limit", "Query movies using operators", "Querying movies using operators", "The $elemMatch Operator", "The $elemMatch Operator", "Querying on tomatoes subdocument", "Querying on subdocuments", "Inserting Comments in MFlix", "Inserting Comments in MFlix", "Updating comments", "Updating Documents", "Deleting Data in MFlix", "Deleting Data in MFlix", "Cleansing Data with Updates", "Querying for Documents on an Array Field"], "title": "Week 2"}, {"description": "", "video": ["Indexes in Movies (Part 1)", "Indexes in Movies (Part 2)", "MongoDB Indexes", "Geospatial Queries", "Geospatial Queries", "Graphing with MongoDB", "Graphing with MongoDB", "Improve Query Performance", "Finding Things Nearby", "Making Plots with Matplotlib & MongoDB"], "title": "Week 3"}]}, {"course_info": "About this course: Introduction to Embedded Systems Software and Development Environments is the first course of the upcoming Embedded Software Essentials Specialization. This course is focused on giving you real world coding experience and hands on project work with ARM based Microcontrollers. You will learn how to implement software configuration management and develop embedded software applications. Course assignments include creating a build system using the GNU Toolchain GCC, using Git version control, and developing software in Linux on a Virtual Machine. The course concludes with a project where you will create your own build system and firmware that can manipulate memory.\n\nLater courses of the Specialization will use hardware tools to program and debug microcontrollers with bare-metal firmware. Using a Texas Instruments MSP432 Development Kit, you will configure a variety of peripherals, write numerous programs, and see your work execute on your own embedded platform!", "title": "Introduction to Embedded Systems Software and Development Environments", "rating": "4.6", "level": "Intermediate", "created_by": "University of Colorado Boulder", "package_name": null, "target_audience": "Who is this class for: This course is for motivated learners who have some background in computer engineering and software design and who want to break into the field of embedded systems design. \n", "package_num": null, "teach_by": [{"name": "Alex Fosdick", "department": "Electrical, Computer, and Energy Engineering"}], "week_data": [{"description": "Module 1 will introduce the learner to the components of your embedded system software development process. This module will be a quick overview for many topics with detailed analysis to follow in later modules and courses. We start with defining the hardware and software building blocks of Embedded Systems which will include a C-programming refresher. Next you will learn about the important tools a developer will need to use to help design, build and manage their designs. This includes development environments, version control and the hardware kits to install on. Learners will install and use a Virtual machine to complete Week 1 Application Assignment.", "video": ["0. Introduction to the Course", "1. Introduction to the Module", "2. Introduction to Embedded Systems", "3. Embedded Software Engineering", "4. C-Programming Review", "5. Introduction to Software Configuration Management", "6. C Standardization and Team Coding Standards", "7. Development Environments Overview", "8. Development Kits and Documentation", "9. Version Control", "Week 1 Quiz", "Week 1 Application Assignment"], "title": "Embedded System Development Components"}, {"description": "Module 2 will introduce the learner to the software development build system. Most software engineers are very knowledgeable about their build system as we need them to translate our high-level software languages to our architecture specific implementations. There are some important platform and architecture concepts that are introduced in the build system to help enforce good software design techniques. Learners will create their own build systems and utilize build tools to analyze their embedded software implementations.", "video": ["1. Introduction to Build Systems using GNU Toolsets", "2. Compiling and Invoking GCC", "3. Preprocessor Directives", "4. Creating Header and Implementation Files", "5. Linkers", "6. Make", "7. Makefiles Part 1", "8. Makefiles Part 2", "9. Other Useful GNU Bin Tools", "Week 2 Quiz", "Week 2 Application Assignment"], "title": "Compilation with GCC and GNU Make"}, {"description": "Module 3 will begin to introduce important embedded concepts like the memory systems in their design. Learners will understand how the software to hardware mapping occurs for their designs including differentiating between your program code and your program data.  Memory systems have many platform and architecture dependencies, and you will begin to learn about some of the fundamental concepts a software engineer needs to know to utilize all parts of an embedded system’s memory.", "video": ["1. Introduction to Memory Organization", "2. Memory Architectures", "3. Memory Segments", "4. Data Memory", "5. Special Keywords (Const, Extern & Static)", "6. The Stack", "7. The Heap", "8. Code Memory", "Programming Assignment Instructions", "Programming Assignment Quiz Solution", "Week 3 Quiz", "Programming Assignment Quiz"], "title": "Memory Types, Segments and Management"}, {"description": "During this week you are to going to combine what you have learned in modules 1-3 to write some memory manipulation software, incorporate into your build system and then run some test functions. At the end of the assignment you will perform a detailed code review of other learners’ software. Reviewing other learners code is very important for both your growth of software design but also for the coder to gain valuable feedback. Professional software engineering regularly go through software reviews when developing code.", "video": ["Purchasing Hardware for Course 2", "Expanded Build System and Memory"], "title": "Course 1 Final Assessment"}]}, {"course_info": "About this course: >>> By enrolling in this course you agree to the End User License Agreement as set out in the FAQ.  Once enrolled you can access the license in the Resources area <<<\n\nThe Internet of Things (IoT) is an area of rapid growth and opportunity. Technical innovations in networks, sensors and applications, coupled with the advent of 'smart machines' have resulted in a huge diversity of devices generating all kinds of structured and unstructured data that needs to be processed somewhere.  Collecting and understanding that data, combining it with other sources of information and putting it to good  use can be achieved by using connectivity, analytical and cognitive services now available on the cloud, allowing development and deployment of solutions to be achieved faster and more efficiently than ever before.\n\nThis course is an entry level introduction to developing and deploying solutions for the Internet of Things. It will focus on capturing data from a trusted device and sending the data to a cloud platform where it can be exploited by the many services available. You will explore all the steps required to create a basic IoT solution using a popular device, the Raspberry Pi, and a trial version of the cloud-based IBM Watson IoT Platform. \n\nWhat you will learn: \nQuickly create applications that leverage connectivity and analytics as part of an integrated IoT platform.  Use Node-RED, an open-source visual application development environment, on both the device and the cloud.  Create a basic IoT solution by leveraging pre-built blocks of code that abstracts and speeds the development process. Use APIs to access the platform and explore the different connectivity options for various devices, gateways and applications. Explore options to ensure your solution makes best use of the captured data. \n \nWhat technology is required to complete the course?  \nThe programming assignments require you to have a Raspberry Pi device - any model of Raspberry Pi with a 40 pin header. The course also uses the SenseHAT extension board, whilst it is preferable to have a SenseHat there is a simulator provided if you can't get a SenseHAT.  \n\nYou will need internet connectivity to download software, connect to the platform, develop and deploy your IoT solution.\n\nYour Rasberry Pi will need the latest Rasbian Jessie OS. This OS will be on a Micro SD Card. The recommended size of the SD card is 8GB but 4GB will do. Note that the learner kit comes with a preconfigured SD card.\n\nIn order to setup the Micro SD card, you will need a computer with either a windows, apple or Linux OS. Since most computer do not have a micro SD port, you will need a Micro SD adapter or USB Micro SD card adapter. Your computer will also be used when working on the platform.\n\nTo work on your Raspberry Pi, you will need an HDMI monitor or TV to work as the display for the Raspberry Pi (DVI monitor will also work). To connect the monitor to the Raspberry Pi you will need an HDMI cable (or a DVI to HDMI cable).\nYour Raspberry Pi needs a way to connect to the internet; either an Ethernet cable for connecting to the Router, or a USB WiFi dongle if you have wireless connectivity. Note that the Raspberry Pi 3 includes built-in WiFi\nA USB Keyboard and mouse.\n\nYour Raspberry Pi will also needs a 5V micro USB power supply i(This may be a phone charger for example)\nThere is an IoT Learner kit available from element14 which includes the Raspberry Pi, a pre-flashed SD card, a case and power supply : https://www.element14.com/community/docs/DOC-82034/l/element14-iot-learner-kit \n\nWhat prerequisite skills are required ?\nThis is an entry level course, but does assume you have basic programming skills. The assignments set use both Python and JavaScript programming languages, so some basic skill in these languages is required. No previous experience with IBM Bluemix or the IBM Watson IoT Platform is required.\n\nWhat additional resources do I need for this course? \nThe Server side code for the assignments will use the IBM Bluemix cloud platform, so you will need to sign up for a free account on that platform.\n\nWhen your 30-day trial expires, you can enter a credit card to keep using Bluemix. Bluemix has a set amount of free resources available to users who have registered with their credit card. If you stay within these free resources limits you will not incur any charges. This is a good idea if you are planning to take longer than 30 days to complete the course, or if you have an existing trial account that that is about to expire and you need longer time on the platform to complete the course.", "title": "A developer's guide to the Internet of Things (IoT)", "rating": "4.5", "level": "Beginner", "created_by": "IBM", "package_name": null, "target_audience": "Who is this class for: This course is an entry level course for the Internet of Things.  Some basic programming knowledge is assumed and the course requires learners to complete simple programming tasks in both Python and JavaScript.", "package_num": null, "teach_by": [{"name": "Brian Innes", "department": "IBM Digital Business Group"}, {"name": "Yianna Papadakis Kantos", "department": "IBM Watson IoT"}], "week_data": [{"description": "Welcome to the course.  This learning module introduces you to course and the instructors.  The module outlines the content covered on the course and gives an introduction to the Internet of Things.  It also discusses the requirements needed to complete the course including the hardware, software and details of prerequisite skills required to complete the programming assignments ", "video": ["Welcome to A developer's guide to the Internet of Things", "Course Prerequisites", "Summary of the lessons", "What practical work is in this course?", "Learning module summary: About this course", "Overview of Internet of Things", "Learning module  summary: What is the Internet of Things?", "IoT Quiz"], "title": "Introduction to the course"}, {"description": "An Internet of Things solution usually requires a back-end server to receive and process data coming from sensors.  Cloud platforms allow new solutions to be created and deployed very rapidly without having to worry about how to host the application.  This series of lessons introduces you to a cloud based Platform as a Service and an open source rapid application development environment called NodeRED.", "video": ["Introduction to IBM Bluemix - Agenda", "Overview of Cloud Computing", "What is IBM Bluemix?", "Create an IBM Bluemix account", "Get an IBM Cloud promo code", "A tour of IBM Bluemix", "IBM Bluemix Summary", "Learning module summary: Introduction to Platform as a Service - IBM Bluemix", "Deploying Node-RED on the IBM Cloud", "Deploy NodeRED to Bluemix using a Boilerplate - step by step", "Introduction to NodeRED - 1", "Introduction to NodeRED - 2", "Adding a new node - step by step", "Learning module summary: Rapid application development for Internet of Things", "The NodeRED Function node part 1", "Function node - step by step", "The NodeRED Function node part 2", "The NodeRED Function node part 3", "Making packages available to the function node - step by step", "Submitting your first assignment", "Learning module summary: NodeRED function node", "NodeRED Additional node part 1", "NodeRED Additional node part 2", "Template node sample flow", "NodeRED Additional node part 3", "Controlling a node using input data", "NodeRED Additional node part 4", "Learning module summary: Additional NodeRED nodes", "Using the function node", "Your First NodeRED application", "NodeRED application"], "title": "Rapid application development in the cloud"}, {"description": "This unit looks at how to add a device to your solution.  Creating an application on a Raspberry Pi and establishing secure, trusted communication between your cloud application and devices", "video": ["A quick look at devices and sensor options", "Setting up a Raspberry Pi and Raspberry Pi Sense Hat", "Setting up your Raspberry Pi - step by step", "Extra resource – (for Windows) Install the Raspbian Jessie OS on an SD Card", "Learning module summary: Raspberry Pi and SenseHAT", "NodeRED on Raspberry Pi part 1", "NodeRED on Raspberry Pi part 2", "QuickStart flow - step by step", "Learning module summary: Rapid Application Development with NodeRED on a Raspberry Pi", "Watson Internet of Things platform", "Devices, Applications and Gateways part 1", "Devices, Applications and Gateways part 2", "Learning module summary: Introduction to the Watson Internet of Things Platform", "Sending commands to a device", "SenseHAT and SenseHAT simulator nodes in NodeRED", "Additional assistance for the end-to-end assignment", "Learning module summary: Controlling the device", "QuickStart flow on Raspberry Pi", "Using the NodeRED flow editor with your own Watson IoT platform.", "End-to-end scenario"], "title": "Rapid application development on a Raspberry Pi "}, {"description": "Up to now the course has used the NodeRED rapid application development environment.  This unit looks at how to program for the Internet of Things platform using more traditional programming environments", "video": ["IoT platform APIs", "SenseHAT python API", "Learning module summary: Watson IoT APIs", "MQTT", "MQTT Exercise", "You reached the end of this learning module.  You are now able to:", "Deploying an application to Bluemix part 1", "Application development for Bluemix - basic server step by step", "Deploying an application to Bluemix part 2", "Application development for Bluemix - deploy to Bluemix step by step", "Installing additional developer tools", "Deploying an application to Bluemix part 3", "Application development for Bluemix - accessing services step by step", "Learning module summary: Deploying Applications to Bluemix", "Course summary", "SenseHAT python API", "MQTT in Watson IoT Platform", "Using the IoT APIs in a Bluemix application"], "title": "Lower level programming for the Internet of Things"}]}, {"course_info": "About this course: This course introduces you to the design and implementation of Android applications for mobile devices. You will develop an app from scratch, assuming a basic knowledge of Java, and learn how to set up Android Studio, work with various Activities and create simple user interfaces to make your apps run smoothly.", "title": "Programming Mobile Applications for Android Handheld Systems: Part 1", "rating": "4.6", "level": null, "created_by": "University of Maryland, College Park", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Dr. Adam Porter", "department": "Computer Science"}], "week_data": [{"description": " ", "video": ["Overview", "Introduction to the Android Platform", "The Android Development Environment - Part 1", "The Android Development Environment - Part 2", "Android Platform and Development Environment", "Lab - Learn to Submit", "Lab - Development Environment"], "title": "Android Platform and Development Environment"}, {"description": " ", "video": ["Application Fundamentals - Part 1", "Application Fundamentals - Part 2", "The Activity Class - Part 1", "The Activity Class - Part 2", "Introduction to Amazon Guest Lecture - AppStores and Free Ebook", "Introduction to Amazon Guest Lecture - App Monetization", "Preview - Programming Mobile Services for Android Handheld Systems", "Application Fundamentals and the Activity Class", "Lab - The Activity Class"], "title": "Application Fundamentals and the Activity Class"}, {"description": "", "video": ["The Intent Class - Part 1", "The Intent Class - Part 2", "Permissions", "The Fragment Class - Part 1", "The Fragment Class - Part 2", "Intents, Permissions, and Fragments", "Lab - Intents", "Lab - Permission", "Lab - Fragments"], "title": "Intents, Permissions, and Fragments"}, {"description": " ", "video": ["User Interface Classes - Part 1", "User Interface Classes - Part 2", "User Interface Classes - Part 3", "User Interface Classes - Part 4", "Part 1 Closing", "User Interface Classes", "Lab - User Interface Classes"], "title": "User Interface Classes"}, {"description": "", "video": ["Modern Art UI"], "title": "Build From Scratch Assignment"}]}, {"course_info": "About this course: If you have ever used a navigation service to find optimal route and estimate time to destination, you've used algorithms on graphs. Graphs arise in various real-world situations as there are road networks, computer networks and, most recently, social networks! If you're looking for the fastest time to get to work, cheapest way to connect set of computers into a network or efficient algorithm to automatically find communities and opinion leaders in Facebook, you're going to work with graphs and algorithms on graphs.\n\nIn this course, you will first learn what a graph is and what are some of the most important properties. Then you'll learn several ways to traverse graphs and how you can do useful things while traversing the graph in some order. We will then talk about shortest paths algorithms — from the basic ones to those which open door for 1000000 times faster algorithms used in Google Maps and other navigational services. You will use these algorithms if you choose to work on our Fast Shortest Routes industrial capstone project. We will finish with minimum spanning trees which are used to plan road, telephone and computer networks and also find applications in clustering and approximate algorithms.", "title": "Algorithms on Graphs", "rating": "4.7", "level": "Intermediate", "created_by": "University of California, San Diego, National Research University Higher School of Economics", "package_name": "Data Structures and Algorithms Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Alexander S. Kulikov", "department": "Department of Computer Science and Engineering"}, {"name": "Michael Levin", "department": "Computer Science"}, {"name": "Daniel M Kane", "department": "Department of Computer Science and Engineering / Department of Mathematics"}, {"name": "Neil Rhodes", "department": "Computer Science and Engineering"}], "week_data": [{"description": "Graphs arise in various real-world situations as there are road networks, computer networks and, most recently, social networks! If you're looking for the fastest time to get to work, cheapest way to connect set of computers into a network or efficient algorithm to automatically find communities and opinion leaders hot in Facebook, you're going to work with graphs and algorithms on graphs. In this module, you will learn ways to represent a graph as well as basic algorithms for decomposing graphs into parts. In the programming assignment of this module, you will apply the algorithms that you’ve learned to implement efficient programs for exploring mazes, analyzing Computer Science curriculum, and analyzing road networks. In the first week of the module, we focus on undirected graphs.", "video": ["Welcome", "Graph Basics", "Representing Graphs", "Slides and External References", "Exploring Graphs", "Connectivity", "Previsit and Postvisit Orderings", "Slides and External References", "Programming Assignment 1: Decomposition of Graphs"], "title": "Decomposition of Graphs 1"}, {"description": "This week we continue to study graph decomposition algorithms, but now for directed graphs.", "video": ["Directed Acyclic Graphs", "Topological Sort", "Strongly Connected Components", "Computing Strongly Connected Components", "Slides and External References", "Programming Assignment 2: Decomposition of Graphs"], "title": "Decomposition of Graphs 2"}, {"description": "In this module you will study algorithms for finding Shortest Paths in Graphs. These algorithms have lots of applications. When you launch a navigation app on your smartphone like Google Maps or Yandex.Navi, it uses these algorithms to find you the fastest route from work to home, from home to school, etc. When you search for airplane tickets, these algorithms are used to find a route with the minimum number of plane changes. Unexpectedly, these algorithms can also be used to determine the optimal way to do currency exchange, sometimes allowing to earh huge profit! We will cover all these applications, and you will learn Breadth-First Search, Dijkstra's Algorithm and Bellman-Ford Algorithm. These algorithms are efficient and lay the foundation for even more efficient algorithms which you will learn and implement in the Shortest Paths Capstone Project to find best routes on real maps of cities and countries, find distances between people in Social Networks. In the end you will be able to find Shortest Paths efficiently in any Graph. This week we will study Breadth-First Search algorithm.", "video": ["Most Direct Route", "Breadth-First Search", "Breadth-First Search (continued)", "Implementation and Analysis", "Proof of Correctness", "Proof of Correctness (continued)", "Shortest-Path Tree", "Reconstructing the Shortest Path", "Slides and External References", "Programming Assignment 3: Paths in Graphs"], "title": "Paths in Graphs 1"}, {"description": "This week we continue to study Shortest Paths in Graphs. You will learn Dijkstra's Algorithm which can be applied to find the shortest route home from work. You will also learn Bellman-Ford's algorithm which can unexpectedly be applied to choose the optimal way of exchanging currencies. By the end you will be able to find shortest paths efficiently in any Graph.", "video": ["Fastest Route", "Naive Algorithm", "Dijkstra's Algorithm: Intuition and Example", "Dijkstra's Algorithm: Implementation", "Dijkstra's Algorithm: Proof of Correctness", "Dijkstra's Algorithm: Running Time", "Slides and External References", "Currency Exchange", "Currency Exchange: Reduction to Shortest Paths", "Bellman-Ford Algorithm", "Bellman-Ford Algorithm: Proof of Correctness", "Negative Cycles", "Infinite Arbitrage", "Slides and External References", "Programming Assignment 4: Paths in Graphs"], "title": "Paths in Graphs 2"}, {"description": "In this module, we study the minimum spanning tree problem. We will cover two elegant greedy algorithms for this problem: the first one is due to Kruskal and uses the disjoint sets data structure, the second one is due to Prim and uses the priority queue data structure. In the programming assignment for this module you will be computing an optimal way of building roads between cities and an optimal way of partitioning a given set of objects into clusters (a fundamental problem in data mining).", "video": ["Building a Network", "Greedy Algorithms", "Cut Property", "Kruskal's Algorithm", "Prim's Algorithm", "Slides and External References", "Programming Assignment 5: Minimum Spanning Trees"], "title": "Minimum Spanning Trees"}, {"description": "In this module, you will learn Advanced Shortest Paths algorithms that work in practice 1000s (up to 25000) of times faster than the classical Dijkstra's algorithm on real-world road networks and social networks graphs. You will work on a Programming Project based on these algorithms. You will find the shortest paths on the real maps of parts of US and the shortest paths connecting people in the social networks. We encourage you not only to use the ideas from this module's lectures in your implementations, but also to come up with your own ideas for speeding up the algorithm! We encourage you to compete on the forums to see whose implementation is the fastest one :)", "video": ["Programming Project: Introduction", "Bidirectional Search", "Six Handshakes", "Bidirectional Dijkstra", "Finding Shortest Path after Meeting in the Middle", "Computing the Distance", "Slides and External References", "A* Algorithm", "Performance of A*", "Bidirectional A*", "Potential Functions and Lower Bounds", "Landmarks (Optional)", "Slides and External References", "Highway Hierarchies and Node Importance", "Preprocessing", "Witness Search", "Query", "Proof of Correctness", "Node Ordering", "Slides and External Refernces", "Bidirectional Dijkstra, A* and Contraction Hierarchies", "Advanced Shortest Paths"], "title": "Advanced Shortest Paths Project (Optional)"}]}, {"course_info": "About this course: This course extends object-oriented analysis and design by incorporating design patterns to create interactive applications. Through a survey of established design patterns, you will gain a foundation for more complex software applications. Finally, you will identify problematic software designs by referencing a catalog of code smells.\n\nYou will be challenged in the Capstone Project to redesign an existing Java-based Android application to implement a combination of design patterns. You will also critique a given Java codebase for code smells.\n\nAfter completing this course, you will be able to: \n• Demonstrate how to use design patterns to address user interface design issues.\t\n• Identify the most suitable design pattern to address a given application design problem.\t\n• Apply design principles (e.g., open-closed, dependency inversion, least knowledge).\t\n• Critique code by identifying and refactoring anti-patterns.\n• Apply the model-view-controller architectural pattern.", "title": "Design Patterns", "rating": "4.6", "level": "Intermediate", "created_by": "University of Alberta", "package_name": "Software Design and Architecture Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "Design patterns help to solve common design issues in object-oriented software. You will learn what they are and how they can be applied. In this module you will learn the creational and structural design patterns. You will continue to learn and practice expressing designs in UML, and code some of these patterns in Java.", "video": ["Meet Your Presenter – Sam Jeffery", "Meet Your Facilitator – Christopher Djuric", "2.1.1 – What is a Design Pattern?", "Discussion: Introduce Yourself", "Discussion: Design Pattern Examples", "Design Patterns Glossary", "2.1.2 – Creational, Structural, and Behavioural Patterns", "2.1.3 – Singleton Pattern", "2.1.4 – Factory Method Pattern", "2.1.5 – Facade Pattern", "2.1.6 – Adapter Pattern", "Ungraded Assignment – Adapter Pattern", "Ungraded Assignment - Adapter Pattern (Solution)", "2.1.7 – Composite Pattern", "Ungraded Assessment – Composite Pattern", "Ungraded Assignment - Composite Pattern (Solution)", "2.1.8 – Proxy Pattern", "2.1.9 – Decorator Pattern", "Module 1 Review"], "title": "Introduction to Design Patterns: Creational & Structural Patterns"}, {"description": "You will continue learning useful design patterns and add them to your toolbox. In this module, you will learn the behavioural patterns. This will include communicating them in UML and coding them in Java!", "video": ["2.2.1 – Template Method Pattern", "2.2.2 – Chain of Responsibility Pattern", "2.2.3 – State Pattern", "Discussion: Undo/Redo As a Pattern", "2.2.4 – Command Pattern", "Mediator Pattern", "Capstone Assignment 2.1 - Implement the Command Pattern (Solution)", "2.2.5 – Observer Pattern", "Ungraded Assignment – Observer Pattern", "Ungraded Assignment - Observer Pattern (Solution)", "Capstone Assignment 2.1– Implement the Command Pattern", "Module 2 Review"], "title": "Behavioural Design Patterns"}, {"description": "You will learn a design pattern that is very useful for user interfaces: model-view-controller, or MVC. Then you will learn some principles underlying the design patterns, to create software that is flexible, reusable, and maintainable. Finally, you will learn some of the symptoms of bad design, which we call code smells or antipatterns.", "video": ["2.3.1 – MVC Pattern", "Ungraded Assignment – MVC Pattern", "Ungraded Assignment - MVC Pattern (Solution)", "Capstone Assignment 2.2 - Implement MVC Pattern (Solution)", "Liskov Substitution Principle", "2.3.2 – Open/Closed Principle", "2.3.3 – Dependency Inversion Principle", "2.3.4 – Composing Objects Principle", "2.3.5 – Interface Segregation Principle", "2.3.6 – Principle of Least Knowledge", "Discussion: Stories of Bad Coding", "2.3.7 – Part 1 - Code Smells", "2.3.7 – Part 2 - Code Smells", "Capstone Assignment 2.2 – Implement MVC Pattern", "Module 3 Review"], "title": "Working with Design Patterns & Anti-patterns"}, {"description": "In the previous modules, you were introduced to a variety of design patterns, and applied two of these to the example Android code base. Now, in the final module of the course, you will identify and fix specific code smells in this code base. After completing these tasks, you will be ready to complete the final exam.", "video": ["Capstone Assignment 2.3 - Identify and Fix Code Smells (Solution)", "Discussion: Last Word – Design Patterns", "Acknowledgements", "Credits", "Capstone Assignment 2.3 – Identify and Fix Code Smells", "Final Exam"], "title": "Capstone Challenge"}]}, {"course_info": "About this course: Building on the course Programming Fundamentals, this course will teach you how to write code by first planning what your program should do—an important approach for novice and professional programmers. You will learn how to compile and run your program, and then how to test and debug it. This course builds on the Seven Steps you have already learned and provides a framework for systematically testing for problems and fixing them, so you can find and fix problems efficiently.", "title": "Writing, Running, and Fixing Code in C", "rating": null, "level": "Beginner", "created_by": "Duke University", "package_name": null, "target_audience": "Who is this class for: This course is for learners who have an interest in learning how to program, for people with no programming experience or for people with some experience who would like to gain solid fundamentals and a deeper understanding of how to program effectively.", "package_num": null, "teach_by": [{"name": "Andrew D. Hilton", "department": "Electrical and Computer Engineering"}, {"name": "Genevieve M. Lipp", "department": "Electrical and Computer Engineering/Mechanical Engineering"}, {"name": "Anne Bracy", "department": "Computer Science, Cornell University"}], "week_data": [{"description": "In this module, you will learn to write code and do your first assignment in the Practice Programming Environment. You have practiced the first four steps of the Seven Steps in the previous course, and you will review them here before learning Step 5: Translating Your Algorithm to Code. Expert programmers spend most of their time planning before they begin writing code, and you will learn to do the same!", "video": ["Introduction to Writing Code", "Planning", "Revisiting Step 1", "Revisiting Step 2", "Step 3: Generalizing Values", "Step 3: Repetitions", "Step 3: Conditional Behavior", "Revisiting Step 4", "Intersection of Two Rectangles", "Steps 1–4 Review", "Translation to Code", "Translating Algorithm Components", "Translating the Intersection Algorithm to Code", "Completed Rectangle Intersection Code", "Top-down Design and Composability", "Stars Example", "Step 5 Concepts", "Introduction to the Programming Environment", "Introduction to the Programming Environment", "UNIX basics", "More UNIX Commands", "Editing Files with Emacs", "Emacs", "Git", "More about Git", "GitHub", "How Assignments Work in This Course", "Next Steps", "Using the Programming Environment", "Assignment 01_apple", "Assignments 02_code1 and 03_code2"], "title": "Writing Code"}, {"description": "Now that you know how to plan an algorithm and translate it to code, you need to learn how to compile and run it! You will learn about the compiler, which takes the code you wrote and translates it into instructions a machine can execute, which you can then run. You will also learn about different options you can give the compiler, as well as different ways to run your program that give you debugging information.", "video": ["Now We Need to Compile", "Compiling Overview", "Compilation Process", "Preprocessing", "Compiling", "\"Hello World\"", "Planning isPrime", "Generalizing isPrime", "Translating isPrime to Code", "Getting Help: man Pages", "Comparing Output with diff", "More about Macros and Header Files", "The Actual Compiler", "Compiler Errors", "Assembling", "Linking", "Compilation Process", "Build Tool: make", "Make", "Compiling with a Makefile", "Fancier make Options", "Running Your Program", "valgrind", "Compiler Options", "Make and Valgrind", "Assignment 04_compile", "Assignment 05_squares", "Assignments 06_rect and 07_retirement"], "title": "Compiling and Running"}, {"description": "Two skills that are crucial to good programming are testing—finding problems with your code, and debugging—fixing them. In this module you will learn systematic ways to identify problems in your code, as well as how to apply the scientific method to fix your program when you do find a bug.", "video": ["Testing Means Finding Bugs", "Black Box Testing", "Test-driven Development", "Practical Tips for Designing Test Cases", "White Box Testing", "Generating Test Cases", "Asserts", "Code Review", "Code Review", "Testing", "Step 7: Debugging", "The Scientific Method", "Accept or Reject Your Hypothesis?", "Debugging", "Finding Problems with Valgrind", "Intro to gdb", "Getting Started with gdb", "Investigating the State of Your Program", "Controlling Execution", "Gathering Information with gdb", "Watchpoints", "Signals", "gdb", "Assignments 08_testing and 09_testing", "Assignment 10_gdb"], "title": "Testing and debugging"}, {"description": "In this module you will begin the project you will complete over the course of the rest of the specialization. At the end of each course, you will write a piece of a program that will calculate the odds of different poker hands winning with a Monte Carlo simulation—a way to calculate complicated probabilities by generating random data.", "video": ["Introduction to the Poker Project", "Poker Project Roadmap", "Rules of Poker", "Assignment c2prj_cards", "Assignment c3prj_testing"], "title": "Project"}]}, {"course_info": "About this course: In this course, you will gain an understanding of the critical importance of user interface design. You will also learn industry-standard methods for how to approach the design of a user interface and key theories and frameworks that underlie the design of most interfaces you use today.\n\nThrough a series of case studies on commercial systems - many of which you likely use on a regular basis - we will illustrate the benefits of good design. We will also demonstrate how the costs of bad design can often be severe (in user experience, money, and even human lives).\n\nYou will then gain a high-level understanding of the user-interface design process. You will be introduced to common design scenarios - e.g. improving on existing designs and starting a new design from scratch - and the general design processes that tend to be used for each scenario.\n\nFinally, we will begin introducing the large body of existing knowledge on design by providing overviews of core user interface design theories and concepts. This key foundational information will help you avoid “reinventing the wheel” when you are designing your interfaces in this specialization.", "title": "Introduction to UI Design", "rating": "4.6", "level": "Beginner", "created_by": "University of Minnesota", "package_name": "User Interface Design Specialization ", "target_audience": "Who is this class for: Although our primary audience is people with some programming experience, you do not need to know how to program to successfully complete this course! ", "package_num": "1", "teach_by": [{"name": "Loren Terveen", "department": "Computer Science and Engineering"}, {"name": "Haiyi Zhu", "department": "Computer Science and Engineering"}, {"name": "Lana Yarosh", "department": "Computer Science and Engineering"}, {"name": "Dr. Brent Hecht", "department": "Computer Science and Engineering"}, {"name": "Joseph A Konstan", "department": "Computer Science and Engineering"}], "week_data": [{"description": "", "video": ["Introductory Panel:  UI Design and Why it Matters", "Introduction to the Specialization, Courses, and Capstone", "User Interface Hall of Fame / Shame", "Case Study #1:  UI Disasters, including GPS fails", "Case Study #2: Corporate Value:  Citibank ATM", "Case Study #3:  Microsoft Office 2007 Ribbon", "Case Study #4: International Children's Digital Library", "Case Study #5: Taxes and Tickets", "Case Study #6: AirBnB vs. CouchSurfing", "Introductory Video", "Activity: Hall of Fame/Shame Interfaces", "Intro to UI Design:  Introduction and Overview"], "title": "Introduction and Overview"}, {"description": "", "video": ["Design Process Introduction", "Designing to Address a Problem w/o Solution Ideas", "Designing for a known solution direction", "Designing to iterate on/improve an existing solution", "Common Elements", "Usability Engineering and Task-Centered Approaches", "Use Cases, Personas, Tasks, and Scenarios", "Intro to Design-Centered Approaches", "Design-Centered Methods & When They Work Best", "Pulling it all Together:  Best from Each; Practical Techniques for someone who isn't a trained designer", "Assignment Video: Tasks and Scenarios", "Sample Task and Scenario #1", "Sample Task and Scenario #2", "Sample Task and Scenario #3", "Task/Scenario Evaluation #1", "Task/Scenario Evaluation #2", "Task/Scenario Evaluation #3", "Task and Walkthrough Scenario Assignment", "Intro to UI Design:  UI Design Process"], "title": "UI Design Process"}, {"description": "", "video": ["Read Me First:  About these two weeks", "Intro", "Fitts' Law", "Short- and long-term memory, attention", "Perception and visualization, hierarchy", "Mistakes, Errors, and Slips", "Conceptual models", "The Gulf of Execution and the Gulf of Evaluation", "Design Principles: Visibility, Feedback, Mappings, Constraints", "Interacting beyond individuals (social psychology)", "High-Level Models: Distributed Cognition, Activity Theory, Situated Action", "Assignment Video: Interface Critiques", "Part 1: Assignment Overview and Properties of a Good Critique", "Part 2: Worked Examples", "Part 3: Test your knowledge", "Interface Critique"], "title": "Psychology and Human Factors for User Interface Design"}, {"description": "", "video": ["Interview with Don Norman", "Intro to UI Design: Psychology and Human Factors: Shortcuts to Understanding Your Users"], "title": "Psychology and Human Factors -- Continued"}]}, {"course_info": "About this course: The Arduino is an open-source computer hardware/software platform for building digital devices and interactive objects that can sense and control the physical world around them. In this class you will learn how the Arduino platform works in terms of the physical board and libraries and the IDE (integrated development environment). You will also learn about shields, which are smaller boards that plug into the main Arduino board to perform other functions such as sensing light, heat, GPS tracking, or providing a user interface display. The course will also cover programming the Arduino using C code and accessing the pins on the board via the software to control external devices. Please note that this course does not include discussion forums.\n\nUpon completing this course, you will be able to:\n1.       Outline the composition of the Arduino development board\n2.       Describe what it means to program the board's firmware\n3.       Read board schematics\n4.       Install Arduino IDE\n5.       Describe what \"shields\" are and how they are used\n6.       Specify the role of libraries in the use of shields\n7.       Compile and run a program\n8.       Name C Variables and Types\n9.       Name common C operators\n10.     Use conditionals and loops\n11.     Explain functions, their definition and invocation\n12.     Explain the implications of global variables\n13.     Undertake the Arduino build process\n14.     Describe the role of the tools behind the IDE\n15.     Describe how to invoke functions in classes\n16.     Explain the structure of an Arduino sketch\n17.     Access the pins of the Arduino\n18.     Differentiate between digital and analog pin\n19.     Debug embedded software\n20.     Explain the importance of controllability and observability in the debugging process\n21.     Describe common debugging architectures for embedded systems\n22.     Explain how the UART Serial communication protocol works\n23.     Describe how the Arduino Serial library performs serial communication", "title": "The Arduino Platform and C Programming", "rating": "4.6", "level": null, "created_by": "University of California, Irvine", "package_name": "An Introduction to Programming the Internet of Things (IOT) Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Ian Harris", "department": "Department of Computer Science"}], "week_data": [{"description": "This module provides an introduction to the Arduino environment which is composed of three things: the Arduino board, the Arduino IDE, and the Arduino-compatible shields together with their libraries. We first investigate the board, discussing all of its main components, inputs, and outputs. We discuss how each component is used and we examine the board schematic to see how they are connected. We then discuss the Arduino Integrated Development Environment (IDE) which is used primarily to write, compile, and upload code. We survey the interface of the IDE and discuss how to install and use it. We also examine the use of shields to extend the functionality of an Arduino-based system. We discuss how shield libraries provide a useful abstraction to facilitate programming.", "video": ["Pre-Course Survey", "Course Overview", "Module 1 Objectives", "Module 1 Reading", "Module 1 Introduction (video)", "Lecture 1.1: Arduino Platform", "Lecture 1.2: Arduino Board", "Lecture 1.3: Direct Programming", "Lecture 2.1: Arduino Schematics", "Lecture 2.2: Arduino IDE", "Lecture 2.3: Compiling Code", "Lecture 3.1: Arduino Shields and Libraries", "Lecture 3.2: Arduino Basic Setup", "Module 1 Quiz", "Install the Arduino IDE on your computer"], "title": "Arduino Environment"}, {"description": "This module covers the basics of the C programming language which will be used to write code for the Arduino. The course first covers basic syntax, variables, and types. Most of the basic C operators are presented. Conditional statements (if, switch) and loops (while, for) are described. The concept of functions is presented together with how to define and call functions. Creation and use of global variables is explained.\n", "video": ["Module 2 Objectives", "Module 2 Reading", "Module 2 Introduction (video)", "Planning Ahead for Modules 3 and 4", "Lecture 1.1: Setting Up Your Environment", "Lecture 1.2: Hello World", "Lecture 1.3: Variables", "Lecture 2.1: Basic C Operators", "Lecture 2.2: Conditionals", "Lecture 2.3: Loops", "Lecture 3.1: Functions", "Lecture 3.2: Global Variables", "Module 2 Quiz", "Program to compute Fibonacci sequence "], "title": "C Programming"}, {"description": "This module describes the composition of an Arduino program, or sketch, and the process by which it is compiled and uploaded. The Arduino IDE is a user interface for the software tools which actually compile and upload the program. We outline the use of these tools in the build process. We describe the basic structure of a sketch, including the use of the setup() and loop() functions. The main interface of an Arduino is through its pins, so we describe how to access those pins from a sketch.", "video": ["Module 3 Objectives", "Module 3 Reading", "Module 3 Introduction (video)", "Information About the Arduino", "Lecture 1.1: Arduino Toolchain", "Lecture 1.2: Cross-Compilation", "Lecture 1.3: Arduino Sketches", "Lecture 2.1: Classes", "Lecture 2.2: Sketch Structure", "Lecture 2.3: Pins", "Lecture 3.1: Input and Output", "Lecture 3.2: Blink Example", "Video Demonstration: Arduino Blink Example", "Module 3 Quiz", "Module 3 Peer Review"], "title": "Arduino Programs"}, {"description": "This module is an introduction on debugging embedded software on an Arduino. We discuss the basic debugging requirements: controllability and observability. The debugging environment available for an Arduino UNO is limited, so we describe how to use the UART communication protocol to gain controllability and observability. We present the use of the Serial library to communicate with the Arduino through the serial monitor.", "video": ["Module 4 Objectives", "Module 4 Reading", "Module 4 Introduction (video)", "Information about the Arduino", "Lecture 1.1: Debugging", "Lecture 1.2: Debug Environments", "Lecture 1.3: Debug via Serial", "Lecture 2.1: UART Protocol", "Lecture 2.2: UART Synchronization", "Lecture 2.3: UART Parity and Stop", "Lecture 3.1: Serial on Arduino", "Lecture 3.2: Reading from Serial", "End-of-Course Survey", "Module 4 Quiz", "Module 4 Peer Review"], "title": "Module 4"}]}, {"course_info": "About this course: If you love games and want to learn how to make them, then this course will start you down that path. Making games is a creative and technical art form. In this course you will familiarize yourself with the tools and practices of game development. You will get started developing your own videogames using the industry standard game development tools, including the Unity3D game engine and C#. At the end of the course you will have completed three hands-on projects and will be able to leverage an array of game development techniques to create your own basic games. This course is for individuals interested in becoming a game designer, game artist, or game programmer.", "title": "Introduction to Game Development", "rating": "4.8", "level": null, "created_by": "Michigan State University", "package_name": "Game Design and Development Specialization ", "target_audience": null, "package_num": "1", "teach_by": [{"name": "Brian Winn", "department": "Media and Information"}], "week_data": [{"description": "The only thing more fun than playing games is making them. You can make games. All it takes is some time, a willingness to learn and a passion to create. You don't need to be a \"coder\" to make games. Part of the beauty of games is that they take a variety of skills to make. Art, creativity, and systems thinking are just as important as code. Join us in this journey into game making!", "video": ["Course Overview", "Meet the instructor: Brian Winn", "Who is taking the course?", "About MSU", "Game Development Overview", "Additional Resources", "Intro to Unity3D", "Troubleshooting Tips", "Download and Install Unity3D", "Setting Up Your Workstation", "Unity3D Editor Configuration", "Unity3D Editor Quick Reference", "Unity3D Editor Walkthrough", "Additional Resources", "Game Graphics Concepts - Part 1 of 3", "Game Graphics Concepts - Part 2 of 3", "Game Graphics Concepts - Part 3 of 3", "Creating Game Graphics", "Game Audio Concepts", "Creating Game Audio", "Asset Creation Tools", "Asset Acquisition Resources", "The Asset Pipeline", "End of Week 1", "Game Development Concepts", "Game Engines and Unity Editor", "Game Asset Concepts"], "title": "From Game Player to Game Developer"}, {"description": "One of the reasons we use Unity3D is its visual editor which makes creating interactive games accessible to both creative and technical individuals. In this module, you will create your first Unity3D project from start to finish. Using a variety of graphical and audio assets and a library of scripts, you will create a simple model of our solar system.  By the end of the module, you should have a good understanding of the Unity3D editor and the workflow for creating games.", "video": ["Project Overview", "Download Project Assets", "Getting Started", "Working in 3D Space", "Setting up the scene", "Adding Behaviors", "Materials", "Lighting", "Audio", "Cameras", "Build & Deploy", "Testing WebGL locally in a Browser", "Finishing Up", "End of Week 2", "Additional Resources", "Working in 3D Space", "Materials, Audio, and Lights", "Cameras, Building, and Deploying", "Solar System Project Peer Review"], "title": "Intro to Unity3D Development"}, {"description": "Unity3D is a powerful tool for creating games. In this module, you will create your first actual game from start to finish, called Roller Madness.  This ball rolling game will introduce you to the concepts of physics, health and damage, pickups, enemies, spawners, a user interface, and a variety of visual and audio effects. This is your right of passage into game development!", "video": ["Project Overview", "Downloading Project Assets", "Getting Started", "Setting Up the Scene", "Camera Setup", "Project Organization", "Physics", "Player Control \u000band Appearance", "Using Game Controllers", "Health and Damage", "Pickups", "UI Basics", "Game Manager", "Enemies", "Particles and SFXs", "Animation", "Spawners", "Finishing Up", "End of Week 3", "Additional Resources", "Game Objects, Prefabs, and Standard Assets", "Physics, Player Control, and Health & Damage", "Pickups, UI, Game Manager, and Enemies", "Particles, SFX, Animation, and Spawners", "Roller Madness Project Peer Review"], "title": "Creating Games in Unity3D"}, {"description": "Now, don't get scared, but games need code. Code is the canvas upon which game systems are painted. However, that doesn't mean you need to be a C# ninja. In this module, you will start to learn the ins-and-outs of programming C# in Unity. You will apply this knowledge to build a first person shooter game, called Box Shooter.  By the end of the module, you will have the tools to begin to develop your own custom games!", "video": ["Learning to Program", "Unity Programming Concepts", "Unity3D Scripting Quick Reference", "Project Overview", "Downloading Project Assets", "Getting Started", "Movable Targets Part 1", "Movable Targets Part 2", "Movable Targets Part 3", "Player Setup", "Camera Setup", "Projectile Setup", "Shooting Projectiles", "UI Setup", "Game Manager", "Play Again", "Particles and SFX", "Target Prefab Setup", "Spawner Setup", "Animated Targets", "Animator Setup", "Finishing Up", "End of Week 4", "Additional Resources", "Programming Concepts 1", "Programming Concepts 2", "Player, Camera, Projectiles, and Shooting", "UI, Game Manager, Play Again, Particles, and SFX", "Targets that Spawn and Animate", "Box Shooter Project Peer Review"], "title": "Designing and Coding Gameplay Systems"}]}, {"course_info": "About this course: This course teaches learners (industry professionals and students) the fundamental concepts of parallel programming in the context of Java 8. Parallel programming enables developers to use multicore computers to make their applications run faster by using multiple processors at the same time. By the end of this course, you will learn how to use popular parallel Java frameworks (such as ForkJoin, Stream, and Phaser) to write parallel programs for a wide range of multicore platforms including servers, desktops, or mobile devices, while also learning about their theoretical foundations including computation graphs, ideal parallelism, parallel speedup, Amdahl's Law, data races, and determinism.\n\nWhy take this course?\n\n•\tAll computers are multicore computers, so it is important for you to learn how to extend your knowledge of sequential Java programming to multicore parallelism.\n•\tJava 7 and Java 8 have introduced new frameworks for parallelism (ForkJoin, Stream) that have significantly changed the paradigms for parallel programming since the early days of Java.\n•\tEach of the four modules in the course includes an assigned mini-project that will provide you with the necessary hands-on experience to use the concepts learned in the course on your own, after the course ends.\n•\tDuring the course, you will have online access to the instructor and the mentors to get individualized answers to your questions posted on forums.\n\nThe desired learning outcomes of this course are as follows:\n\n•\tTheory of parallelism: computation graphs, work, span, ideal parallelism, parallel speedup, Amdahl's Law, data races, and determinism\n•\tTask parallelism using Java’s ForkJoin framework\n•\tFunctional parallelism using Java’s Future and Stream frameworks\n•\tLoop-level parallelism with extensions for barriers and iteration grouping (chunking)\n•\tDataflow parallelism using the Phaser framework and data-driven tasks\n\nMastery of these concepts will enable you to immediately apply them in the context of multicore Java programs, and will also provide the foundation for mastering other parallel programming systems that you may encounter in the future  (e.g., C++11, OpenMP, .Net Task Parallel Library).", "title": "Parallel Programming in Java", "rating": "4.5", "level": "Intermediate", "created_by": "Rice University", "package_name": "Parallel, Concurrent, and Distributed Programming in Java Specialization ", "target_audience": "Who is this class for: The course is targeted at an audience that is already familiar with sequential programming in Java, including a basic knowledge of Java 8 lambdas. In addition, we assume that each student has access to a laptop/desktop computer with a recent installation of Java 8. The course site includes instructions on how to obtain this installation, if needed.", "package_num": "1", "teach_by": [{"name": "Vivek Sarkar", "department": "Department of Computer Science"}], "week_data": [{"description": "Welcome to Parallel Programming in Java! This course is designed as a three-part series and covers a theme or body of knowledge through various video lectures, demonstrations, and coding projects.", "video": ["Course Welcome", "General Course Info", "Course Icon Legend", "Discussion Forum Guidelines", "Get to know your classmates!", "Pre-Course Survey", "Mini Project 0: Setup", "Mini Project 0 Submission"], "title": "Welcome to the Course!"}, {"description": "In this module, we will learn the fundamentals of task parallelism. Tasks are the most basic unit of parallel programming. An increasing number of programming languages (including Java and C++) are moving from older thread-based approaches to more modern task-based approaches for parallel programming. We will learn about task creation, task termination, and the “computation graph” theoretical model for understanding various properties of task-parallel programs.  These properties include work, span, ideal parallelism, parallel speedup, and Amdahl’s Law. We will also learn popular Java APIs for task parallelism, most notably the Fork/Join framework.", "video": ["1.1 Task Creation and Termination (Async, Finish)", "1.1 Lecture Summary", "1.2 Tasks in Java's Fork/Join Framework", "1.2 Lecture Summary", "1.3 Computation Graphs, Work, Span", "1.3 Lecture Summary", "1.4 Multiprocessor Scheduling, Parallel Speedup", "1.4 Lecture Summary", "1.5 Amdahl's Law", "1.5 Lecture Summary", "ReciprocalArraySum using Async-Finish (Demo)", "ReciprocalArraySum using RecursiveAction's in Java's Fork/Join Framework (Demo)", "Mini Project 1: Reciprocal-Array-Sum using the Java Fork/Join Framework", "Mini Project 1 Submission", "Module 1 Quiz"], "title": "Task Parallelism"}, {"description": "Welcome to Module 2!  In this module, we will learn about approaches to parallelism that have been inspired by functional programming.  Advocates of parallel functional programming have argued for decades that functional parallelism can eliminate many hard-to-detect bugs that can occur with imperative parallelism.  We will learn about futures, memoization, and streams, as well as data races, a notorious class of bugs that can be avoided with functional parallelism.  We will also learn Java APIs for functional parallelism, including the Fork/Join framework and the Stream API’s.", "video": ["2.1 Futures: Tasks with Return Values", "2.1 Lecture Summary", "2.2 Futures in Java's Fork/Join Framework", "2.2 Lecture Summary", "2.3 Memoization", "2.3 Lecture Summary", "2.4 Java Streams", "2.4 Lecture Summary", "2.5 Data Races and Determinism", "2.5 Lecture Summary", "ReciprocalArraySum using RecursiveTask's in Java's Fork/Join Framework (Demo)", "Parallel List Processing Using Java Streams (Demo)", "Mini Project 2: Analyzing Student Statistics Using Java Parallel Streams", "Mini Project 2 Submission", "Module 2 Quiz"], "title": "Functional Parallelism"}, {"description": "Join Professor Vivek Sarkar as he talks with Two Sigma Managing Director, Jim Ward, and Software Engineers, Margaret Kelley and Jake Kornblau, at their downtown Houston, Texas office about the importance of parallel programming.", "video": ["About these Talks", "Industry Professional on Parallel, Concurrent, and Distributed Programming in Java - Jim Ward, Managing Director", "Industry Professionals on Parallelism - Jake Kornblau and Margaret Kelley, Software Engineers"], "title": "Talking to Two Sigma: Using it in the Field"}, {"description": "Welcome to Module 3, and congratulations on reaching the midpoint of this course!  It is well known that many applications spend a majority of their execution time in loops, so there is a strong motivation to learn how loops can be sped up through the use of parallelism, which is the focus of this module.  We will start by learning how parallel counted-for loops can be conveniently expressed using forall and stream APIs in Java, and how these APIs can be used to parallelize a simple matrix multiplication program.  We will also learn about the barrier construct for parallel loops, and illustrate its use with a simple iterative averaging program example.  Finally, we will learn the importance of grouping/chunking parallel iterations to reduce overhead.", "video": ["3.1 Parallel Loops", "3.1 Lecture Summary", "3.2 Parallel Matrix Multiplication", "3.2 Lecture Summary", "3.3 Barriers in Parallel Loops", "3.3 Lecture Summary", "3.4 Parallel One-Dimensional Iterative Averaging", "3.4 Lecture Summary", "3.5 Iteration Grouping/Chunking in Parallel Loops", "3.5 Lecture Summary", "Parallel Matrix Multiplication (Demo)", "Parallel One-Dimensional Iterative Averaging (Demo)", "Mini Project 3: Parallelizing Matrix-Matrix Multiply Using Loop Parallelism", "Mini Project 3 Submission", "Module 3 Quiz"], "title": "Loop Parallelism"}, {"description": "Welcome to the last module of the course!  In this module, we will wrap up our introduction to parallel programming by learning how data flow principles can be used to increase the amount of parallelism in a program.  We will learn how Java’s Phaser API can be used to implement “fuzzy” barriers, and also “point-to-point” synchronizations as an optimization of regular barriers by revisiting the iterative averaging example.  Finally, we will also learn how pipeline parallelism and data flow models can be expressed using Java APIs.  ", "video": ["4.1 Split-phase Barriers with Java Phasers", "4.1 Lecture Summary", "4.2 Point-to-Point Sychronization with Phasers", "4.2 Lecture Summary", "4.3 One-Dimensional Iterative Averaging with Phasers", "4.3 Lecture Summary", "4.4 Pipeline Parallelism", "4.4 Lecture Summary", "4.5 Data Flow Parallelism", "4.5 Lecture Summary", "Phaser Examples", "Pipeline & Data Flow Parallelism", "Mini Project 4: Using Phasers to Optimize Data-Parallel Applications", "Exit Survey", "Mini Project 4 Submission", "Module 4 Quiz"], "title": "Data flow Synchronization and Pipelining"}, {"description": "The next two videos will showcase the importance of learning about Concurrent Programming and Distributed Programming in Java. Professor Vivek Sarkar will speak with industry professionals at Two Sigma about how the topics of our other two courses are utilized in the field.", "video": ["Our Other Course Offerings", "Industry Professional on Concurrency - Dr. Shams Imam, Software Engineer, Two Sigma", "Industry Professional on Distribution - Dr. Eric Allen, Senior Vice President, Two Sigma"], "title": "Continue Your Journey with the Specialization \"Parallel, Concurrent, and Distributed Programming in Java\""}]}, {"course_info": "About this course: The Raspberry Pi is a small, affordable single-board computer that you will use to design and develop fun and practical IoT devices while learning programming and computer hardware. In addition, you will learn how to set up up the Raspberry Pi environment, get a Linux operating system running, and write and execute some basic Python code on the Raspberry Pi. You will also learn how to use Python-based IDE (integrated development environments) for the Raspberry Pi and how to trace and debug Python code on the device. Please note that this course does not include discussion forums.", "title": "The Raspberry Pi Platform and Python Programming for the Raspberry Pi", "rating": "4.5", "level": null, "created_by": "University of California, Irvine", "package_name": "An Introduction to Programming the Internet of Things (IOT) Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Ian Harris", "department": "Department of Computer Science"}], "week_data": [{"description": "This module describes the basic functionality the Raspberry Pi B+ board. I'll describe how to set up the board, configure it, and use it. An important point differentiating Raspberry Pi from the Arduino platform which we have talked about previously is that Raspberry Pi uses an operating system. I'll describe some of the implications of an operating system on the behavior of the Raspberry Pi as an IoT device.", "video": ["Pre-Course Survey", "Course Overview", "Module 1 Objectives", "Module 1 Reading", "Module 1 Introduction (Video)", "Lecture 1.1 - Raspberry Pi Board", "Lecture 1.2 - Raspberry Pi Processor", "Lecture 1.3 - Raspberry Pi vs. Arduino", "Lecture 2.1 - Operating System Benefits", "Lecture 2.2 - Processes", "Lecture 2.3 - Raspberry Pi IoT", "Lecture 3.1 - Raspberry Pi Setup", "Lecture 3.2 - Raspberry Pi Configuration", "Lecture 3.3 - Overclocking", "Module 1 Quiz", "Module 1 Peer Assignment: "], "title": "Module 1"}, {"description": "The Raspberry Pi is typically installed with a Linux-based operating system, so we present the basics of Linux and its use. We describe some of the main features including navigating the file system and managing processes. We describe the text-based user interface through the shell and we overview the graphic user interface which is the default with the Raspian Linux distribution.", "video": ["Module 2 Objectives", "Module 2 Reading", "Module 2 Introduction (Video)", "Lecture 1.1 - Linux Basics", "Lecture 1.2 - Login", "Lecture 1.3 - Linux Filesystem", "Lecture 2.1 - Navigating the Filesystem", "Lecture 2.2 - Text Editors", "Lecture 2.3 - Accessing Files", "Lecture 3.1 - Permissions", "Lecture 3.2 - Processes", "Lecture 3.3 - Linux Graphic User Interface", "Module 2 Quiz", "Module 2 Peer Assignment"], "title": "Module 2 "}, {"description": "We present the basics of the Python programming language to prepare you for programming on the Raspberry Pi. Many languages can be used but Python is the most convenient for the Raspberry Pi because convenient APIs are provided for basic operations such as controlling the pins. Python is a powerful language with useful features that we will present so that you can use these features to control the Raspberry Pi.\n", "video": ["Module 3 Objectives", "Module 3 Reading", "Module 3 Introduction (Video)", "Lecture 1.1 - Python on Raspberry Pi", "Lecture 1.2 - Python Programming Environment", "Lecture 1.3 - Python Expressions", "Lecture 2.1 - Strings", "Lecture 2.2 - Functions", "Lecture 2.3 - Function Arguments", "Lecture 3.1 - Lists", "Lecture 3.2 - List Methods", "Lecture 3.3 - Control Flow", "Module 3 Quiz", "Module 3 Peer Assignment"], "title": "Module 3"}, {"description": "In this module we describe how to communicate with devices through the pins of the Raspberry Pi. We examine the RPi.GPIO library which provides Python functions used to access the pins. We discuss how to set up the pins, apply digital voltages, and generate Pulse Width Modulated signals. We also describe the Tkinter Python library and show how it can be used to access pins through a graphic user interface.", "video": ["Module 4 Objectives", "Module 4 Reading", "Module 4 Introduction (Video)", "Lecture 1.1 - General Purpose IO Pins", "Lecture 1.2 - Protocol Pins", "Lecture 1.3 - GPIO Access", "Lecture 2.1 - General Purpose IO Pins", "Lecture 2.2 - Pulse Width Modulation", "Lecture 2.3 - Demo of a Blink", "Lecture 3.1 - Graphic User Interface", "Lecture 3.2 Tkinter Library", "Lecture 3.3 -  Interaction", "End-of-Course Survey", "Module 4 Quiz", "Module 4 Peer Assignment"], "title": "Module 4"}]}, {"course_info": "About this course: This course (The English copy of \"用Python玩转数据\" <https://www.coursera.org/learn/hipython/home/welcome>)  is mainly for non-computer majors. It starts with the basic syntax of Python, to how to acquire data in Python locally and from network, to how to present data, then to how to conduct basic and advanced statistic analysis and visualization of data, and finally to how to design a simple GUI to present and process data, advancing level by level. \nThis course, as a whole, based on Finance data and through establishment of popular cases one after another, enables learners to more vividly feel the simplicity, elegance and robustness of Python. Also, it discusses the fast, convenient and efficient data processing capacity of Python in humanities and social sciences fields like literature, sociology and journalism and science and engineering fields like mathematics and biology, in addition to business fields. Similarly, it may also be flexibly applied into other fields.\n\nThe course has been updated. Updates in the new version are : \n\n1) the whole course has moved from Python 2.x to Python 3.x \n2) Added manual webpage fetching and parsing. Web API is also added. \n3) Improve the content order and enrich details of some content especially for some practice projects.", "title": "Data Processing Using Python", "rating": "4.3", "level": "Beginner", "created_by": "Nanjing University", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "ZHANG Li", "department": "Department of Computer Science"}], "week_data": [{"description": "Hi, guys, welcome to learn “Data Processing Using Python”(The English version of \"用Python玩转数据\", url is https://www.coursera.org/learn/hipython/home/welcome)!In this course, I tell in a manner that enables non-computer majors to understand how to utilize this simple and easy programming language – Python to rapidly acquire, express, analyze and present data based on SciPy, Requests, Beautiful Soup libraries etc. Many cases are provided to enable you to easily and happily learn how to use Python to process data in many fields.  ", "video": ["Promotion Video", "Teaching Methods", "FAQ"], "title": "Welcome to learn Data Processing Using Python!"}, {"description": "Hi, guys, welcome to learn Module 01 “Basics of Python”! I’ll first guide you to have a glimpse of its simplicity for learning as well as elegance and robustness. Less is more: the author of Python must know this idea well. After learning this module, you can master the basic language structures, data types, basic operations, conditions, loops, functions and modules in Python. With them, we can write some useful programs! ", "video": ["1 Introduction to Python", "2 The First Python Program", "3 Basics of Python Syntax", "4 Data Types of Python", "5 Basic Operations of Python", "6 Functions, Modules and Packages of Python", "1.1 References", "1.1 Programming exercises(Not Graded)", "1 Conditions", "2 range", "3 Loops", "4 break, continue and else in Loops", "5 Self-defined Functions", "6 Recursion", "7 Scope of Variable", "1.2 Coding and programs reading(Not Graded)", "A1: Standard Library Functions", "A2: Exceptions", "the characteristic of recursive algorithm", "Walk into Python quiz", "More About Python quiz", "find out the 6-th Monisen number(3 points)"], "title": "Basics of Python"}, {"description": "Welcome to learn Module 02 “Data Acquisition and Presentation”! After learning this module, you can master the modes of acquiring local data and network data in Python and use the basic and yet very powerful data structure sequence, string, list and tuple in Python to fast and effectively present data and simply process data. ", "video": ["1 Local Data Acquisition", "2 Network Data Retrieval", "2.1 References(re)", "2.1 Internet Data Retrival Programming exercise(Not Graded)", "2.1 code snippets for reference only", "1 Sequence", "2 String", "3 List", "4 Tuple", "Sequence fuctions practice", "KO Math Whiz", "Sequences and Files Programming Exercise(No Graded)", "Data Acquisition and Presentation quiz"], "title": "Data Acquisition and Presentation"}, {"description": "Welcome to learn Module 03 “Powerful Data Structures and Python Extension Libraries”! Have you felt you are closer to using Python to process data? After learning this module, you can master the intermediate-level and advanced uses of Python: data structure dictionaries and sets. In some applications, they can be very convenient. What’s special here is that, you can also feel the charm of such concise and efficient data structures: ndarray, Series and DataFrame in the most famous and widely applied scientific computing package SciPy in Python. ", "video": ["1 Why Are Dictionaries Needed", "2  Dictionary Use", "3  Set", "3.1 Programming exercise(Not Graded)", "1 Extension Library SciPy", "2 ndarray", "3 Series", "4 DataFrame", "3.2 References", "ufunc functions", "3.2 Programming exercise for DataFrame(Not Graded)", "3.2 Modify the DataFrames", "Word Frequency Counter", "Powerful Data Structures and Python Extension Libraries quiz"], "title": "Powerful Data Structures and Python Extension Libraries"}, {"description": "Welcome to learn Module 04 “Python Data Statistics and Visualization”! In this module, I will show you, over the entire process of data processing, the unique advantages of Python in data processing and analysis, and use many cases familiar to and loved by us to learn about and master methods and characteristics. After learning this module, you can fast and effectively mine your desired or expected or unknown results from a large amount of data, and can also present those data in various images. In addition, the data statistics modes of all third party packages in Python are extraordinarily and surprisingly strong, but we, as average persons, can still understand and possess them. ", "video": ["1 Convenient and Fast Data Acquisition", "2 Data Preparations", "3 Data Display", "4 Data Selection", "5 Simple Statistics and Processing", "6 Grouping", "7 Merge", "4.1 References", "4.1.1 code snippets for reference only", "4.1.2 code snippets for reference only", "Chinese Web API - TuShare", "1 Cluster", "2 Basics of Matplotlib Plotting", "3 Control of Matplotlib Image Attributes", "4 Plotting with pandas", "5 Data Access", "6 Applications of Python into Science and Engineering Fields", "7 Applications into Humanities and Social Sciences Fields", "4.2 Programming exercise for comparing the stock data(No Graded)", "4.2 code snippets for reference only", "4.2.1 Extension: Scikit-learn Machine Learning Basics", "4.2.4&4.2.5: Analyze test results using Box-plot", "4.2.6 Extension: Introduction to WAV audio processing", "4.2.7 Learn More about NLTK", "4.2.1K-means algorithm", "Basic Data Statistics of Python quiz", "Advanced Data Processing and Visualization of Python quiz", "Movies review programming exerciese(4 points)"], "title": "Python Data Statistics and Visualization"}, {"description": "Welcome to Module 05 “Object Orientation and Graphical User Interface”! In this module, I will guide you to understand what object orientation is and the relationship between graphical user interface and object orientation. Learners are only required to understand the concepts so that you can more freely and easily pick up various new functions in future. No program writing is required here. Besides, you also need to master the basic framework of GUI, common components and layout management. After learning them, you will find development with GUI is actually not remote. It has an Easter egg, too ~~~ ", "video": ["1 GUI and Object Orientation", "2 Abstraction", "3 Inheritance", "1 Basic Framework of GUI", "2 Common Components of GUI", "3 Layout Management", "4 Other GUI Libraries", "5 Comprehensive Applications", "5.2 Comprehensive practice project", "5 code snippets for reference only", "Object Orientation and Graphical User Interface quiz", "Examination"], "title": "Object Orientation and Graphical User Interface"}]}, {"course_info": "About this course: No doubt working with huge data volumes is hard, but to move a mountain, you have to deal with a lot of small stones. But why strain yourself? Using  Mapreduce and Spark you tackle the issue partially, thus leaving some space for high-level tools. Stop  struggling to make your big data workflow productive and efficient,  make use of the tools we are offering you.\n \nThis course will teach you how to:\n- Warehouse your data efficiently using Hive, Spark SQL and Spark DataFframes. \n- Work with large graphs, such as social graphs or networks. \n- Optimize your Spark applications for maximum performance.\n\nPrecisely, you will master your knowledge in:\n- Writing and executing Hive & Spark SQL queries;\n- Reasoning how the queries are translated into actual execution primitives (be it MapReduce jobs or Spark transformations);\n- Organizing your data in Hive to optimize disk space usage and execution times;\n- Constructing Spark DataFrames and using them to write ad-hoc analytical jobs easily;\n- Processing large graphs with Spark GraphFrames;\n- Debugging, profiling and optimizing Spark application performance.\n \nStill in doubt? Check this out. Become a data ninja by taking this course!\n\nSpecial thanks to:\n- Prof. Mikhail Roytberg, APT dept., MIPT, who was the initial reviewer of the project, the supervisor and mentor of half of the BigData team. He was the one, who helped to get this show on the road.\n- Oleg Sukhoroslov (PhD, Senior Researcher at IITP RAS), who has been teaching  MapReduce, Hadoop and friends since 2008. Now he is leading the infrastructure team.\n- Oleg Ivchenko (PhD student APT dept., MIPT), Pavel Akhtyamov (MSc. student at APT dept., MIPT) and Vladimir Kuznetsov (Assistant at P.G. Demidov Yaroslavl State University), superbrains who have developed and now maintain the infrastructure used for practical assignments in this course.\n- Asya Roitberg, Eugene Baulin, Marina Sudarikova. These people never sleep to babysit this course day and night, to make your learning experience productive, smooth and exciting.", "title": "Big Data Analysis: Hive, Spark SQL, DataFrames and GraphFrames", "rating": "3.9", "level": "Advanced", "created_by": "Yandex", "package_name": "Big Data for Data Engineers Specialization ", "target_audience": "Who is this class for: This course is aimed to everybody, who feel interest in Big Data. As the technologies covered throughout the course operate in Unix environment, we expect you to have basic understanding of the subject. Things like processes and files assumed to be familiar for the learner. Python is required to complete programming assignments.", "package_num": "2", "teach_by": [{"name": "Natalia Pritykovskaya", "department": null}, {"name": "Pavel Klemenkov", "department": "Rambler&Co"}, {"name": "Pavel Mezentsev ", "department": "PulsePoint inc"}, {"name": "Alexey A. Dral", "department": "Algorithms and Programming Technologies dept. MIPT"}], "week_data": [{"description": "", "video": ["Computations Optimization", "What is BigData Analysis?", "Tools For BigData Analysis", "Graph Data Analysis", "Meet Alexey Dral", "Meet Pavel Mezentsev", "Meet Natalia Pritykovskaya", "Meet Pavel Klemenkov"], "title": "Welcome to the Second Course: Big Data Analysis"}, {"description": "", "video": ["Analytics: Business Use Cases", "HTTP Web Service: Access Log Format", "Business Use Cases: Solution with Hive", "(optional) SQL: likbez", "Hive Data Definition Language (DDL)", "Hive Data Manipulation Language (DML)", "Hive: SQL over Hadoop MapReduce", "Hive Analytics: RegexSerDe, Views", "(optional) Regular Expressions, Likbez", "Hive Analytics: UDF, UDAF, UDTF", "Hive Streaming", "Hive PTF (Window Functions)", "Hive Analytics with UDF and Streaming", "Hive Optimization: Partitioning, Bucketing and Sampling", "Hive Map-Side Joins: Plain, Bucket, Sort-Merge", "Hive Optimization: Data Skew", "Hive Optimization: Row-Columnar File Formats, Compression", "Hive assignment. Intro", "Rate this week", "Instructions for Hive programming assignment", "Hive final"], "title": "Big Data SQL: Hive"}, {"description": "", "video": ["First Assignment: instructions", "How to submit your first assignment", "Hive assignment. Intro", "Rate this week", "Demo Assignment", "Hive assignment. Task1", "Hive assignment. Task2", "Hive assignment. Task3"], "title": "Big Data SQL: Hive (practice week)"}, {"description": "", "video": ["Advantages of Spark SQL", "What is Pandas DataFrame and how to create it", "How to process a DataFrame as SQL", "Working with Hive", "Reading and Writing Files", "Introducing DataFrame and SQL", "RDD vs. DF vs. SQL", "Projection and Filtering", "Functions", "Aggregates", "Join", "User Defined Functions", "Time Processing", "Window Functions", "Two-Dimensional Distributions", "Rate this week", "Spark SQL and Spark Dataframe"], "title": "Spark SQL and Spark Dataframe"}, {"description": "", "video": ["Graph examples", "Graph representation", "Counting common friends. Part I", "Counting common friends. Part II", "Counting common friends. Part III", "Graph Representations", "GraphFrames: Introduction", "Motif Finding: DSL", "Motif Finding: Counting Mutual Friends", "Motif Finding: Under The Hood. Part 1", "Motif Finding: Under The Hood. Part 2", "Motif Finding", "Triangles Count: Introduction", "Triangles Count: Edge Lists", "Triangles Count: GraphFrame", "Triangles Count", "Rate this week", "Graph Analysis from Big Data Perspective", "Counting number of the mutual friends"], "title": "Graph Analysis from Big Data Perspective"}, {"description": "", "video": ["Introduction", "Algorithm", "GraphFrames", "Connected Components", "Random Walk", "Page Rank Algorithm", "RDD Implementation", "GraphFrames API", "PageRank", "Taste Graph. Part I", "Taste Graph. Part II", "Taste Graph. Part III", "Label Propagation Algorithm (LPA)", "Graph based Music Recommender", "Rate this week", "PageRank and Recent Advances", "Graph based Music Recommender. Task 1", "Graph based Music Recommender. Task 2", "Graph based Music Recommender. Task 3", "Graph based Music Recommender. Task 4", "Graph based Music Recommender. Task 5", "Graph based Music Recommender. Task 6"], "title": "PageRank and Recent Advances"}, {"description": "", "video": ["Welcome", "Spark Execution Model", "Shuffle. Where to send data?", "Shuffle. How to send data?", "Optimizing Functions", "PageRank Optimization", "Spark Execution Model & RDD Internals", "Spark SQL. Motivation", "Catalyst", "Catalyst Optimization Example", "Joins", "Optimizing Joins", "UDF Optimization", "Spark SQL and Catalyst", "Persistance and Checkpointing", "Memory Management", "Resource Allocation", "Dynamic Allocation", "Speculative Execution", "Memory management and resource allocation", "Deployment of the environment", "Rate this week", "Final Quiz", "Breadth-first search in Spark SQL"], "title": "Spark Internals and Optimization"}]}, {"course_info": "About this course: In this course, you will learn the science behind how digital images and video are made, altered, stored, and used. We will look at the vast world of digital imaging, from how computers and digital cameras form images to how digital special effects are used in Hollywood movies to how the Mars Rover was able to send photographs across millions of miles of space.\n \nThe course starts by looking at how the human visual system works and then teaches you about the engineering, mathematics, and computer science that makes digital images work. You will learn the basic algorithms used for adjusting images, explore JPEG and MPEG standards for encoding and compressing video images, and go on to learn about image segmentation, noise removal and filtering. Finally, we will end with image processing techniques used in medicine.\n \nThis course consists of 7 basic modules and 2 bonus (non-graded) modules. There are optional MATLAB exercises; learners will have access to MATLAB Online for the course duration. Each module is independent, so you can follow your interests.", "title": "Image and Video Processing: From Mars to Hollywood with a Stop at the Hospital", "rating": "4.7", "level": null, "created_by": "Duke University", "package_name": null, "target_audience": "Who is this class for: This class is for anybody that wants to understand the basics of image and video processing; from how are images and videos stored in your phones and transmitted over the Internet to how medical images are used. You will learn regardless of your mathematical and engineering background; students will strong background might be able to get a more in depth understanding. The quizzes are designed not to be too time consuming, our goal is for you to learn and enjoy without stress.", "package_num": null, "teach_by": [{"name": "Guillermo Sapiro", "department": "Electrical and Computer Engineering"}], "week_data": [{"description": "Learn what is image and video processing. Learn the very basic concepts of human perception needed for understanding image processing. Learn simple tools in signal processing needed to understand following units.  ", "video": ["0 - Welcome and Start Here", "1 - What is image and video processing (part 1)", "1 - What is image and video processing (part 2)", "2 - Course logistics", "3 - Images are everywhere - Duration 06:31", "4 - Human visual system - Duration 17:10", "5 - Image formation - Sampling & Quantization - Duration 28:17", "6 - Simple image operations - Duration 17:05", "Optional programming exercises", "Quiz #1"], "title": "Introduction to image and video processing"}, {"description": "JPEG and MPEG are the most successful algorithms in the area, widely used by everybody in a daily basis, and the goal of this unit is to understand how they work. Also to understand why these techniques are important and why they are enabling technologies. Also will describe what is done in the Mars expedition.", "video": ["1 - The why and how of compression - Duration 14:16", "2 - Huffman coding - Duration 20:11 - Optional break at 06:53", "3 - JPEG's 8x8 blocks - Duration 05:37", "4 - The Discrete Cosine Transform (DCT) - Duration 25:32 - Optional break at 12:13", "5 - Quantization - Duration 24:02 - Optional breaks at 08:48 and 17:18", "6 - JPEG_LS and MPEG - Duration 19:32 - Optional break at 13:45", "7 - Bonus: Run-length compression - Duration 04:29", "Optional programming exercises", "Quiz #2"], "title": "Image and video compression "}, {"description": "Some of the most basic tools in image processing, like median filtering and histogram equalization, are still among the most powerful. We will describe these and provide a modern interpretation of these basic tools. Students will then become familiar with simple and still popular approaches. We will also include non-local means, a more modern technique that still uses classical tools.", "video": ["1 - Introduction to image enhancement - Duration 19:11 - Optional break at 08:33", "2 - Demo - Enhancement & Histogram modification - Duration 03:53", "3 - Histogram equalization - Duration 19:56 - Optional breaks at 04:40 and 11:30", "4 - Histogram matching - Duration 08:31", "5 - Introduction to local neighborhood operations - Duration 06:46", "6 - Mathematical properties of averaging - Duration 11:00", "7 - Non-Local means - Duration 07:27", "8 - IPOL Demo - Non-Local means - Duration 03:38", "9 - Median filter - Duration 07:20", "10 - Demo - Median filter - Duration 01:31", "11 - Derivatives, Laplacian & Unsharp masking - Duration 14:24 - Optional breaks at 05:21 and 11:33", "12 - Demo - Unsharp masking - Duration 03:10", "13 - Gradients of scalar and vector images - Duration 05:57", "14 - Concluding remarks - Duration 01:12", "Optional programming exercises", "Quiz #3"], "title": "Spatial processing"}, {"description": "The goal of this unit is to complement Unit 3 by adding prior information about the sources of degradation. Students will learn that if we know about the degradation process, we can do better. The objective of this unit is to complete the training with basic and powerful classical tools.", "video": ["1 - What is image restoration - Duration 07:49", "2 - Noise types - Duration 12:43", "3 - Demo - Types of noise - Duration 03:03", "4 - Noise and histograms - Duration 04:52", "5 - Estimating noise - Duration 10:41 - Optional break at 05:03", "6 - Degradation Function - Duration 11:40", "7 - Wiener filtering - Duration 12:34 - Optional break at 06:54", "8 - Demo - Wiener and Box filters - Duration 03:19", "9 - Concluding remarks - Duration 00:33", "Optional programming exercises", "Quiz #4"], "title": "Image restoration"}, {"description": "Not all parts of the image are the same, and students will learn the basic techniques to partition an image, from simple threshold to more advanced graph cuts and active contours. This is the first unit where student will learn about image analysis and image interpretation, and will learn why this is important, e.g., in medical imaging and object recognition.", "video": ["1 - Introduction to Segmentation - Duration 04:17", "2 - On Edges and Regions - Duration 05:17", "3 - Hough Transform with Matlab Demo - Duration 20:59", "4 - Line Segment Detector with Demo - Duration 03:20", "5 - Otsu's Segmentation with Demo - Duration 14:25", "6 - Congratulations - Duration 00:17", "7 - Interactive Image Segmentation - Duration 21:13", "8 - Graph Cuts and Ms Office - Duration 09:34", "9 - Mumford-Shah - Duration 05:50", "10 - Active Contours - Introduction with ipol.im and Photoshop Demos - Duration 05:58", "11 - Behind the Scenes of Adobe's Roto Brush - Duration 31:29 - Optional breaks at 20:30 and 27:26", "12 - End of the Week - Duration 00:21", "Optional programming exercises", "Quiz #5"], "title": "Image segmentation "}, {"description": "This is all optional material. It will help the students that are more mathematically oriented and want to better understand the math behind next unit's lectures. But you will be able to handle without it.The quiz is therefore practice only.This is the first “advanced” unit and smoothly follows from the previous one. Students will learn very modern tools, widely used today, and will contrast with units 3,4 to illustrate how significantly more advanced mathematical tools are also very useful in image and video analysis. We will connect some of these advanced tools with classical ones, e.g., average with heat flow and median with anisotropic diffusion. This will help to provide unified views to the students.", "video": ["1 - Introduction to PDEs in Image and Video Processing - Duration 10:22", "2 - Planar Differential Geometry - Duration 38:33 - Optional breaks at 12:46, 21:03, and 29:41", "3 - Surface Differential Geometry - Duration 11:43", "4 - Curve Evolution - Duration 31:10 - Optional breaks at 08:50, 19:25, and 24:22", "5 - Level Sets and Curve Evolution - Duration 25:34 - Optional break at 14:30", "6 - Calculus of Variations - Duration 14:03 - Optional break at 06:23", "7 - Anisotropic Diffusion - Duration 11:17", "8 - Active Contours - Duration 16:57 - Optional break at 06:23", "9 - Bonus: Cool Contrast Enhancement via PDEs - Duration 08:32", "Quiz #6", "Optional programming exercises"], "title": "Geometric PDEs "}, {"description": "Students will get involved with a very exciting topic, since image and video inpainting is one of the most used tools in the movie industry. They will learn the problem, and also how they can approach it from multiple directions. This will also help to illustrate how the same problem can be approached from multiple mathematical angles. We will connect this with Shanon’s work providing yet another angle. If you watched the lectures on PDEs you will have more mathematical background, but you will enjoy this unit and learn without it as well.", "video": ["1 - Introduction to Image Inpainting - Duration 08:16", "2 - Inpainting in Nature - Duration 05:01", "3 - PDEs and Inpainting - Duration 21:59 - Optional break at 13:31", "4 - Inpainting via Calculus of Variations - Duration 15:32 - Optional break at 10:06", "5 - Smart Cut and Paste - Duration 07:51", "6 - Demo - Photoshop Inpainting Healing Brush - Duration 02:31", "7 - Video Inpainting and Conclusions - Duration 05:13", "Optional programming exercises", "Quiz #7"], "title": "Image and video inpainting"}, {"description": "Here the goal is to present one of the most modern tools in image and video processing, and students will learn something that is today at the top of active research. This will also help to illustrate the use of linear algebra and optimization in image and video processing. This is the last formal unit of the course.", "video": ["1 - Introduction to Sparse Modeling - Part 1 - Duration 10:39", "2 - Introduction to Sparse Modeling - Part 2 - Duration 18:16", "3 - Sparse Modeling - Implementation - Duration 24:30 - Optional break at 11:58", "4 - Dictionary Learning - Duration 17:13 - Optional break at 06:03", "5 - Sparse Modeling Image Processing Examples - Duration 20:57 - Optional break at 09:25", "6 - A Note on Compressed Sensing - Duration 05:10", "7 - GMM and Structured Sparsity - Duration 15:40", "8 - Bonus: Sparse Modeling and Classification - Activity Recognition - Duration 15:10", "Optional programming exercises", "Quiz #8"], "title": "Sparse modeling and compressed sensing"}, {"description": "This is a bonus unit. Enjoy it. Image processing has been very successful in medical imaging, and we will use examples from HIV and brain research to illustrate the importance of image processing in solving societal problems. We will describe the basic tools in these exciting applications, from the acquisition to the analysis.", "video": ["1 - Introduction to Medical Imaging - Duration 07:03", "2 - Image Processing and HIV (Part I) - Duration 23:51 - Optional breaks at 12:37 and 18:39", "2 - Image Processing and HIV (Part II) - Duration 16:30", "3 - Brain Imaging, Diffusion Imaging, Deep Brain Stimulation - Duration 26:28", "4 - Thanks!"], "title": "Medical imaging"}]}, {"course_info": "About this course: Build on the software engineering skills you learned in “Java Programming: Solving Problems with Software” by learning new data structures. Use these data structures to build more complex programs that use Java’s object-oriented features. At the end of the course you will write an encryption program and a program to break your encryption algorithm.\n\nAfter completing this course, you will be able to:\n1. Read and write data from/to files;\n2. Solve problems involving data files;\n3. Perform quantitative analyses of data (e.g., finding maximums, minimums, averages); \n4. Store and manipulate data in an array or ArrayList;\n5. Combine multiple classes to solve larger problems;\n6. Use iterables and collections (including maps) in Java.", "title": "Java Programming: Arrays, Lists, and Structured Data", "rating": "4.7", "level": "Beginner", "created_by": "Duke University", "package_name": "Object Oriented Programming in Java Specialization ", "target_audience": "Who is this class for: This course is for anyone who has taken the first two courses  in the Java Programming and Software Engineering Fundamentals Specialization, “Programming Foundations with JavaScript, HTML and CSS” and “Java Programming: Solving Problems with Software.” To succeed in this course, before starting you should have a good understanding of the following: variables, conditionals, for and while loops, methods, Strings, and the edu.duke custom libraries.\f", "package_num": "2", "teach_by": [{"name": "Andrew D. Hilton", "department": "Electrical and Computer Engineering"}, {"name": "Robert Duvall", "department": "Computer Science"}, {"name": "Owen Astrachan", "department": "Computer Science"}, {"name": "Susan H. Rodger", "department": "Computer Science"}], "week_data": [{"description": "Welcome to “Java Programming: Arrays, Lists, and Structured Data”! We are excited that you are starting our course to learn how to write programs in Java, one of the most popular programming languages in the world. In this introductory module, you will hear an overview of this course and be introduced to the supporting resources available.", "video": ["Welcome", "Programming Resources", "Feedback surveys"], "title": "Welcome"}, {"description": "In this module, you will learn about the basics of cryptography, the science of keeping information private and secure. You will learn about simpler cryptographic systems, which were used from the Roman Empire through the early 1900s. You will learn how to implement these ciphers, as well as how to break them. To solve these problems, you will work more with processing Strings, but also learn about arrays—a way to store an indexable sequence of elements. You will be able to: (1) combine Strings using concatenation; (2) build Strings within a Java program using StringBuilder; (3) use arrays to store and manipulate collections of data; (4) refactor your programs for improved organization using object-oriented principles; (5) and practice effective algorithm design.", "video": ["Module Learning Outcomes / Resources", "A Brief History of Cryptography", "Introduction", "Creating and Manipulating Strings", "Counting Loops", "Character Class", "Developing an Algorithm", "Translating into Code", "Testing and Debugging", "Summary", "Programming Exercise: Implementing the Caesar Cipher", "Implementing the Caesar Cipher", "Introduction", "Arrays", "Random Numbers and Arrays", "Counting with Arrays", "Developing an Algorithm", "Summary", "Programming Exercise: Breaking the Caesar Cipher", "Breaking the Caesar Cipher", "Introduction", "Rewriting with Encapsulation", "Fields", "Visibility", "Constructors", "Summary", "Programming Exercise: Object Oriented Caesar Cipher", "Object Oriented Caesar Cipher", "End of Module Survey", "Cryptography"], "title": "Cryptography: Keeping Information Secret"}, {"description": "After completing this module, you will be able (1) to program a word frequency counter to analyze any input text file, (2) to select and substitute words from a list into a document template using both ArrayList and HashMap, (3) to create new lists to use in templates, (4) to recognize brittle code, and (5) to improve code with flexible, object-oriented design. You will gain these skills in the framework of developing a randomly generated story that we call GladLibs. You may discover that bald lions change peoples’ lives, or that fluffy dinosaurs get things done in a jiffy. We hope you have fun developing your Java skills this week!", "video": ["Module Learning Outcomes / Resources", "Introduction", "High-level Design Concepts", "ArrayList", "ArrayList for Unique Words", "ArrayList Advantages and Issues", "Summary", "Programming Exercise: Telling a Random Story", "Telling a Random Story", "Introduction", "Brittle Code", "Adding New Labels", "Programming Exercise: Using GladLibs", "HashMap", "HashMap for Unique Words", "HashMap for Flexible Design", "Summary", "Programming Exercise: Improving GladLibs", "Using and Improving GladLibs", "End of Module Survey", "GladLibs"], "title": "GladLibs: Stories from Templates"}, {"description": "In this module, you will learn about how web server logs store information about visitors to a website, and you will write programs to access information like user IP address, date and time of access, and more. Using Java programs you write in this module, you will be able (1) to read information from a web server log, (2) to count the number of unique visitors to your website, and (3) to count the number of times each visitor uses your website.", "video": ["Module Learning Outcomes / Resources", "Introduction", "Understanding Log Files", "LogEntry Class with toString", "Parsing Log Files", "Summary", "Programming Exercise: Reading Log Files", "Reading Log Files", "Introduction", "Developing an Algorithm", "Translating to Code", "Equality", "Summary", "Programming Exercise: Finding Unique IP Addresses", "Finding Unique IP Addresses", "Introduction", "Developing an Algorithm", "Translating to Code", "HashMap for Unique IPs", "Summary", "Programming Exercise: Counting Website Visits", "Counting Website Visits", "End of Module Survey", "Web Server Logs"], "title": "Web Server Logs: From Logs to Visits"}, {"description": "In this module, you will develop a program to break the Vigenère Cipher, a more complex version of the Caesar Cipher. You will improve your program in three stages: first decrypting messages where you know the language and key length, then adding the capability to handle messages with unknown key length, then extending the program to handle messages in a range of possible languages. Through this project, you will be able (1) to effectively use HashSet and HashMap, (2) to expand an algorithm from solving a simpler problem to handle broader, more complex problems, and (3) to design and modify program code involving a more complex collection of classes, methods, and data. ", "video": ["Module Resources", "Introduction", "Known Language and Key Length", "Programming Exercise: Known Language and Key Length", "Known Language and Key Length", "Unknown Key Length", "Programming Exercise: Unknown Key Length", "Unknown Key Length", "Unknown Language", "Programming Exercise: Unknown Language, Unknown Key Length", "Extend Your Program", "End of Module Survey", "Breaking the Vigenère Cipher"], "title": "MiniProject: Vigenère Cipher"}]}, {"course_info": "About this course: This course is intended for the Bachelor and Master's students, who like practical programming and making IoTs applications!\n\nIn this course we will talk about two components of a cyber physical system, namely hardware and operating systems. \n\n\nAfter completing this course, you will have the knowledge of both hardware components and operating systems. You are able to plan and use embedded operating systems in resource-constraint devices for Internet-of-Things (cyber physical system) applications. In addition, you can use Cooja simulation for designing and simulating wireless sensor network applications.\n\nWe have 4 modules, each with a graded quiz in the end and finally we have one peer reviewed programming assignment\nIn case you have no experience with C programming, please check you a practical course like:\nhttps://www.coursera.org/learn/arduino-platform. \n\nThe course is actually quite fun at the end when you are playing around with Cooja simulation for IoTs applications. So you can create and simulate your own design for sensor network applications. A lot of features and examples of Contiki and Cooja can be explored via assignments. There are some optional assignments of wireless sensor network applications for students who want to explore more about embedded OS in IoTs applications.\n    \n- Marco Ramirez /University of Turku\n- Igor Tcarenko/ University of Turku\n- Nguyen Gia Tuan /University of Turku\n\nCheck out our whole curriculum: http://iot4health.utu.fi/", "title": "Embedded Hardware and Operating Systems", "rating": "3.7", "level": "Intermediate", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: This course is intended for the Bachelor and Master's students, who likes practical programming and making IoTs applications!\n\nNote that as a consequence, quiz questions are more exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Nguyen Gia Tuan", "department": "Department of Information Technology, Faculty of Mathematics and Computer Sciences, University of Turku, Finland"}], "week_data": [{"description": "This week will start from the basic information about Embedded Systems.\nSpecifically you will learn (1) what are Embedded Systems and where they are applied \nas well as (2) the main characteristics and challenges of Embedded Systems. (3)You will discover\nhow Embedded Systems communicate with the outer world.", "video": ["Introduction", "Module 1 Lecture 1: Introduction to Embedded System", "Module 1 Lecture 2: Design Characteristics and challenges", "Module 1 Lecture 3: Input/ Output Devices", "Module 1 Lecture 4: Wire Communication, ADC/DAC", "Module 1 Lecture 5: Sensors, Actuators, Interrupt vs Polling", "Interesting questions (optional)!", "Introduction to Embedded HW (Graded quiz)"], "title": "Introduction to Embedded Hardware"}, {"description": "This week we will go into details of what Embedded Systems consist of. Specifically you learn about the main blocks of any Embedded System Processing Elements. We will show you what (1)Embedded Processor consists of, its main features. You will learn what (3)reconfigurable architectures and FPGAs are what kind of (4) ready made platforms you can use to start working with Processing Elements.", "video": ["Module 2 Lecture 1: Embedded Processor and FPGA", "Module 2 Lecture 2: Main features of Embedded Processor", "Module 2 Lecture 3: Use cases of Micro-controller's platforms", "Module 2 Lecture 4: Reconfigurable platform, FPGA's platform", "Module 2 Lecture 5: Embedded Processor vs FPGA", "Interesting questions (optional)!", "Processing elements (Graded quiz)"], "title": "Processing Elements of an Embedded System "}, {"description": "In this week, we start to have an overview of operating systems and embedded operating systems for IoTs. Primary functionalities of embedded operating systems are discussed. We learn how operating systems works such as how memory is managed, how tasks are scheduled, what is interrupt and how it is handled. After this, we deepen our learning with the popular kernels for general and embedded operating systems. Linux (monolithic) kernel, micro kernel and modular kernel are presented. In addition, several popular embedded operating systems for IoTs are presented. Concretely, after attending this week, you will able to (1) explain why systems especially embedded systems require an operating system (2) describe how an embedded operating system works such as how memory is managed, how tasks are scheduled and how interrupts are handled. (3) differentiate popular kernels for embedded operating systems. (4) Differentiate popular embedded operating systems for IoTs.\n\nLecture: Introduction to Embedded Operating Systems\nLecture: Linux kernel functions and advantages\nLecture: Micro kernel\nLecture: Modular kernel\nLecture: Introduction to Contiki\nLecture: Introduction to TinyOS\nLecture: Introduction to RiotOS", "video": ["Module 3 Lecture1: Embedded Operating System", "Module 3 Lecture 2: Linux kernel functions and advantages", "Module 3 Lecture 3: Microkernel", "Module 3 Lecture 4: Modular kernel", "Module 3 Lecture 5: Introduction to Contiki", "Module 3 Lecture 6: Introduction to TinyOS", "Module 3 Lecture 7: Introduction to RIOT OS", "Interesting questions (optional)?", "Embedded Operating Systems (Graded quiz)"], "title": " Overview of operating systems and embedded operating systems"}, {"description": "In this week, we start to explore Contiki Os in detailed. First we discuss about Contiki system and its kernel architecture. Furthermore, we explore how loadable programs are actually implemented in Contiki system. Second, we go thourgh services and libraries in Contiki to see how they are built and when they can be invoked. Third, we discuss communication in Contiki via details of uIp and Rime commnunication stacks in Contiki. Next, prototheads is discussed to describe how application's code is processed in Contiki. Furtheremore, API of multithreading is discussed. Last b ut not least, Cooja simulator - a simulator for wireless sensor networks based on Contiki is introduced. All steps of installing and applying Cooja for a wireless sensor network application are presented in detailed via an example application. Concretely, after attending this week, you will able to (1) describe how Contiki system and its kernel architecture are built. (2) distinguish Contiki services and libraries in terms of how they are built, when they are invoked and why they are used. (3) describe how communication is implemented and supported in Contiki and what protocols Contiki can support. (4) explore how application's code is processed in Contiki and important functions of API for multithreading in Contiki (5) use Cooja for simulating wireless sensor networks applications.\n\nLecture: Contiki - a hybrid operating system\nLecture: Contiki system\nLecture: Contiki's kernel architecture\nLecture: Contiki services and libraries\nLecture: Contiki communication\nLecture: Contiki communication (con't)\nLecture: Protothreads and multithreading\nLecture: Cooja simulator", "video": ["Module 4 Lecture 1: Contiki and Cooja simulation", "Module 4 Lecture 2: Contiki's system", "Module 4 Lecture 3: Contiki's kernel architecture", "Module 4 Lecture 4: Contiki services and libraries", "Module 4 Lecture 5: Communication in Contiki", "Module 4 Lecture 6: Communication in Contiki (con't)", "Module 4 Lecture 7: Protothread, multithreading and code sizes", "Module 4 Lecture 8: Cooja simulation", "Interesting questions (optional) !", "Contiki and Cooja (Graded quiz)", "Networking with the rime stack", "Energy consumption estimation"], "title": "Contiki OS and Cooja simulation"}]}, {"course_info": "About this course: Experienced Computer Scientists analyze and solve computational problems at a level of abstraction that is beyond that of any particular programming language.  This two-part course builds on the principles that you learned in our Principles of Computing course and is designed to train students in the mathematical concepts and process of \"Algorithmic Thinking\", allowing them to build simpler, more efficient solutions to real-world computational problems.\n\nIn part 1 of this course, we will study the notion of algorithmic efficiency and consider its application to several problems from graph theory.  As the central part of the course, students will implement several important graph algorithms in Python and then use these algorithms to analyze two large real-world data sets.  The main focus of these tasks is to understand interaction between the algorithms and the structure of the data sets being analyzed by these algorithms.\n\nRecommended Background - Students should be comfortable writing intermediate size  (300+ line) programs in Python and have a basic understanding of searching, sorting, and recursion. Students should also have a solid math background that includes algebra, pre-calculus and a familiarity with the math concepts covered in \"Principles of Computing\".", "title": "Algorithmic Thinking (Part 1)", "rating": "4.6", "level": "Intermediate", "created_by": "Rice University", "package_name": "Fundamentals of Computing Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Luay Nakhleh", "department": "Computer Science; Biochemistry and Cell Biology "}, {"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Joe Warren", "department": "Computer Science"}], "week_data": [{"description": "What is Algorithmic Thinking?, class structure, graphs, brute-force algorithms", "video": ["What is Algorithmic Thinking? ", "Class structure", "Pseudo-code ", "The small-world problem ", "Graphs and representation ", "Paths and distances ", "Brute force ", "What Is algorithm efficiency? ", "Measuring efficiency ", "Efficiency of brute force distance ", "Number of steps of brute force distance ", "Class notes", "Coding notes", "Coding styles and standards  -  PoC", "Machine grading  -  PoC", "Plotting data - PoC", "Peer assessment - \"We want a shrubbery!\"  - IIPP", "Homework  #1"], "title": "Module 1 - Core Materials"}, {"description": "Graph representations, plotting, analysis of citation graphs", "video": ["Project #1 Description", "Project Submission History", "Application #1 Description", "Application #1 Solution", "Assignment: Degree Distribution for Graphs", "Analysis of Citation Graphs"], "title": "Modules 1 - Project and Application"}, {"description": "Asymptotic analysis, \"big O\" notation, pseudocode, breadth-first search", "video": ["Orders of growth ", "Asymptotics", "Illustrating \"Big O\"", "Illustrating BFS ", "Queues and boundary cases ", "Pseudocode ", "BFS running time - loose analysis ", "BFS running time - tighter analysis ", "BFS-based distance distribution ", "Homework #2"], "title": "Module 2 - Core Materials"}, {"description": "Connected components, graph resilience, and analysis of computer networks", "video": ["Project #2 Description", "Application #2 Description", "Application #2 Solution", "Assignment: Connected Components and Graph Resilience", "Analysis of a Computer Network"], "title": "Module 2 - Project and Application"}]}, {"course_info": "About this course: Control of Mobile Robots is a course that focuses on the application of modern control theory to the problem of making robots move around in safe and effective ways. The structure of this class is somewhat unusual since it involves many moving parts - to do robotics right, one has to go from basic theory all the way to an actual robot moving around in the real world, which is the challenge we have set out to address through the different pieces in the course.", "title": "Control of Mobile Robots", "rating": "4.8", "level": null, "created_by": "Georgia Institute of Technology", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Dr. Magnus Egerstedt", "department": "School of Electrical and Computer Engineering"}], "week_data": [{"description": "", "video": ["Getting Started", "Control of Mobile Robots", "Preparing for Programming Assignments", "What's Control Theory, Anyway?", "On the Need for Models", "Cruise-Controllers", "Control Design Basics", "Performance Objectives", "PID Control", "Implementation", "Glue Lecture 1", "Programming & Simulation Lecture 1", "Optional Programming Assignment 1: Instructions", "Get More From Georgia Tech", "Module 1 Lecture Slides", "MATLAB Tutorials", "Quiz 1"], "title": "Introduction to Robots"}, {"description": "The description goes here", "video": ["Driving Robots Around?", "Differential Drive Robots", "Odometry", "Sensors", "Behavior-Based Robotics", "Go-to-Goal", "The GRITS Simulator", "Obstacle Avoidance", "Glue Lecture 2", "Programming & Simulation Lecture 2", "Optional Programming Assignment 2: Instructions", "Earn a Georgia Tech Badge/Transcript/CEUs", "Installing MATLAB", "Module 2 Lecture Slides", "Quiz 2"], "title": "Mobile Robots"}, {"description": "", "video": ["A Simple Robot", "State-Space Models", "Linearizations", "LTI Systems", "Stability", "Swarm Robotics", "Output Feedback", "State Feedback", "Glue Lecture 3", "Programming & Simulation Lecture 3", "Optional Programming Assignment 3: Instructions", "Module 3 Lecture Slides", "Quiz 3"], "title": "Linear Systems"}, {"description": "", "video": ["Stabilizing the Point Mass", "Pole-Placement", "Controllability", "Segway Robots", "Observers", "Observability", "The Separation Principle", "Practical Considerations", "Glue Lecture 4", "Programming & Simulation Lecture 4", "Optional Programming Assignment 4: Instructions", "Module 4 Lecture Slides", "Quiz 4"], "title": "Control Design"}, {"description": "", "video": ["Switches Everywhere", "Hybrid Automata", "A Counter-Example", "Danger - Beware!", "The Bouncing Ball", "The Zeno Phenomenon", "Sliding Mode Control", "Regularizations", "Glue Lecture 5", "Programming & Simulation Lecture 5", "Optional Programming Assignment 5: Instructions", "Module 5 Lecture Slides", "Quiz 5"], "title": "Hybrid Systems"}, {"description": "", "video": ["Behaviors Revisited", "Hard Switches vs Blending", "Convex and Non-Convex Worlds", "Boundary Following", "The Induced Mode", "A Complete Navigation System", "Practical Considerations", "Let's Do it!", "Glue Lecture 6", "Programming & Simulation Lecture 6", "Optional Programming Assignment 6: Instructions", "Module 6 Lecture Slides", "Quiz 6"], "title": "The Navigation Problem"}, {"description": "", "video": ["Approximations and Abstractions", "A Layered Architecture", "Differential-Drive Trackers", "A Clever Trick", "Other Robot Classes", "Car-Like Robots", "To Probe Further", "In Conclusion", "Glue Lecture 7", "Programming & Simulation Lecture 7", "Optional Programming Assignment 7: Instructions", "Module 7 Lecture Slides", "Quiz 7"], "title": "Putting It All Together"}]}, {"course_info": "About this course: You've learned the basic algorithms now and are ready to step into the area of more complex problems and algorithms to solve them. Advanced algorithms build upon basic ones and use new ideas. We will start with networks flows which are used in more typical applications such as optimal matchings, finding disjoint paths and flight scheduling as well as more surprising ones like image segmentation in computer vision. We then proceed to linear programming with applications in optimizing budget allocation, portfolio optimization, finding the cheapest diet satisfying all requirements and many others. Next we discuss inherently hard problems for which no exact good solutions are known (and not likely to be found) and how to solve them in practice. We finish with a soft introduction to streaming algorithms that are heavily used in Big Data processing. Such algorithms are usually designed to be able to process huge datasets without being able even to store a dataset.", "title": "Advanced Algorithms and Complexity", "rating": "4.4", "level": "Advanced", "created_by": "University of California, San Diego, National Research University Higher School of Economics", "package_name": "Data Structures and Algorithms Specialization ", "target_audience": "Who is this class for: Programmers with basic experience looking to understand the practical and conceptual underpinnings of algorithms, with the goal of becoming more effective software engineers. Computer science students and researchers as well as interdisciplinary students (studying electrical engineering, mathematics, bioinformatics, etc.) aiming to get more profound understanding of algorithms and hands-on experience implementing them and applying for real-world problems. Applicants who want to prepare for an interview in a high-tech company.", "package_num": "5", "teach_by": [{"name": "Alexander S. Kulikov", "department": "Department of Computer Science and Engineering"}, {"name": "Michael Levin", "department": "Computer Science"}, {"name": "Daniel M Kane", "department": "Department of Computer Science and Engineering / Department of Mathematics"}, {"name": "Neil Rhodes", "department": "Computer Science and Engineering"}], "week_data": [{"description": "Network flows show up in many real world situations in which a good needs to be transported across a network with limited capacity. You can see it when shipping goods across highways and routing packets across the internet. In this unit, we will discuss the mathematical underpinnings of network flows and some important flow algorithms. We will also give some surprising examples on seemingly unrelated problems that can be solved with our knowledge of network flows.", "video": ["Slides and Resources on Flows in Networks", "Introduction", "Network Flows", "Residual Networks", "Maxflow-Mincut", "The Ford–Fulkerson Algorithm", "Slow Example", "The Edmonds–Karp Algorithm", "Bipartite Matching", "Image Segmentation", "Available Programming Languages", "FAQ on Programming Assignments", "Flow Algorithms", "Programming Assignment 1"], "title": "Flows in Networks"}, {"description": "Linear programming is a very powerful algorithmic tool. Essentially, a linear programming problem asks you to optimize a linear function of real variables constrained by some system of linear inequalities. This is an extremely versatile framework that immediately generalizes flow problems, but can also be used to discuss a wide variety of other problems from optimizing production procedures to finding the cheapest way to attain a healthy diet. Surprisingly, this very general framework admits efficient algorithms. In this unit, we will discuss some of the importance of linear programming problems along with some of the tools used to solve them.", "video": ["Slides and Resources on Linear Programming", "Introduction", "Linear Programming", "Linear Algebra: Method of Substitution", "Linear Algebra: Gaussian Elimination", "Convexity", "Duality", "(Optional) Duality Proofs", "Linear Programming Formulations", "The Simplex Algorithm", "(Optional) The Ellipsoid Algorithm", "Linear Programming Quiz", "Programming Assignment 2"], "title": "Linear Programming"}, {"description": "Although many of the algorithms you've learned so far are applied in practice a lot, it turns out that the world is dominated by real-world problems without a known provably efficient algorithm. Many of these problems can be reduced to one of the classical problems called NP-complete problems which either cannot be solved by a polynomial algorithm or solving any one of them would win you a million dollars (see Millenium Prize Problems) and eternal worldwide fame for solving the main problem of computer science called P vs NP. It's good to know this before trying to solve a problem before the tomorrow's deadline :) Although these problems are very unlikely to be solvable efficiently in the nearest future, people always come up with various workarounds. In this module you will study the classical NP-complete problems and the reductions between them. You will also practice solving large instances of some of these problems despite their hardness using very efficient specialized software based on tons of research in the area of NP-complete problems.", "video": ["Slides and Resources on NP-complete Problems", "Brute Force Search", "Search Problems", "Traveling Salesman Problem", "Hamiltonian Cycle Problem", "Longest Path Problem", "Integer Linear Programming Problem", "Independent Set Problem", "P and NP", "Reductions", "Showing NP-completeness", "Independent Set to Vertex Cover", "3-SAT to Independent Set", "SAT to 3-SAT", "Circuit SAT to SAT", "All of NP to Circuit SAT", "Using SAT-solvers", "NP-complete Problems", "Programming Assignment 3"], "title": "NP-complete Problems"}, {"description": "After the previous module you might be sad: you've just went through 5 courses in Algorithms only to learn that they are not suitable for most real-world problems. However, don't give up yet! People are creative, and they need to solve these problems anyway, so in practice there are often ways to cope with an NP-complete problem at hand. We first show that some special cases on NP-complete problems can, in fact, be solved in polynomial time. We then consider exact algorithms that find a solution much faster than the brute force algorithm. We conclude with approximation algorithms that work in polynomial time and find a solution that is close to being optimal. ", "video": ["Slides and Resources on Coping with NP-completeness", "Introduction", "2-SAT", "2-SAT: Algorithm", "Independent Sets in Trees", "3-SAT: Backtracking", "3-SAT: Local Search", "TSP: Dynamic Programming", "TSP: Branch and Bound", "Vertex Cover", "Metric TSP", "TSP: Local Search", "Coping with NP-completeness", "Programming Assignment 4"], "title": "Coping with NP-completeness"}, {"description": "In most previous lectures we were interested in designing algorithms with fast (e.g. small polynomial) runtime, and assumed that the algorithm has random access to its input, which is loaded into memory. In many modern applications in big data analysis, however, the input is so large that it cannot be stored in memory. Instead,  the input is presented as a stream of updates, which the algorithm scans while maintaining a small summary of the stream seen so far. This is precisely the setting of the streaming model of computation, which we study in this lecture. The streaming model is well-suited for designing and reasoning about small space algorithms. It has received a lot of attention in the literature, and several powerful algorithmic primitives for computing basic stream statistics in this model have been designed, several of them impacting the practice of big data analysis. In this lecture we will see one such algorithm (CountSketch), a small space algorithm for finding the top k most frequent items in a data stream.", "video": ["Introduction", "Heavy Hitters Problem", "Reduction 1", "Reduction 2", "Basic Estimate 1", "Basic Estimate 2", "Final Algorithm 1", "Final Algorithm 2", "Proofs 1", "Proofs 2", "Quiz: Heavy Hitters", "(Optional) Programming Assignment 5"], "title": "Streaming Algorithms (Optional)"}]}, {"course_info": "About this course: This course highlights the importance and role of software product management. It also provides an overview of the specialization, as well as its goals, structure, and expectations. The course explains the value of process, requirements, planning, and monitoring in producing better software. \n \nUpon successful completion of this course, you will be able to:\n\n - Relate software product management to better software products\n - Recognize the role of a software product manager\n - Reflect on how Agile principles will improve your own projects", "title": "Introduction to Software Product Management", "rating": "4.5", "level": null, "created_by": "University of Alberta", "package_name": "Software Product Management Specialization ", "target_audience": null, "package_num": "1", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "Are you ready to start? Our starting point will be the goal of software product management, and that is to build better software. We will delve into the role of ​the software product manager, where you will hear from software industry representatives. ​ This module will also cover the path ​which you will take through this specialization, which offers to prepare you for taking on a software product manager role.", "video": ["Specialization Preview", "Course Difficulty", "Meet Your Presenters: Bradley Poulette", "Meet Your Presenters: Morgan Patzelt", "Meet Your Facilitator - Christopher Djuric", "Course Resources: Introduction to Software Product Management", "Course Map: Introduction to Software Product Management", "1.1.1: Better Software", "1.1.2: Why Software Product Management?", "1.1.3: The Role of a Software Product Manager", "1.1.4: How to be a Better Learner", "1.1.5: Plagiarism", "1.1.6: Specialization Overview", "Discussion: Introduce Yourself", "Module 1: Supplemental Resources", "Module 1 (Graded)"], "title": "Module 1: Software Product Management - The Discipline"}, {"description": "Welcome to the second half of Introduction to Software Product Management. In this module you will learn the philosophy, core values,​ and principles of Agile software development. ​The​ Agile philosophy has reshaped modern software development. ​ Challenge yourself by thinking about how you would deliver a successful software product within the “triangle” of (a) meeting client needs, (b) delivering on schedule, and (c) staying within budget. ​This module will also preview software product management in four foundational areas: establishing a process, defining requirements, planning the work, and monitoring development. You’ll see the important role they play in producing better software.", "video": ["1.2.1: Project Success, Why Agile?", "Mandatory Readings", "1.2.2: Agile Manifesto", "1.2.2A: Delivering Working Software", "1.2.2B: Flexible Design", "1.2.2C: Collaborative Communication", "Discussion: Your Experience with Agile", "1.2.3: Why Process?", "1.2.4: Why Requirements?", "1.2.5: Why Planning?", "1.2.6: Why Monitoring?", "Module 2: Supplemental Resources", "Acknowledgements", "Module 2 (Graded)", "Course Final Assessment (Graded)"], "title": "Module 2: Foundations of Software Product Management"}]}, {"course_info": "About this course: Not all programs are created equal.  In this course, we'll focus on writing quality code that runs correctly and efficiently.  We'll design, code and validate our programs and learn how to compare programs that are addressing the same task.", "title": "Learn to Program: Crafting Quality Code", "rating": "4.5", "level": null, "created_by": "University of Toronto", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Jennifer Campbell", "department": "Department of Computer Science"}, {"name": "Paul Gries", "department": "Department of Computer Science"}], "week_data": [{"description": "", "video": ["Syllabus", "Course Logistics", "Resources", "Palindrome: Approaching the Problem", "Palindrome: Approaching the Problem", "Palindrome: Algorithm 1 ", "Palindrome: Algorithm 1", "Palindrome: Algorithm 2", "Palindrome: Algorithm 2", "Palindrome: Algorithm 3", "Palindrome: Algorithm 3", "The Restaurant Recommendations Problem", "The Restaurant Recommendations Problem", "Restaurant Recommendations: Representing the Data", "Restaurant Recommendations: Representing the Data", "Restaurant Recommendations: Planning the Program", "Restaurant Recommendations: Planning the Program", "Week 1 Exercise"], "title": "Week 1"}, {"description": "", "video": ["Testing Automatically Using doctest", "Testing Automatically Using doctest", "Writing a '__main__' program", "Writing a '__main__' program", "Creating Your Own Types", "Creating Your Own Types", "Testing Automatically Using unittest", "Testing Automatically Using unittest", "Choosing Test Cases", "Choosing Test Cases", "Testing Functions that Mutate Values ", "Testing Functions that Mutate Values", "Week 2 Exercise", "Writing test cases"], "title": "Week 2"}, {"description": "", "video": ["Analyzing Algorithms", "Analyzing Algorithms", "Linear Search", "Linear Search", "Binary Search", "Binary Search", "Comparing Search Algorithms", "Comparing Search Algorithms", "Bubble Sort", "Bubble Sort", "Selection Sort", "Selection Sort", "Insertion Sort", "Insertion Sort", "Week 3 Exercise"], "title": "Week 3"}, {"description": "", "video": ["Creating a New Type", "Creating a New Type", "Plugging Into Python Syntax", "Plugging Into Python Syntax", "Writing Special Method __str__", "Writing Special Method __str__", "Writing Classes That Interact", "Writing Classes That Interact", "Week 4 Exercise"], "title": "Week 4"}, {"description": "", "video": ["Passing Functions as Arguments", "Passing Functions as Arguments", "Assigning Parameters Default Values", "Assigning Parameters Default Values", "Dealing with Exceptional Situations ", "Dealing with Exceptional Situations", "Rat Race"], "title": "Week 5"}]}, {"course_info": "About this course: In this course you will learn how to apply the functional programming style in the design of larger applications. You'll get to know important new functional programming concepts, from lazy evaluation to structuring your libraries using monads. We'll work on larger and more involved examples, from state space exploration to random testing to discrete circuit simulators. You’ll also learn some best practices on how to write good Scala code in the real world.\n\nSeveral parts of this course deal with the question how functional programming interacts with mutable state. We will explore the consequences of combining functions and state. We will also look at purely functional alternatives to mutable state, using infinite data structures or functional reactive programming.\n\nLearning Outcomes. By the end of this course you will be able to:\n\n - recognize and apply design principles of functional programs,\n - design functional libraries and their APIs,\n - competently combine functions and state in one program,\n - understand reasoning techniques for programs that combine \n   functions and state,\n - write simple functional reactive applications.\n\nRecommended background: You should have at least one year programming experience. Proficiency with Java or C# is ideal, but experience with other languages such as C/C++, Python, Javascript or Ruby is also sufficient. You should have some familiarity using the command line. This course is intended to be taken after Functional Programming Principles in Scala: https://www.coursera.org/learn/progfun1.", "title": "Functional Program Design in Scala", "rating": "4.5", "level": "Intermediate", "created_by": "École Polytechnique Fédérale de Lausanne", "package_name": "Functional Programming in Scala Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Martin Odersky", "department": "Computer Science"}], "week_data": [{"description": "We'll start by revisiting some concepts that we have learned from Principles of Functional Programming in Scala; collections, pattern matching, and functions. We'll then touch on for-comprehensions, a powerful way in Scala to traverse a list, process it, and return a new list. We'll see how to do queries with for-comprehensions as well as how the for-comprehension is \"desugared\" into calls to higher-order functions by the Scala compiler. Finally, we'll discuss what monads are, and how to verify that the monad laws are satisfied for a number of examples.", "video": ["Tools Setup for Linux", "Tools Setup for Mac OS X", "Tools for Setup for Windows", "Tutorial: Working on the Programming Assignments", "Troubleshooting", "Grading Policy", "Tools Setup", "Sbt Tutorial", "Eclipse Tutorial", "Intellij IDEA Tutorial", "Scala Tutorial", "Cheat Sheet", "Reactive Cheat Sheet", "Scala Style Guide", "Learning Resources", "Example Assignment", "Recap: Functions and Pattern Matching", "Recap: Collections", "Lecture 1.1 - Queries with For", "Lecture 1.2 - Translation of For", "Lecture 1.3 - Functional Random Generators", "Lecture 1.4 - Monads"], "title": "For Expressions and Monads"}, {"description": "This week we'll revisit performance issues caused by combinatorial search, and we'll discover an important concept in functional programming that can these issues: laziness. We'll also learn a little bit about proofs on trees; in particular, we'll see how to extend structural induction to trees.", "video": ["Lecture 2.1 - Structural Induction on Trees", "Lecture 2.2 - Streams", "Lecture 2.3 - Lazy Evaluation", "Lecture 2.4 - Computing with Infinite Sequences", "Lecture 2.5 - Case Study: the Water Pouring Problem", "Bloxorz", "Bloxorz"], "title": "Lazy Evaluation"}, {"description": "This week, we'll learn about state and side-effects. Through a rich example, we'll learn programming patterns for managing state in larger programs. We'll also learn about for-loops and while-loops in Scala.", "video": ["Lecture 3.1 - Functions and State", "Lecture 3.2 - Identity and Change", "Lecture 3.3 - Loops", "Lecture 3.4 - Extended Example: Discrete Event Simulation", "Lecture 3.5 - Discrete Event Simulation: API and Usage", "Lecture 3.6 - Discrete Event Simulation: Implementation and Test", "Quickcheck", "Quickcheck"], "title": "Functions and State"}, {"description": "This week we'll learn a number of important programming patterns via examples, starting with the observer pattern, and then going on to functional reactive programming. We'll learn how latency can be modeled as an effect, and how latency can be handled with Scala's monadic futures. We'll learn the important combinators on futures as well as how they can be composed to build up rich and responsive services.", "video": ["Lecture 4.1 - Imperative Event Handling: The Observer Pattern", "Lecture 4.2 - Functional Reactive Programming", "Lecture 4.3 - A Simple FRP Implementation", "Lecture 4.4 - Latency as an Effect 1", "Lecture 4.5 - Latency as an Effect 2", "Lecture 4.6 - Combinators on Futures 1", "Lecture 4.7 - Combinators on Futures 2", "Lecture 4.8 - Composing Futures 1", "Lecture 4.9 - Implementation of flatMap on Future", "Lecture 4.10 - Composing Futures 2", "Conclusion", "Calculator", "Calculator"], "title": "Timely Effects"}]}, {"course_info": "About this course: In this course you will learn about audio signal processing methodologies that are specific for music and of use in real applications. We focus on the spectral processing techniques of relevance for the description and transformation of sounds, developing the basic theoretical and practical knowledge with which to analyze, synthesize, transform and describe audio signals in the context of music applications.\n\nThe course is based on open software and content. The demonstrations and programming exercises are done using Python under Ubuntu, and the references and materials for the course come from open online repositories. We are also distributing with open licenses the software and materials developed for the course.", "title": "Audio Signal Processing for Music Applications", "rating": "4.9", "level": "Intermediate", "created_by": "Universitat Pompeu Fabra of Barcelona, Stanford University", "package_name": null, "target_audience": "Who is this class for: This course is primary aimed at advanced undergraduate or master students, along with professionals, interested in signal processing, programming and music. ", "package_num": null, "teach_by": [{"name": "Xavier Serra", "department": "Dept. of Information and Communication Technologies, UPF"}, {"name": "Prof Julius O Smith, III", "department": "CCRMA"}], "week_data": [{"description": "Introduction to the course, to the field of Audio Signal Processing, and to the basic mathematics needed to start the course. Introductory demonstrations to some of the software applications and tools to be used. Introduction to Python and to the sms-tools package, the main programming tool for the course.", "video": ["Teaser", "Welcome", "Introduction to Audio Signal Processing", "Course outline", "Basic mathematics", "Introduction to Audacity", "Introduction to SonicVisualizer", "Introduction to sms-tools", "Introduction to Python", "Python and sounds", "sms-tools software", "Advanced readings and videos", "Basics", "Python and sound"], "title": "Introduction "}, {"description": "The Discrete Fourier Transform equation; complex exponentials; scalar product in the DFT; DFT of complex sinusoids; DFT of real sinusoids; and inverse-DFT. Demonstrations on how to analyze a sound using the DFT; introduction to Freesound.org. Generating sinusoids and implementing the DFT in Python.", "video": ["DFT 1", "DFT 2", "Analyzing a sound", "Introduction to Freesound", "Sinusoids", "DFT", "Advanced readings and videos", "DFT", "Sinusoids and DFT"], "title": "Discrete Fourier transform"}, {"description": " Linearity, shift, symmetry, convolution; energy conservation and decibels; phase unwrapping; zero padding; Fast Fourier Transform and zero-phase windowing; and analysis/synthesis. Demonstration of the analysis of simple periodic signals and of complex sounds; demonstration of spectrum analysis tools. Implementing the computation of the spectrum of a sound fragment using Python and presentation of the dftModel functions implemented in the sms-tools package.", "video": ["Fourier properties 1", "Fourier properties 2", "Periodic signals", "Complex sounds", "Spectrum", "Fourier properties", "dftModel", "Advanced readings and videos", "Fourier properties", "Fourier Properties"], "title": "Fourier theorems"}, {"description": "STFT equation; analysis window; FFT size and hop size; time-frequency compromise; inverse STFT. Demonstration of tools to compute the spectrogram of a sound and on how to analyze a sound using them. Implementation of the windowing of sounds using Python and presentation of the STFT functions from the sms-tools package, explaining how to use them. ", "video": ["STFT 1", "STFT 2", "Spectrogram", "Analyzing a sound", "Windows", "STFT", "Advanced readings and videos", "Short-time Fourier transform", "Short-time Fourier Transform (STFT)"], "title": "Short-time Fourier transform"}, {"description": "Sinusoidal model equation; sinewaves in a spectrum; sinewaves as spectral peaks; time-varying sinewaves in spectrogram; sinusoidal synthesis. Demonstration of the sinusoidal model interface of the sms-tools package and its use in the analysis and synthesis of sounds. Implementation of the detection of spectral peaks and of the sinusoidal synthesis using Python and presentation of the sineModel functions from the sms-tools package, explaining how to use them. ", "video": ["Sinusoidal model 1", "Sinusoidal model 2", "Sinusoidal model 3", "Sinusoidal model", "Analyzing a sound", "Peak detection", "Sinusoidal synthesis", "sineModel", "Advance reading", "Sinusoidal model", "Sinusoidal model"], "title": "Sinusoidal model"}, {"description": "Harmonic model equation; sinusoids-partials-harmonics; polyphonic-monophonic signals; harmonic detection; f0-detection in time and frequency domains. Demonstrations of pitch detection algorithm, of the harmonic model interface of the sms-tools package and of its use in the analysis and synthesis of sounds. Implementation of the detection of the fundamental frequency in the frequency domain using the TWM algorithm in Python and presentation of the harmonicModel functions from the sms-tools package, explaining how to use them. ", "video": ["Harmonic model", "F0 detection", "Pitch detection", "Harmonic model", "Analyzing a sound", "F0 detection", "harmonicModel", "Advanced readings", "Harmonic model", "Harmonic Model"], "title": "Harmonic model"}, {"description": "Stochastic signals; stochastic model; stochastic approximation of sounds; sinusoidal/harmonic plus residual model; residual subtraction; sinusoidal/harmonic plus stochastic model; stochastic model of residual. Demonstrations of the stochastic model, harmonic plus residual, and harmonic plus stochastic interfaces of the sms-tools package and of its use in the analysis and synthesis of sounds. Presentation of the stochasticModel, hprModel and hpsModel functions implemented in the sms-tools package, explaining how to use them. ", "video": ["Stochastic model", "Sinusoidal plus residual modeling", "Stochastic model", "Harmonic plus residual model", "Harmonic plus stochastic model", "stochasticModel", "hprModel", "hpsModel", "Advanced readings", "Sinusoidal plus residual model", "Sinusoidal plus residual"], "title": "Sinusoidal plus residual model"}, {"description": "Filtering and morphing using the short-time Fourier transform; frequency and time scaling using the sinusoidal model; frequency transformations using the harmonic plus residual model; time scaling and morphing using the harmonic plus stochastic model. Demonstrations of the various transformation interfaces of the sms-tools package and of Audacity. Presentation of the stftTransformations, sineTransformations and hpsTransformations functions implemented in the sms-tools package, explaining how to use them. ", "video": ["Sounds transformations 1", "Sounds transformations 2", "Morphing with STFT", "Time scaling", "Pitch changes", "Morphing with HPS", "stftTransformations", "sineTransformations", "hpsTransformations", "Advanced readings", "Sound transformations", "Transformations"], "title": "Sound transformations"}, {"description": "Extraction of audio features using spectral analysis methods; describing sounds, sound collections, music recordings and music collections. Clustering and classification of sounds. Demonstration of various plugins from SonicVisualiser to describe sound and music signals and demonstration of some advance features of freesound.org. Presentation of Essentia, a C++ library for sound and music description, explaining how to use it from Python. Programming with the Freesound API in Python to download sound collections and to study them. ", "video": ["Audio features", "Sound and music description", "Sound descriptors", "Freesound", "Intro to Essentia", "Freesound API", "Sound and music description", "Sound and music description"], "title": "Sound and music description"}, {"description": "Audio signal processing beyond this course. Beyond audio signal processing. Review of the course topics. Where to learn more about the topics of this course. Presentation of MTG-UPF. Demonstration of Dunya, a web browser to explore several audio music collections, and of AcousticBrainz, a collaborative initiative to collect and share music data. ", "video": ["Beyond audio processing", "Review", "MTG-UPF", "Goodbye", "Dunya", "AcousticBrainz", "Advanced readings", "Concluding topics", "A music piece combining sounds and their transformations"], "title": "Concluding topics"}]}, {"course_info": "About this course: Based on an understanding of architectural styles, you will review architectures for web applications, then explore the basics of Service-Oriented Architecture (SOA) in two approaches: Web Services (WS*) and Representational State Transfer (REST) architecture. \n\nIn the Capstone Project you will connect a Java-based Android application with Elasticsearch, a web service with a REST application programmer interface (API).\n\nAfter completing this course, you will be able to: \n• Describe SOA (Service-Oriented Architecture) to structure web-based systems.\n• Explain WS* services (i.e., SOAP over HTTP, WSDL, UDDI, BPEL).\t\n• Apply REST architecture (i.e., JSON over HTTP, URI).\t\n• Identify REST design principles.\t\n• Create a system using REST interfaces.\t\n• Apply microservice architecture.", "title": "Service-Oriented Architecture", "rating": "4.2", "level": "Intermediate", "created_by": "University of Alberta", "package_name": "Software Design and Architecture Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "In this module, we will introduce you to service-oriented architectures and their basic principles. Then, you will get a crash course on the technologies that underpin the Web, so that you are ready to learn about web services in the next module. This module also covers some earlier precursors of service-oriented architecture.", "video": ["Meet Your Presenter – Sam Jeffrey", "Meet Your Facilitator - Christopher Djuric", "Discussion: Introduce Yourself", "Service-Oriented Architecture Glossary", "4.1.1 – Introduction to Service-Oriented Architecture", "4.1.2 – Service Principles", "4.1.3 - Web Systems Evolution", "4.1.4 – Web Systems Architecture", "4.1.5 – HTML / XML / JSON", "4.1.6 – HTTP", "4.1.7 – JavaScript", "4.1.8 – Remote Procedure Call (RPC)", "4.1.9 – Object Brokers", "Module 1 Review"], "title": "Web Technologies"}, {"description": "WS*-style web services are a \"first generation\" group of specifications that work together to allow developers to develop and use web services. They are all based on XML. In this module you will learn some of the most important specifications of WS*-style web services: SOAP, WSDL, UDDI, and BPEL.", "video": ["4.2.1 – Introduction to Web Services", "4.2.2 – Service Invocation (SOAP)", "4.2.3 – Service Description (WSDL)", "4.2.4 – Service Publication and Discovery (UDDI)", "4.2.5 – Service Composition (BPEL)", "Discussion: Experience with Internal Web Services", "Capstone Assignment 4.1 - Determine the app's information needs", "Capstone Assignment 4.1 – Determine the app's information needs", "Module 2 Review"], "title": "Web Services"}, {"description": "RESTful web services are another style of web services based on lightweight HTTP methods. They have largely superseded WS*-style services because of their relative simplicity. In this module, you will learn about RESTful services and how to design them. You will also learn a bit about microservices, a software architecture for applications that is based on services.", "video": ["4.3.1 – Introduction to REST", "4.3.2 – Designing a REST Service", "4.3.3 – Introduction to Microservices", "REST Services (Practice)", "Answer to REST service ungraded assignment", "Discussion: Ideas for REST Web Services", "Module 3 Review"], "title": "REST Architecture for SOA"}, {"description": "In the previous modules, you determined an Android application’s information needs when storing data remotely. Now, in the final module of the course, you will fully connect the application to a remote Elasticsearch server to allow users to share information across their devices. After completing this task, you will be ready to complete the final exam.", "video": ["Capstone Assignment 4.2 - Connect app to Elasticsearch", "Discussion: Last Word – Service Oriented Architecture", "Acknowledgements", "Capstone Assignment 4.2 – Connect app to Elasticsearch", "Final Exam"], "title": "Capstone Challenge"}]}, {"course_info": "About this course: This if the final course in the specialization which builds upon the knowledge learned in Python Programming Essentials, Python Data Representations, and Python Data Analysis.  We will learn how to install external packages for use within Python, acquire data from sources on the Web, and then we will clean, process, analyze, and visualize that data. This course will combine the skills learned throughout the specialization to enable you to write interesting, practical, and useful programs.\n\nBy the end of the course, you will be comfortable installing Python packages, analyzing existing data, and generating visualizations of that data.  This course will complete your education as a scripter, enabling you to locate, install, and use Python packages written by others. You will be able to effectively utilize tools and packages that are widely available to amplify your effectiveness and write useful programs.", "title": "Python Data Visualization", "rating": "4.8", "level": "Beginner", "created_by": "Rice University", "package_name": "Introduction to Scripting in Python Specialization ", "target_audience": "Who is this class for: This class is for people who have completed the other courses within the specialization and want to put the skills they have learned throughout the specialization to use in a culminating project.", "package_num": "4", "teach_by": [{"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Joe Warren", "department": "Computer Science"}], "week_data": [{"description": "This module will discuss the importance of using and writing documentation. The Python documentation is a valuable resource for learning about language features you haven't seen yet.", "video": ["Welcome!", "Class Structure", "Using Python Documentation", "Writing Documentation", "Python Built-in Modules", "Code Reuse", "Installing Packages in Thonny", "Practice Project: Drawing a USA Map in matplotlib", "Documentation"], "title": "Week 1 "}, {"description": "This module will teach you about packages and modules in Python, including how to install packages and how to create your own modules. You will also learn to use the Pygal plotting library.", "video": ["Python Packages and Modules", "Importing Your Own Code", "Line Plots with Pygal", "Installing Packages using PIP - Part 1", "Installing Packages using PIP - Part 2", "Practice Project: Extracting Data from an SVG File", "Project 1 Video", "Project Description: Creating Line Plots of GDP Data", "OwlTest: Automated Feedback and Assessment", "Project Submission History", "Project: Creating Line Plots of GDP Data"], "title": "Week 2"}, {"description": "This module will teach you about Python sets. Sets are used to hold unordered collections of data without duplicates. We will also discuss efficiency.", "video": ["Python Sets", "Hashing", "Analyzing the Efficiency of Your Code", "Comparing Two Methods for Joining CSV Files", "Practice Project: Reconciling Cancer-Risk Data with the USA Map", "Project 2 Video", "Project Description: Plotting GDP Data on a World Map - Part 1", "Project: Plotting GDP Data on World Map (Part 1)"], "title": "Week 3"}, {"description": "The final project of the specialization will enable you to demonstrate mastery of the concepts you have learned up to this point. You will also be able to understand and compare different approaches to reconciling two data sets. ", "video": ["Growing as a Scripter", "Version Control", "Practice Project: Visualizing Cancer-risk Data on the USA Map", "Project 3 Video", "Project Description: Plotting GDP Data on a World Map - Part 2", "Wrapup Video", "Project: Plotting GDP Data on World Map (Part 2)"], "title": "Week 4"}]}, {"course_info": "About this course: This course will continue the introduction to Python programming that started with Python Programming Essentials and Python Data Representations.  We'll learn about reading, storing, and processing tabular data, which are common tasks.  We will also teach you about CSV files and Python's support for reading and writing them.  CSV files are a generic, plain text file format that allows you to exchange tabular data between different programs. These concepts and skills will help you to further extend your Python programming knowledge and allow you to process more complex data.\n\nBy the end of the course, you will be comfortable working with tabular data in Python. This will extend your Python programming expertise, enabling you to write a wider range of scripts using Python.\n\nThis course uses Python 3.  While most Python programs continue to use Python 2, Python 3 is the future of the Python programming language. This course uses basic desktop Python development environments, allowing you to run Python programs directly on your computer.", "title": "Python Data Analysis", "rating": "4.8", "level": "Beginner", "created_by": "Rice University", "package_name": "Introduction to Scripting in Python Specialization ", "target_audience": "Who is this class for: This class is for people who have have the background from our Python Data Representations course.", "package_num": "3", "teach_by": [{"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Joe Warren", "department": "Computer Science"}], "week_data": [{"description": "This module will teach you about Python's dictionary data type and its capabilities.  Dictionaries are used to map keys to values within programs.", "video": ["Welcome!", "Class Structure", "Python Dictionaries", "Defining a Dictionary", "Dictionary Lookup and Update", "Checking Keys", "Dictionaries - Example", "Handling Dictionary Errors", "Practice Exercises for Dictionaries", "Dictionaries"], "title": "Dictionaries"}, {"description": "This module will teach you about storing tabular data within Python programs using lists and dictionaries.", "video": ["Iteration over Dictionaries", "Tabular Data", "Tabular Data as a Nested List", "Tabular Data as a Nested Dictionary", "Displaying Dictionaries", "Practice Exercises for Nested Data Structures", "Nested Representations for Tabular Data"], "title": "Tabular Data and Nested Data Structures"}, {"description": "This module will teach you the basics of CSV files and how to read them from Python programs. We will discuss the use of Python's csv module to help you access tabular data in CSV files.", "video": ["Tables and CSV Files", "CSV Files", "Parsing CSV Files", "Python's CSV Module", "CSV DictReader", "CSV Reader Options", "Experimenting with CSV Methods - Part 1", "Experimenting with CSV Methods - Part 2", "Practice Project: Loading Cancer-Risk Data", "Project Video for Part 1", "Project Description: Reading  and Writing CSV Files", "OwlTest: Automated Feedback and Assessment", "Project Submission History", "Project: Reading and Writing CSV Files"], "title": "Tabular Data and CSV Files"}, {"description": "This module will teach you how to sort data in Python. You will organize and analyze tabular data.", "video": ["Sorting", "Lambda", "Advanced Sorting", "Dictionaries vs. Lists for storing data", "Refactoring Your Code - Part 1", "Refactoring Your Code - Part 2", "Practice Project: Processing Cancer-Risk Data", "Project Video for Part 2", "Project Description: Analyzing Baseball Data", "Project: Analyzing Baseball Data"], "title": "Organizing Data"}]}, {"course_info": "About this course: >>> By enrolling in this course you agree to the End User License Agreement as set out in the FAQ.  Once enrolled you can access the license in the Resources area <<<\n\nRapid application development using agile methodologies and processes are increasingly being used when developing applications.  There is pressure on development teams to reduce the time needed to convert an idea into a working solution, be it as part of an innovation workshop or hackathon, a prototype for a new solution idea or main stream development.\n\nDevelopers are looking for new ways to allow them to be more production and innovations, such as Node-RED from the JS Foundation is a technology that allows a developer to rapidly create applications, taking a fraction of the time need coding write code.  \n\nNode-RED is built on Node.js, so will run anywhere capable of hosting node.js applications, such as small single board computers like the Raspberry Pi or Beaglebone, on your laptop or workstation or in cloud environments, such as the IBM Cloud.\n\nNode red allows developers to compose flows using a pallet of nodes, where each node provides prebuilt functionality, that can be connected to other nodes to rapidly construct an application.\n\nThis course assumes some basic knowledge of Node-RED, so if you have not used Node-RED then you may want to take a look at the Coursera course - A Developer’s Guide to the Internet of Things (https://www.coursera.org/learn/developer-iot/), which provides a beginner look at Node-RED.\n\nWhat you will learn: \nThe course will improve your use of Node-RED.  It will introduce some more advanced features available in key nodes, show you how to visualise data using dashboard nodes.  It shows you how to create web APIs using Node-RED and how to consume web services and how to make use of different storage technologies within a Node-RED flow.  The last section of the course shows how you can extend Node-RED by creating your own nodes.\n \nWhat technology is required to complete the course?  \nThe course requires you to have an IBM Cloud account, as some of the assignment work does make use of designated cloud services.  You can create a free account on the IBM Cloud and in week 2 of the course we make a promotional code available, which unlocks some additional resources on the IBM Cloud, so you can complete the course without having to provide credit card information or pay for cloud services.", "title": "A Developer's guide to Node-RED", "rating": null, "level": "Intermediate", "created_by": "IBM", "package_name": null, "target_audience": "Who is this class for: The course is aimed at learners that want to advance their Node-RED skills.  \n\nThe course assumes an understanding of programming. There is also an assumption that you have a basic understanding of Node-RED, if not you may want to look at the course \"A developer's guide to the Internet of Things (IoT)\", which teaches the basics of Node-RED.  \n\nThe course also uses the IBM Cloud (previously known as Bluemix), so assumes basic knowledge of using the IBM Cloud, again the \"A developer's guide to the Internet of Things (IoT)\" course provides this prerequisite information.", "package_num": null, "teach_by": [{"name": "Brian Innes", "department": "IBM Digital Business Group"}, {"name": "Nick O'Leary", "department": "IBM Digital Business Group"}, {"name": "Maeve O'Reilly", "department": "IBM Watson Internet of Things"}, {"name": "John Walicki", "department": "Watson Internet of Things"}], "week_data": [{"description": "Welcome to the course.  This learning module introduces you to course and the instructors.  The module outlines the content covered on the course and gives an introduction to the Internet of Things.  It also discusses the requirements needed to complete the course including the hardware, software and details of prerequisite skills required to complete the programming assignments.  \n\nThe module then discusses using Node-RED to create cloud applications and the different options available to customise the Node-RED runtime", "video": ["Introduction to the course", "Course prerequisites", "Summary of lessons", "Practical work in the course", "Meet the instructors", "Node-RED overview and prerequisite knowledge", "Introduction to Cloud native applications", "Customising Node-RED", "Node-RED Basics", "Node-RED Cloud Applications"], "title": "Week 1 - Introduction and Review of Node-RED"}, {"description": "Week 2 is about getting to know some of the more advanced features available in Node-RED.  It looks at the more advanced configuration options available in some of the key nodes, such as regular expressions and JSONata.  The second part of this module looks at the dashboard nodes, which can be added to Node-RED.  This module will show you how these nodes allow you to quickly create feature rich dashboards.", "video": ["Get an IBM Cloud promo code", "Change and Switch nodes", "Getting started with Regular expressions", "Getting started with JSONata", "JSONata in Node-RED", "Most appropriate key node", "Node-RED Additional nodes", "Mastering the Node-RED menu options", "Introduction to Node-RED Dashboards", "Dashboard layout and configuration", "Advanced Dashboard Nodes - Charts", "Node-RED Forms and Templates", "Node-RED Dashboard Lecture Slides and Flows", "Rewrite a flow, removing all the function nodes", "Node-RED features", "Create a dashboard"], "title": "Week 2 - Useful Node-RED nodes "}, {"description": "Week 3 looks at how Node-RED allows you to interact with external applications and services.  You will see how to create web pages and APIs to make your applications available via HTTP and also how to call external APIs.  The module then goes on to look at how to make use of storage services, which may be a local or remote database or a cloud storage service.", "video": ["Overview of REST APIs", "Calling a REST API from Node-RED", "Creating a Web API in Node-RED - part 1", "Creating a Web API in Node-RED - part 2", "Building a web server from Node-RED", "Introduction", "Perspectives on the CAP Theorem (Optional)", "Interacting with Cloudant", "Discovering JavaScript Object Notation with Douglas Crockford (Optional)", "Interacting with IBM Cloud Object Storage", "Basics of Object Storage (Optional)", "Node-RED flow for interacting with SQLite (Optional)", "Interacting with SQLite on a Raspberry Pi", "Interacting with the Watson IoT Platform's Last Event Cache", "Watson IoT Platform's Last Event Cache", "Introduction to the assignment", "Create and call a Web API in Node-RED", "Perform Create,Read,Update operations on a cloud hosted  Cloudant using Node-RED"], "title": "Week 3 - Accessing External Services"}, {"description": "The final week of the course looks at how you can extend Node-RED by creating your own Node-RED nodes.", "video": ["Overview of a Node's structure", "Setting up a development environment", "The node runtime file", "The node editor file", "Adding more configuration options to a node", "Packaging a node module", "Introducing Configuration nodes", "Patterns for configuration nodes", "Additional node configuration options", "Course wrap up", "The structure of a Node module", "Create a Node-RED node"], "title": "Week 4 - Extending Node-RED"}]}, {"course_info": "About this course: With every smartphone and computer now boasting multiple processors, the use of functional ideas to facilitate parallel programming is becoming increasingly widespread. In this course, you'll learn the fundamentals of parallel programming, from task parallelism to data parallelism. In particular, you'll see how many familiar ideas from functional programming map perfectly to to the data parallel paradigm. We'll start the nuts and bolts how to effectively parallelize familiar collections operations, and we'll build up to parallel collections, a production-ready data parallel collections library available in the Scala standard library. Throughout, we'll apply these concepts through several hands-on examples that analyze real-world data, such as popular algorithms like k-means clustering.\n\nLearning Outcomes. By the end of this course you will be able to:\n\n- reason about task and data parallel programs,\n- express common algorithms in a functional style and solve them in parallel,\n- competently microbenchmark parallel code,\n- write programs that effectively use parallel collections to achieve performance\n\nRecommended background: You should have at least one year programming experience. Proficiency with Java or C# is ideal, but experience with other languages such as C/C++, Python, Javascript or Ruby is also sufficient. You should have some familiarity using the command line. This course is intended to be taken after Functional Program Design in Scala: https://www.coursera.org/learn/progfun2.", "title": "Parallel programming", "rating": "4.4", "level": "Intermediate", "created_by": "École Polytechnique Fédérale de Lausanne", "package_name": "Functional Programming in Scala Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Prof. Viktor Kuncak", "department": "School of Computer and Communication Sciences"}, {"name": "Dr. Aleksandar Prokopec", "department": "Oracle Labs"}], "week_data": [{"description": "We motivate parallel programming and introduce the basic constructs for building parallel programs on JVM and Scala. Examples such as array norm and Monte Carlo computations illustrate these concepts. We show how to estimate work and depth of parallel programs as well as how to benchmark the implementations.", "video": ["Course Overview", "Introduction to Parallel Computing", "Parallelism on the JVM I", "Parallelism on the JVM II", "Running Computations in Parallel", "Monte Carlo Method to Estimate Pi", "First-Class Tasks", "How Fast are Parallel Programs?", "Benchmarking Parallel Programs", "Tools Setup", "Eclipse Tutorial", "IntelliJ IDEA Tutorial", "Sbt Tutorial", "Submitting Solutions", "Example", "Parallel Box Blur Filter", "Parallel Box Blur Filter"], "title": "Parallel Programming"}, {"description": "We continue with examples of parallel algorithms by presenting a parallel merge sort. We then explain how operations such as map, reduce, and scan can be computed in parallel. We present associativity as the key condition enabling parallel implementation of reduce and scan.", "video": ["Parallel Sorting", "Data Operations and Parallel Mapping", "Parallel Fold (Reduce) Operation", "Associativity I", "Associativity II", "Parallel Scan (Prefix Sum) Operation", "Reductions and Prefix Sums", "Reductions and Prefix Sums"], "title": "Basic Task Parallel Algorithms"}, {"description": "We show how data parallel operations enable the development of elegant data-parallel code in Scala. We give an overview of the parallel collections hierarchy, including the traits of splitters and combiners that complement iterators and builders from the sequential case.", "video": ["Data-Parallel Programming", "Data-Parallel Operations I", "Data-Parallel Operations II", "Scala Parallel Collections", "Splitters and Combiners", "K-Means", "K-Means"], "title": "Data-Parallelism"}, {"description": "We give a glimpse of the internals of data structures for parallel computing, which helps us understand what is happening under the hood of parallel collections.", "video": ["Implementing Combiners", "Parallel Two-phase Construction", "Conc-tree Data Structure", "Amortized, Constant-time Append Operation", "Conc-Tree Combiners", "Barnes-Hut Simulation", "Barnes-Hut Simulation"], "title": "Data Structures for Parallel Computing"}]}, {"course_info": "About this course: This one-week accelerated on-demand course provides participants a a hands-on introduction to designing and building machine learning models on Google Cloud Platform. Through a combination of presentations, demos, and hand-on labs, participants will learn machine learning (ML) and TensorFlow concepts, and develop hands-on skills in developing, evaluating, and productionizing ML models.\n\nOBJECTIVES\n\nThis course teaches participants the following skills:\n\n  ● Identify use cases for machine learning\n\n  ● Build an ML model using TensorFlow\n\n  ● Build scalable, deployable ML models using Cloud ML\n\n  ● Know the importance of preprocessing and combining features\n\n  ● Incorporate advanced ML concepts into their models\n\n  ● Productionize trained ML models\n\n\nPREREQUISITES\n\nTo get the most of out of this course, participants should have:\n\n  ● Completed Google Cloud Fundamentals- Big Data and Machine Learning course OR have equivalent experience\n\n  ● Basic proficiency with common query language such as SQL\n\n  ● Experience with data modeling, extract, transform, load activities\n\n  ● Developing applications using a common programming language such Python\n\n  ● Familiarity with Machine Learning and/or statistics\n\nNotes:\n• You'll need a Google/Gmail account and a credit card or bank account to sign up for the Google Cloud Platform free trial (Google is currently blocked in China).\n• There is a known issue with certain EU countries where individuals are not able to sign up, but you may sign up as \"business\" status and intend to see a potential economic benefit from the trial. More details at: https://support.google.com/cloud/answer/6090602\n• More Google Cloud Platform free trial FAQs are available at: https://cloud.google.com/free-trial/", "title": "Serverless Machine Learning with Tensorflow on Google Cloud Platform", "rating": "4.4", "level": "Intermediate", "created_by": "Google Cloud", "package_name": "Data Engineering on Google Cloud Platform Specialization ", "target_audience": "Who is this class for: This class is intended for experienced developers who are responsible for managing big data transformations including 1) Extracting, Loading, Transforming, cleaning, and validating data 2) Designing pipelines and architectures for data processing 3) Creating and maintaining machine learning and statistical models 4) Querying datasets, visualizing query results and creating reports", "package_num": "4", "teach_by": [{"name": "Google Cloud Training", "department": null}], "week_data": [{"description": "", "video": ["Welcome to the Course", "Learn About the Data Engineer Series of GCP Courses", "How to Think About Machine Learning", "Machine Learning Course Pretest"], "title": "Welcome to Serverless Machine Learning on Google Cloud Platform"}, {"description": "", "video": ["Module 1 Overview", "What is Machine Learning (ML)?", "Playing with Machine Learning (ML)", "A Neural Network Playground", "Combinations and Hierarchies of Features", "Engineering Features, Layers, and Neurons", "The Reality of Machine Learning", "Covering All Use Cases", "Negative Examples and Near-misses", "Explore the Data and Fix Problems", "Think Carefully About Error Metrics", "Cross-entropy is Not Intuitive", "Confusion Matrix", "Classification Accuracy", "Accuracy in Unbalanced Datasets", "Precision and Recall", "Changing the Model Threshold Pt 1", "Changing the Model Threshold Pt 2", "Defining ML Terms from this Lesson", "Creating Machine Learning Datasets for Regression Problems", "Split Dataset and Model Experimentation", "Evaluating the Final Model", "Create ML Datasets Lab Overview", "Create Machine Learning Datasets (Lab 1a)", "Create ML Datasets Lab Review", "Graded Quiz #1"], "title": "Module 1: Getting Started with Machine Learning"}, {"description": "", "video": ["Module 2 Title", "Module 2 Overview", "Module 2 Agenda", "Building Machine Learning Models with TensorFlow", "Getting Started with TensorFlow Lab Overview", "Getting Started with TensorFlow (Lab 2a)", "TensorFlow Lab Review", "TensorFlow for Machine Learning + Lab", "Machine Learning with tf.learn Lab Overview", "Machine Learning using tf.learn (Lab 2b)", "tf.learn Lab Review", "Gaining More Flexibility + Lab", "TensorFlow on Big Data Lab Overview", "TensorFlow on Big Data (Lab 2c)", "Tensorflow on Big Data Lab Review", "The Experiment Framework + Lab", "TensorFlow Resources", "Graded Quiz #2"], "title": "Module 2: Building ML models with Tensorflow"}, {"description": "", "video": ["Scaling TF Models with Cloud ML Engine", "Module 3 Overview", "Why Cloud ML Engine?", "Package up a TensorFlow Model", "Lab: Scaling with Cloud ML Engine", "Lab 3: Getting Started with Cloud ML Engine", "Graded Quiz #3"], "title": "Module 3: Scaling ML models with Cloud ML Engine"}, {"description": "", "video": ["Module 4 Overview", "Creating Good Features", "2. Value Should Be Known for Prediction", "Quiz: Value Knowable or Not?", "3. Numeric with Meaningful Magnitude?", "4. Enough Examples", "Raw Data to Numeric Features", "5. Good Features Bring Human Insight to Problems", "Build Effective ML with Model Architectures", "Feature Engineering Lab Overview", "Lab 4: Feature Engineering", "Feature Engineering Lab Review", "Hyperparameter Tuning + Demo", "Resources", "Graded Quiz #4"], "title": "Module 4: Feature Engineering"}]}, {"course_info": "About this course: The way that software components — subroutines, classes, functions, etc. —  are arranged,  and the interactions between them, is called architecture. In this course you will study the ways these architectures are represented, both in UML and other visual tools. We will introduce the most common architectures, their qualities, and tradeoffs. We will talk about how architectures are evaluated, what makes a good architecture, and an architecture can be improved. We'll also talk about how the architecture touches on the process of software development.\n\nIn the Capstone Project you will document a Java-based Android application with UML diagrams and analyze evaluate the application’s architecture using the Architecture Tradeoff Analysis Method (ATAM).\n\nAfter completing this course, you will be able to: \n• Compare and contrast the components, connections, protocols, topologies, constraints, tradeoffs, and variations of different types of architectural styles used in the design of applications and systems (e.g., main program and subroutine, object-oriented, interpreters, pipes and filters, database centric, event-based).\t\n• Describe the properties of layered and n-tier architectures.\t\n• Create UML ipackage, component, and deployment diagrams to express the architectural structure of a system.\t\n• Explain the behaviour of a system using UML activity diagrams.\t\n• Document a multi-application system with a layered architecture.", "title": "Software Architecture", "rating": "4.4", "level": "Intermediate", "created_by": "University of Alberta", "package_name": "Software Design and Architecture Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "In this module you will learn about software architecture. You will learn why architecture is important, what perspectives need to be considered, and how to communicate architecture using UML.", "video": ["Meet Your Presenter – Sam Jeffery", "Meet Your Facilitator – Christopher Djuric", "Software Architecture – Course Notes", "Software Architecture Glossary", "3.1.1 – Architecture Overview and Process", "Discussion: Introduce Yourself", "3.1.2 – Kruchten's 4 + 1 Model View", "3.1.3 – UML Component Diagram", "3.1.4 – UML Package Diagram", "3.1.5 – UML Deployment Diagram", "3.1.6 – UML Activity Diagram", "Capstone Assignment 3.1 - Draw a Component Diagram (Solution)", "Capstone Assignment 3.2 - Draw a Deployment Diagram (Solution)", "Capstone Assignment 3.1 – Draw a Component Diagram", "Capstone Assignment 3.2 – Draw a Deployment Diagram", "Module 1 Review"], "title": "UML Architecture Diagrams"}, {"description": "Software comes in all shapes and sizes. The architecture you choose will affect every part of your software, from its security and efficiency, to its modularity and maintainability. In this module we will examine the different architectures that you have to choose from to shape your software.", "video": ["3.2.1 – Abstract Data Types and Object-Oriented", "3.2.2 – Main Program and Subroutine", "3.2.3 – Databases", "3.2.4 – Layered Systems", "3.2.5 – Client Server n-Tier", "3.2.6 – Interpreters", "State Transition Systems", "3.2.7 – Pipes and Filters", "3.2.8 – Event Based", "Publish–Subscribe", "3.2.9 – Process Control", "Discussions: Architectural Styles", "Module 2 Review"], "title": "Architectural Styles"}, {"description": "The architecture is the most fundamental aspect of software. You will learn how development teams describe architectures, plan successful architectures based on quality attributes, and evaluate the resulting architecture. You will also learn how architecture relates to organization structure and even product planning!", "video": ["3.3.1 – Quality Attributes", "3.3.2 – Analyzing and Evaluating an Architecture", "3.3.3 – Relationship to Organizational Structure", "3.3.4 – Product Lines and Product Families", "Module 3 Review"], "title": "Architecture in Practice"}, {"description": "Now, in the final module of the course, you will evaluate the proposed architecture to extend the functionality of the example Android code base.", "video": ["Capstone Assignment 3.3 - Analyze and Evaluate an Architecture (Solution)", "Discussion: Last Word – Software Architecture", "Acknowledgements", "Credits", "Capstone Assignment 3.3 – Analyze and Evaluate an Architecture", "Final Exam"], "title": "Capstone Challenge"}]}, {"course_info": "About this course: Solve real world problems with Java using multiple classes. Learn how to create programming solutions that scale using Java interfaces. Recognize that software engineering is more than writing code - it also involves logical thinking and design. By the end of this course you will have written a program that analyzes and sorts earthquake data, and developed a predictive text generator.\n\nAfter completing this course, you will be able to:\n1. Use sorting appropriately in solving problems;\n2. Develop classes that implement the Comparable interface;\n3. Use timing data to analyze empirical performance;\n4. Break problems into multiple classes, each with their own methods;\n5. Determine if a class from the Java API can be used in solving a particular problem;\n6. Implement programming solutions using multiple approaches and recognize tradeoffs;\n7. Use object-oriented concepts including interfaces and abstract classes when developing programs;\n8. Appropriately hide implementation decisions so they are not visible in public methods; and\n9. Recognize the limitations of algorithms and Java programs in solving problems.\n10. Recognize standard Java classes and idioms including exception-handling, static methods, java.net, and java.io packages.", "title": "Java Programming: Principles of Software Design", "rating": "4.6", "level": "Beginner", "created_by": "Duke University", "package_name": "Java Programming and Software Engineering Fundamentals Specialization ", "target_audience": "Who is this class for: This course is for anyone who has taken the first three courses in the Java Programming and Software Engineering Fundamentals Specialization, “Programming Foundations with JavaScript, HTML and CSS,” “Java Programming: Solving Problems with Software,” and “Java Programming: Arrays, Lists, and Structured Data.” To succeed in this course, before starting you should have a good understanding of the following: variables, conditionals, loops, methods, Strings, arrays, lists, maps, Java classes, and the edu.duke custom libraries.", "package_num": "4", "teach_by": [{"name": "Robert Duvall", "department": "Computer Science"}, {"name": "Owen Astrachan", "department": "Computer Science"}, {"name": "Andrew D. Hilton", "department": "Electrical and Computer Engineering"}, {"name": "Susan H. Rodger", "department": "Computer Science"}], "week_data": [{"description": "Welcome to “Java Programming: Principles of Software Design”! We are excited that you are starting our course to learn how to write programs in Java, one of the most popular programming languages in the world. In this introductory module, you will hear an overview of this course and be introduced to the supporting resources available.", "video": ["Welcome!", "Programming Resources"], "title": "Welcome to the Course"}, {"description": "In this module, we will introduce a data set containing details about earthquakes around the world. You will learn how to pull this data into a program, search through the data, and filter the data based on desired criteria. By the end of this module, you will be able to (1) write programs that include multiple classes and ArrayLists of class types, (2) find the maximum value in an ArrayList, (3) use a Filter interface to search through data, (4) implement interfaces with method signatures, and (5) combine several filters together.", "video": ["Module Learning Outcomes / Resources", "Introduction", "Relationships Between Classes", "Licensing and APIs", "Location class documentation and license resources", "Coding a Magnitude Filter", "Coding the Closest Quakes", "Summary", "Programming Exercise: Searching Earthquake Data", "Searching Earthquake Data", "Introduction", "Interfaces to Avoid Duplication", "Interfaces in More Depth", "MatchAll", "Summary", "Programming Exercise: Filtering Data", "Filtering Data", "End of Module Survey", "Earthquakes: Programming and Interfaces"], "title": "Earthquakes: Programming and Interfaces"}, {"description": "In this module, you will continue using real earthquake data to explore several sorting algorithms. You will learn how to implement a selection sort and a bubble sort, then be introduced to a Java method Collections.sort, which sorts with much greater efficiency. By the end of this module, you will be able to (1) implement several sorting algorithms from scratch, (2) use efficient pre-existing sorting classes, (3) modify a class’s compareTo method to choose the criteria by which objects of that type are ordered, and (4) write classes that implement the Comparator interface to create interchangeable sorting criteria.", "video": ["Module Learning Outcomes / Resources", "Introduction", "Developing an Algorithm", "Translating to Code", "In Place", "Efficiency", "Summary", "Programming Exercise: Implementing Selection Sort", "Implementing Selection Sort", "Introduction", "Comparable", "Ordering Quakes by Magnitude", "Comparator", "Comparator for Distance from a Location", "Summary", "Programming Exercise: Sorting at Scale", "Sorting at Scale", "End of Module Survey", "Earthquakes: Sorting Algorithms"], "title": "Earthquakes: Sorting Algorithms"}, {"description": "In this module, you will explore some of the underlying concepts of predictive text. The first lesson will introduce random character generation and then how to train the character selection based on an input text. The second lesson will extend this concept to complete words. By the end of this module, you will be able to: (1) base random text generation on the frequency of characters in a training text, (2) collect a set of characters that occur in a text after randomly chosen initial character(s) to create a semi-random text, (3) extend the predictive text generation to use whole words, and (4) implement your own .equals method to compare complex data types.", "video": ["Module Learning Outcomes / Resources", "Introduction", "Order-Zero, Order-One", "Finding Follow Set", "Implementing Order-Two", "Testing and Debugging", "Programming Exercise: Generating Random Text", "Generating Random Text", "Interfaces and Abstract Classes", "Summary", "Programming Exercise: Interface and Abstract Class", "Interface and Abstract Class", "Introduction", "Order-One Concepts", "Order-One Helper Functions", "Programming Exercise: Word N-Grams", "Word N-Grams", "WordGram Class", "WordGram Class Implementation", "Equals and HashCode Methods", "Equals Method Implementation", "Summary", "Programming Exercise: WordGram Class", "WordGram Class", "End of Module Survey", "N-Grams: Predictive Text"], "title": "N-Grams: Predictive Text"}, {"description": "As you reach the end of this series, you may wish to extend your Java experience to tools beyond those provided here. This module will cover some of the Java basic information that is needed to program without BlueJ or the edu.duke library. After completing this module, you will be able to: (1) write a main method to start a Java program in any programming environment, (2) use the “static” keyword to modify fields, (3) find alternative editors to use with Java, (4) use exceptions to debug your program and make it more robust, and (5) reference Java libraries that are necessary to read files without the edu.duke library.\n", "video": ["Module Learning Outcomes / Resources", "Miscellaneous Java", "Main Method", "Static", "Editors", "Summary", "Introduction", "Understanding Exceptions", "Handling Exceptions", "Declaring Exceptions", "Throwing Exceptions", "Reading Files with Java.nio", "Hello Around the World with Eclipse", "Summary", "Where To Go From Here", "End of Module Survey", "Java: Tools and Libraries for Everyone"], "title": "Java: Tools and Libraries for Everyone"}]}, {"course_info": "About this course: Computer graphics can be a powerful tool for supporting visual problem solving, and interactivity plays a central role in harnessing the users' creativity. This course will introduce various interactive tools developed in computer graphics research field with their design rationales and algorithms. Examples include enhancements to graphical user interfaces, authoring tools for 2D drawings and 3D animations, and interactive computer-aided design systems. Rich live demonstrations and course assignments will give you insights and skills to design and implement such tools for your own problems.", "title": "Interactive Computer Graphics", "rating": "4.3", "level": "Intermediate", "created_by": "The University of Tokyo", "package_name": null, "target_audience": "Who is this class for: This course is mainly aimed at those who have basic programming skills as well as basic mathematical skills and physics knowledge, since Graded Quizzes assume that students have some experience and knowledge in computer science and programming.\nHowever, auditing the course is also welcome! By watching lecture videos and trying some quizzes, you will gain some insights into creative problem solving. In this case, no background knowledge is expected.", "package_num": null, "teach_by": [{"name": "Takeo Igarashi", "department": "Department of Computer Science, Graduate School of Information Science and Technology"}], "week_data": [{"description": "Graphical user interfaces turn computer control problem into visual problem solving. The lectures of this module introduce five attempts to enhance current GUI operations such as scrolling interfaces, management of desktop icons, pointing on a large display, digital inking, and vocal interaction.", "video": ["Course Preview", "Introduction", "Course Description", "Syllabus", "Course FAQs", "Problems when running Java Application / Java Applet", "1-1 Scrolling Interface", "Scrolling Interface", "1-2 Desktop Icons", "Desktop Icons", "1-3 Pointing", "Pointing", "1-4 Digital Ink", "Digital Ink", "1-5 Voice Interaction", "Voice Interaction", "Graphical User Interfaces"], "title": "Graphical User Interfaces"}, {"description": "In this module we will dive deep into the world of 2D. We will discuss techniques for authoring 2D drawings and animations. Specifically, we will introduce interactive diagram beautification, pen-and-ink texture synthesis, shape manipulation, and dynamic illustrations. We hope you will witness how interactive software can change burdensome drawing work into full of fun!", "video": ["2-1 Diagram Beautification", "Diagram Beautification", "2-2 Pen-and-ink Textures", "Pen-and-ink Textures", "2-3 Shape Manipulation", "Shape Manipulation", "2-4 Dynamic Illustrations", "Dynamic Illustrations", "2D Drawings and Animations"], "title": "2D Drawings and Animations"}, {"description": "In this module, we rise up from 2D plane to 3D space, and discuss 3D geometric modeling methods. Topics introduced are; suggestive interface for architectural models, a sketch-based modeling system for freeform shapes, a curve-based shape control method, a flower modeling system, and volumetric texture. You will see how 3D objects can be easily and quickly modeled by specially-designed 2D user interfaces!", "video": ["3-1 Suggestive Interface", "Suggestive Interface", "3-2 Sketch-based Modeling", "Sketch-based Modeling", "3-3 Shape Control by Curves", "Shape Control by Curves", "3-4 Flower Modeling", "Flower Modeling", "3-5 Volumetric Textures", "Volumetric Textures", "3D Geometric Modeling"], "title": "3D Geometric Modeling"}, {"description": "Starting from this module, we are shifting our attention towards simulating/crafting real objects and movements, which usually require intricate systems to deal with. As for this module, we will introduce clothing manipulation techniques, layer operations for stacked deformable objects, spatial key framing for character animations, procedural deformation, and human motion visualization using stick figures. You will discover how deformation and animation techniques help visually reproduce complex objects and motions.", "video": ["4-1 Clothing Manipulations", "Clothing Manipulations", "4-2 Layer Operations", "Layer Operations", "4-3 Spatial Key Framing", "Spatial Key Framing", "4-4 Procedural Deformation", "Procedural Deformation", "4-5 Motion Database", "Motion Database", "Deformation and Animation"], "title": "Deformation and Animation"}, {"description": "In this module, we will discuss systems for supporting personal fabrication. In particular, we will introduce systems for designing plush toys, beadworks, chairs, and softly folded objects. In addition, interactive packing method is presented.", "video": ["5-1 Plush Toys", "Plush Toys", "5-2 Beadworks", "Beadworks", "5-3 Chairs", "Chairs", "5-4 Soft Folding", "Soft Folding", "5-5 Interactive Packing", "Interactive Packing", "Fabrication"], "title": "Fabrication"}, {"description": "Nowadays, computers are indispensable for designing products; computers mediate the interaction between designers and products. But in most cases, designing and testing processes are separated, so that designers will not foresee the consequences of their design in real time.\nIn this module, we will discuss computer-aided design supported by simultaneous physical simulation. The works introduced are: systems for designing cantilever, musical instruments, garments, furniture, and gliders. You will see how real-time feedback helps designers improve the output products!", "video": ["6-1 Cantilever", "Cantilever", "6-2 Musical Instruments", "Musical Instruments", "6-3 Garments", "Garments", "6-4 Furniture", "Furniture", "6-5 Gliders", "Gliders", "Computer-aided Design"], "title": "Computer-aided Design"}, {"description": "Computer-operated appliances, such as robotic cleaners, are gradually spreading to general households in recent years. These emerging technologies have opened the door to the new research area, i.e. research on the interactions between ordinary people and robots. In this module, we will discuss interactive techniques and systems for real world interaction. Topics include: a command card interface for robot control, style-by-demonstration for robot behavior design, an actuated puppet device for character posing, a painting interface for robotic lights, and a fur display.", "video": ["7-1 Command Card Interface", "Command Card Interface", "7-2 Style-by-Demonstration", "Style-by-Demonstration", "7-3 Actuated Puppet", "Actuated Puppet", "7-4 Robotic Light", "Robotic Light", "7-5 Fur Display", "Fur Display", "Concluding Remarks", "Students' Work Gallery", "Acknowledgments", "Real World Interaction"], "title": "Real-world Interaction"}]}, {"course_info": "About this course: Welcome to the Cloud Computing Applications course, the first part of a two-course series designed to give you a comprehensive view on the world of Cloud Computing and Big Data! \n\nIn this first course we cover a multitude of technologies that comprise the modern concept of cloud computing. Cloud computing is an information technology revolution that has just started to impact many enterprise computing systems in major ways, and it will change the face of computing in the years to come.\n\nWe start the first week by introducing some major concepts in cloud computing, the economics foundations of it and we introduce the concept of big data. We also cover the concept of software defined architectures, and how virtualization results in cloud infrastructure and how cloud service providers organize their offerings. In week two, we cover virtualization and containers with deeper focus, including lectures on Docker, JVM and Kubernates. We finish up week two by comparing the infrastructure as a service offering by the big three: Amazon, Google and Microsoft. \nWeek three moves to higher level of cloud offering, including platform as a service, mobile backend as a service and even serverless architectures. We also talk about some of the cloud middleware technologies that are fundamental to cloud based applications such as RPC and REST, JSON and load balancing. Week three also covers metal as a service (MaaS), where physical machines are provisioned in a cloud environment. \nWeek four introduces higher level cloud services with special focus on cloud storage services. We introduce Hive, HDFS and Ceph as pure Big Data Storage and file systems, and move on to cloud object storage systems, virtual hard drives and virtual archival storage options. As discussion on Dropbox cloud solution wraps up week 4 and the course.", "title": "Cloud Computing Applications, Part 1: Cloud Systems and Infrastructure", "rating": "3.9", "level": "Intermediate", "created_by": "University of Illinois at Urbana-Champaign", "package_name": "Cloud Computing Specialization ", "target_audience": "Who is this class for: This course is designed to give you a comprehensive view of the cloud computing landscape. our assumption is that you already have a working knowledge of computer science. Even though the course does not involve much of programming exercises (we do have one tutorial you can try to follow and learn), we expect the student to have some prior exposure to computers particularly in enterprise backend and server environments. ", "package_num": "3", "teach_by": [{"name": "Roy H. Campbell", "department": "Department of Computer Science"}, {"name": "Reza Farivar", "department": "Department of Computer Science"}], "week_data": [{"description": "You will become familiar with the course, your classmates, and our learning environment. The orientation will also help you obtain the technical skills required for the course.", "video": ["Welcome to Cloud Computing Applications Part 1", "Syllabus", "Orientation Quiz", "About the Discussion Forums", "Updating Your Profile", "Getting to Know Your Classmates", "Social Media"], "title": "Course Orientation "}, {"description": "Welcome to the first module of the course! In this module, we will introduce the concept of cloud computing and the economical foundations that make cloud computing make sense. We then introduce some fundamental concepts including software defined architectures and cloud services. We end the module by introducing you to the low level cloud computing service offered, infrastructure as a service. ", "video": ["Module 1 Overview", "Module 1 Introduction", "1.1.1 Cloud Computing Introduction", "1.1.2 Motivation Interview", "1.1.3 Cloudonomics: Part 1", "1.1.4 Cloudonomics: Part 2", "1.1.5 Big Data", "1.1.6 Summary to Cloud Introduction", "1.2.1 Software Defined Architecture", "1.2.2 Cloud Services", "1.2.3 Infrastructure as a Service", "Module 1 Graded Quiz"], "title": "Module 1: Introduction to Cloud Computing"}, {"description": "Welcome to the second module! Here, we cover virtualization and containers with deeper focus, including lectures on Docker, JVM and Kubernates. We finish up week two by comparing the infrastructure as a service offering by the big three: Amazon, Google and Microsoft. \n", "video": ["Module 2 Overview", "Module 2 Introduction", "2.1.1 Virtualization", "2.1.2 Virtualizing the Network and Storage", "2.2.1 OS Based Virtualization", "2.2.2 Xen", "2.2.3 VServer 2.0", "2.2.4 Solaris Zones", "2.2.5 OpenVZ", "2.2.6 LXC Linux Containers", "2.3.1 Docker", "2.3.2 Kubernates", "2.3.3 JVM", "2.4.1 IaaS: OpenStack", "2.4.2 IaaS Providers: Amazon", "2.4.3 IaaS Providers: Microsoft", "2.4.4 IaaS Providers: Google", "2.4.5 Serverless Architecture", "Module 2 Graded Quiz"], "title": "Module 2: Foundations: Containers, Virtual Machine, JVM"}, {"description": "Welcome to the third module, where we introduce Metal as a Service (provision real hardware in the cloud), Platform as a Service (provide a platform to run user code on) and Web Middleware as the glue technology that empowers cloud computing. ", "video": ["Module 3 Overview", "Module 3 Introduction", "3.1.1 MAAS Part 1", "3.1.2 MAAS Part 2", "3.1.3 Juju", "3.2.1 PaaS Providers: Google App Engine", "3.2.2 PaaS Providers: Salesforce", "3.3.1 Web Services", "3.3.2 RPC Semantics", "3.3.3 RPC Implementation", "3.3.4 HTTP SOAP REST", "3.3.5 JSON", "3.3.6 Load Balancer Introduction", "3.3.7 Load Balancer Schemes", "3.3.8 Protocol Buffers and Thrift", "3.3.9 MBAAS", "Module 3 Graded Quiz"], "title": "Module 3: MAAS, PAAS, Web Services"}, {"description": "Welcome to the last and final module of the cloud computing course! So far we have covered various methods of running certain computations on the cloud. Now it's time to focus on data storage in the clouds. In this module, we introduce big data and cloud file systems such as HDFS and Ceph, cloud object stores such has Open Stack Swift or Amazon S3, virtualized block storage devices such as Amazon EBS and archival storage options like the Amazon Glacier. Finally, we conclude the module with introducing the DropBox cloud API that enables developers to quickly integrate cloud storage options in their applications. ", "video": ["Module 4 Overview", "Module 4 Introduction", "4.1.1 Ceph", "4.1.2 HIVE", "4.1.3 TEZ", "4.2.1 SWIFT", "4.2.2 Amazon S3 BLOB Storage", "4.3.1 Amazon AWS EBS Storage", "4.3.2 AWS Glacier", "4.3.3 Amazon AWS Elastic File System", "Dropbox API", "Module 4 Graded Quiz"], "title": "Module 4: Storage: Ceph, SWIFT, HDFS, NAAS, SAN, Zookeeper"}, {"description": "You will find out where to go next after completing this course and be able to share any thoughts you have on this course experience.", "video": ["Final Reflections"], "title": "Course Conclusion"}]}, {"course_info": "About this course: Data analysis has replaced data acquisition as the bottleneck to evidence-based decision making --- we are drowning in it.  Extracting knowledge from large, heterogeneous, and noisy datasets requires not only powerful computing resources, but the programming abstractions to use them effectively.  The abstractions that emerged in the last decade blend ideas from parallel databases, distributed systems, and programming languages to create a new class of scalable data analytics platforms that form the foundation for data science at realistic scales.\n\nIn this course, you will learn the landscape of relevant systems, the principles on which they rely, their tradeoffs, and how to evaluate their utility against your requirements. You will learn how practical systems were derived from the frontier of research in computer science and what systems are coming on the horizon.   Cloud computing, SQL and NoSQL databases, MapReduce and the ecosystem it spawned, Spark and its contemporaries, and specialized systems for graphs and arrays will be covered.\n\nYou will also learn the history and context of data science, the skills, challenges, and methodologies the term implies, and how to structure a data science project.  At the end of this course, you will be able to:\n\nLearning Goals: \n1. Describe common patterns, challenges, and approaches associated with data science projects, and what makes them different from projects in related fields.\n2. Identify and use the programming models associated with scalable data manipulation, including relational algebra, mapreduce, and other data flow models.\n3. Use database technology adapted for large-scale analytics, including the concepts driving parallel databases, parallel query processing, and in-database analytics\n4. Evaluate key-value stores and NoSQL systems, describe their tradeoffs with comparable systems, the details of important examples in the space, and future trends.\n5. “Think” in MapReduce to effectively write algorithms for systems including Hadoop and Spark.  You will understand their limitations, design details, their relationship to databases, and their associated ecosystem of algorithms, extensions, and languages.\nwrite programs in Spark\n6. Describe the landscape of specialized Big Data systems for graphs, arrays, and streams", "title": "Data Manipulation at Scale: Systems and Algorithms", "rating": "4.3", "level": null, "created_by": "University of Washington", "package_name": "Data Science at Scale Specialization ", "target_audience": null, "package_num": "1", "teach_by": [{"name": "Bill Howe", "department": "Scalable Data Analytics"}], "week_data": [{"description": "Understand the terminology and recurring principles associated with data science, and understand the structure of data science projects and emerging methodologies to approach them.    Why does this emerging field exist?  How does it relate to other fields?  How does this course distinguish itself?  What do data science projects look like, and how should they be approached?  What are some examples of data science projects?  ", "video": ["Appetite Whetting: Politics", "Appetite Whetting: Extreme Weather", "Appetite Whetting: Digital Humanities", "Appetite Whetting: Bibliometrics", "Appetite Whetting: Food, Music, Public Health", "Appetite Whetting: Public Health cont'd, Earthquakes, Legal", "Characterizing Data Science", "Characterizing Data Science, cont'd", "Distinguishing Data Science from Related Topics", "Four Dimensions of Data Science", "Tools vs. Abstractions", "Desktop Scale vs. Cloud Scale", "Hackers vs. Analysts", "Structs vs. Stats", "Structs vs. Stats cont'd", "A Fourth Paradigm of Science", "Data-Intensive Science Examples", "Big Data and the 3 Vs", "Big Data Definitions", "Big Data Sources", "Supplementary: Three-Course Reading List", "Supplementary: Resources for Learning Python", "Course Logistics", "Supplementary: Class Virtual Machine", "Supplementary: Github Instructions", "Twitter Assignment: Getting Started", "Twitter Sentiment Analysis"], "title": "Data Science Context and Concepts"}, {"description": "Relational Databases are the workhouse of large-scale data management.  Although originally motivated by problems in enterprise operations, they have proven remarkably capable for analytics as well.  But most importantly, the principles underlying relational databases are universal in managing, manipulating, and analyzing data at scale.  Even as the landscape of large-scale data systems has expanded dramatically in the last decade, relational models and languages have remained a unifying concept.  For working with large-scale data, there is no more important programming model to learn.", "video": ["Data Models, Terminology", "From Data Models to Databases", "Pre-Relational Databases", "Motivating Relational Databases", "Relational Databases: Key Ideas", "Algebraic Optimization Overview", "Relational Algebra Overview", "Relational Algebra Operators: Union, Difference, Selection", "Relational Algebra Operators: Projection, Cross Product", "Relational Algebra Operators: Cross Product cont'd, Join", "Relational Algebra Operators: Outer Join", "Relational Algebra Operators: Theta-Join", "From SQL to RA", "Thinking in RA: Logical Query Plans", "Practical SQL: Binning Timeseries", "Practical SQL: Genomic Intervals", "User-Defined Functions", "Support for User-Defined Functions", "Optimization: Physical Query Plans", "Optimization: Choosing Physical Plans", "Declarative Languages", "Declarative Languages: More Examples", "Views: Logical Data Independence", "Indexes", "SQL for Data Science Assignment"], "title": "Relational Databases and the Relational Algebra"}, {"description": "The MapReduce programming model (as distinct from its implementations) was proposed as a simplifying abstraction for parallel manipulation of massive datasets, and remains an important concept to know when using and evaluating modern big data platforms.  ", "video": ["What Does Scalable Mean?", "A Sketch of Algorithmic Complexity", "A Sketch of Data-Parallel Algorithms", "\"Pleasingly Parallel\" Algorithms", "More General Distributed Algorithms", "MapReduce Abstraction", "MapReduce Data Model", "Map and Reduce Functions", "MapReduce Simple Example", "MapReduce Simple Example cont'd", "MapReduce Example: Word Length Histogram", "MapReduce Examples: Inverted Index, Join", "Relational Join: Map Phase", "Relational Join: Reduce Phase", "Simple Social Network Analysis: Counting Friends", "Matrix Multiply Overview", "Matrix Multiply Illustrated", "Shared Nothing Computing", "MapReduce Implementation", "MapReduce Phases", "A Design Space for Large-Scale Data Systems", "Parallel and Distributed Query Processing", "Teradata Example, MR Extensions", "RDBMS vs. MapReduce: Features", "RDBMS vs. Hadoop: Grep", "RDBMS vs. Hadoop: Select, Aggregate, Join", "Thinking in MapReduce"], "title": "MapReduce and Parallel Dataflow Programming"}, {"description": "NoSQL systems are purely about scale rather than analytics, and are arguably less relevant for the practicing data scientist.  However, they occupy an important place in many practical big data platform architectures, and data scientists need to understand their limitations and strengths to use them effectively.", "video": ["NoSQL Context and Roadmap", "NoSQL Roundup", "Relaxing Consistency Guarantees", "Two-Phase Commit and Consensus Protocols", "Eventual Consistency", "CAP Theorem", "Types of NoSQL Systems", "ACID, Major Impact Systems", "Memcached: Consistent Hashing", "Consistent Hashing, cont'd", "DynamoDB: Vector Clocks", "Vector Clocks, cont'd", "CouchDB Overview", "CouchB Views", "BigTable Overview", "BigTable Implementation", "HBase, Megastore", "Spanner", "Spanner cont'd, Google Systems", "MapReduce-based Systems", "Bringing Back Joins", "NoSQL Rebuttal", "Almost SQL: Pig", "Pig Architecture and Performance", "Data Model", "Load, Filter, Group", "Group, Distinct, Foreach, Flatten", "CoGroup, Join", "Join Algorithms", "Skew", "Other Commands", "Evaluation Walkthrough", "Review", "Context", "Spark Examples", "RDDs, Benefits"], "title": "NoSQL: Systems and Concepts"}, {"description": "Graph-structured data are increasingly common in data science contexts due to their ubiquity in modeling the communication between entities: people (social networks), computers (Internet communication), cities and countries (transportation networks), or corporations (financial transactions).  Learn the common algorithms for extracting information from graph data and how to scale them up. ", "video": ["Graph Overview", "Structural Analysis", "Degree Histograms, Structure of the Web", "Connectivity and Centrality", "PageRank", "PageRank in more Detail", "Traversal Tasks: Spanning Trees and Circuits", "Traversal Tasks: Maximum Flow", "Pattern Matching", "Querying Edge Tables", "Relational Algebra and Datalog for Graphs", "Querying Hybrid Graph/Relational Data", "Graph Query Example: NSA", "Graph Query Example: Recursion", "Evaluation of Recursive Programs", "Recursive Queries in MapReduce", "The End-Game Problem", "Representation: Edge Table, Adjacency List", "Representation: Adjacency Matrix", "PageRank in MapReduce", "PageRank in Pregel"], "title": "Graph Analytics"}]}, {"course_info": "About this course: This course covers advanced topics in R programming that are necessary for developing powerful, robust, and reusable data science tools. Topics covered include functional programming in R, robust error handling, object oriented programming, profiling and benchmarking, debugging, and proper design of functions. Upon completing this course you will be able to identify and abstract common data analysis tasks and to encapsulate them in user-facing functions. Because every data science environment encounters unique data challenges, there is always a need to develop custom software specific to your organization’s mission. You will also be able to define new data types in R and to develop a universe of functionality specific to those data types to enable cleaner execution of data science tasks and stronger reusability within a team.", "title": "Advanced R Programming", "rating": "4.4", "level": "Intermediate", "created_by": "Johns Hopkins University", "package_name": "Mastering Software Development in R Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Roger D. Peng, PhD", "department": "Bloomberg School of Public Health"}, {"name": "Brooke Anderson", "department": "Colorado State University"}], "week_data": [{"description": "This course covers advanced topics in R programming that are necessary for developing powerful, robust, and reusable data science tools. Topics covered include functional programming in R, robust error handling, object oriented programming, profiling and benchmarking, debugging, and proper design of functions. Upon completing this course you will be able to identify and abstract common data analysis tasks and to encapsulate them in user-facing functions. Because every data science environment encounters unique data challenges, there is always a need to develop custom software specific to your organization’s mission. You will also be able to define new data types in R and to develop a universe of functionality specific to those data types to enable cleaner execution of data science tasks and stronger reusability within a team.", "video": ["Welcome to Advanced R Programming", "Syllabus", "Course Textbook: Mastering Software Development in R", "swirl Assignments"], "title": "Welcome to Advanced R Programming"}, {"description": "This module begins with control structures in R for controlling the logical flow of an R program. We then move on to functions, their role in R programming, and some guidelines for writing good functions.", "video": ["Control Structures Overview", "if-else", "for Loops", "Nested for loops", "next, break", "Summary", "Functions Overview", "Code", "Function interface", "Default values", "Re-factoring code", "Dependency Checking", "Vectorization", "Argument Checking", "R package", "When Should I Write a Function?", "Summary", "Swirl Lesson"], "title": "Functions"}, {"description": "Functional programming is a key aspect of R and is one of R's differentiating factors as a data analysis language. Understanding the concepts of functional programming will help you to become a better data science software developer. In addition, we cover error and exception handling in R for writing robust code.", "video": ["What is Functional Programming?", "Core Functional Programming Functions", "Map", "Reduce", "Search", "Filter", "Compose", "Partial Application", "Side Effects", "Recursion", "Summary", "Expressions", "Environments", "Execution Environments", "What is an error?", "Generating Errors", "When to generate errors or warnings", "How should errors be handled?", "Summary", "Swirl Lesson"], "title": "Functional Programming"}, {"description": "Debugging tools are useful for analyzing your code when it exhibits unexpected behavior. We go through the various debugging tools in R and how they can be used to identify problems in code. Profiling tools allow you to see where your code spends its time and to optimize your code for maximum efficiency.", "video": ["Debugging Overview", "traceback()", "Browsing a Function Environment", "Tracing Functions", "Using debug() and debugonce()", "recover()", "Final Thoughts on Debugging", "Summary", "Profiling Overview", "microbenchmark", "profvis", "Find out more", "Summary", "Non-standard evaluation", "Summary", "Debugging and Profiling"], "title": "Debugging and Profiling"}, {"description": "Object oriented programming allows you to define custom data types or classes and a set of functions for handling that data type in a way that you define. R has a three different methods for implementing object oriented programming and we will cover them in this section.", "video": ["OOP Overview", "Object Oriented Principles", "S3", "S4", "Reference Classes", "Summary", "Overview", "Reuse existing data structures", "Compose simple functions with the pipe", "Embrace functional programming", "Design for humans", "Functional and Object-Oriented Programming"], "title": "Object-Oriented Programming"}]}, {"course_info": "About this course: This two-part course is designed to help students with very little or no computing background learn the basics of building simple interactive applications. Our language of choice, Python, is an easy-to learn, high-level computer language that is used in many of the computational courses offered on Coursera. To make learning Python easy, we have developed a new browser-based programming environment that makes developing interactive applications in Python simple. These applications will involve windows whose contents are graphical and respond to buttons, the keyboard and the mouse.\n\nIn part 2 of this course, we will introduce more elements of programming (such as list, dictionaries, and loops) and then use these elements to create games such as Blackjack.  Part 1 of this class will culminate in building a version of the classic arcade game \"Asteroids\".  Upon completing this course, you will be able to write small, but interesting Python programs.  The next course in the specialization will begin to introduce a more principled approach to writing programs and solving computational problems that will allow you to write larger and more complex programs.", "title": "An Introduction to Interactive Programming in Python (Part 2)", "rating": "4.9", "level": "Beginner", "created_by": "Rice University", "package_name": "Fundamentals of Computing Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Joe Warren", "department": "Computer Science"}, {"name": "Scott Rixner", "department": "Computer Science"}, {"name": "John Greiner", "department": "Department of Computer Science "}, {"name": "Stephen Wong", "department": "Computer Science"}], "week_data": [{"description": "Read mouse input, learn about list methods and dictionaries, draw images", "video": ["Introduction", "Mouse input", "List Methods", "List Examples", "Iteration", "Practice Exercises for Mouse and List Methods (optional)", "Dictionaries", "Images", "Visualizing Iteration", "Programming Tips - 5", "Practice Exercises for Dictionaries and Images (optional)", "Mini-project Video", "Mini-project Description", "Code Clinic Tips", "Quiz 5a", "Quiz 5b", "Memory"], "title": "Week 5 - Mouse input, list methods, dictionaries"}, {"description": "Learn the basics of object-oriented programming in Python using classes, work with tiled images", "video": ["Object-oriented Programming - 1", "Object-oriented Programming - 2", "Working with Objects", "Classes for Blackjack", "Practice Exercises for Classes (part 1) (optional)", "Practice Exercise for Avatar class (optional)", "Tiled Images", "Visualizing Objects", "Programming Tips - 6", "Practice Exercises for Classes (part 2) (optional)", "Mini-project Video", "Mini-project Description", "Code Clinic Tips", "Quiz 6a", "Quiz 6b", "Blackjack"], "title": "Week 6 - Classes and object-oriented programming"}, {"description": "\tUnderstand the math of acceleration and friction, work with sprites, add sound to your game", "video": ["Acceleration and Friction", "Spaceship Class", "Sound", "Sprite Class", "Programming Tips - 7", "Practice Exercises for Sprites and Sound (optional)", "Mini-project Video", "Mini-project Description", "Code Clinic Tips", "Quiz 7a", "Quiz 7b", "Spaceship"], "title": "Week 7 - Basic game physics, sprites"}, {"description": "Learn about sets in Python, compute collisions between sprites, animate sprites", "video": ["Sets", "Collisions for Sprites", "Practice Exercises for Sets and Collisions (optional)", "Sprite Animation", "Programming Tips - 8", "Mini-project Video", "Mini-project Description", "Code Clinic Tips", "Beyond CodeSkulptor", "Class Wrap-up", "Quiz 8", "RiceRocks"], "title": "Week 8 - Sets and animation"}]}, {"course_info": "About this course: In this course, you will learn about software defined networking and how it is changing the way communications networks are managed, maintained, and secured.", "title": "Software Defined Networking", "rating": null, "level": null, "created_by": "Princeton University", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Dr. Nick Feamster", "department": "Department of Computer Science"}], "week_data": []}, {"course_info": "About this course: This course teaches learners (industry professionals and students) the fundamental concepts of Distributed Programming in the context of Java 8.  Distributed programming enables developers to use multiple nodes in a data center to increase throughput and/or reduce latency of selected applications.  By the end of this course, you will learn how to use popular distributed programming frameworks for Java programs, including Hadoop, Spark, Sockets, Remote Method Invocation (RMI), Multicast Sockets, Kafka, Message Passing Interface (MPI), as well as different approaches to combine distribution with multithreading.\n\nWhy take this course?\n\n•\tAll data center servers are organized as collections of distributed servers, and it is important for you to also learn how to use multiple servers for increased bandwidth and reduced latency.\n•\tIn addition to learning specific frameworks for distributed programming, this course will teach you how to integrate multicore and distributed parallelism in a unified approach.\n•\tEach of the four modules in the course includes an assigned mini-project that will provide you with the necessary hands-on experience to use the concepts learned in the course on your own, after the course ends.\n•\tDuring the course, you will have online access to the instructor and the mentors to get individualized answers to your questions posted on forums.\n\nThe desired learning outcomes of this course are as follows:\n\n•\tDistributed map-reduce programming in Java using the Hadoop and Spark frameworks\n•\tClient-server programming using Java's Socket and Remote Method Invocation (RMI) interfaces\n•\tMessage-passing programming in Java using the Message Passing Interface (MPI)\n•\tApproaches to combine distribution with multithreading, including processes and threads, distributed actors, and reactive programming\n\nMastery of these concepts will enable you to immediately apply them in the context of distributed Java programs, and will also provide the foundation for mastering other distributed programming frameworks that you may encounter in the future  (e.g., in Scala or C++).", "title": "Distributed Programming in Java", "rating": "4.4", "level": "Intermediate", "created_by": "Rice University", "package_name": "Parallel, Concurrent, and Distributed Programming in Java Specialization ", "target_audience": "Who is this class for: The course is targeted at an audience that is already familiar with sequential programming in Java, including a basic knowledge of Java 8 lambdas. In addition, we assume that each student has access to a laptop/desktop computer with a recent installation of Java 8. The course site includes instructions on how to obtain this installation, if needed.\n", "package_num": "3", "teach_by": [{"name": "Vivek Sarkar", "department": "Department of Computer Science"}], "week_data": [{"description": "Welcome to Distributed Programming in Java! This course is designed as a three-part series and covers a theme or body of knowledge through various video lectures, demonstrations, and coding projects.", "video": ["Course Welcome", "General Course Info", "Course Icon Legend", "Discussion Forum Guidelines", "Get to Know Your Classmates!", "Pre-Course Survey", "Mini Project 0: Setup", "Mini Project 0 Submission"], "title": "Welcome to the Course!"}, {"description": "In this module, we will learn about the MapReduce paradigm, and how it can be used to write distributed programs that analyze data represented as key-value pairs.  A MapReduce program is defined via user-specified map and reduce functions, and we will learn how to write such programs in the Apache Hadoop and Spark projects.  TheMapReduce paradigm can be used to express a wide range of parallel algorithms.  One example that we will study is computation of the TermFrequency – Inverse Document Frequency (TF-IDF) statistic used in document mining; this algorithm uses a fixed (non-iterative) number of map and reduce operations.  Another MapReduce example that we will study is parallelization of the PageRank algorithm.  This algorithm is an example of iterative MapReduce computations, and is also the focus of the mini-project associated with this module.", "video": ["1.1 Introduction to Map-Reduce", "1.1 Lecture Summary", "1.2 Hadoop Framework", "1.2 Lecture Summary", "1.3 Spark Framework", "1.3 Lecture Summary", "1.4 TF-IDF Example", "1.4 Lecture Summary", "1.5 Page Rank Example", "1.5 Lecture Summary", "Mini Project 1: Page Rank with Spark", "Demonstration: Page Rank Algorithm in Spark", "Mini Project 1 Submission", "Module 1 Quiz"], "title": "DISTRIBUTED MAP REDUCE"}, {"description": "In this module, we will learn about client-server programming, and how distributed Java applications can communicate with each other using sockets.  Since communication via sockets occurs at the level of bytes, we will learn how to serialize objects into bytes in the sender process and to deserialize bytes into objects in the receiver process. Sockets and serialization provide the necessary background for theFile Server mini-project associated with this module.  We will also learn about Remote Method Invocation (RMI), which extends the notion of method invocation in a sequential program to a distributed programming setting.  Likewise, we will learn about multicast sockets,which generalize the standard socket interface to enable a sender to send the same message to a specified set of receivers; this capability can be very useful for a number of applications, including news feeds,video conferencing, and multi-player games.  Finally, we will learn about distributed publish-subscribe applications, and how they can be implemented using the Apache Kafka framework.", "video": ["2.1 Introduction to Sockets", "2.1 Lecture Summary", "2.2 Serialization/Deserialization", "2.2 Lecture Summary", "2.3 Remote Method Invocation", "2.3 Lecture Summary", "2.4 Multicast Sockets", "2.4 Lecture Summary", "2.5 Publish-Subscribe Model", "2.5 Lecture Summary", "Mini Project 2: File Server", "Demonstration: File Server using Sockets", "Mini Project 2 Submission", "Module 2 Quiz"], "title": "CLIENT-SERVER PROGRAMMING"}, {"description": "Join Professor Vivek Sarkar as he talks with Two Sigma Managing Director, Jim Ward, and Senior Vice President, Dr. Eric Allen at their downtown Houston, Texas office about the importance of distributed programming.", "video": ["About these Talks", "Industry Professional on Parallel, Concurrent, and Distributed Programming in Java - Jim Ward, Managing Director", "Industry Professional on Distribution - Dr. Eric Allen, Senior Vice President"], "title": "Talking to Two Sigma: Using it in the Field"}, {"description": "In this module, we will learn how to write distributed applications in the Single Program Multiple Data (SPMD) model, specifically by using the Message Passing Interface (MPI) library.  MPI processes can send and receive messages using primitives for point-to-point communication, which are different in structure and semantics from message-passing with sockets.  We will also learn about the message ordering and deadlock properties of MPI programs.  Non-blocking communications are an interesting extension of point-to-point communications, since they can be used to avoid delays due to blocking and to also avoid deadlock-related errors.  Finally, we will study collective communication, which can involve multiple processes in a manner that is more powerful than multicast and publish-subscribe operations.  The knowledge of MPI gained in this module will be put to practice in the mini-project associated with this module on implementing a distributed matrix multiplication program in MPI.", "video": ["3.1 Single Program Multiple Data (SPMD) model", "3.1 Lecture Summary", "3.2 Point-to-Point Communication", "3.2 Lecture Summary", "3.3 Message Ordering and Deadlock", "3.3 Lecture Summary", "3.4 Non-Blocking Communications", "3.4 Lecture Summary", "3.5 Collective Communication", "3.5 Lecture Summary", "Mini Project 3: Matrix Multiply in MPI", "Demonstration: Distributed Matrix Multiply using Message Passing", "Mini Project 3 Submission", "Module 3 Quiz"], "title": "MESSAGE PASSING"}, {"description": "In this module, we will study the roles of processes and threads as basic building blocks of parallel, concurrent, and distributed Java programs.  With this background, we will then learn how to implement multithreaded servers for increased responsiveness in distributed applications written using sockets, and apply this knowledge in the mini-project on implementing a parallel file server using both multithreading and sockets.  An analogous approach can also be used to combine MPI and multithreading, so as to improve the performance of distributed MPI applications.  Distributed actors serve as yet another example of combining distribution and multithreading.  A notable property of the actor model is that the same high-level constructs can be used to communicate among actors running in the same process and among actors in different processes; the difference between the two cases depends on the application configuration, rather the application code.  Finally, we will learn about the reactive programming model,and its suitability for implementing distributed service oriented architectures using asynchronous events.", "video": ["4.1 Processes and Threads", "4.1 Lecture Summary", "4.2 Multithreaded Servers", "4.2 Lecture Summary", "4.3 MPI and Threading", "4.3 Lecture Summary", "4.4 Distributed Actors", "4.4 Lecture Summary", "4.5 Distributed Reactive Programming", "4.5 Lecture Summary", "Mini Project 4: Multi-Threaded File Server", "Demonstration: Parallel File Server using Multithreading and Sockets", "Exit Survey", "Mini Project 4 Submission", "Module 4 Quiz"], "title": "COMBINING DISTRIBUTION AND MULTITHREADING"}, {"description": "The next two videos will showcase the importance of learning about Parallel Programming and Concurrent Programming in Java. Professor Vivek Sarkar will speak with industry professionals at Two Sigma about how the topics of our other two courses are utilized in the field.", "video": ["Our Other Course Offerings", "Industry Professionals on Parallelism - Jake Kornblau and Margaret Kelley, Software Engineers, Two Sigma", "Industry Professional on Concurrency - Dr. Shams Imam, Software Engineer, Two Sigma"], "title": "Continue Your Journey with the Specialization \"Parallel, Concurrent, and Distributed Programming in Java\""}]}, {"course_info": "About this course: This course focuses on developing multiplatform mobile applications using the Web technologies (HTML5, CSS and Javascript). In particular we make use of the Cordova hybrid application framework to develop and target multiple mobile platforms with a single codebase. We make use of the Ionic framework (Ionic Ver 3.x), one of the most popular mobile application frameworks, that is built with mobile-optimized HTML5 and CSS based components and Angular. You will learn about UI development with Ionic and then using Cordova's modules to access the native mobile platform's capabilities from Javascript. You should have already completed the Bootstrap 4 and the Angular courses in this specialization before proceeding with this course.\n\nAt the end of this course you will be able to (a) Build mobile applications targeting multiple platforms with a single codebase, (b) Leverage your HTML5, CSS, Javascript and Angular skills, and (c) Use various features of the Ionic framework to build hybrid mobile applications", "title": "Multiplatform Mobile App Development with Web Technologies: Ionic and Cordova", "rating": "4.8", "level": null, "created_by": "The Hong Kong University of Science and Technology", "package_name": "Full Stack Web and Multiplatform Mobile App Development Specialization ", "target_audience": "Who is this class for: This course is aimed at students with sufficient knowledge of Web technologies like HTML, CSS and JavaScript. A good working knowledge of JavaScript, especially ES 5  and the Angular framework is strongly recommended. ", "package_num": "3", "teach_by": [{"name": "Jogesh K. Muppala", "department": "Department of Computer Science and Engineering"}], "week_data": [{"description": "This module introduces you to hybrid mobile application development. You will learn about the Ionic framework and explore some of the features of the Ionic framework to implement an Ionic app based on the Angular application that was implemented in the previous course on Angular.", "video": ["Welcome to Multiplatform Mobile App Development with Web Technologies: Ionic and Cordova", "How to Use the Learning Resources", "Welcome to Multiplatform Mobile App Development with Web Technologies: Ionic and Cordova: Additional Resources", "Full Stack Web Development: The Big Picture: Objectives and Outcomes", "What is Full-Stack Web Development?", "Full Stack Web Development: Additional Resources", "Setting up Your Development Environment: Git and Node: Objectives and Outcomes", "Setting up your Development Environment", "Exercise (Video): Setting up Git", "Exercise (Instructions): Setting up Git", "Exercise (Video): Basic Git Commands", "Exercise (Instructions): Basic Git Commands", "Exercise (Video): Online Git Repositories", "Exercise (Instructions): Online Git Repositories", "Node.js and NPM", "Exercise (Video): Setting up Node.js and NPM", "Exercise (Instructions): Setting up Node.js and NPM", "Exercise (Video): Basics of Node.js and NPM", "Exercise (Instructions): Basics of Node.js and NPM", "Setting up your Development Environment: Git and Node: Additional Resources", "Hybrid Mobile App Development: An Overview: Objectives and Outcomes", "Hybrid Mobile App Development", "Introduction to the Ionic Framework", "Exercise (Video): Setting up the Ionic Framework", "Exercise (Instructions): Setting up the Ionic Framework", "Hybrid Mobile App Development: An Overview: Additional Resources", "Setting up a Simple Server: Objectives and Outcomes", "Exercise (Video): Setting up a Server using json-server", "Exercise (Instructions): Setting up a Server using json-server", "Setting up a Simple Server: Additional Resources", "Ionic and Angular: Objectives and Outcomes", "Ionic and Angular", "Exercise (Video): Getting Started with your Ionic App", "Exercise (Instructions): Getting Started with your Ionic App", "Exercise (Video): Ionic and Angular", "Exercise (Instructions): Ionic and Angular", "Ionic and Angular: Additional Resources", "Ionic Navigation: Objectives and Outcomes", "Ionic Navigation", "Exercise (Video): Ionic Navigation", "Exercise (Instructions): Ionic Navigation", "Ionic Navigation: Additional Resources", "Assignment 1 Requirements (Video): Introduction to Ionic Framework", "Assignment 1: Introduction to Ionic Framework: Additional Resources", "Ideation: Objectives and Outcomes", "Ideation Report Template", "Ideation: Additional Resources", "Introduction to Ionic Framework", "Ideation"], "title": "Hybrid Mobile App Development Frameworks: An Introduction"}, {"description": "This module explores the Ionic support for forms. Advanced features of Ionic lists are discussed. In addition all the different methods of overlaying information on the screen like modals, popups, popovers, action sheets, and loading are examined. Ionic support for gestures is also briefly considered.", "video": ["Floating Action Buttons: Objectives and Outcomes", "Floating Action Buttons", "Exercise (Video): Floating Action Button", "Exercise (Instructions): Floating Action Button", "Exercise (Video): FAB and Favorites", "Exercise (Instructions): FAB and Favorites", "Floating Action Buttons: Additional Resources", "Ionic Lists: Advanced Features: Objectives and Outcomes", "Ionic Lists: Advanced Features", "Exercise (Video): Ionic Lists: Advanced Features", "Exercise (Instructions): Ionic Lists: Advanced Features", "Ionic Lists: Advanced Features: Additional Resources", "Ionic Forms and Modals: Objectives and Outcomes", "Ionic Forms and Modals", "Exercise (Video): Modal", "Exercise (Instructions): Modal", "Exercise (Video): Forms", "Exercise (Instructions): Forms", "Ionic Forms and Modals: Additional Resources", "Alerts, Popovers, ActionSheets, Loading and Gestures: Objectives and Outcomes", "Alerts, Toasts, Popovers, ActionSheets and Loading", "Exercise (Video): Alerts, Toasts and Loading", "Exercise (Instructions): Alerts, Toasts and Loading", "Alerts, Popovers, ActionSheets, Loading and Gestures: Additional Resources", "Assignment 2: Ionic Components", "Assignment 2: Ionic Components: Additional Resources", "UI Design and Prototyping: Objectives and Outcomes", "UI Design and Prototyping Report Template", "UI Design and Prototyping: Additional Resources", "Ionic Components", "UI Design and Prototyping"], "title": "Ionic Components"}, {"description": "In this module you will learn about using local storage within your app. You will then learn about configuring your machine for building your app for various platforms, and deploying your app to emulators and devices.", "video": ["Adapting to Large Screens: Objectives and Outcomes", "Adapting to Large Screens", "Exercise (Video): Ionic Split Pane", "Exercise (Instructions): Ionic Split Pane", "Exercise (Video): Ionic Grid", "Exercise (Instructions): Ionic Grid", "Adapting to Large Screens: Additional Resources", "Ionic Storage: Objectives and Outcomes", "Ionic Storage", "Exercise (Video): Ionic Storage", "Exercise (Instructions): Ionic Storage", "Ionic Storage: Additional Resources", "Installing Android and iOS SDK and Platforms: Objectives and Outcomes", "Installing Android Studio and  Android SDK", "Installing Android Studio and  Android SDK: Ionic and Cordova Guides", "Installing Xcode on Mac and  iOS SDK", "Installing Xcode on Mac and iOS SDK: Ionic and Cordova Guides", "Installing Android and iOS SDK and Platforms: Additional Resources", "Ionic Adding Platforms, Building and Deploying the App: Objectives and Outcomes", "Introduction to Cordova", "Exercise (Video): Building and Deploying to Android Emulator", "Exercise (Instructions): Building and Deploying to Android Emulator and Android Device", "Exercise (Video): Building and Deploying to iOS Emulator", "Exercise (Instructions): Building and Deploying to iOS Emulator", "Ionic Adding Platforms, Building and Deploying the App: Additional Resources", "Assignment 3 Requirements: Grid and Storage", "Assignment 3: Grid and Storage: Additional Resources", "Assignment 3: Grid and Storage"], "title": "Ionic Split Pane, Grid and Storage, and Deploying your App"}, {"description": "In this module you will explore Cordova and the Ionic Native wrappers that enable you to access the native capabilities of the mobile devices. You will use a few plugins in order to understand the general concepts and the patterns for using these plugins within your Ionic application", "video": ["Introduction to Ionic Native: Objectives and Outcomes", "Introduction to Ionic Native", "Exercise (Video): Customizing the SplashScreen", "Exercise (Instructions): Customizing the SplashScreen", "Introduction to Ionic Native: Additional Resources", "Notifying the User: Objectives and Outcomes", "Notifying the User", "Exercise (Video): Notifying the User", "Exercise (Instructions): Notifying the User", "Notifying the User: Additional Resources", "Social Sharing: Objectives and Outcomes", "Social Sharing", "Exercise (Video): Sending Email", "Exercise (Instructions): Sending Email", "Exercise (Video): Social Sharing", "Exercise (Instructions): Social Sharing", "Social Sharing: Additional Resources", "Using the Camera: Objectives and Outcomes", "Using the Camera", "Exercise (Video): Using the Camera", "Exercise (Instructions): Using the Camera", "Using the Camera: Additional Resources", "Network Status: Objectives and Outcomes", "Network Status", "Exercise (Video): Network Status", "Exercise (Instructions): Network Status", "Network Status: Additional Resources", "Assignment 4 (Requirements): Ionic Native and Cordova", "Assignment 4: Ionic Native and Cordova: Additional Resources", "Conclusions", "Conclusions: Additional Resources", "Project Implementation: Objectives and Outcomes", "Final Report Template", "Assignment 4: Ionic Native and Cordova", "Project Implementation and Final Report"], "title": "Accessing Native Capabilities of Devices: Cordova and Ionic Native"}]}, {"course_info": "About this course: This course is intended for the Master's student and computer engineer who likes practical programming and problem solving!\nAfter completing this course, you will have the knowledge to plan and set-up a real-time system both on paper and in practice.\n\nThe course centers around the problem of achieving timing correctness in embedded systems, which means to guarantee that the system reacts within the real-time requirements.\nExamples of such systems include airbags, emergency breaks, avionics, and also multi-media systems like video playback and QoS in web servers.\n\nThe course teaches how to plan real-time systems in theory using established mathematical proofs and how to implement them in practice by using the most common scheduling methods.\nWe also learn and how to program the system in the C language using the FreeRTOS real-time kernel.\nFinally we have a look at the future of real-time systems namely multi-core real-time systems!\n\nThis course focus on the learn-by-doing approach with many examples and real-world programming assignments.\nWe have 5 modules, each with a gentle graded quiz in the end and one peer reviewed programming assignment.\nIn case you have no experience with C programming, please check you a practical course like:\nhttps://www.coursera.org/learn/arduino-platform\n\nThe course is actually quite fun!\n-Simon Holmbacka / Åbo Akademi University\n\nCheck out our whole curriculum: https://research.it.abo.fi/", "title": "Development of Real-Time Systems", "rating": "4.4", "level": "Intermediate", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: This course is intended for the Master's student and computer engineer who likes practical programming and problem solving!\n\nNote that as a consequence, quiz questions are more exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Simon Holmbacka", "department": "Åbo Akademi University, Faculty of Science and Engineering"}], "week_data": [{"description": "Here is where it all starts! We will make a brave attempt to start your future career in real-time systems! This week starts by learning the basic building stones in real-time systems and the system parameters required to successfully construct a real-time system. We introduce you to the corner stone of real-time systems, namely the scheduler – and its task in real-time schedules. You learn also what kind of real-time guarantees are needed in which systems. Concretely, you will learn (1) What is needed to create a real-time system (2) Where real-time requirements are needed. (3) The task and job structure and the parameters needed to schedule a task. (4) Difference between pre-emptive and non-pre-emptive tasks. This course is also part of a Blended Master Programme in Embedded Systems. ", "video": ["Course Introduction", "The Concepts of Real-Time Systems", "The Concept of Real-TimeTasks", "The Principles of Scheduling", "Real-Time Pre-emption", "FreeRTOS API", "Setting up the FreeRTOS tool chain", "Week 1 Forum", "Assignment 1 Forum", "Quiz 1", "Assignment 1"], "title": "Introduction to Real-Time Systems"}, {"description": "In this week we start to actually do some scheduling. We firstly have a look at the simplest type of scheduler – the clock driven scheduler. After this we deepen our learning with the fixed priority scheduler and the monotonic schedulers. We learn how the priorities are determined using these schedulers and we learn when/when not to use these schedulers. Secondly we learn how to determine if a system is overloaded in order to validate schedules without complete system simulation.Concretely, after attending this week you will be able to:   (1) Schedule a set of tasks with the clock driven scheduler, with the fixed priority scheduler, with the monotonic schedulers.   (2) Determine if a system is overloaded using the total-utilization method and the Urm method.   (3) Program FreeRTOS to schedule a set of tasks using the fixed priority scheduler ", "video": ["Clock Driven Scheduling - The Concept", "Clock Driven Scheduling - Implementation", "Cyclic Structured Scheduling - The Concept", "Cyclic Structured Scheduling - Example", "Fixed Priority Scheduling", "Monotonic Scheduling - The Concept", "Monotonic Scheduling - Example", "Week 2 Forum", "Assignment 2 Forum", "Quiz 2", "Assignment 2"], "title": "Static Scheduling"}, {"description": "In the previous week we learned the limitations of the total-utilization method and the Urm method. We start this week off by extending these tests to tasks with short response times. The new method is also, as usual, used in practice! We then focus on improving the optimality of real-time schedules. This is done by learning the principles behind dynamic scheduling methods. Two new schedulers using the dynamic scheduling principle is learned and used in practice with a few examples; the LST scheduler and the EDF scheduler.Concretely, you will learn: (1) How to determine feasibility of a set of tasks using the time demand analysis method.  (2) How to schedule a set of tasks using LST and EDF.  (3) To determine when a dynamic scheduler is appropriate and when it is not appropriate.", "video": ["Tasks with Short Response Time Theory - The Concept", "Tasks with Short Response Time - Example", "Dynamic Priority Scheduling", "Earliest Deadline First Theory", "Earliest Deadline First Example", "Week 3 Forum", "Assignment 3 Forum", "Quiz 3", "Assignment 3"], "title": "Dynamic Scheduling"}, {"description": "All things are easy and nice when not caring about non-periodic jobs. When including non-periodic jobs, the schedulers must take these into account to make a feasible schedule, which we learn this week. The problem is that a non-periodic job can arrive at any time, even if a periodic job is already scheduled. We learn both how to optimize a schedule for non-periodic jobs and how to validate a schedule when non-periodic jobs arrive to the schedule.\nConcretely, we will learn: (1) How to use the slack stealing method to optimize a schedule with non-periodic jobs (2) How to use the LRT scheduler to optimize a schedule with non-periodic jobs (3) How to use the deferrable server to optimize a schedule with non-periodic jobs (4) Formally verify a schedule with non-periodic jobs\n", "video": ["Aperiodic Jobs - The Concept", "Aperiodic Jobs - Example", "Sporadic Jobs - The Concept", "Sporadic Jobs - Example", "The Deferrable Server Theory", "The Deferrable Server Example", "Week 4 Forum", "Assignment 4 Forum", "Quiz 4", "Assignment 4"], "title": "Non-Periodic Jobs"}, {"description": "This week is what we all have been waiting for! We will deepen our learning of FreeRTOS, its kernel and the functionalities. We demonstrate the importance of predictable computer architectures for example when determining the context switch and factors influencing this overhead. As we head towards the future, we finish this course by introducing you to multi-core real-time systems and scheduling methods for multi-core real-time systems. Concretely, you will learn:  (1) The internal mechanisms of FreeRTOS, for example mutexes/semaphores and message queues. (2) Multi-core computer architectures for real-time systems. (3) Multi-core scheduling methods.", "video": ["RTOS Overview", "The FreeRTOS Kernel", "Multi-Core Real-Time Systems", "Multi-Core Scheduling - Shared Resources", "Multi-Core Scheduling - Scheduling Methods", "Week 5 Forum", "Assignment 5 Forum", "Ways of improving the course", "Quiz 5", "Assignment 5"], "title": "Real-Time Operating Systems"}]}, {"course_info": "About this course: The course will give students hands-on experience in developing interesting Android applications. No previous experience in programming is needed, and the course is suitable for students with any level of computing experience. MIT App Inventor will be used in the course. It is a blocks-based programming tool that allows everyone, even novices, to start programming and build fully functional apps for Android devices. Students are encouraged to use their own Android devices for hands-on testing and exploitation.", "title": "Developing Android Apps with App Inventor", "rating": "4.8", "level": "Beginner", "created_by": "The Hong Kong University of Science and Technology", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Kenneth W T Leung", "department": "Computer Science and Engineering"}], "week_data": [{"description": "", "video": ["Introduction Video", "Course Introduction", "Unit 1 Intro Hello World", "Introduction to App Inventor", "Introduction to App Inventor", "Hello World App", "Project creation question", "Android Application", "Adding Component & Button Component", "Add component quiz", "Component Property", "Component Property Question", "Label Component", "Homework 1", "Quiz 1"], "title": "Introduction of MIT App Inventor"}, {"description": "", "video": ["Unit 2 Intro Code Blocks Features", "Introduction to Code Blocks", "Event Handler", "Code Deletion", "Method Call", "Code Block Question", "Property Getter and Setter", "Built-In Text Code Block", "Property and Text Code Block Question", "Application Testing", "Android Emulator", "Using Emulator", "Testing HelloWorld Project", "Create APK", "Project Sharing", "Homework 2", "Quiz 2"], "title": "Application Coding"}, {"description": "", "video": ["Unit 3 Intro Maths, Notifier, Boolean and Logics", "Numbers", "Math Code Blocks", "Evaluation Order", "Using Math Code Blocks Question", "Mutator", "Formatting Number", "Notifier", "Notifier Component & Starting UsingMath Project", "Choice Dialog & Starting UsingIfThen Project", "Boolean Values", "Boolean Value & Canceling Dialog", "Logical Operators", "if-then Code & Logic Code Blocks", "Using if-then-else code question", "else-if socket", "Homework 3", "Quiz 3", "Math Quiz App Assignment"], "title": "Programming Basics & Dialog"}, {"description": "", "video": ["Unit 4 Intro Variables, Loops and Other Techniques", "Variable", "Loop", "While Loop", "Using While Loop Question", "Starting Usingloop Project", "Comments", "Code Comment", "Duplicate Blocks", "Backpack", "Code Duplication", "Collapse Code Blocks", "Collapsing Code Blocks", "Collapsing Code Blocks Question", "Homework 4", "Quiz 4", "Sequence Calculator Assignment"], "title": "More Programming Basics"}, {"description": "", "video": ["Unit 5 Intro Timepicker, Sound and Clock", "Starting AlarmClock Project", "TimePicker", "TimePicker Component", "Timepicker Component Question", "Project Asset", "Sound Component", "Sound Component Question", "Clock Component", "Clock component question", "Audio Alarm", "Alarm Clock Coding", "Homework 5", "Quiz 5"], "title": "Alarm Clock Application"}, {"description": "", "video": ["Unit 6 Intro Sound, Audio and Video", "Audio", "Audio Question", "Video", "Video Question", "Media Source Specification", "Player Component", "Player Component Question", "Music Alarm", "Starting MusicAlarmClock Project", "Radio Alarm", "Starting RadioAlarmClock Project", "VideoPlayer Component", "VideoPlayer Component Question", "Starting VideoAlarmClock Project", "Video Alarm", "Homework 6", "Quiz 6"], "title": "Audio & Video"}, {"description": "", "video": ["Unit 7 Intro Components for a Drawing App", "Spinner", "Spinner Component", "Spinner Component Question", "Slider", "Slider Component", "Slider Component Question", "Text Box", "TextBox Component", "Textbox Component Question", "Canvas Component", "Canvas Component Question", "Component Layout", "Component Layout Question", "Drawing Canvas", "Starting DrawingApp Project", "Handling Slider's Selection", "Canvas touching & Color code block", "Canvas Drawing", "Homework 7", "Quiz 7"], "title": "Drawing Application"}, {"description": "", "video": ["Unit 8 Intro File Component and Notebook App", "File and Its Formats", "File Component & App Inventor Storage Structure", "Notebook Project", "Notebook Project", "Homework 8"], "title": "File"}, {"description": "", "video": ["Unit 9 Intro Making an Interactive Game", "ImageSprite Component", "ImageSprite Component Question", "Random Numbers", "Random Real Numbers", "Random Number", "Random Number Question", "Accelerometer and Shaking", "Device Shaking and Vibration", "Device Shaking and Vibration Question", "Starting Superdolphin Project & Game Assets", "Application Interface", "Dolphin Game", "Using Clock, Sound and File Components", "Game Score & Game Start", "Random Dolphin Appearance", "Touching Dolphin", "Stopping Game", "Number Matching Game Assignment", "Homework 9", "Quiz 9"], "title": "Game"}, {"description": "", "video": ["Unit 10 Intro Location Component and Lost & Found Project", "Location Information", "Device Location", "LocationSensor Component", "Lost and Found", "Starting LostFound Project", "Application Location Input", "Homework 10", "Quiz 10"], "title": "Device Location"}, {"description": "", "video": ["Unit 11 Intro Web Viewer and Lost & Found Project", "Web Viewer", "WebViewer Component", "Webviewer Component Question", "Google Maps", "Google Maps Question", "Finishing LostFound Project", "Homework 11"], "title": "Web Browsing"}, {"description": "", "video": ["Capstone Project Assessment"], "title": "Capstone Project"}]}, {"course_info": "About this course: Machine learning is transforming the world around us. To become successful, you’d better know what kinds of problems can be solved with machine learning, and how they can be solved. Don’t know where to start? The answer is one button away.\n \nDuring this course you will:\n- Identify practical problems which can be solved with machine learning\n- Build, tune and apply linear models with Spark MLLib\n- Understand methods of text processing\n- Fit decision trees and boost them with ensemble learning\n- Construct your own recommender system.\n \nAs a practical assignment, you will \n- build and apply linear models for classification and regression tasks; \n- learn how to work with texts; \n- automatically construct decision trees and improve their performance with ensemble learning; \n- finally, you will build your own recommender system!\n\nWith these skills, you will be able to tackle many practical machine learning tasks.\n \nWe provide the tools, you choose the place of application to make this world of machines more intelligent.\n\nSpecial thanks to:\n- Prof. Mikhail Roytberg, APT dept., MIPT, who was the initial reviewer of the project, the supervisor and mentor of half of the BigData team. He was the one, who helped to get this show on the road.\n- Oleg Sukhoroslov (PhD, Senior Researcher at IITP RAS), who has been teaching  MapReduce, Hadoop and friends since 2008. Now he is leading the infrastructure team.\n- Oleg Ivchenko (PhD student APT dept., MIPT), Pavel Akhtyamov (MSc. student at APT dept., MIPT) and Vladimir Kuznetsov (Assistant at P.G. Demidov Yaroslavl State University), superbrains who have developed and now maintain the infrastructure used for practical assignments in this course.\n- Asya Roitberg, Eugene Baulin, Marina Sudarikova. These people never sleep to babysit this course day and night, to make your learning experience productive, smooth and exciting.", "title": "Big Data Applications: Machine Learning at Scale", "rating": "3.7", "level": "Advanced", "created_by": "Yandex", "package_name": "Big Data for Data Engineers Specialization ", "target_audience": "Who is this class for: This course is aimed to everybody, who feel interest in Big Data and Machine Learning. \nThe following is a desirable, but not essential:\n- Python\n- Machine Learning basics\n- Experience with Spark\n- Calculus 101\n- Theory of probability 101", "package_num": "3", "teach_by": [{"name": "Vladimir Lesnichenko", "department": null}, {"name": "Pavel Mezentsev ", "department": "PulsePoint inc"}, {"name": "Emeli Dral ", "department": null}, {"name": "Alexey A. Dral", "department": "Algorithms and Programming Technologies dept. MIPT"}, {"name": "Ilya Trofimov", "department": "Yandex"}, {"name": "Evgeny Frolov", "department": "Computational and Data Intensive Science and Engineering"}], "week_data": [{"description": "", "video": ["Machine Learning Applications for BigData", "Course Structure", "Meet Alexey", "Meet Pavel", "Meet Ilya"], "title": "Welcome"}, {"description": "", "video": ["(Optional) Intuition", "(Optional) Basic concepts", "(Optional) Types of problems and tasks", "(Optional) Supervised learning", "(Optional) Unsupervised learning", "(Optional) Business applications of the machine learning"], "title": "(Optional) Machine Learning: Introduction"}, {"description": "", "video": ["Introduction to large scale machine learning", "First example. Linear regression", "How MLlib library is arranged", "Large scale machine learning. The beginning", "How to train algorithms. Gradient descent method", "How to train algorithms. Second order methods", "Large scale classification. Logistic regression", "Large scale regression and classification. Detailed analysis", "Regularization", "PCA decomposition", "K-means clustering", "Regularization and Unsupervised Techniques", "First Assignment: Instructions", "How to Submit Your First Assignment", "Demo Assignment", "Rate this week", "Spark MLLib and Linear Models"], "title": "Spark MLLib and Linear Models"}, {"description": "", "video": ["Welcome", "Feature Engineering for Texts, part 1", "Feature Engineering for Texts, part 2", "N-grams", "Hashing trick", "Feature Enginering for Texts", "Categorical Features", "Feature Interactions", "Categorical Features & Feature Interactions", "Spark ML. Feature Engineering for Texts, part 1", "Spark ML. Feature Engineering for Texts, part 2", "Spark ML. Categorical Features", "Spark ML Tutorial: Text Processing", "Topic Modeling. LDA.", "Word2Vec", "Advanced Machine Learning with Texts", "Rate this week", "Machine Learning with Texts & Feature Engineering"], "title": "Machine Learning with Texts & Feature Engineering"}, {"description": "", "video": ["Welcome", "Decision Trees Basics", "Decision Trees for Regression", "Decision Trees for Classification", "Decision Trees: Summary", "Decision Trees", "Bootstrap & Bagging", "Random Forest", "Bootstrap, Bagging and Random Forest", "Gradient Boosted Decision Trees: Intro & Regression", "Gradient Boosted Decision Trees: Classification", "Stochastic Boosting", "Gradient Boosted Decision Trees: Usage Tips & Summary", "Gradient Boosted Decision Trees", "Spark ML. Decision Trees & Ensembles", "Spark ML. Cross-validation", "Spark ML Programming Tutorial: Decision Trees & CV", "Rate this week", "Decision Trees & Ensemble Learning", "Predict the tree cover type using Random Forest"], "title": "Decision Trees & Ensemble Learning"}, {"description": "", "video": ["Recommender Systems, Introduction. Part I", "Recommender Systems, Introduction. Part II", "Non-Personalized Recommender Systems", "Content-Based Recommender Systems", "Recommender System Evaluation", "Basic RecSys for Data Engineers", "Collaborative Filtering RecSys: User-User and Item-Item", "RecSys: SVD I", "RecSys: SVD II", "RecSys: SVD III", "RecSys: MF I", "RecSys: MF II", "Moderate RecSys for Data Engineers", "RecSys: iALS I", "RecSys: iALS II", "RecSys: Hybrid I", "RecSys: Hybrid II", "Advanced RecSys for Data Engineers", "Recommender Systems. Spark Assignment", "Rate this week", "Recommender Systems"], "title": "Recommender Systems"}, {"description": "", "video": ["Recommender Systems. Spark Assignment", "Rate this week", "Recommender Systems. Spark Assignment"], "title": "Recommender Systems (practice week)"}]}, {"course_info": "About this course: This course will continue the introduction to Python programming that started with Python Programming Essentials.  We'll learn about different data representations, including strings, lists, and tuples, that form the core of all Python programs.  We will also teach you how to access files, which will allow you to store and retrieve data within your programs. These concepts and skills will help you to manipulate data and write more complex Python programs.\n\nBy the end of the course, you will be able to write Python programs that can manipulate data stored in files.  This will extend your Python programming expertise, enabling you to write a wide range of scripts using Python\n\nThis course uses Python 3.  While most Python programs continue to use Python 2, Python 3 is the future of the Python programming language. This course introduces basic desktop Python development environments, allowing you to run Python programs directly on your computer. This choice enables a smooth transition from online development environments.", "title": "Python Data Representations", "rating": "4.9", "level": "Beginner", "created_by": "Rice University", "package_name": "Introduction to Scripting in Python Specialization ", "target_audience": "Who is this class for: This class is for people who have have the background from our Python Programming Essentials course.", "package_num": "2", "teach_by": [{"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Joe Warren", "department": "Computer Science"}], "week_data": [{"description": "This module will teach you about Python's string data type and its capabilities. Strings are used to represent text within programs.", "video": ["Welcome!", "Class Structure", "Python Strings", "Indexing Strings", "Searching Strings", "Slicing Strings", "Formatting Strings", "Answering Common Python Questions", "Practice Exercises for Strings", "Strings"], "title": "Strings"}, {"description": "This module will teach you the basics of Python's list data type. Lists are used to hold a sequence of data within programs.", "video": ["Lists", "List Indexing and Slicing", "Defining and Accessing Lists", "Splitting and Joining Strings", "List Searching", "Iteration over Lists", "Iteration", "Using Thonny", "Using Thonny's Debugger", "Debugging an Example Program", "Practice Exercises for Lists", "Lists"], "title": "Basics of Lists"}, {"description": "This module will dive further into the use of lists. You will learn how about mutating the contents of a list and the implications of doing so.", "video": ["List Mutation", "List Processing Example", "Tuples", "Objects and References", "Understanding List References", "Visualizing Objects and References", "Diagnosing List Reference Issues", "Practice Exercises for List Manipulation", "List Manipulation"], "title": "List Manipulation"}, {"description": "This module will teach you how to access files in Python.", "video": ["Introduction to Files", "Opening and Reading Files", "Reading Files using Iteration", "Writing Files", "Understanding File Systems and Paths", "Working with File Paths", "Practice Project: Updating the CodeSkulptor Docs", "Project Video", "Project Description: File Differences", "OwlTest: Automated Feedback and Assessment", "Project Submission History", "Project: File Differences"], "title": "File Access"}]}, {"course_info": "About this course: This course teaches learners (industry professionals and students) the fundamental concepts of concurrent programming in the context of Java 8.   Concurrent programming enables developers to efficiently and correctly mediate the use of shared resources in parallel programs.  By the end of this course, you will learn how to use basic concurrency constructs in Java such as threads, locks, critical sections, atomic variables, isolation, actors, optimistic concurrency and concurrent collections, as well as their theoretical foundations (e.g., progress guarantees, deadlock, livelock, starvation, linearizability).\n\nWhy take this course?\n\n•\tIt is important for you to be aware of the theoretical foundations of concurrency to avoid common but subtle programming errors. \n•\tJava 8 has modernized many of the concurrency constructs since the early days of threads and locks.\n•\tDuring the course, you will have online access to the instructor and mentors to get individualized answers to your questions posted on the forums.\n•\tEach of the four modules in the course includes an assigned mini-project that will provide you with the necessary hands-on experience to use the concepts learned in the course on your own, after the course ends.\n\nThe desired learning outcomes of this course are as follows:\n\n•\tConcurrency theory: progress guarantees, deadlock, livelock, starvation, linearizability\n•\tUse of threads and structured/unstructured locks in Java\n•\tAtomic variables and isolation\n•\tOptimistic concurrency and concurrent collections in Java (e.g., concurrent queues, concurrent  hashmaps)\n•\tActor model in Java\n\nMastery of these concepts will enable you to immediately apply them in the context of concurrent Java programs, and will also help you master other concurrent programming system that you may encounter in the future  (e.g., POSIX threads, .NET threads).", "title": "Concurrent Programming in Java", "rating": "4.5", "level": "Intermediate", "created_by": "Rice University", "package_name": "Parallel, Concurrent, and Distributed Programming in Java Specialization ", "target_audience": "Who is this class for: The course is targeted at an audience that is already familiar with sequential programming in Java, including a basic knowledge of Java 8 lambdas.  In addition, we assume that each student has access to a laptop/desktop computer with a recent installation of Java 8.  The course site includes instructions on how to obtain this installation, if needed.", "package_num": "2", "teach_by": [{"name": "Vivek Sarkar", "department": "Department of Computer Science"}], "week_data": [{"description": "Welcome to Concurrent Programming in Java! This course is designed as a three-part series and covers a theme or body of knowledge through various video lectures, demonstrations, and coding projects.", "video": ["Course Welcome", "General Course Info", "Course Icon Legend", "Discussion Forum Guidelines", "Get to Know Your Classmates!", "Pre-Course Survey", "Mini Project 0: Setup", "Mini Project 0 Submission"], "title": "Welcome to the Course!"}, {"description": "In this module, we will learn about threads and locks, which have served as primitive building blocks for concurrent programming for over five decades.  All computing platforms today include some form of support for threads and locks, and make them available for use by developers in a wide range of programming languages. We will learn how threads can be created, joined, and synchronized using structured (e.g., synchronized statements/methods) and unstructured (e.g., java.util.concurrent libraries) locks in Java.  We will also learn about new classes of bugs that can arise when concurrent programs need to access shared resources.  These bugs are referred to as violations of liveness/progress guarantees, and include deadlock, livelock, and starvation.  We will conclude this module by studying different solutions to the classical \"Dining Philosophers\" problem, and use these solutions to illustrate instances of deadlock, livelock and starvation.", "video": ["1.1 Threads", "1.1 Lecture Summary", "1.2 Structured Locks", "1.2 Lecture Summary", "1.3 Unstructured Locks", "1.3 Lecture Summary", "1.4 Liveness", "1.4 Lecture Summary", "1.5 Dining Philosophers", "1.5 Lecture Summary", "Mini Project 1: Locking and Synchronization", "Demonstration: Locking and Synchronization", "Mini Project 1 Submission", "Module 1 Quiz"], "title": "Threads and Locks"}, {"description": "In this module, we will learn different approaches to coordinating accesses to shared resources without encountering the deadlock or livelock bugs studied earlier.  Critical/isolated sections are higher-level concurrent programming constructs (relative to locks) that simplify the implementation of mutual exclusion by guaranteeing the absence of deadlocks and livelocks.  Object-based isolation relaxes the constraints imposed by critical sections by allowing mutual exclusion to be specified on a per-object basis, as illustrated in the Spanning Tree example.  Java's atomic variables represent an important, but restricted, case of object-based isolation that is implemented efficiently on all hardware platforms.  Finally, we will learn how object-based isolation can be further relaxed with read/write access modes.", "video": ["2.1 Critical Sections", "2.1 Lecture Summary", "2.2 Object Based Isolation (Monitors)", "2.2 Lecture Summary", "2.3 Concurrent Spanning Tree Algorithm", "2.3 Lecture Summary", "2.4 Atomic Variables", "2.4 Lecture Summary", "2.5 Read, Write Isolation", "2.5 Lecture Summary", "Mini Project 2: Global and Object-Based Isolation", "Demonstration: Global and Object-Based Isolation", "Mini Project 2 Submission", "Module 2 Quiz"], "title": "Critical Sections and Isolation"}, {"description": "Join Professor Vivek Sarkar as he talks with Software Engineer, Dr. Shams Imam, at their downtown Houston, Texas office about threads, locks, deadlocks, high-level and low-level constructs, and the importance of concurrent programming.\n", "video": ["About these Talks", "Industry Professional on Parallel, Concurrent, and Distributed Programming in Java - Jim Ward, Managing Director", "Industry Professional on Concurrency - Dr. Shams Imam, Software Engineer"], "title": "Talking to Two Sigma: Using it in the Field"}, {"description": "In this module, we will learn another high-level approach to concurrent programming called the \"Actor\" model.  A major difference between the Actor model and the Isolated Sections model is that there are no data races possible in the Actor model because it does not allow for any form of shared variables.  However, as in all concurrent programming models, higher-level forms of nondeterminism are still possible in the Actor model due to an inherent asynchrony in the order in which messages may be delivered.  We will study multiple examples of concurrency using the Actor model, including the classical Sieve of Eratosthenes algorithm to generate prime numbers, as well as producer-consumer patterns with both unbounded and bounded buffers.", "video": ["3.1 Actors", "3.1 Lecture Summary", "3.2 Actor Examples", "3.2 Lecture Summary", "3.3 Sieve of Eratosthenes Algorithm", "3.3 Lecture Summary", "3.4 Producer-Consumer Problem", "3.4 Lecture Summary", "3.5 Bounded Buffer Problem", "3.5 Lecture Summary", "Mini Project 3: Sieve of Eratosthenes Using Actor Parallelism", "Demonstration: Sieve of Eratosthenes Using Actor Parallelism", "Mini Project 3 Submission", "Module 3 Quiz"], "title": "Actors"}, {"description": "In this module, we will study Concurrent Data Structures, which form an essential software layer in all multithreaded programming systems.  First, we will learn about Optimistic Concurrency, an important multithreaded pattern in which two threads can \"optimistically\" make progress on their assigned work without worrying about mutual conflicts, and only checking for conflicts before \"committing\" the results of their work.  We will then study the widely-used Concurrent Queue data structure.  Even though the APIs for using concurrent queues are very simple, their implementations using the Optimistic Concurrency model can be complex and error-prone.   To that end, we will also learn the formal notion of Linearizability to better understand correctness requirements for concurrent data structures.  We will then study Concurrent Hash Maps, another widely-used concurrent data structure.  Finally, we discuss a concurrent algorithm for finding a Minimum Spanning Tree of an undirected graph, an algorithm that relies on the use of Concurrent Data Structures under the covers.", "video": ["4.1 Optimistic Concurrency", "4.1 Lecture Summary", "4.2 Concurrent Queue", "4.2 Lecture Summary", "4.3 Linearizability", "4.3 Lecture Summary", "4.4 Concurrent Hash Map", "4.4 Lecture Summary", "4.5 Concurrent Minimum Spanning Tree Algorithm", "4.5 Lecture Summary", "Mini Project 4: Parallelization of Boruvka's Minimum Spanning Tree Algorithm", "Demonstration: Parallelization of Boruvka's Minimum Spanning Tree Algorithm", "Exit Survey", "Mini Project 4 Submission", "Module 4 Quiz"], "title": "Concurrent Data Structures"}, {"description": "The next two videos will showcase the importance of learning about Parallel Programming and Distributed Programming in Java. Professor Vivek Sarkar will speak with industry professionals at Two Sigma about how the topics of our other two courses are utilized in the field.", "video": ["Our Other Course Offerings", "Industry Professionals on Parallelism - Jake Kornblau and Margaret Kelley, Software Engineers, Two Sigma", "Industry Professional on Distribution - Dr. Eric Allen, Senior Vice President, Two Sigma"], "title": "Continue Your Journey with the Specialization \"Parallel, Concurrent, and Distributed Programming in Java\""}]}, {"course_info": "About this course: This course delves into a variety of processes to structure software development. It also covers the foundations of core Agile practices, such as Extreme Programming and Scrum.\n\nUpon successful completion of this course, you will be able to:\n\n- Distinguish between different process models for organizing software production.\n- Gauge the applicability of process models for a software development project.\n- Apply the fundamentals of Agile software development and management practices.", "title": "Software Processes and Agile Practices", "rating": "4.7", "level": null, "created_by": "University of Alberta", "package_name": "Software Product Management Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "Are you someone who likes to see the big-picture? Being a forward thinker who knows what’s coming next is an invaluable trait as a software product manager. This module will prepare you to become this asset for your team. A software process organizes development from beginning to end. We are going to walk through each step of the development process. This will allow you to become familiar with the entire development process so that you can effectively organize product development and foresee upcoming steps--even if you’ve never worked in software development before!", "video": ["Specialization Preview", "Meet your presenters: Morgan Patzelt", "Meet your presenters: Bradley Poulette", "Meet Your Facilitator – Christopher Djuric", "Introduction to Software Processes and Agile Practices", "Course Resources: Software Processes and Agile Practices", "Course Map: Software Processes and Agile Practices", "2.1.1: Processes and Practices", "2.1.1A: Processes and Practices", "2.1.1B: Processes and Practices", "Reading: Differentiating Phases, Activities and Tasks", "2.1.2: Software Engineering Activities", "2.1.2A: Software Engineering Activities", "2.1.2B: Software Engineering Activities", "Module 1: Supplemental Resources", "Module 1 Assessment (Graded)"], "title": "Module 1: Introduction to Processes"}, {"description": "Ready to dive a little deeper? This module will familiarize you with a wide variety of software process models from throughout history. You will learn about basic software process models, like the Waterfall model and The Unified Process. These fundamental processes will set the stage for the knowledge you will gain later in the course, where more complex processes will be introduced.", "video": ["2.2.1: Linear Models", "2.2.2: Spiral Model", "2.2.3: Unified Process", "2.2.4: Prototyping", "2.2.5: Continuous Delivery", "Module 2: Supplemental Resources", "Module 2 Assessment (Graded)"], "title": "Module 2: Process Models"}, {"description": "Do you want to help developers reach their full potential? Do you want to impress clients by delivering a great product on-schedule and on-budget?  Then this module is the place for you! In this module, you will learn some Agile methodologies that are practiced in the industry today. This module will cover the Scrum and Extreme Programming methodologies. The practices in these methodologies are some of the most popular practices in the industry today. They provide practices that will help to maintain organized and effective development. These methodologies will help you to know the exact state of your product and deliver successfully!", "video": ["2.3.1: Using Agile With Process Models", "2.3.2: Extreme Programming", "2.3.2B: Extreme Programming", "2.3.3: Scrum", "Discussion: Difficulties Adopting Scrum", "Module 3: Supplemental Resources", "Module 3 Assessment (Graded)"], "title": "Module 3: Agile Practices"}, {"description": "Almost there! In this last module, we will dive into Lean Software Development and Kanban. Being the most complex tools which we will cover in this course makes them the “spike-driving machines” from our railroad-building analogy. Lean and Kanban are a cumulation of many lessons learned, and are widely used in some form in the industry today. ", "video": ["2.4.1: Agile Variations and Lean Software Development", "2.4.1A: Agile Variations and Lean Software Development", "2.4.1B: Agile Variations and Lean Software Development", "2.4.1C: Agile Variations and Lean Software Development", "2.4.2: Kanban", "Module 4: Supplemental Resources", "Acknowledgements", "Module 4 Assessment (Graded)", "Course Final Assessment (Graded)"], "title": "Module 4: Other Practices"}]}, {"course_info": "About this course: This 1-week, accelerated on-demand course builds upon Google Cloud Platform Big Data and Machine Learning Fundamentals. Through a combination of instructor-led presentations, demonstrations, and hands-on labs, students learn how to carry out no-ops data warehousing, analysis and pipeline processing.\n\nPrerequisites:\n• Google Cloud Platform Big Data and Machine Learning Fundamentals\n• Experience using a SQL-like query language to analyze data\n• Knowledge of either Python or Java\n\nNotes:\n• You'll need a Google/Gmail account and a credit card or bank account to sign up for the Google Cloud Platform free trial (Google is currently blocked in China).\n• There is a known issue with certain EU countries where individuals are not able to sign up, but you may sign up as \"business\" status and intend to see a potential economic benefit from the trial. More details at: https://support.google.com/cloud/answer/6090602\n• More Google Cloud Platform free trial FAQs are available at: https://cloud.google.com/free-trial/", "title": "Serverless Data Analysis with Google BigQuery and Cloud Dataflow", "rating": "4.5", "level": "Intermediate", "created_by": "Google Cloud", "package_name": "Data Engineering on Google Cloud Platform Specialization ", "target_audience": "Who is this class for: This class is intended for data analysts and data scientists responsible for: analyzing and visualizing big data, implementing cloud-based big data solutions, deploying or migrating big data applications to the public cloud, implementing and maintaining large-scale data storage environments, and transforming/processing big data.", "package_num": "3", "teach_by": [{"name": "Google Cloud Training", "department": null}], "week_data": [{"description": "", "video": ["Course Introduction", "Who is a Data Engineer?", "Course Overview and Agenda"], "title": "Welcome to Serverless Data Analysis with Google BigQuery and Cloud Dataflow"}, {"description": "", "video": ["Serverless Data Analysis with BigQuery Introduction", "What is BigQuery?", "Evaluating BigQuery", "Architecting a BigQuery Project", "Running a Query", "Complex Queries and Functions", "Lab - Serverless Data Analysis (Java/Python) : Part 1", "Codelab - Building a BigQuery Query", "Load and Export Data", "Codelab - Loading and Exporting Data", "Advanced Capabilities in BigQuery", "Processing BigQuery Data Types", "Standard SQL and Window Functions", "User-defined Functions", "Lab - Serverless Data Analysis (Java/Python) : Part 3", "Codelab - Advanced Queries", "Lab 1c Review", "Optimize for Performance and Pricing", "Tables and Partitioning for Performance", "BigQuery Plans and Categories", "Module 1 Quiz"], "title": "Module 1: Serverless Data Analysis with BigQuery"}, {"description": "", "video": ["Dataflow and Its Capabilities", "Write Data Pipelines in Java and Python", "Execute Data Pipelines in Java and Python", "Lab - Serverless Data Analysis", "Codelab - A Simple Dataflow Pipeline", "Lab 4 Review", "MapReduce and Parallel Processing", "Transforms in Cloud Dataflow", "GroupBy and Combine", "Lab - Serverless Data Analysis (Java/Python) : Part 5", "Codelab - MapReduce in Dataflow", "Lab 5 Review", "Side Inputs and In-memory Objects", "Lab - Serverless Data Analysis (Java/Python) : Part 6", "Codelab - Side inputs and BigQuery", "Lab 6 Review", "Lab 6 Review Part 2", "Streaming and Inputs", "Lab - Serverless Data Analysis (Java/Python) : Part 7", "Codelab - Streaming into BigQuery", "Lab 7 Review", "Google Cloud Reference Architecture", "Resources", "Module 2 Quiz"], "title": "Module 2: Autoscaling Data Processing Pipelines with Dataflow"}]}, {"course_info": "About this course: In this project-centered course you will build a modern software hierarchy, designed to enable the translation and execution of object-based, high-level languages on a bare-bone computer hardware platform. In particular, you will implement a virtual machine and a compiler for a simple, Java-like programming language, and you will develop a basic operating system that closes gaps between the high-level language and the underlying hardware platform. In the process, you will gain a deep, hands-on understanding of numerous topics in applied computer science, e.g. stack processing, parsing, code generation, and classical algorithms and data structures for memory management, vector graphics, input-output handling, and various other topics that lie at the very core of every modern computer system.\n\nThis is a self-contained course: all the knowledge necessary to succeed in the course and build the various systems will be given as part of the learning experience. The only prerequisite is knowledge of programming at the level acquired in introduction to computer science courses. All the software tools and materials that are necessary to complete the course will be supplied freely after you enrol in the course.\n\nThis course is accompanied by the textbook \"The Elements of Computing Systems\" (Nisan and Schocken, MIT Press). While not required for taking the course, the book provides a convenient coverage of all the course topics. The book is available in either hardcopy or ebook form, and MIT Press is offering a 30% discount off the cover price by using the discount code MNTT30 at https://mitpress.mit.edu/books/elements-computing-systems. \n\nThe course consists of six modules, each comprising a series of video lectures, and a project. You will need about 2-3 hours to watch each module's lectures, and about 15 hours to complete each one of the six projects. The course can be completed in six weeks, but you are welcome to take it at your own pace. You can watch a TED talk about this course by Googling \"nand2tetris TED talk\". \n\n*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share.", "title": "Build a Modern Computer from First Principles: Nand to Tetris Part II (project-centered course)", "rating": "4.9", "level": null, "created_by": "Hebrew University of Jerusalem", "package_name": null, "target_audience": "Who is this class for: Do you want to understand how the software that runs computers works, and how it is built? Do you wish to become a more competent programmer, and get a deep, hands-on understanding of some of the most fascinating gems in applied computer science? Or... do you simply get a kick from building cool systems? If so, then welcome to Nand to Tetris, Part II! you are going to work hard, and enjoy every moment along the way.", "package_num": null, "teach_by": [{"name": "Shimon Schocken", "department": "Computer Science"}], "week_data": [{"description": "", "video": ["Week 1 Overview (start here)", "Course Overview", "Project 0 Overview", "Project 0"], "title": "Getting Started"}, {"description": "", "video": ["Module Overview (start here)", "Unit 0.0: Machine Language Primer", "Unit 0.1: Machine Language Overview", "Unit 0.2: Machine Language Elements", "Unit 0.3: The Hack Computer and Machine Language", "Unit 0.4: Hack Language Specification", "Unit 0.5: Handling Input and Output", "Unit 0.6: Low-Level Programming, Part I", "Unit 0.7: Low-Level Programming, Part II", "Unit 0.8: Low-Level Programming, Part III", "Unit 0.9: Project 4 Overview", "Project 4"], "title": "Machine Language"}, {"description": "", "video": ["Module Overview (start here)", "Unit 1.0: The Road Ahead", "Unit 1.1: Program Compilation Preview", "Unit 1.2: VM Abstraction: the Stack", "Unit 1.3: VM Abstraction: Memory Segments", "Unit 1.4: VM Implementation: the Stack", "Unit 1.5: VM Implementation: Memory Segments", "Unit 1.6: The VM Emulator", "Unit 1.7: VM Implementation on the Hack Platform", "Unit 1.8: VM Translator: Proposed Implementation", "Unit 1.9: Project 7: Building the VM Translator, Part I", "Unit 1.10: Perspective", "Project 7"], "title": "Virtual Machine I: Stack Arithmetic"}, {"description": "", "video": ["Module overview (start here)", "Unit 2.1: Program Control", "Unit 2.2: Branching", "Unit 2.3: Functions: Abstraction", "Unit 2.4: Function Call and Return: Implementation Preview", "Unit 2.5: Function Call and Return: Run-time Simulation", "Unit 2.6: Function Call and Return Implementation", "Unit 2.7: VM Implementation on the Hack Platform", "Unit 2.8: VM Translator: Proposed Implementation", "Unit 2.9: Project 8: Building the VM Translator, Part II", "Unit 2.10: Perspective", "Project 8"], "title": "Virtual Machine II: Program Control"}, {"description": "", "video": ["Module Overview (start here)", "Unit 3.1: The Jack Language in a nutshell", "Unit 3.2: Object-Based Programming", "Unit 3.3: List Processing", "Unit 3.4: Jack Language Specification: Syntax", "Unit 3.5: Jack Language Specification: Data Types", "Unit 3.6: Jack Language Specification: Classes", "Unit 3.7: Jack Language Specification: Methods", "Unit 3.8: Developing Apps using the Jack language and OS", "Unit 3.9: A Sample Jack App: Square Dance", "Unit 3.10: Graphics Optimization", "Unit 3.11: Perspective", "Project 9"], "title": "High-Level Language"}, {"description": "", "video": ["Module Overview (start here)", "Unit 4.1: Syntax Analysis", "Unit 4.2: Lexical Analysis", "Unit 4.3: Grammars", "Unit 4.4: Parse Trees", "Unit 4.5: Parser Logic", "Unit 4.6: The Jack Grammar", "Unit 4.7: The Jack Analyzer", "Unit 4.8: The Jack Analyzer: Proposed Implementation", "Unit 4.9: Project 10: Building a Syntax Analyzer", "Unit 4.10: Perspective", "Project 10"], "title": "Compiler I: Syntax Analysis"}, {"description": "", "video": ["Module Overview (start here)", "Unit 5.1: Code Generation", "Unit 5.2: Handling Variables", "Unit 5.3: Handling Expressions", "Unit 5.4: Handling Flow of Control", "Unit 5.5: Handling Objects: Low-Level Aspects", "Unit 5.6: Handling Objects: Construction", "Unit 5.7: Handling Objects:  Manipulation", "Unit 5.8: Handling Arrays", "Unit 5.9: Standard Mapping Over the Virtual Machine", "Unit 5.10: Completing the Compiler: Proposed Implementation", "Unit 5.11: Project 11", "Unit 5.12: Perspective", "Project 11"], "title": "Compiler II: Code Generation"}, {"description": "", "video": ["Module Overview (start here)", "Unit 6.1: Operating System", "Unit 6.2: Efficiency Matters", "Unit 6.3: Mathematical Operations", "Unit 6.4: Memory Access", "Unit 6.5: Heap Management", "Unit 6.6: Graphics", "Unit 6.7: Line Drawing", "Unit 6.8: Handling Textual Output", "Unit 6.9: Input", "Unit 6.10: String Processing", "Unit 6.11: Array Processing", "Unit 6.12: The Sys Class", "Unit 6.13: Project 12: Building the OS", "Unit 6.14: Perspective", "Project 12"], "title": "Operating System"}, {"description": "", "video": ["Unit 7.1: More Fun To Go", "Unit 7.2: More Fun To Go", "Unit 7.3: More Fun To Go", "Unit 7.4: More Fun To Go"], "title": "Postscript: More Fun to Go"}]}, {"course_info": "About this course: This course is for experienced C programmers who want to program in C++. The examples and exercises require a basic understanding of algorithms and object-oriented software.", "title": "C++ For C Programmers, Part B", "rating": "4.2", "level": null, "created_by": "University of California, Santa Cruz", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Ira Pohl", "department": "Computer Science"}], "week_data": [{"description": "This module looks at the architecture of the Standard Template Library. It is especially important to understand how iterators are used to access container to produce highly efficient generic algorithms.  The module also includes the important new style of function object—the lambda expression.", "video": ["Welcome to C++ for C Programmers, Part B", "Topics, readings & files", "1.1 Overview", "1.2 New in C++11", "1.3 Standard Template Library", "1.4 Iterator Categories", "1.5 Example Poker Probability", "1.6 Bidirectional Iterator", "1.7 Random Access Iterator", "1.8 STL: Overview of Containers", "1.9 Associative Containers", "1.10 STL: Algorithms Library", "1.11 Non-mutating Algorithm", "1.12 Lambda Expressions: for_each Function", "1.13 Numerical algorithms", "1.14 Functional Objects", "1.15 Defined Function Object Classes: Function Adapters"], "title": "STL and the game of Hex"}, {"description": "This module shows how Hex can be played as a game on a graph. This involves its representation as an undirected graph in C++. The module explores the inheritance logic and syntax of C++. A principal example is the base class student and a derived class grad_student.", "video": ["Topics, homework, readings & files", "2.1 Tic-Tac-Toe to Hex", "2.2 Homework Basic Hex Program", "2.3 Basics of Inheritance", "2.4 Traits and Inheritance", "2.5 Virtual Member Functions", "2.6 C++ Feature: 'final'", "2.7 Topics on Inheritance", "2.8 Hex Overview", "2.9 One Style for a 11x11 Hex Graph", "2.10\tThe Inheritance Mechanism", "2.11\tA Derived Class: grad_student", "2.12\tStudents and Graduate Students", "2.13\tVirtual Function Selection", "2.14\tConfusion with Overloading", "Homework 1: Implement Hex Board"], "title": "Hex as a graph and Inheritance"}, {"description": "This module explains Min-Max and the Alpha-Beta algorithm for game playing. Its programming topics include C++ 11 Move semantics and a detailed example of referential garbage collection.", "video": ["Topics, readings & files", "3.1 Creating a C++11 Class", "3.2 Some Further Constructors", "3.3 'Move' Constructor", "3.4 Lookahead", "3.5 Plausible Move Generator", "3.6 alpha-beta Algorithm Preview", "3.7 alpha-beta Improvement to Min Max", "3.8 Polish Notation", "3.9 Referential Garbage Collection", "3.10 Abstract Base Class = 0 Notation", "3.11 Tree Constructors"], "title": "Hex and the use of AI and C++ Move semantics "}, {"description": "This module shows how to use Monte Carlo evaluation in complex games such as Hex and Go. This had led top championship level play in both these games. The module discusses C++ assertions and exceptions for error handling and the new C++ 11 feature static asserts. Finally, the last part of the module introduces the idea of “Design Pattern”, a feature of modern OO programming.", "video": ["Topics, homework, readings & files", "4.1 Assertion & Exception Handling", "4.2 Monte Carlo", "4.3 Basic Monte Carlo Idea", "4.4 Simple Idea for Generating Board", "4.5 MC - Go  (2006)", "4.6 Asserts and Exceptions", "4.7 Static Asserts - New C++11 Feature", "4.8 Exceptions", "4.9 C++11 & Design Patterns", "4.10\tC++11 Standard", "4.11\tThread", "4.12\t<tuple> C++11 New Library", "4.13\tThe Bigger Picture", "4.14\tFactory Method", "4.15\tFactory Code; C++ 11 Example", "4.16\tAdapter Pattern", "Implement Monte Carlo Hex move evaluation"], "title": "Monte Carlo Hex Program, Further advanced C++ Topics and Patterns"}, {"description": "This module contains three practice exams (which you can take as many times as you'd like) and the final exam, which is worth X% of your grade in this course. ", "video": ["Exam Practice 1", "Exam Practice 2", "Exam Practice 3", "Final Exam"], "title": "Final Exam"}]}, {"course_info": "About this course: You’ve hit a major milestone as a computer scientist and are becoming a capable programmer. You now know how to solve problems, write algorithms, and analyze solutions; and you have a wealth of tools (like data structures) at your disposal.  You may now be ready for an internship or (possibly) an entry-level software engineering job.  But can you land the internship/job?  It depends in part on how well you can solve new technical problems and communicate during interviews.  How can you get better at this?  Practice!  \n\nWith the support of Google’s recruiting and engineering teams we’ve provided tips, examples, and practice opportunities in this course that may help you with a number of tech companies.  We’ll assist you to organize into teams to practice.  Lastly, we’ll give you basic job search advice, and tips for succeeding once you’re on the job.", "title": "Mastering the Software Engineering Interview", "rating": "4.6", "level": "Intermediate", "created_by": "University of California, San Diego", "package_name": "Object Oriented Java Programming: Data Structures and Beyond Specialization ", "target_audience": "Who is this class for: Undergraduates looking for a software engineering internship or full-time job.\n\nProfessionals looking to make a career shift towards software engineering.\n\nComputer science enthusiasts looking to polish their technical communication skills.\n\nAnyone curious about what goes on in a technical interview, and how to use psychology and research to combat self-doubt and set yourself up for success.", "package_num": "4", "teach_by": [{"name": "Mia Minnes", "department": "Computer Science and Engineering"}, {"name": "Leo Porter", "department": "Computer Science and Engineering"}, {"name": "Christine Alvarado", "department": "Computer Science and Engineering"}], "week_data": [{"description": "Welcome to our course on effectively communicating your technical abilities.  This course focuses on landing a technical job and excelling in a technical role.  To succeed in job interviews, you’ll need to be able to confidently articulate your ability to solve challenging problems and come up with new solutions under potentially stressful conditions. After getting a technical job, the role of communication increases even more.  You’ll need to work with other members of the team, communicate technical challenges and successes, and potentially sell the value of your work to those outside the company. Our goal is that by the end of this course each and every one of you understands the importance of technical communication, and has received constructive feedback on areas of potential improvement.  In achieving this goal you will also learn about algorithmic thinking on the fly, how to evaluate a good interview answer to a difficult technical problem, and how “soft” skills impact interview outcomes.   In this module, we’ll begin to see what a technical interview looks like, from the perspective of a major tech company.  We’ll then focus on how to best get the interview in the first place.  If you're not in the job market right now, you might want to skim the videos in this module and skip ahead to the Resume Critique (for insights about how to present yourself in writing) or the Introductions assignment (on effectively presenting yourself in person).", "video": ["Course Introduction", "Prerequisites and how to get the most out of this course", "Course Goals", "Why Soft Skills?", "Google engineers share their stories", "After completing this course, you will be able to...", "By the end of this week, you will be able to...", "Introduction", "Where do you want to start?", "The Application Process", "Preparing for the Interview", "Interview prep resources", "Recommended resources", "Researching the Company", "Preparing for the interview", "Effective Resumes", "Congratulations and quiz answers", "Resume critique recap", "People Involved", "What is a technical phone screen or interview?", "What Is an In-Person Interview?", "When I struggled: Overcoming a tough interview experience", "Your experience", "Where do you want to go next?", "The value of your introduction", "Good and bad example introductions", "Your recommendations", "Screen and video recording tips", "Resume critique", "Introductions", "End of Week Quiz"], "title": "Welcome & What is a Software Engineering Interview?"}, {"description": "Now that you’ve gotten warmed up, it’s time to practice your coding skills.  One of the things you’ll almost certainly be asked to do during a technical phone interview is to code up a solution to a problem in a shared text document (e.g. Google doc) while you are on the phone with the interviewer.  This experience can be intimidating, unfamiliar and humbling if you are not prepared, so this week we will give you lots of practice and tips for getting through this part of the interview with flying colors.  ", "video": ["Welcome and Introduction to Live Coding", "By the end of this week, you will be able to...", "Cold Live Coding Assignment Walkthrough", "Your evaluation criteria", "Sample demonstrating key pitfalls", "Talking Through Processes", "Getting Started", "Getting Stuck and Recovering from Mistakes", "Correctness and Testing", "A Very Good Phone Interview", "When I struggled: a first technical phone interview", "Resources for finding problems to practice with", "Imposter Syndrome and Stereotype Threat", "Growth mindset", "Imposter Syndrome Gallery", "Imposter syndrome and growth mindset", "Growth Mindset and Stereotype Threat: Additional Information and Resources", "Live coding assignment, take 2", "Cold Live Coding Assignment", "Self-assessment", "Live coding take 2, self assessment"], "title": "Live coding: the technical phone interview and beyond"}, {"description": "This week, we’re going to focus on how to speak about your experiences working on projects and how to speak about the technical problems you’ve experienced and how you’ve solved those problems.  We’ll introduce the STAR (Situation, Task, Action, Results) model for presenting your work, and discuss how to and how not to present the problem you worked on and the solution you developed.  We’ll also discuss the communication skills that are critical to this task.  It’s a fun week with lots of examples (both good and bad), which ends with an assignment where you will present your own work on video and submit this video for peer review.", "video": ["Welcome and Introduction to Personal Narrative", "Sample Pitch, Broadly Technical", "Sample Pitch, Non-Technical", "Sample Pitch, Technical", "Personal Narrative: Key Aspects", "By the end of this week, you will be able to...", "Planning your narrative", "Making the Problem Compelling", "Common Pitfall: Mixing Problem and Solution", "Common Pitfall: Assuming Too Much", "Presenting Your Solution", "Common Pitfall: In the Weeds", "Common Pitfall: Chronology", "Visual Aids", "Eye Contact, Speaking, and Projecting Excitement", "When I struggled: A surprising discovery", "Responding to Your Audience", "Describing a group project", "Assignment Overview", "What project should you talk about?", "Describe Your Work"], "title": "Explaining what you've already done"}, {"description": "As we saw in week 2, coding on the fly can be a difficult task!  In this final week of the course we’ll revisit the skill of live problem solving by looking at how to solve more challenging algorithmic problems (and write the code associated with the solution) on the whiteboard.  You’ll recognize these problems as “classic” interview problems you’ve probably heard a lot about, designed to test your problem solving skills as well as your analysis and coding abilities.  Don’t worry, we’ll teach you how to approach them with confidence through a 6-step process to addressing technical questions (hint: you don’t have to produce the perfect solution on the first try!).  We’ll show you how to use this process in a number of examples.  But of course, there is no substitute for practice, so we’ll set you up with how to train and evaluate yourself.", "video": ["Welcome to algorithmic problem solving", "By the end of this week, you will be able to...", "Your experience", "Algorithmic problem solving and interviews", "Case study: introduction", "Case study: a first solution", "Case study: working at the whiteboard", "Case study: going deeper", "Case study: next steps", "Study notes", "When I struggled: dealing with nerves", "In the real world: career advice", "Evaluation criteria", "Highlights from a good mock interview", "Pitfalls in a bad mock interview", "Evaluating the mock interviews", "What's next?", "Evaluation questions", "Record your live problem-solving session", "Interview Question Solutions--DON'T PEEK", "Additional Resources", "End of course message", "Appendix: full-length mock phone interview", "Appendix: full-length mock bad in-person interview", "Appendix: full-length mock good in-person interview", "Solving algorithmic problems on the fly: Part 1", "Solving Algorithmic Problems on the Fly: Part 2 (self-assessment)"], "title": "Algorithmic thinking on the fly"}]}, {"course_info": "About this course: Discover the basic concepts of cluster analysis, and then study a set of typical clustering methodologies, algorithms, and applications. This includes partitioning methods such as k-means, hierarchical methods such as BIRCH, and density-based methods such as DBSCAN/OPTICS. Moreover, learn methods for clustering validation and evaluation of clustering quality. Finally, see examples of cluster analysis in applications.", "title": "Cluster Analysis in Data Mining", "rating": "4.2", "level": null, "created_by": "University of Illinois at Urbana-Champaign", "package_name": "Data Mining  Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Jiawei Han", "department": "Department of Computer Science"}], "week_data": [{"description": "You will become familiar with the course, your classmates, and our learning environment. The orientation will also help you obtain the technical skills required for the course.", "video": ["Course Introduction", "Syllabus", "About the Discussion Forums", "Getting to Know Your Classmates", "Social Media", "Orientation Quiz"], "title": "Course Orientation"}, {"description": "", "video": ["Lesson 1 Overview", "1.1. What is Cluster Analysis", "1.2. Applications of Cluster Analysis", "1.3 Requirements and Challenges", "1.4 A Multi-Dimensional Categorization", "1.5 An Overview of Typical Clustering Methodologies", "1.6 An Overview of Clustering Different Types of Data", "1.7 An Overview of User Insights and Clustering", "Lesson 2 Overview", "2.1 Basic Concepts: Measuring Similarity between Objects", "2.2 Distance on Numeric Data Minkowski Distance", "2.3 Proximity Measure for Symetric vs Asymmetric Binary Variables", "2.4 Distance between Categorical Attributes Ordinal Attributes and Mixed Types", "2.5 Proximity Measure between Two Vectors Cosine Similarity", "2.6 Correlation Measures between Two variables Covariance and Correlation Coefficient", "Lesson 1 Quiz", "Lesson 2 Quiz"], "title": "Module 1"}, {"description": "", "video": ["Lesson 3 Overview", "3.1 Partitioning-Based Clustering Methods", "3.2 K-Means Clustering Method", "3.3 Initialization of K-Means Clustering", "3.4 The K-Medoids Clustering Method", "3.5 The K-Medians and K-Modes Clustering Methods", "3.6 Kernel K-Means Clustering", "Lesson 4 Part 1 Overview", "4.1 Hierarchical Clustering Methods", "4.2 Agglomerative Clustering Algorithms", "4.3 Divisive Clustering Algorithms", "4.4 Extensions to Hierarchical Clustering", "4.5 BIRCH: A Micro-Clustering-Based Approach", "ClusterEnG Introduction", "ClusterEnG Overview", "ClusterEnG: K-Means and K-Medoids", "ClusterEnG Application: AGNES", "ClusterEnG Application: DBSCAN", "Lesson 3 Quiz", "Implementing the K-means Clustering Algorithm"], "title": "Week 2"}, {"description": "", "video": ["Lesson 4 Part 2 Overview", "4.6 CURE: Clustering Using Well-Scattered Representatives (Optional)", "4.7 CHAMELEON: Graph Partitioning on the KNN Graph of the Data", "4.8 Probabilistic Hierarchical Clustering", "Lesson 5 Overview", "5.1 Density-Based and Grid-Based Clustering Methods", "5.2 DBSCAN: A Density-Based Clustering Algorithm", "5.3 OPTICS: Ordering Points To Identify Clustering Structure", "5.4 Grid-Based Clustering Methods", "5.5 STING: A Statistical Information Grid Approach", "5.6 CLIQUE: Grid-Based Subspace Clustering", "Lesson 4 Quiz", "Lesson 5 Quiz"], "title": "Week 3"}, {"description": "", "video": ["Lesson 6 Overview", "6.1 Methods for Clustering Validation", "6.2 Clustering Evaluation Measuring Clustering Quality", "6.3 Constraint-Based Clustering", "6.4 External Measures 1: Matching-Based Measures", "6.5 External Measure 2: Entropy-Based Measures", "6.6 External Measure 3: Pairwise Measures", "6.7 Internal Measures for Clustering Validation", "6.8 Relative Measures", "6.9 Cluster Stability", "6.10 Clustering Tendency", "Lesson 6 Quiz", "Implementing Clustering Validation Measures"], "title": "Week 4"}, {"description": "In the course conclusion, feel free to share any thoughts you have on this course experience.", "video": ["Final Reflections"], "title": "Course Conclusion"}]}, {"course_info": "About this course: This 1-week, accelerated on-demand course builds upon Google Cloud Platform Big Data and Machine Learning Fundamentals. Through a combination of video lectures, demonstrations, and hands-on labs, you'll learn how to build streaming data pipelines using Google Cloud Pub/Sub and Dataflow to enable real-time decision making. You will also learn how to build dashboards to render tailored output for various stakeholder audience.\n\nPrerequisites:\n• Google Cloud Platform Big Data and Machine Learning Fundamentals (or equivalent experience)\n• Some knowledge of Java\n\nObjectives:\n• Understand use-cases for real-time streaming analytics\n• Use Google Cloud PubSub asynchronous messaging service to manage data events\n• Write streaming pipelines and run transformations where necessary\n• Get familiar with both sides of a streaming pipeline: production and consumption\n• Interoperate Dataflow, BigQuery and Cloud Pub/Sub for real-time streaming and analysis", "title": "Building Resilient Streaming Systems on Google Cloud Platform", "rating": "4.8", "level": "Intermediate", "created_by": "Google Cloud", "package_name": "Data Engineering on Google Cloud Platform Specialization ", "target_audience": "Who is this class for: This class is intended for data analysts, data scientists and programmers who want to build for out-of-the-ordinary scenarios such as high availability, resiliency, high-throughput, real-time streaming analytics on leveraging Google Cloud Platform. The typical audience member has experience analyzing and visualizing big data, implementing cloud-based big data solutions, and transforming/processing datasets.", "package_num": "5", "teach_by": [{"name": "Google Cloud Training", "department": null}], "week_data": [{"description": "", "video": ["Module Agenda", "Streaming => data processing for unbounded data sets", "Unbounded datasets are quite common", "The need for fast decisions leads to streaming", "The Three Vs of Big Data", "Stream data processing: Challenges", "Variable volumes makes it possible to derive real-time insights from growing data", "Tightly coupled services propagate failures", "Loosely-coupled systems scale better", "Latency is to be expected", "Latency happens for a variety of reasons", "Beam/Dataflow model provides exactly once processing of events", "Challenge #3: Need instant insights", "BigQuery lets you ingest streaming data and run queries as the data arrives", "Need to use unified language when querying historic and streaming data for seamless integration", "Stream processing on GCP", "Discuss some streaming scenarios", "Lab Worksheet", "Module 1 Quiz"], "title": "Module 1: Architecture of Streaming Analytics Pipelines"}, {"description": "", "video": ["Module Agenda", "Managed stream data processing: A common configuration", "Cloud Pub/Sub connects applications and services through a messaging infrastructure", "Pub/Sub simplifies event distribution", "Pub/Sub features", "How It Works: Topics and Subscriptions", "Create topic and publish message", "Other publishing options", "Push vs. Pull delivery flows", "Creating subscription, pull messages", "Codelab – Publish streaming data into Pub/Sub", "Lab Review", "Module 2 Quiz"], "title": "Module 2: Ingesting Variable Volumes"}, {"description": "", "video": ["Module Intro and Agenda", "Element-wise stream processing is easy. Aggregation and composite on unbounded data is hard", "We could split it into processing time windows...", "A programming model for both batch AND stream", "Challenges in stream processing", "Need to process variable amounts of data that will grow over time", "The Beam unified model is very powerful and handles different processing paradigms", "For example, batch and window in same pipeline", "Dataflow resources are deployed on demand, per job, and work is constantly rebalanced across resources", "Build a stream processing pipeline for live traffic data", "Dataflow is a great way to work with Pub/Sub", "Can enforce only-once handling in Dataflow even if your publisher might retry publishes", "To compute average speed on streaming data, we need to bound the computation within time-windows", "Did we use triggers? What did we do with late data?", "Handle late data: watermarks, triggers, accumulation", "Heuristic/guarantee of completeness (Watermark)", "Windows + Watermarks + Triggers collectively help you handle data arriving late and out-of-order", "How Dataflow handles streaming data while balancing tradeoffs", "Watermark is the system's notion of when all data in a certain window can be expected to have arrived", "Streaming with speculative + late data", "In your DoFn, can get information about Window, Triggers", "Codelab – Streaming Data Pipelines", "Lab Review", "Module 3 Quiz"], "title": "Module 3: Implementing Streaming Pipelines"}, {"description": "", "video": ["Module Intro and Agenda", "What is BigQuery?", "Streaming data into BigQuery", "Data Studio lets you build dashboards and reports", "Pipeline to detect accidents", "Codelab – Streaming Analytics & Dashboards", "Lab Review", "Module 4 Quiz"], "title": "Module 4: Streaming analytics and dashboards"}, {"description": "", "video": ["Module Intro and Agenda", "Choosing where to store data on GCP", "How do you use Cloud Spanner?", "Bigtable: big, fast, autoscaling NoSQL", "Designing for Bigtable", "Rows are sorted lexicographically by row key, from lowest to highest byte string", "Store related entities in adjacent rows", "Distribute your writes and reads across rows", "Distribute the writing load between tablets while allowing common queries to return consecutive rows", "Ingesting into Bigtable", "Lab Overview", "Codelab – Streaming into Bigtable at Low-latency", "Lab Review", "Performance considerations", "Rebalance strategy: distribute storage", "Summary of Data Engineering on GCP Specialization", "Module 5 Quiz"], "title": "Module 5: Handling Throughput and Latency Requirements"}]}, {"course_info": "About this course: [As described below, this is Part C of a 3-part course.  Participants should complete Parts A and B first -- Part C \"dives right in\" and refers often to material from Part A and Part B.]\n\nThis course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones.\n\nThis course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.\n\nThe course assumes some prior experience with programming, as described in more detail in the first module of Part A.  Part B assumes successful completion of Part A.\n\nThe course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  \n\nWeek 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.", "title": "Programming Languages, Part C", "rating": "4.9", "level": null, "created_by": "University of Washington", "package_name": null, "target_audience": "Who is this class for: The course assumes students are familiar with programming covered by most introductory courses, but it is explicitly designed not to be a particularly advanced course. Students should be comfortable with variables, conditionals, arrays, linked lists, stacks, and recursion (though recursion will be reviewed and expanded upon), and the difference between an interface and an implementation. Students should be eager to write programs in languages new to them. Part C of the course analyzes basic object-oriented concepts and contrast them with those of other languages, so familiarity with Java or a closely related language (e.g., C#) might be helpful for Part C, but it is not necessary for the assignments.\n\nThis course is based on a course designed for second- and third-year undergraduates: not a first computer science course, but not an advanced course either. So it certainly will not cover everything in the beautiful world of programming languages, but it is a solid introduction.  It is designed to be eye-opening and fascinating both for learners seeking a \"third or fourth programming course\" and for learners with more experience who are looking for a clear and precise foundation in programming languages.\n\nThe assignments in the course are designed to be challenging, but with everything you need in the course content.\n\nAn introductory video and another reading discuss assumed background in some more detail in Week 1 of Part A of the course.", "package_num": null, "teach_by": [{"name": "Dan  Grossman", "department": "Computer Science & Engineering"}], "week_data": [{"description": "Welcome! Start here!  Learn about this course and how it's organized. ", "video": ["Start Here!", "Welcome to Part C", "Overview of Part C Concepts", "Part C Course Structure", "Part C Software Installation and Use: Ruby and irb", "Installing and Using SML and Emacs"], "title": "Introduction, Course-Wide Information, and Software Installation (Start Here)"}, {"description": "Let's get started programming with Ruby, including learning about Ruby's variant of (almost) function closures and the \"inheritance and overriding\" that is the essence of object-oriented programming.  The welcome message has a few additional comments about \"what makes Ruby different\" and how to approach the (rather different) homework assignment, so let's get started...", "video": ["Section 8 Welcome Message", "Section 8 Reading Notes", "Code Files for All Section 8 Videos", "Introduction to Ruby", "Classes and Objects", "Object State", "Visibility", "A Longer Example", "Everything is an Object", "Class Definitions are Dynamic", "Duck Typing", "Arrays", "Blocks", "Using Blocks", "Procs", "Hashes and Ranges", "Subclassing", "Why Use Subclassing?", "Overriding and Dynamic Dispatch", "Method-Lookup Rules, Precisely", "Dynamic Dispatch Versus Closures", "Optional: Dynamic Dispatch Manually in Racket", "Explanation of \"Lesson Choices\"", "Homework 6 Instructions", "Homework 6 Detailed Peer-Assessment Instructions", "Practice Problems for Another Game in Ruby", "Homework 6 (Ruby 2.0)", "Homework 6 Peer Review"], "title": "Section 8 and Homework 6 (First Module with Ruby)"}, {"description": "Welcome to the second week of Part C where we will focus on how functional programming and object-oriented programming encourage such \"exactly opposite\" decompositions of problems that they are \"more alike than you might realize\".  This is a key opportunity to synthesize much of what we have learned so far.  As the welcome message discusses in more detail, we will go a bit beyond this to touch on some related advanced topics and then dive into the last -- and challenging -- programming assignment, which involves porting an interpreter from ML to Ruby.", "video": ["Section 9 Welcome Message", "Section 9 Reading Notes", "Code Files for All Section 9 Videos", "OOP Versus Functional Decomposition", "Adding Operations or Variants", "Binary Methods with Functional Decomposition", "Double Dispatch", "Optional: Multimethods", "Multiple Inheritance", "Mixins", "Interfaces", "Optional: Abstract Methods", "Explanation of \"Lesson Choices\"", "Homework 7 Instructions", "Homework 7 Peer Review Detailed Instructions", "Practice Problem for Double Dispatch and ML-to-Ruby", "Homework 7 (Ruby 2.0 and SML)", "Homework 7"], "title": "Section 9 and Homework 7 (Second Module With Ruby)"}, {"description": "We have reached the last module of Programming Languages!  We first study subtyping, how it relates to static types for object-oriented programming, and how it relates to generics.  There is no assignment or quiz devoted only to this last \"new material\", but there is a \"final exam\" covering Part B and Part C of the course.  Enjoy studying for the exam, and don't miss the final \"wrap-up\" lesson when you're all done!", "video": ["Section 10 Welcome Message", "Section 10 Reading Notes", "(Lack of) Section 10 Code Files", "Subtyping From the Beginning", "The Subtype Relation", "Depth Subtyping", "Optional: Java/C# Arrays", "Function Subtyping", "Subtyping for OOP", "Generics Versus Subtyping", "Bounded Polymorphism", "Information About the Exam (Required Reading)", "Practice Final Exam", "Summarizing All We Have Learned", "Saying Good-Bye :-)", "Actual Final Exam"], "title": "Section 10, Final Exam, and Course Wrap-Up"}]}, {"course_info": "About this course: This two-part course builds upon the programming skills that you learned in our Introduction to Interactive Programming in Python course.  We will augment those skills with both important programming practices and critical mathematical problem solving skills.  These skills underlie larger scale computational problem solving and programming. The main focus of the class will be programming weekly mini-projects in Python that build upon the mathematical and programming principles that are taught in the class. To keep the class fun and engaging, many of the projects will involve working with strategy-based games.\n\nIn part 1 of this course, the programming aspect of the class will focus on coding standards and testing.  The mathematical portion of the class will focus on probability, combinatorics, and counting with an eye towards practical applications of these concepts in Computer Science.  \n\nRecommended Background - Students should be comfortable writing small (100+ line) programs in Python using constructs such as lists, dictionaries and classes and also have a high-school math background that includes algebra and pre-calculus.", "title": "Principles of Computing (Part 1)", "rating": "4.8", "level": "Intermediate", "created_by": "Rice University", "package_name": "Fundamentals of Computing Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Joe Warren", "department": "Computer Science"}, {"name": "Luay Nakhleh", "department": "Computer Science; Biochemistry and Cell Biology "}], "week_data": [{"description": "This week, we will introduce you to the structure and standards of the Principles of Computing courses.", "video": ["Principles of Computing ", "Introduction", "Required Python Knowledge", "Required Python Knowledge", "Coding Style and Standards", "Guidelines for Coding Style", "Python Modules", "Importing Custom Modules in Python", "Machine Grading", "Mini-project Video", "Mini-project Description", "2048", "Assignment Submission History", "Math Expressions for Homework", "Math Notes on Functions", "Practice Mini-project - Solitaire Mancala", "CodeSkulptor", "Saving in CodeSkulptor", "Beyond CodeSkulptor (15:12) (optional video)", "Python Development Environments", "Homework 1", "Assignment: 2048 (Merge)"], "title": "Required Python knowledge, coding standards, and machine grading"}, {"description": "This week, we will explain the importance of testing.  We will also learn to solve problems with grids.", "video": ["The Importance of Testing ", "Testing", "Building Tests for Python Programs", "Plotting", "Grids", "Mini-project Video", "Mini-project Description", "Math Notes on Grid Representations", "Practice Activity - Testing Solitaire Mancala", "Homework 2", "Assignment: 2048 (Full)"], "title": "Testing, plotting, and grids"}, {"description": "This we will learn how to use probability and randomness to solve problems.", "video": ["The Importance of Probability ", "Basics of Probability", "Expected Value ", "Monte Carlo Methods", "Objects and References ", "Mini-project Video", "Mini-project Description", "TTTBoard Class", "Math Notes on Basic Probability", "Math Notes on Expected Value", "Practice Mini-project - Nim (Monte Carlo)", "Practice Activity - The Monty Hall Problem", "Homework 3", "Assignment: Tic-Tac-Toe (Monte Carlo)"], "title": "Probability, randomness, and objects/references"}, {"description": "This week, we will learn how to use combinatorics to solve problems.", "video": ["The Importance of Combinatorics ", "Enumeration", "Permutations and Combinations", "Combinatorics and Password Breaking ", "Debugging", "Mini-project Video", "Mini-project Description", "Math Notes on Enumeration", "Math Notes on Permutations and Combinations", "Practice Activity - Analyzing a Simple Dice Game", "Practice Activity - Counting Game States", "Homework 4", "Assignment: Yahtzee"], "title": "Combinatorics, generators, and debugging"}, {"description": "This week, we will explain the importance of counting in solving complex problems.", "video": ["The Importance of Counting ", "Counting and Sums", "Functions: Finding the Max ", "Higher-order Functions ", "Plotting Statement Counts", "Mini-project Video", "Mini-project Description", "BuildInfo Class", "Math Notes on Arithmetic Sums", "Math Notes on Logarithms and Exponentials", "Math Notes on Growth Rates of Functions", "Practice Activity - Modeling the Growth of Functions", "Practice Activity - The Case of the Greedy Boss", "Homework 5", "Assignment: Cookie Clicker"], "title": "Counting, growth of functions, higher-order functions"}]}, {"course_info": "About this course: This course covers practical techniques to elicit and express software requirements from client interactions.  \n\nUpon successful completion of this course, you will be able to:\n\n - Create clear requirements to drive effective software development\n - Visualize client needs using low-fidelity prototypes\n - Maximize the effectiveness of client interactions\n - Adapt to changing product requirements", "title": "Client Needs and Software Requirements ", "rating": "4.7", "level": null, "created_by": "University of Alberta", "package_name": "Software Product Management Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "Welcome to the first module! In this module, you will become familiar with software requirements and some issues surrounding them. You will learn what a software requirement is, including the different types of requirements. Then, you will learn how to deal with changing requirements and control project scope, as well as how requirements affect design. These lessons will give you the knowledge you need to move on to eliciting and creating good quality requirements in the next modules.\n", "video": ["Specialization Preview", "Meet your presenters: Bradley Poulette", "Meet your presenters: Morgan Patzelt", "Meet Your Facilitator – Christopher Djuric", "Introduction to Client Needs and Software Requirements", "Course Resources: Client Needs and Software Requirements", "Course Map: Client Needs and Software Requirements", "3.1.1: What is a Requirement?", "3.1.1A: Requirement Activities", "3.1.2: Types of Requirements", "3.1.2A: User Requirements", "3.1.2B: Functional Requirements", "3.1.2C: Non-Functional Requirements", "3.1.2D: Additional Requirement Types", "Module 1: Practice Quiz (Ungraded)", "3.1.3: Controlling Scope", "3.1.4: Requirements and Design", "Module 1: Supplemental Resources", "Module 1 Assessment (Graded)"], "title": "Module 1: Introduction to Requirements"}, {"description": "A major duty of a software product manager is eliciting and expressing requirements from your client. This module will walk you through the basics of client interactions and requirements elicitation and expression. You will learn how to create the best product for your end users, how to conduct productive  client meetings, and various ways of expressing requirements. These techniques will provide you with the tools you will need to confidently interact with your client as well as satisfy them with the “right product”. ", "video": ["3.2.1: Restaurant Scenario", "3.2.2: User Considerations", "3.2.2A: User Considerations", "3.2.2B: User Considerations", "Discussion: Cultural Differences", "3.2.3: Involving Clients", "3.2.3A: Involving Clients", "Good Questions to Ask Your Client", "3.2.4: Use Cases", "3.2.5: Wireframes", "3.2.6: Storyboards", "Module 2: Supplemental Resources", "Module 2: Wireframes Assignment (Graded)", "Module 2 Assessment (Graded)"], "title": "Module 2: User Interaction"}, {"description": "Explore the many ways in which software requirements can be represented. In this module, you will learn about the most popular means of expressing requirements in the industry today: the user story. You will learn how acceptance tests help to verify the stories which they accompany, and how to create a robust product backlog. At the end of the module, you will learn how story maps are used to organize user stories, so that you’re always putting your effort into the tasks which makes the most impact.\n", "video": ["3.3.1: Agile Requirements", "3.3.2: User Stories", "3.3.2A: User Stories", "3.3.2B: User Stories", "Reading: User Story Assignment Proposed Solution (Locked)", "3.3.3: Acceptance Tests", "3.3.4: Product Backlog", "3.3.4A: Product Backlog", "3.3.5: Story Maps", "Module 3: Supplemental Resources", "Module 3: User Stories Assignment (Graded)", "Module 3 Assessment (Graded)"], "title": "Module 3: Writing Requirements"}, {"description": "To this point, you have learned how to effectively elicit, express, and prioritize requirements. It’s now time to ensure clarity. This last module will explore the activity of analyzing requirements in greater detail. Analyzing creates clear, actionable, requirements which result in high quality software with fewer errors. ", "video": ["3.4.1: Criteria for User Stories", "3.4.1A: Criteria for User Stories", "Ambiguous Requirements Study Guide", "3.4.2: Ambiguous Requirements", "Discussion: Ambiguous Requirements", "Reading: Ambiguous Requirements Quiz Pre-Reading", "3.4.3: Course Summary", "Module 4: Supplemental Resources", "Acknowledgements", "Ambiguous Requirements Quiz", "Module 4: Assessment (Graded)", "Course Assessment (Graded)"], "title": "Module 4: Quality Requirements"}]}, {"course_info": "About this course: How does Google Maps plan the best route for getting around town given current traffic conditions?  How does an internet router forward packets of network traffic to minimize delay?  How does an aid group allocate resources to its affiliated local partners?\n\nTo solve such problems, we first represent the key pieces of data in a complex data structure. In this course, you’ll learn about data structures, like graphs, that are fundamental for working with structured real world data.  You will develop, implement, and analyze algorithms for working with this data to solve real world problems.   In addition, as the programs you develop in this course become more complex, we’ll examine what makes for good code and class hierarchy design so that you can not only write correct code, but also share it with other people and maintain it in the future.\n\nThe backbone project in this course will be a route planning application.  You will apply the concepts from each Module directly to building an application that allows an autonomous agent (or a human driver!) to navigate its environment.  And as usual we have our different video series to help tie the content back to its importance in the real world and to provide tiered levels of support to meet your personal needs.", "title": "Advanced Data Structures in Java", "rating": "4.7", "level": "Intermediate", "created_by": "University of California, San Diego", "package_name": "Object Oriented Java Programming: Data Structures and Beyond Specialization ", "target_audience": "Who is this class for: This is an intermediate Java course. We recommend this course to learners who have previous experience in software development or a background in computer science.", "package_num": "3", "teach_by": [{"name": "Leo Porter", "department": "Computer Science and Engineering"}, {"name": "Mia Minnes", "department": "Computer Science and Engineering"}, {"name": "Christine Alvarado", "department": "Computer Science and Engineering"}], "week_data": [{"description": "Welcome to the first week in the third course of our Intermediate Java Programming Specialization.  Once again start with introductions, and in particular introduce the unique structure of this course.  Also, if you're not sure if this course is right for you, we've got an optional pre-course quiz coming right up that can help you figure out if you're in the right place.  If you decide to stay with us (and we really hope you will!) we've got a great backbone project for you: your very own mapping application, inspired by Google Maps!  The core data structure throughout this course is graphs, which may very well be the most fundamental data structure in all of computer science.  Ready to begin?  So are we!", "video": ["Welcome", "After completing this course, you will be able to ...", "Is this course right for me?", "Pre-course quiz", "Up Next: A short survey", "Survey: Your goals for the course", "If you want more practice before you begin...", "The structure of this course", "Your path through this course", "Concept challenges", "Welcome from the Google engineers", "Introduce Yourself!", "Project Overview", "Project Prototype", "Setting up Java and Eclipse", "Getting and Setting up the Starter Code", "Project: Orientation to the Starter Code, Data Files and Front-end", "Course Structure and Starter Code Quiz (make sure you can run the starter code first)"], "title": "Introduction to the Course"}, {"description": "This week we'll start getting technical, introducing you to the central data structure in the course: Graphs.  You'll learn the basics and then have a chance to dive in a little deeper into the code, getting ready to start building that Google Maps-like application.", "video": ["Introduction", "A note about week numbers", "By the end of this week, you will be able to...", "Project: Introduction to Graphs Project Overview", "Core: What's a graph?", "Core: Graph definitions", "In the real world: Graphs at Google", "In the real world: More graphs at Google", "Graphs", "(Read only AFTER finishing Graphs Quiz)", "Core: Implementing graphs in Java", "Core: Adjacency matrix", "Core: Adjacency list", "Where to next?", "Concept Challenge: Comparing implementations of graphs", "In the real world: Performance considerations", "When I struggled: Analyzing implementations", "Core: Neighbors", "Support: Coding getNeighbors", "Support: Coding 2-Hop Neighbors", "Support: Multiplying Adjacency Matrices", "Graph definitions and implementation: a glossary", "Week 2: Additional Resources", "Project: Programming Assignment Walkthrough", "Programming Assignment FAQ", "Graph definitions and implementations Quiz Answer explanations (Read ONLY after you pass the quiz)", "Project: Implementing Graphs", "Graph definitions and implementation"], "title": "Introduction to Graphs"}, {"description": "This week you'll get the backbone of your map search engine up and running.  In previous courses, including the previous courses in this specialization, you've probably been given most of the classes you needed to complete the assignments.  But learning how to design classes from scratch is a key skill that you will need as you become a more sophisticated Java programmer.  This week we'll give you the tools you need to create a robust and elegant class design for your map search engine.  We'll introduce a similar problem and show you how it can be represented as a graph.  Then we'll introduce two core search algorithms: depth-first search and breadth-first search.  Finally, we'll turn our graph problem into a set of Java classes.   Your task on the programming assignment this week will be to do the same thing, but in the context on the map search engine!", "video": ["Introduction", "By the end of this week, you will be able to ...", "Project: Route Finding Project Overview", "Core: Intro to Class Design", "When I struggled: Building useful classes", "In the Real World: Design patterns", "Core: DFS, Part 1", "Core: DFS, Part 2", "Core: BFS", "Support: Developing Small Examples to Test Your Code", "Where to next?", "When I struggled: Data structures jargon", "When I struggled: The right data structure for the job", "Concept Challenge: Performance of DFS and BFS", "Core: Class Design", "When I struggled: If you fail to plan ...", "When I struggled: ... but don't forget to start!", "In the real world: Planning ahead with design", "Core: Refactoring", "Support: Where to start the project design?", "In the Real World: Why is code refactored?", "Week 3: Additional Resources", "Project: Programming Assignment Walk-through", "End of Week Quiz Answers", "Project: Class Design and Graph Search", "Code Design Peer Review", "End of Week Quiz (complete project and peer review first)"], "title": "Class design and simple graph search"}, {"description": "In the past two weeks, you've developed a strong understanding of how to design classes to represent a graph and how to use a graph to represent a map.  In this week, you'll add a key feature of map data to our graph representation -- distances -- by adding weights to your edges to produce a \"weighted graph\".  Although this might seem like a small change, the algorithms that work for unweighted graphs may prove ineffective for weighted graphs.  To address this problem, you'll explore more advanced shortest path algorithms.  First, you'll see how to find the shortest path on a weighted graph, then you'll see how to find it more quickly.  In the project, you'll apply these ideas to create the core of any good mapping application: finding the shortest route from one location to another.", "video": ["Introduction", "By the end of this week, you will be able to ...", "Project: Shortest Path Overview", "Core: Shortest Path with BFS", "Core: Geographic Maps", "Core: Dijkstra's Algorithm", "Concept Challenge: Performance of Dijkstra's Algorithm", "Core: A* Search Algorithm", "When I struggled: Tackling large programming projects", "When I Struggled: Remembering classical algorithms", "Week 4: Additional Resources", "Project: Shortest Path Programming Assignment Walkthrough", "Test cases and debugging guide for the quiz", "End of Week Quiz Answers", "Project: Shortest Path", "End of Week Quiz (very short, do programming assignment first)"], "title": "Finding shortest paths in weighted graphs"}, {"description": "In this week, we'll go beyond the problem of finding a path between two points, and focus on problems requiring overall path planning.  For example, if you wanted to go on errands and visit 6 different locations before returning home, what is the optimal route? This problem is actually a really well known problem in computer science known as the Travelling Salesperson Problem (TSP).  Attempting to solve the problem will lead us to explore complexity theory, what it means to be NP-Hard, and how to solve \"hard\" problems using heuristics and approximation algorithms.  We'll end the week by showing how reformulating a problem can have a huge impact: making something which was effectively unsolvable before, now solvable!  ", "video": ["Introduction", "By the end of this week, you will be able to ...", "Core: Traveling Salesperson Problem (TSP)", "Concept Challenge: An algorithm for TSP", "Core: TSP Brute-Force Algorithm", "Core: TSP Algorithm Running Time", "Core: NP Hard", "Core: Approximations and Heuristics", "Core: Hamiltonian Graphs", "Core: Eulerian graphs", "Core: Eulerian graphs, an algorithm", "Core: An application in bioinformatics", "Week 5: Additional Resources", "End of Week Quiz Answers", "End of Week Quiz"], "title": "Route planning and NP-hard graph problems"}, {"description": "You made it to the last week of our course!  We're glad you're still with us.  As a reward, there's no new content to learn this week.  Instead you'll get the opportunity to extend your project in a direction of your own choosing.  We hope you've got some neat ideas for personalizing your map application, and we look forward to seeing them in the peer review gallery.  Submitting to the peer review gallery is optional (though the extension is required), but we hope you'll choose to participate.  ", "video": ["Week 6 Introduction", "Project: Week 6 Description -- REQUIRED EXTENSION", "Project Extension Feedback", "End of course message", "Week 6 Project Quiz (Complete your project extension first)"], "title": "End of Course Project Extension"}]}, {"course_info": "About this course: Learn the general concepts of data mining along with basic methodologies and applications. Then dive into one subfield in data mining: pattern discovery. Learn in-depth concepts, methods, and applications of pattern discovery in data mining. We will also introduce methods for data-driven phrase mining and some interesting applications of pattern discovery. This course provides you the opportunity to learn skills and content to practice and engage in scalable pattern discovery methods on massive transactional data, discuss pattern evaluation measures, and study methods for mining diverse kinds of patterns, sequential patterns, and sub-graph patterns.", "title": "Pattern Discovery in Data Mining", "rating": "4.2", "level": null, "created_by": "University of Illinois at Urbana-Champaign", "package_name": "Data Mining  Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Jiawei Han", "department": "Department of Computer Science"}], "week_data": [{"description": "The course orientation will get you familiar with the course, your instructor, your classmates, and our learning environment.", "video": ["Course Introduction", "Syllabus", "About the Discussion Forums", "Getting to Know Your Classmates", "Social Media", "Orientation Quiz"], "title": "Course Orientation"}, {"description": "Module 1 consists of two lessons. Lesson 1 covers the general concepts of pattern discovery. This includes the basic concepts of frequent patterns, closed patterns, max-patterns, and association rules. Lesson 2 covers three major approaches for mining frequent patterns. We will learn the downward closure (or Apriori) property of frequent patterns and three major categories of methods for mining frequent patterns: the Apriori algorithm, the method that explores vertical data format, and the pattern-growth approach.  We will also discuss how to directly mine the set of closed patterns.", "video": ["Lesson 1 Overview", "1.1. What Is Pattern Discovery? Why Is It Important?", "1.2. Frequent Patterns and Association Rules", "1.3. Compressed Representation: Closed Patterns and Max-Patterns", "Lesson 2 Overview", "2.1. The Downward Closure Property of Frequent Patterns", "2.2. The Apriori Algorithm", "2.3. Extensions or Improvements of Apriori", "2.4. Mining Frequent Patterns by Exploring Vertical Data Format", "2.5. FPGrowth: A Pattern Growth Approach", "2.6. Mining Closed Patterns", "Lesson 1 Quiz", "Lesson 2 Quiz", "Frequent Itemset Mining Using Apriori"], "title": "Module 1"}, {"description": "Module 2 covers two lessons: Lessons 3 and 4.  In Lesson 3, we discuss pattern evaluation and learn what kind of interesting measures should be used in pattern analysis. We show that the support-confidence framework is inadequate for pattern evaluation, and even the popularly used lift and chi-square measures may not be good under certain situations. We introduce the concept of null-invariance and introduce a new null-invariant measure for pattern evaluation. In Lesson 4, we examine the issues on mining a diverse spectrum of patterns. We learn the concepts of and mining methods for multiple-level associations, multi-dimensional associations, quantitative associations, negative correlations, compressed patterns, and redundancy-aware patterns.", "video": ["Lesson 3 Overview", "3.1. Limitation of the Support-Confidence Framework", "3.2. Interestingness Measures: Lift and χ2", "3.3. Null Invariance Measures", "3.4. Comparison of Null-Invariant Measures", "Lesson 4 Overview", "4.1. Mining Multi-Level Associations", "4.2. Mining Multi-Dimensional Associations", "4.3. Mining Quantitative Associations", "4.4. Mining Negative Correlations", "4.5. Mining Compressed Patterns", "Lesson 3 Quiz", "Lesson 4 Quiz"], "title": "Module 2"}, {"description": "Module 3 consists of two lessons: Lessons 5 and 6.   In Lesson 5, we discuss mining sequential patterns.   We will learn several popular and efficient sequential pattern mining methods, including an Apriori-based sequential pattern mining method, GSP; a vertical data format-based sequential pattern method, SPADE; and a pattern-growth-based sequential pattern mining method, PrefixSpan. We will also learn how to directly mine closed sequential patterns. In Lesson 6, we will study concepts and methods for mining spatiotemporal and trajectory patterns as one kind of pattern mining applications. We will introduce a few popular kinds of patterns and their mining methods, including mining spatial associations, mining spatial colocation patterns, mining and aggregating patterns over multiple trajectories, mining semantics-rich movement patterns, and mining periodic movement patterns.", "video": ["Lesson 5 Overview", "5.1. Sequential Pattern and Sequential Pattern Mining", "5.2. GSP: Apriori-Based Sequential Pattern Mining", "5.3. SPADE—Sequential Pattern Mining in Vertical Data Format", "5.4. PrefixSpan—Sequential Pattern Mining by Pattern-Growth", "5.5. CloSpan—Mining Closed Sequential Patterns", "Lesson 6 Overview", "6.1. Mining Spatial Associations", "6.2. Mining Spatial Colocation Patterns", "6.3. Mining and Aggregating Patterns over Multiple Trajectories", "6.4. Mining Semantics-Rich Movement Patterns", "6.5. Mining Periodic Movement Patterns", "Lesson 5 Quiz", "Lesson 6 Quiz"], "title": "Module 3"}, {"description": "Module 4 consists of two lessons: Lessons 7 and 8.   In Lesson 7, we study mining quality phrases from text data as the second kind of pattern mining application. We will mainly introduce two newer methods for phrase mining: ToPMine and SegPhrase, and show frequent pattern mining may be an important role for mining quality phrases in massive text data. In Lesson 8, we will learn several advanced topics on pattern discovery, including mining frequent patterns in data streams, pattern discovery for software bug mining, pattern discovery for image analysis, and pattern discovery and society: privacy-preserving pattern mining.  Finally, we look forward to the future of pattern mining research and application exploration.", "video": ["Lesson 7 Overview", "7.1. From Frequent Pattern Mining to Phrase Mining", "7.2. Previous Phrase Mining Methods", "7.3. ToPMine: Phrase Mining without Training Data", "7.4. SegPhrase: Phrase Mining with Tiny Training Sets", "Mining Contiguous Sequential Patterns in Text", "Lesson 8 Overview", "8.1. Frequent Pattern Mining in Data Streams", "8.2. Pattern Discovery for Software Bug Mining", "8.3. Pattern Discovery for Image Analysis", "8.4. Advanced Topics on Pattern Discovery: Pattern Mining and Society—Privacy Issue", "8.5. Advanced Topics on Pattern Discovery: Looking Forward", "Lesson 7 Quiz", "Lesson 8 Quiz"], "title": "Week 4"}]}, {"course_info": "About this course: [As described below, this is Part B of a 3-part course.  Participants should complete Part A first -- Part B \"dives right in\" and refers often to material from Part A.]\n\nThis course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones.\n\nThis course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.\n\nThe course assumes some prior experience with programming, as described in more detail in the first module of Part A.  Part B assumes successful completion of Part A.\n\nThe course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  \n\nWeek 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.", "title": "Programming Languages, Part B", "rating": "4.9", "level": "Intermediate", "created_by": "University of Washington", "package_name": null, "target_audience": "Who is this class for: The course assumes students are familiar with programming covered by most introductory courses, but it is explicitly designed not to be a particularly advanced course. Students should be comfortable with variables, conditionals, arrays, linked lists, stacks, and recursion (though recursion will be reviewed and expanded upon), and the difference between an interface and an implementation. Students should be eager to write programs in languages new to them. Part C of the course analyzes basic object-oriented concepts and contrast them with those of other languages, so familiarity with Java or a closely related language (e.g., C#) might be helpful for Part C, but it is not necessary for the assignments.\n\nThis course is based on a course designed for second- and third-year undergraduates: not a first computer science course, but not an advanced course either. So it certainly will not cover everything in the beautiful world of programming languages, but it is a solid introduction.  It is designed to be eye-opening and fascinating both for learners seeking a \"third or fourth programming course\" and for learners with more experience who are looking for a clear and precise foundation in programming languages.\n\nThe assignments in the course are designed to be challenging, but with everything you need in the course content.\n\nAn introductory video and another reading discuss assumed background in some more detail in Week 1 of Part A of the course.", "package_num": null, "teach_by": [{"name": "Dan  Grossman", "department": "Computer Science & Engineering"}], "week_data": [{"description": "Welcome! Start here!  Learn about this course and how it's organized. ", "video": ["Start Here!", "Welcome to Part B", "Overview of Part B Concepts", "Part B Course Structure", "Part B Software Installation and Use: Racket and DrRacket"], "title": "Introduction, Course-Wide Information, and Software Installation (Start Here)"}, {"description": "Let's get started programming with Racket and then learning idioms related to delaying evaluation.  The welcome message has a few additional comments about picking up a new language and how to approach the homework assignment, so let's get started...", "video": ["Section 5 Welcome Message", "Section 5 Reading Notes", "Code Files for All Section 5 Videos", "Introduction to Racket", "Racket Definitions, Functions, Conditionals", "Racket Lists", "Syntax and Parentheses", "Parentheses Matter! (Debugging Practice)", "Dynamic Typing", "Cond", "Local Bindings", "Toplevel Bindings", "Mutation with set!", "The Truth About Cons", "mcons For Mutable Pairs", "Delayed Evaluation and Thunks", "Avoiding Unnecessary Computations", "Delay and Force", "Using Streams", "Defining Streams", "Memoization", "Macros: The Key Points", "Optional:  Tokenization, Parenthesization, and Scope", "Optional: Racket Macros With define-syntax", "Optional: Variables, Macros, and Hygiene", "Optional: More Macro Examples", "Homework 4 Detailed Guidelines for Peer Assessment", "Notes and Tips for Section 5", "Extra Practice Problems", "Homework 4 (Auto-Grader)", "Homework 4"], "title": "Section 5 and Homework 4 (First Module with Racket)"}, {"description": "Welcome to the second week of Part B where we will focus on (a) building data structures in dynamically typed languages and (b) implementing programming languages with interpreters.  Most of the programming assignment is focused on (b) -- implementing a small programming language that has function closures.  As usual, start with the welcome message and enjoy!", "video": ["Section 6 Welcome Message", "Section 6 Reading Notes", "Code Files for All Section 6 Videos", "Datatype-Programming in Racket Without Structs", "Datatype-Programming in Racket With Structs", "Advantages of Structs", "Implementing Programming Languages", "What Your Interpreter Can and Cannot Assume", "Implementing Variables and Environments", "Implementing Closures", "Optional: Are Closures Efficient?", "Racket Functions As “Macros”  For Interpreted Language", "Homework 5 Detailed Guidelines for Peer Assessment", "Notes and Tips for Section 6", "Extra Practice Problems", "Homework 5 (Auto-Grader)", "Homework 5"], "title": "Section 6 and Homework 5 (Second Module with Racket)"}, {"description": "In the last module of Part B we will use our experience programming in ML and Racket to \ncompare and contrast static typing and dynamic typing.  This is not only the most important difference between these two languages, but it is a fundamental topic in the study of programming languages.  Learning it can help you program more effectively in both kinds of languages.  After completing this week's quiz, don't forget to watch the Part B Wrap-Up and Part C Preview video.", "video": ["Section 7 Welcome Message", "Section 7 Reading Notes", "Code Files for All Section 7 Videos", "ML Versus Racket", "What is Static Checking?", "Soundness and Completeness", "Weak Typing", "Static Versus Dynamic Typing, Part One", "Static Versus Dynamic Typing, Part Two", "Optional: eval and quote", "Quiz Instructions", "Nothing (yet) (explanation)", "Part B Wrap-Up and Part C Preview", "Section 7 Quiz"], "title": "Section 7 Including a Quiz"}]}, {"course_info": "About this course: This course covers the techniques required to break down and map requirements into plans that will ultimately drive software production.\n\nUpon successful completion of this course, you will be able to:\n\n - Create effective plans for software development\n - Map user requirements to developer tasks\n - Assess and plan for project risks\n - Apply velocity-driven planning techniques\n - Generate work estimates for software products", "title": "Agile Planning for Software Products", "rating": "4.7", "level": null, "created_by": "University of Alberta", "package_name": "Software Product Management Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "Welcome to the first module! In this module, you will be learning some basic principles that you will need for effective planning. You will start this module off with an introduction to planning. You will then learn about how planning, and the approach you take to planning, can reduce uncertainty in your project. We will then move onto learning how to breakdown a project into small, manageable pieces, and how to organize those pieces. Finally, we will go over the differences between estimates, targets, and commitments. Together, these lessons will build a good base for learning planning techniques at both the release and iteration level. \n", "video": ["Specialization Preview", "Meet your presenters: Morgan Patzelt", "Meet your presenters: Bradley Poulette", "Meet Your Facilitator – Christopher Djuric", "Introduction to Agile Planning for Software Products", "Course Resources: Agile Planning for Software Products", "Course Map: Agile Planning for Software Products", "4.1.1: Introduction To Planning", "4.1.1A: Introduction To Planning", "4.1.2: Uncertainty Space", "4.1.3: Work Breakdown Structure", "4.1.4: Estimates, Targets, and Commitments", "Module 1: Supplemental Resources", "Peer Review Assignment: Work Breakdown Structure (Graded)", "Module 1: Assessment (Graded)"], "title": "Module 1: Introduction to Planning"}, {"description": "Welcome to module 2! Now that you’ve gotten your feet wet with general principles in project planning, let’s talk about some specific ways that you can use to implement those techniques. We’ll first discuss the concepts of story points and velocity, then move into how time boxing can be used to improve your project efficiency. We’ll then introduce the Gantt chart, a basic tried and true method of visualizing project tasks. We’ll finish off with techniques for planning your project at a release level, which will set the stage for iteration planning in the next module.\n", "video": ["4.2.1: Story Points", "4.2.1A: Story Points", "Discussion: User Story Points", "4.2.2: Velocity Estimates", "Discussion: Velocity", "4.2.3: Time Boxing", "4.2.4: Gantt Charts", "4.2.5: Release Plans", "Release Planning Tips", "Module 2: Supplemental Resources", "Peer Review Assignment: Release Planning (Graded)", "Module 2: Assessment (Graded)"], "title": "Module 2: Project Planning"}, {"description": "This module will be focusing on planning techniques at the iteration or sprint level. You will start by looking at various techniques for estimating task time. You will then look at task dependencies in more detail. This will come in handy when you learn two visual planning charts--the Critical Path Method chart, and the PERT chart. Finally, you will learn the process for creating an iteration plan. By the end of this module, you will have the tools you need to plan sprints or iterations for development. ", "video": ["4.3.1: Estimating Task Time", "4.3.1A: Estimating Task Time", "Worksheet and Discussion: Calculating Task Time", "4.3.2: Task Dependencies", "4.3.3: CPM Chart", "4.3.4: PERT Chart", "4.3.5: Iteration Planning", "Module 3: Supplemental Resources", "Peer Review Assignment: CPM Chart (Graded)", "Module 3: Assessment (Graded)"], "title": "Module 3: Iteration Planning"}, {"description": "You’ve made it to the last module, congratulations! Here, we’re going to talk about what can cause projects to fail. We’ll start off by discussing common causes of failures, including anti-patterns. Then, you’ll learn how to assess risks, looking at their likelihood and potential impact on the project. We’ll end on an optimistic note by leaving you with strategies for intervening when risks present themselves and avoiding those risks to begin with.\n", "video": ["4.4.1: Anti-Patterns", "4.4.1A: Anti-Patterns - Team", "4.4.1B: Anti-Patterns - Development", "4.4.1C: Anti-Patterns - Management", "4.4.1D: Anti-Patterns - Individual Developers", "4.4.2: Common Causes of Failure", "4.4.3: Risk Assessment, Likelihood, and Impact", "4.4.4: Risk Strategies, Contingency, Mitigation", "Discussion: Product Management Techniques", "Module 4: Supplemental Resources", "Acknowledgements", "Module 4: Assessment (Graded)", "Course Final Assessment (Graded)"], "title": "Module 4: Risk Planning"}]}, {"course_info": "About this course: Typically, clients and managers don't want to pay for design (or strategy) -- they want ‘results’! Too often, this leads to solutions that just don’t make sense and aren’t valuable to anyone. \n \nDesign sprints allow you to meet client's desire for quick, specific outcomes while making time to do things right. In this course, you’ll learn how to plan and run situation-appropriate sprints to avoid waste and deliver value sooner. \n \nWe'll show you how to: \n- Plan, sell, and conduct design sprints that deliver valuable, actionable insights\n- Go out and learn who your customer really is and what’s important to them\n- Test your value propositions before you invest in building solutions\n- Test your user interface design to make sure it’s really usable\n- Focus and drive to actionable conclusions on questions of approach and architecture\n\nAs a  Project Management Institute (PMI®) Registered Education Provider, the University of Virginia Darden School of Business has been approved by PMI to issue 25 professional development units (PDUs) for this course, which focuses on core competencies recognized by PMI. (Provider #2122) \n\nThis course is supported by the Batten Institute at UVA’s Darden School of Business. The Batten Institute’s mission is to improve the world through entrepreneurship and innovation: www.batteninstitute.org.\n\nPrerequisites: Getting Started: Agile Meets Design Thinking or familiarity with agile and design thinking methodologies.", "title": "Running Product Design Sprints", "rating": "4.6", "level": "Intermediate", "created_by": "University of Virginia", "package_name": "Agile Development Specialization ", "target_audience": "Who is this class for: This is course is designed for software engineers, product managers, designers, and others who are learning about how to expand their practice of agile to drive applied innovation using techniques like design thinking, Lean Startup, and lean UX.", "package_num": "2", "teach_by": [{"name": "Alex Cowan", "department": "Darden School of Business"}], "week_data": [{"description": "The role of the design sprint is to make (just enough) room to discover what will be valuable to your user before you start spending a lot of money to build a product. Given the failure rate of new products, this is a critical process--and surprisingly hard to sell to clients and managers. In this module, you'll learn how to plan and run effective design sprints that allow you the space to discover and still keep your team on track. By staying focused on outcomes in a defined time frame, you'll  prove the value of design sprints to clients and managers.", "video": ["Course Overview & Requirements", "Get to Know Your Classmates in Discussion Forums", "Drive to Value with Agile Methods", "The Design Sprint: What and Why?", "The Design Sprint: When and Who?", "Deciding Which Sprint to Do", "Selling Design Sprints", "What's your experience with design sprints?", "Design Sprint Checklist", "Time Boxing", "Creating a Day by Day Plan", "Overview: Problem Scenario Sprint", "Overview: Motivation Sprint", "Overview: Usability Sprint", "Your Next Design Sprint"], "title": "Your Next Design Sprint"}, {"description": "Even if we deliver the perfectly built solution (on time, on budget, beautifully designed), if it solves a problem that doesn’t exist, we've failed. You can avoid poor outcomes with a very moderate time commitment. In this module, you’ll learn how to plan and manage a one-week design sprint to find out what really matters to your customer (or user). ", "video": ["Getting People to Interview", "Setting Up Interviews", "Talking with Users", "Preparing for Problem Scenario Sprints", "Interview Tips", "Running Day 1 of the Problem Scenario Sprint", "Running Days 2-4 of the Problem Scenario Sprint", "Running Day 4 of the Problem Scenario Sprint", "Running Day 5 of the Problem Scenario Sprint", "Preparation for Week 5's Assignment--Persona & Problem Scenario Sprint", "Testing Problem Scenarios in Design Sprints"], "title": "Testing Problem Scenarios in Design Sprints"}, {"description": "None of us want to waste our time creating something no one wants, and yet just asking people what they want doesn't yield accurate results. Instead, you need to systematically assess user motivation so you can zero in on software implementations worth building. In this module, you'll learn to test user motivation with Lean Startup in a design sprint. You'll define key assumptions/hypotheses and brainstorm test vehicles for your peer-reviewed assignment. Plan to spend time reviewing your peers' assignments as well--it's a great way to learn and helps everyone get feedback quickly.", "video": ["Lean Startup and the Systematic Drive to Value", "Focusing Your Ideas", "Unpacking Your Assumption: AIDAOR", "Learning What's Valuable", "Business to Consumers Case Studies, Part 1", "Business to Consumers Case Studies, Part 2", "Business to Business Case Studies", "Structuring Experiments", "Preparing for Motivation Sprints", "Recommendations by Type of Project", "Experiment Vehicles", "Running Day 1 of the Motivation Sprint", "Running Days 2-4 of the Motivation Sprint", "Running Day 5 of the Motivation Sprint", "How to Do the Peer Review Assignment", "Testing Motivation in Design Sprints", "Testable Assumptions & Test Vehicles"], "title": "Testing Motivation in Design Sprints"}, {"description": "The paradox of good usability is that while it's simple for the user, getting to that level of simplicity is somewhat complex. In this module, you'll learn how to focus your usability objectives, identify interface patterns, and test alternative interface patterns- all without having to develop software. Naturally, we'll encapsulate this in a nice, tidy 1-week design sprint. ", "video": ["The Inexact Science of Interface Design﻿", "Usability with Donald Norman: Vocabulary", "Usability with Donald Norman's 7 Steps Model", "Map Your Experience", "The Importance of Comparables and Prototyping", "Demo: Setting up Balsamiq", "Fun and Affordable User Testing", "A Test Plan Anyone Can Use, Part 1", "A Test Plan Anyone Can Use, Part 2", "Preparing for Usability Sprints", "Demo: Using Mouseflow", "Resources to Run Usability Sprints", "Running Day 1 of the Usability Sprint", "Running Days 2 and 3 of the Usability Sprint", "Running Day 4 of the Usability Sprint", "Running Day 5 of the Usability Sprint", "Preparation for Week 5's Assignment--Usability Sprints", "Testing Usability in Design Sprints"], "title": "Testing Usability in Design Sprints"}, {"description": "In software design, you have a lot of choices about what tools to use. Making the right choice is important because, in practice, there often aren’t that many really great alternatives. In this module, you’ll learn how to manage toward smart decisions and good choices. You'll also complete a peer-reviewed assignment to help you think through how to run each sprint and to determine which sprint to run next. Remember to review your peers' assignments promptly so they can earn their course certificate!", "video": ["Good Focus, Good Choices", "The Model-View-Controller Framework", "Using the M-V-C Framework", "Preparing for Architecture Sprints", "Final Thoughts"], "title": "Testing Approach and Architecture in Design Sprints"}]}, {"course_info": "About this course: 本课程主要介绍高级语言程序中的数据类型及其运算、语句和过程调用等是如何在计算机系统中实现的。主要包含三个主题：（1）表示。不同数据类型（如带符号整数、无符号整数、浮点数、数组、结构等）数据在寄存器或存储器中的表示和存储；指令的格式、编码及其在存储器中的存储；存储地址（指针）的表示。（2）转换。高级语言程序中的过程（函数调用）、循环、选择等语句与机器级代码之间的对应关系。（3）链接。多个可重定位目标文件如何链接生成可执行目标文件并加载到系统中。\n通过本课程的学习，使学习者能从程序员角度认识计算机系统，能够建立高级语言程序、ISA、OS、编译器、链接器等之间的相互关联，对指令在硬件上的执行过程和指令的底层硬件执行机制有一定的认识和理解，从而增强在程序调试、性能提升、程序移植和健壮性等方面的能力，并为后续的“计算机组成与设计”、“操作系统”、“编译原理”、“计算机体系结构”等课程打下坚实基础。\n学完本课程后，学习者将对以下问题有比较深刻的认识，并能解决相关实际问题。\n----程序中处理的数据在机器中如何表示和运算？\n----程序中各类控制语句对应的机器级代码结构是怎样的？ \n----多个程序模块是如何链接起来形成可执行目标文件的？\n----机器级代码及构成机器级代码的指令是如何在机器上执行的？", "title": "计算机系统基础（一） ：程序的表示、转换与链接", "rating": "4.7", "level": null, "created_by": "Nanjing University", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "袁春风", "department": "计算机科学与技术系"}], "week_data": [{"description": "首先，通过介绍C语言程序的具体实例，来说明高级语言程序的执行结果与编程语言之外的计算机系统其他方面有关，从而使学生明白为何要学习“计算机系统基础”课程；然后，介绍计算机系统基本组成与基本功能、程序开发和执行过程、计算机系统层次结构等概述性内容；最后，简要说明本课程的主要学习内容。", "video": ["W1-1 C语言程序举例 ", "W1-2-1 冯•诺依曼结构主要思想 ", "W1-2-2 现代计算机结构模型及工作原理 ", "W1-3-1 从机器语言到高级编程语言 ", "W1-3-2 程序的开发和执行及其支撑环境 ", "W1-4-1 编程语言和计算机系统层次 ", "W1-4-2 现代计算机系统的层次结构 ", "W1-5 本课程的主要学习内容", "第1周 计算机系统概述", "第1周 计算机系统概述"], "title": "WEEK1"}, {"description": "首先，介绍进位计数制和编码的基本概念；然后，介绍定点数的编码表示，在此基础上介绍带符号整数和无符号整数的表示；接着，介绍浮点数的编码表示，主要包括IEEE 754单精度和双精度浮点格式标准；随后介绍逻辑值、西文字符和汉字等非数值数据的编码表示；最后，介绍数据的宽度和存储。", "video": ["W2-1-1 10进制数和2进制数 ", "W2-1-2 2,8,10,16进制数之间的转换 ", "W2-2-1 原码和移码表示 ", "W2-2-2 模运算系统和补码表示 ", "W2-2-3 补码和真值的对应关系 ", "W2-3-1 无符号整数和带符号整数 ", "W2-3-2 C语言程序中整数举例 ", "W2-4-1 浮点数的表示范围 ", "W2-4-2 IEEE 754中规格化数的表示 ", "W2-4-3 IEEE 754中特殊数的表示 ", "W2-5 非数值数据的编码表示 ", "W2-6 数据宽度和存储容量的单位 ", "W2-7 数据存储时的字节排列 ", "第2周 数据的表示和存储", "第2周 数据的表示和存储"], "title": "WEEK2"}, {"description": "首先，介绍布尔代数和数字逻辑电路的基础性内容；然后，介绍C语言中的按位运算以及逻辑运算；接着，介绍高级语言中的整数加减运算及其对应的底层实现电路。", "video": ["W3-1-1 布尔代数和基本逻辑电路 ", "W3-1-2 无符号数加法器 ", "W3-1-3 整数加, 减运算器和ALU ", "W3-2 从C表达式到逻辑电路 ", "W3-3 C语言中的各类运算 ", "W3-4-1 加减运算生成的标志信息 ", "W3-4-2 加减运算溢出公式及举例 ", "第3周 运算电路基础", "第3周 运算电路基础"], "title": "WEEK3"}, {"description": "基于运算电路基础，介绍高级语言中的整数乘除运算与底层实现之间的关系；然后介绍浮点数的运算，特别是浮点运算中的精度问题。", "video": ["W4-1 整数乘法运算 ", "W4-2 整数除法运算 ", "W4-3-1 浮点加减运算 ", "W4-3-2 浮点运算的精度 ", "W4-3-3 浮点运算精度举例 ", "第4周 乘除运算及浮点数运算", "第4周 乘除运算及浮点数运算"], "title": "WEEK4"}, {"description": "首先，介绍高级语言程序与机器级代码之间的关系，以及机器级代码与指令集体系结构（ISA）的关系；然后，介绍IA-32指令系统的概述性内容，包括寄存器组织、寻址方式和指令格式等。", "video": ["W5-1-1 程序和指令的关系 ", "W5-1-2 目标代码和ISA ", "W5-2-1 Intel处理器概述 ", "W5-2-2 IA-32的寄存器组织 ", "W5-2-3 IA-32的寻址方式 ", "W5-2-4 高级语言程序中寻址举例 ", "W5-2-5 IA-32机器指令格式 ", "第5周 IA-32指令系统概述", "第5周 IA-32指令系统概述"], "title": "WEEK5"}, {"description": "主要介绍IA-32指令系统中常用的几类指令，包括传送、定点算术运算、按位运算、控制转移、x87浮点运算指令，最后简要介绍了MMX及SSE指令集。", "video": ["W6-1-1 常用传送指令 ", "W6-1-2 传送指令执行过程 ", "W6-2-1 常用定点运算指令 ", "W6-2-2 加法运算的底层实现举例 ", "W6-2-3 加法指令和乘法指令举例 ", "W6-3-1 逻辑运算和移位指令 ", "W6-3-2 按位运算指令举例 ", "W6-4-1 条件转移指令举例 ", "W6-4-2 条件设置指令举例 ", "W6-5-1 x87 FPU常用指令 ", "W6-5-2 x87浮点处理指令举例 ", "W6-6 MMX及SSE指令集 ", "第6周 IA-32指令类型", "第6周 IA-32指令类型"], "title": "WEEK6"}, {"description": "主要介绍C语言程序中各类语句被转换为机器级代码后的机器级表示，包括过程（函数）调用的机器级表示、选择和循环语句的机器级表示。", "video": ["W7-1-1 过程调用概述 ", "W7-1-2 过程（函数）的机器级代码结构 ", "W7-1-3 过程调用的参数传递 ", "W7-1-4 过程调用举例 ", "W7-1-5 递归过程调用举例 ", "W7-1-6 过程调用举例", "W7-2 选择结构的机器级表示 ", "W7-3 循环结构的机器级表示 ", "第7周 C语言语句的机器级表示", "第7周 C语言语句的机器级表示"], "title": "WEEK7"}, {"description": "主要介绍C语言程序中数组和指针类型的分配和访问、结构和联合数据类型的分配和访问、数据的对齐存放。最后介绍越界访问和缓冲区溢出攻击。", "video": ["W8-1-1 数组的分配与访问 ", "W8-1-2 数组与指针的关系 ", "W8-1-3 指针数组和多维数组 ", "W8-2-1 结构类型的分配和访问 ", "W8-2-2 联合类型的分配和访问 ", "W8-3-1 数据的对齐方式 ", "W8-3-2 数据对齐方式举例", "W8-4 越界访问和缓冲区溢出攻击", "第8周 复杂数据类型的机器级表示", "第8周 复杂数据类型的机器级表示"], "title": "WEEK8"}, {"description": "首先，介绍了x86-64指令系统的概述性内容；然后，介绍了与IA-32指令不同的几种x86-64基本指令；最后，介绍了x86-64中过程（函数）调用的具体的实现。", "video": ["W9-1-1 x86-64指令系统概述1", "W9-1-2 x86-64指令系统概述2", "W9-2-1传送指令", "W9-2-2 算术逻辑运算指令", "W9-2-3 x86-64逆向工程举例 ", "W9-3-1 x86-64过程调用的参数传递方式", "W9-3-2 x86-64过程调用举例", "W9-3-3 IA-32和x86-64的比较举例", "第9周 x86-64指令系统", "第9周 x86-64指令系统"], "title": "WEEK9"}, {"description": "首先，介绍了在生成可执行文件的过程中所涉及到的概述性内容；然后，介绍了目标文件格式的基本内容；最后，分别介绍ELF文件格式中的可重定位文件格式（链接视图）和可执行文件格式（执行视图）。", "video": ["W10-1-1 可执行文件生成过程概述", "W10-1-2 链接器的由来", "W10-2-1 链接过程的本质", "W10-2-2 目标文件的两种视图", "W10-3-1 可重定位文件概述 ", "W10-3-2 ELF头和节头表", "W10-4-1 可执行文件概述", "W10-4-2 程序头表和存储器映像", "第10周 链接概述和目标文件格式", "第10周 链接概述和目标文件格式"], "title": "WEEK10"}, {"description": "主要内容包括符号的概念、符号表的结构、静态库和静态链接、符号解析。", "video": ["W11-1-1 符号和符号表的基本概念", "W11-1-2 全局符号的强弱特性", "W11-1-3 多重符号定义举例", "W11-2-1 静态共享库的创建", "W11-2-2 符号解析过程", "W11-2-3 链接顺序问题", "第11周 符号及符号解析", "第11周 符号及符号解析"], "title": "WEEK11"}, {"description": "主要内容包括符号的重定位、可执行文件的加载、共享库和动态链接以及位置无关代码（PIC）。", "video": ["W12-1-1 重定位的基本概念", "W12-1-2 PC相对地址重定位", "W12-1-3 绝对地址重定位", "W12-1-4 符号重定位举例", "W12-2 可执行文件的加载", "W12-3-1 共享库和动态链接概述", "W12-3-2 模块内引用和模块间数据引用", "W12-3-3 模块间的调用或跳转", "第12周 重定位及动态链接", "第12周 重定位及动态链接", "期末考试试题"], "title": "WEEK12"}]}, {"course_info": "About this course: This course provides an unique opportunity for you to learn key components of text mining and analytics aided by the real world datasets and the text mining toolkit written in Java. Hands-on experience in core text mining techniques including text preprocessing, sentiment analysis, and topic modeling help learners be trained to be a competent data scientists. \n\nEmpowered by bringing lecture notes together with lab sessions based on the y-TextMiner toolkit developed for the class, learners will be able to develop interesting text mining applications.", "title": "Hands-on Text Mining and Analytics", "rating": "4.1", "level": "Intermediate", "created_by": "Yonsei University", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Min Song", "department": "Library & Information Technology"}], "week_data": [{"description": "", "video": ["1.1 Description of the course including the objectives and outcomes", "1.2 Explanations of the y-TextMiner package and the datasets", "1.3 How-to-do: workspace installation and setup", "1.4 How-to-use: the y-TextMiner package (download it at http://informatics.yonsei.ac.kr/yTextMiner/yTextMiner.zip)", "What is Text Mining?", "y-TextMiner installation and a simple Java program"], "title": "Course Logistics and the Text Mining Tool for the Course"}, {"description": "", "video": ["2.1 Description of possible project ideas", "2.2 What is text mining?", "2.3 Description of preprocessing techniques", "2.4 How-to-do: normalization including tokenization and lemmatization", "2.5 How-to-do: N-Grams", "Text Preprocessing", "Preprocessing Practice"], "title": "Text Preprocessing"}, {"description": "", "video": ["3.1 Description of stopword removal, stemming, and POS tagging", "3.2 Explanations of named entity recognition", "3.3 Explanations of dependency parsing", "3.4 How-to-do: stopword removal and stemming", "3.5 How-to-do: NER and POS Tagging", "3.6 How-to-do: constituency and dependency parsing", "Stemming and Lemmatization", "Named Entity Recognition", "Text Analysis Practice"], "title": "Text Analysis Techniques"}, {"description": "", "video": ["4.1 Explanations of TF*IDF", "4.2 Explanations of document classification", "4.3 Explanations of sentiment analysis", "4.4 How-to-do: computation of tf*idf weighting", "4.5 How-to-do: classification with Logistic Regression", "Text Classification", "TF-IDF", "Document Classification Practice"], "title": "Term Weighting and Document Classification"}, {"description": "", "video": ["5.1 Explanations of sentiment analysis with supervised learning", "5.2 Explanations of sentiment analysis with unsupervised learning", "5.3 Explanations of sentiment analysis with CoreNLP, LingPipe and SentiWordNet", "5.4 How-to-do: sentiment analysis with CoreNLP", "5.5 How-to-do: sentiment analysis with LingPipe", "5.6 How-to-do: sentiment analysis with SentiWordNet", "Opinion mining and sentiment analysis by Bo Pang and Lillian Lee", "Sentiment Analysis Practice"], "title": "Sentiment Analysis"}, {"description": "", "video": ["6.1 Description of Topic Modeling", "6.2 Explanations of LDA and DMR", "6.3 Description of Topic Modeling with Mallet", "6.4 How-to-do: LDA", "6.5 How-to-do: DMR", "Introduction to Probabilistic Topic Models by David Blei", "Topic Modeling Practice"], "title": "Topic Modeling"}]}, {"course_info": "About this course: You have a great idea for a game. Turning that idea into a reality isn't just about knowing the tools. In this course you will practice moving from game concept through design documentation, prototyping and testing. Numerous elements go into the overall process of game design. These range from topics such as idea generation, story, character, and game world development, game mechanics and level design, and user experience design. You will explore the process for designing meaningful experiences for your players. At the end of the course learners will have produced a game's high concept document, one page blueprint, a physical prototype, pitch and supporting design documentation to move from an idea in your head to a fleshed out design, ready for implementation.", "title": "Principles of Game Design", "rating": "4.4", "level": null, "created_by": "Michigan State University", "package_name": "Game Design and Development Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Casey O'Donnell", "department": "Media and Information"}], "week_data": [{"description": "Let's be honest, the process of game design is pretty ambiguous. It is about 90% awesome and 10% terror. As a game designer, you will create things that other people will actually (hopefully) play. Those players will have both positive and negative things to say about your game. It is important to get a sense of what the game design process looks like. In this first module of Principles of Game Design you will create a \"High Concept\" document for your game. You will develop your own game idea leveraging the \"Design | Play | Experience\" (DPE) model and work to understand your role as game designer.", "video": ["Why I LOVE Game Design", "Welcome!", "Meet Your Instructor", "Trick Questions!", "The Game Design Process", "Imagining a Game", "Exploring the DPE and MDA Frameworks", "The Role of the Game Designer", "A Game Idea is Just a Game Idea", "Ideation: A Curious Mind", "Changing the Way You Look at the World", "Ideation: Structured Brainstorming", "A Little Secret on Idea Generation", "Ideation: Another Activity...", "Documentation - High Concept & Treatment", "A High Concept Template", "The Game Design Process", "Quizzes are like lame little games...", "High Concept Document"], "title": "Getting Started with Game Design"}, {"description": "There's a significant difference between having an idea and beginning to turn that idea into something tangible. People often confuse the phrases \"flushing out\" and \"fleshing out\". Idea generation is about \"flushing out\" an idea. This module in the Principles of Game Design is focused on \"fleshing out\" your game idea or adding muscle, skin and character to the skeleton created in Module 1. You will explore game worlds of your own creation as well as the kinds of stories you would like to tell through games. By the end of this module you will have created a \"Story Bible\" for your game.", "video": ["The Game World", "World Building", "Game World Components", "Storytelling in Games", "Telling Stories with Games", "Settings and Plot in Games", "Characters in Games", "Example Documentation", "Design Documentation - The Design Document", "Template Documents", "World Building Quiz", "Story and Character Quiz", "Design Documentation Quiz", "Story Bible"], "title": "Fleshing Out a Game Design"}, {"description": "Games aren't just about ideas, stories and worlds. They are also interactive systems that players experience. What does it mean to develop gameplay or game systems? This module introduces you to the process of designing gameplay experiences and then how those components can be leveraged in the process of level design. You will explore what it means to \"balance\" a game or move from an idea to something playable by users.", "video": ["Gameplay Design", "Mechanics, Dynamics & Aesthetics", "Mechanics & Dynamics", "Level Design", "Level Design vs. Gameplay Design", "Level Components", "Tips for Level Designers", "Balancing Your Game", "Game Balance - Part 1", "Game Balance - Part 2", "Mechanic Balance", "Secrets of the Sages...", "Gameplay Design Quiz", "Level Design Quiz", "Balance Quiz", "Game Design Document"], "title": "From Idea to Implementation"}, {"description": "Prototyping is one of the most critical skills a game designer can cultivate. The ability to \"find the fun\" in gameplay design is critical to being a successful designer. In this module you will create a prototype of a game idea. This can then be put in front of players allowing you to better understand if the underlying mechanics, systems and aesthetic are something that players may find engaging. This module also encourages you, as an aspiring game designer, to ask questions about the social impact and context of your game. As a designer, it is important to think about the impact that your creativity could possibly have on the world.", "video": ["Prototyping", "On Prototyping", "Building a Prototype", "User Experience - Introduction", "User Experience & Design", "UX - Input Systems", "UIX - Output Systems", "A Player Experience Activity", "Testing - Who and When?", "Why Test?", "How to Playtest", "Tips for Playtesting", "Games and Society?!?", "Social Issues for Designers - Part 1", "Social Issues for Designers - Part 2", "Prototyping Quiz", "User Experience Quiz", "A Quiz... On Testing... That Feels Weird", "Social Issues in Games", "Digital or Non-digital Protoype"], "title": "Making Designs Better"}]}, {"course_info": "About this course: This course focuses on developing truly cross-platform, native iOS and Android apps using NativeScript (Ver 3.x). The framework uses Angular, TypeScript or modern JavaScript to get truly native UI and performance while sharing skills and code with the web. You will learn about UI development with NativeScript UI and layout support and access the native mobile platform's capabilities from Javascript. You should have already completed the Bootstrap 4 and the Angular courses in this specialization before proceeding with this course.\n\nAt the end of this course you will be able to (a) Build mobile applications targeting multiple platforms with a single codebase, (b) Leverage your Angular, TypeScript and Javascript skills, and (c) Use various features of the Ionic framework to build truly cross-platform mobile applications", "title": "Multiplatform Mobile App Development with NativeScript", "rating": "4.5", "level": "Intermediate", "created_by": "The Hong Kong University of Science and Technology", "package_name": "Full Stack Web and Multiplatform Mobile App Development Specialization ", "target_audience": "Who is this class for: This course is aimed at students with sufficient knowledge of Web technologies like HTML, CSS and JavaScript. A good working knowledge of JavaScript, especially ES 5  and the Angular framework is strongly recommended. ", "package_num": "4", "teach_by": [{"name": "Jogesh K. Muppala", "department": "Department of Computer Science and Engineering"}], "week_data": [{"description": "This module introduces you to hybrid mobile application development. You will learn about the NativeScript framework and explore some of the features of the NativeScript framework to implement a mobile app based on the Angular application that was implemented in the previous course on Angular.", "video": ["Welcome to Multiplatform Mobile App Development with Web Technologies: NativeScript", "How to Use the Learning Resources", "Welcome to Multiplatform Mobile App Development with Web Technologies: NativeScript: Additional Resources", "Full Stack Web Development: The Big Picture: Objectives and Outcomes", "What is Full-Stack Web Development?", "Full Stack Web Development: Additional Resources", "Setting up Your Development Environment: Git and Node: Objectives and Outcomes", "Setting up your Development Environment", "Exercise (Video): Setting up Git", "Exercise (Instructions): Setting up Git", "Exercise (Video): Basic Git Commands", "Exercise (Instructions): Basic Git Commands", "Exercise (Video): Online Git Repositories", "Exercise (Instructions): Online Git Repositories", "Node.js and NPM", "Exercise (Video): Setting up Node.js and NPM", "Exercise (Instructions): Setting up Node.js and NPM", "Exercise (Video): Basics of Node.js and NPM", "Exercise (Instructions): Basics of Node.js and NPM", "Setting up your Development Environment: Git and Node: Additional Resources", "Hybrid Mobile App Development: An Overview: Objectives and Outcomes", "Hybrid Mobile App Development", "Introduction to the NativeScript Framework", "Exercise (Video): Setting up the NativeScript Framework", "Exercise (Instructions): Setting up the NativeScript Framework", "Exercise (Video): Creating your First NativeScript Project", "Exercise (Instructions): Creating your First NativeScript Project", "Hybrid Mobile App Development: An Overview: Additional Resources", "Setting up a Simple Server: Objectives and Outcomes", "Exercise (Video): Setting up a Server using json-server", "Exercise (Instructions): Setting up a Server using json-server", "Setting up a Simple Server: Additional Resources", "NativeScript and Angular: Objectives and Outcomes", "NativeScript and Angular", "Exercise (Video): NativeScript and Angular", "Exercise (Instructions): NativeScript and Angular", "NativeScript Layouts", "NativeScript and Angular: Additional Resources", "NativeScript Navigation: Objectives and Outcomes", "NativeScript Navigation", "Exercise (Video): NativeScript Navigation Part 1", "Exercise (Instructions): NativeScript Navigation Part 1", "Exercise (Video): Telerik Progress NativeScript UI SideDrawer", "Exercise (Instructions): Telerik Progress NativeScript UI SideDrawer", "Exercise (Video): NativeScript Navigation Part 2", "Exercise (Instructions): NativeScript Navigation Part 2", "NativeScript Navigation: Additional Resources", "Assignment 1 Requirements (Video): Introduction to NativeScript", "Assignment 1: Introduction to NativeScript: Additional Resources", "Ideation: Objectives and Outcomes", "Ideation Report Template", "Ideation: Additional Resources", "Introduction to NativeScript", "Ideation"], "title": "Hybrid Mobile App Development Frameworks: NativeScript: An Introduction"}, {"description": "This module introduces you to various NativeScript UI elements. We will look at how we can make use of these elements in designing the various views of our application.", "video": ["Buttons and Icon Fonts: Objectives and Outcomes", "Icon Fonts and Buttons", "Exercise (Video): Icon Fonts", "Exercise (Instructions): Icon Fonts", "Exercise (Video): Buttons", "Exercise (Instructions): Buttons", "Buttons and Icon Fonts: Additional Resources", "Advanced Lists: Objectives and Outcomes", "Advanced Lists Using Telerik Progress NativeScript UI ListView", "Exercise (Video): Advanced Lists Using Telerik Progress NativeScript UI ListView", "Exercise (Instructions): Advanced Lists Using Telerik Progress NativeScript UI ListView", "Advanced Lists: Additional Resources", "Dialogs: Objectives and Outcomes", "Dialogs", "Exercise (Video): Dialogs and Toasts", "Exercise (Instructions): Dialogs and Toasts", "Dialogs and Toasts: Additional Resources", "\"Forms\" and Modals: Objectives and Outcomes", "NativeScript \"Forms\" and Modal Dialogs", "Exercise (Video): Data Entry and \"Forms\"", "Exercise (Instructions): Data Entry and \"Forms\"", "Exercise (Video): Modal Dialogs", "Exercise (Instructions): Modal Dialogs", "\"Forms\" and Modals: Additional Resources", "Assignment 2: NativeScript UI Elements", "Assignment 2: Additional Resources", "UI Design and Prototyping: Objectives and Outcomes", "UI Design and Prototyping Report Template", "UI Design and Prototyping: Additional Resources", "NativeScript UI Elements", "UI Design and Prototyping"], "title": "NativeScript UI Elements"}, {"description": "In this module we look at enhancing the user experience through the use of animations and support for gesture-based interaction. We also look at leveraging the storage for persisting data, and the customization of splash screens, icons and the use of other image resource in the app", "video": ["NativeScript Storage: Objectives and Outcomes", "Persisting Data: NativeScript Storage", "Exercise (Video): Application Settings", "Exercise (Instructions): Application Settings", "Exercise (Video): NoSQL Storage with Couchbase Lite", "Exercise (Instructions): NoSQL Storage with Couchbase Lite", "NativeScript Storage: Additional Resources", "Animations and Gestures: Objectives and Outcomes", "Animations and Gestures", "Exercise (Video): Animations and Gestures Part 1", "Exercise (Instructions): Animations and Gestures Part 1", "Exercise (Video): Animations and Gestures Part 2", "Exercise (Instructions): Animations and Gestures Part 2", "Animations and Gestures: Additional Resources", "Splash Screens, Icons and Image Resources: Objectives and Outcomes", "Splash Screens, Icons and Image Resources", "Exercise (Video): Customizing App Icons and Launch Screens for Android", "Exercise (Instructions): Customizing App Icons and Launch Screens for Android", "Exercise (Video): Customizing App Icons and Launch Screens for iOS", "Exercise (Instructions): Customizing App Icons and Launch Screens for iOS", "Exercise (Video): Image Resources", "Exercise (Instructions): Image Resources", "Splash Screens, Icons and Image Resources: Additional Resources", "Assignment 3: Animations and Storage", "Assignment 3: Additional Resources", "Assignment 3: Animations and Storage"], "title": "NativeScript Animations, Gestures, Storage and Image Resources"}, {"description": "In this module you will explore NativeScript Plugins that enable you to access the native capabilities of the mobile devices. You will use a few plugins in order to understand the general concepts and the patterns for using these plugins within your NativeScript application", "video": ["NativeScript Plugins: Objectives and Outcomes", "NativeScript Plugins", "Exercise (Video): Notifying the User", "Exercise (Instructions): Notifying the User", "NativeScript Plugins: Additional Resources", "Social Sharing: Objectives and Outcomes", "Social Sharing", "Exercise (Video): Sending Email", "Exercise (Instructions): Sending Email", "Exercise (Video): Social Sharing", "Exercise (Instructions): Social Sharing", "Social Sharing: Additional Resources", "Using the Camera: Objectives and Outcomes", "Using the Camera", "Exercise (Video): Using the Camera", "Exercise (Instructions): Using the Camera", "Using the Camera: Additional Resources", "Platform and Network Status: Objectives and Outcomes", "Platform and Network Status", "Exercise (Video): Platform and Network Status", "Exercise (Instructions): Platform and Network Status", "Platform and Network Status: Additional Resources", "Assignment 4: NativeScript Plugins", "Assignment 4: NativeScript Plugins: Additional Resources", "Conclusions", "Conclusions: Additional Resources", "Project Implementation: Objectives and Outcomes", "Final Report Template", "NativeScript Plugins", "Project Implementation and Final Report"], "title": "Accessing Native Capabilities of Devices: NativeScript Plugins"}]}, {"course_info": "About this course: This is the fourth course in the Data Warehouse for Business Intelligence specialization. Ideally, the courses should be taken in sequence.  In this course, you will gain the knowledge and skills for using data warehouses for business intelligence purposes and for working as a business intelligence developer. You’ll have the opportunity to work with large data sets in a data warehouse environment and will learn the use of MicroStrategy's Online Analytical Processing (OLAP) and Visualization capabilities to create visualizations and dashboards. \n\nThe course gives an overview of how business intelligence technologies can support decision making across any number of business sectors. These technologies have had a profound impact on corporate strategy, performance, and competitiveness and broadly encompass  decision support systems, business intelligence systems, and visual analytics. Modules are organized around the business intelligence concepts, tools, and applications, and the use of data warehouse for business reporting and online analytical processing, for creating visualizations and dashboards, and for business performance management and descriptive analytics.", "title": "Business Intelligence Concepts, Tools, and Applications", "rating": "4.4", "level": null, "created_by": "University of Colorado System", "package_name": "Data Warehousing for Business Intelligence Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Jahangir Karimi", "department": "Information Systems University of Colorado Denver"}], "week_data": [{"description": "Module 1 explains the role of computerized support for decision making and its importance. It starts by identifying the different types of decisions managers face, and the process through which they make decisions. It then focuses on decision making styles, the four stages of Simon’s decision making process, and common strategies and approaches of decision makers. In the next two lessons, you will learn the role of  Decision Support Systems (DSS), understand its main components, the various DSS types and classification, and how DSS have changed over time. Finally, in lesson 4, we focus on how DSS supports each phase of decision making and summarize the evolution of DSS applications, and on how they have changed over time.  I recommend that you go to Ready Made DSS sites and use some of DSS that are listed for various types of decisions. You will need to install MicroStrategy Desktop to analyze three stand-alone offline dashboards in a peer evaluated exercise.", "video": ["Course Introduction Video Lecture", "Optional Text Book", "Additional Resources - Course Overview", "Overview of Decision Making Video Lecture", "Powerpoint and Lecture Notes for Lesson 1.1", "Additional Resources Lesson 1.1", "Conceptual Foundations of Decision Making Video Lecture", "Powerpoint and Lecture Notes for Lesson 1.2", "Additional Resources Lesson 1.2", "Periodicals", "Decision Support Systems Video Lecture", "Powerpoint and Lecture Notes for Lesson 1.3", "Additional Resources for Lesson 1.3", "Additional Web Resources", "Vendors and Software Companies", "Decision Making Support in Practice Video Lecture", "Powerpoint and Lecture Notes for Lesson 1.4", "Additional Resources for Lesson 1.4", "Ready Made DSS Products and Services", "MicroStrategy Desktop Software Download and Installations  Steps for PC and MAC", "MicroStrategy Desktop Connections to Oracle VM on PC and MAC", "MicroStrategy Desktop Welcome Training Video", "Dashboards Demonstration Videos", "Module 1 Practice Quiz", "Q & A  and Errors Knowledge base", "Assignment for Module 1: Offline Dashboards with Advanced Visualizations"], "title": "Decision Making and Decision Support Systems"}, {"description": "Now that you understand the conceptual foundation of decision making and DSS, in module 2 we start by defining business intelligence (BI), BI architecture, and its components, and relate them to DSS.  In lesson 2, you will learn the main components of  BI platforms, their capabilities, and understand the competitive landscape of BI platforms. In lesson 3, you will learn the building blocks of business reports, the types of business reports, and the components and structure of business reporting systems . Finally in lesson 4, you will learn different types of OLAP and their applications, and comprehend the differences between OLAP and OLTP. You will need to use MicroStrategy Desktop to create effective and compelling data visualizations to analyze data and acquire insights into business practices in a peer evaluated exercise. \n", "video": ["BI Concepts Video Lecture", "Powerpoint and Lecture Notes for Lesson 2.1", "Additional Resources for Lesson 2.1", "Training Video for Connecting Data in MicroStrategy Desktop", "BI Platform Capabilities Video Lecture", "Powerpoint and Lecture Notes for Lesson 2.2", "Additional Resources for Lesson 2.2", "Training Video for Microstrategy Desktop BI Capabilities", "Business Reporting Video Lecture", "Powerpoint and Lecture Notes for Lesson 2.3", "Additional Resources for Lesson 2.3", "Training Videos for Connecting  to Spreadsheets, Joining Datasets, and Data Blending in MicroStrategy Desktop", "BI OLAP Styles Video Lecture", "Powerpoint and Lecture Notes for Lesson 2. 4", "Additional Resources for Lesson 2.4", "Training Video for Wrangling and Profiling Data in MicroStrategy", "Module 2 Practice Quiz", "Assignment for Module 2: World Wide Carbon Emissions Scenario", "Modules 1 and 2 Graded Quiz #1"], "title": "Business Intelligence Concepts and Platform Capabilities"}, {"description": "This module continues on the top job responsibilities of BI analysts by focusing on creating data visualizations and dashboards. You will first learn the importance of data visualization and different types of data that can be visually represented. You will then learn about the types of basic and composite charts. This will help you to determine which visualization is most effective to display data for a given data set, and to identify best practices for designing data visualizations. In lesson 3, you will learn the common characteristics of dashboard, the types of dashboards, and the list attributes of metrics usually included in dashboards. Finally in lesson 4, you will learn the guidelines for designing dashboard and the common pitfalls of dashboard design. You will need to use MicroStrategy  Desktop Visual Insight to design a dashboard for a Financial Services company in a peer evaluated exercise.", "video": ["Data Visualization Video Lecture", "Powerpoint and Lecture Notes for Lesson 3.1", "Additional Resources for Lesson 3.1", "Training Video for  Visual Insight in MicroStrategy Desktop", "Data Visualization Guidlines and Pitfalls Video Lecture", "Powerpoint and Lecture Notes for Lesson 3.2", "Additional Resources for Lesson 3.2", "Training Video for Exploring Data in MicroStrategy Desktop", "Comprehensive Training Video for Showing Data Visualization Steps", "Performance Dashboards Video Lecture", "Powerpoint and Lecture Notes for Lesson 3.3", "Additional Resources for Lesson 3.3", "Training Videos for Creating Dashboard in MicroStrategy Desktop", "Dashboard Design Guidelines and Pitfalls Video Lecture", "Powerpoint and Lecture Notes for Lesson 3.4", "Additional Resources for Lesson 3.4", "Training Video for Sharing a Dashboard in MicroStrategy Desktop", "Comprehensive Training Video for Creating Dashboard Using Advanced Visualization", "Module 3 Practice Quiz", "Assignment for Module 3: Design Dashboard for a Financial Service Company "], "title": "Data Visualization and Dashboard Design"}, {"description": "This module focuses on how BI is used for Business Performance Management (BPM). You will learn the main components of BPM as well as the four phases of BPM cycle and how organizations typically deploy BPM. In lesson 2, you will learn the purpose of Performance Measurement System and how organizations need to define the key performance indicators (KPIs) for their performance management system. In lesson 3, you will learn the four balanced scorecards perspectives and the differences between dashboards and scorecards. You will also be able to compare and contrast the benefits of using balanced scorecard versus using Six Sigma in a performance measurement system. Finally in lesson 4, you will learn the role of visual and business analytics (BA) in BI and how various forms of BA are supported in practice. At the end of the module, you will apply these concepts to create a dashboard, blend it with external data sets, and explore various visualization capabilities to find insights faster in a peer evaluated exercise.", "video": ["Business Performance Management Video Lecture", "Powerpoint and Lecture Notes for Lesson 4.1", "Additional Resources for Lesson 4.1", "Training Videos for Enriching and Modeling Data with MicroStrategy", "Performance Measurement System Video Lecture", "Powerpoint and Lecture Notes for Lesson 4.2", "Additional Resources for Lesson 4.2", "Training Videos for Connecting to MDX and Excel Files and Creating a Mashups in MicroStrategy Desktop", "Balanced Scorecards Versus Six Sigma Video Lecture", "Powerpoint and Lecture Notes for Lesson 4.3", "Additional Resources for Lesson 4.3", "Training Video for MicroStrategy Desktop Business Performance Analysis", "Business Analytics Video Lecture", "Powerpoint and Lecture Notes for Lesson 4.4", "Additional Resources for Lesson 4.4", "Training Video for Connecting to Social Media Sources in MicroStrategy Desktop", "Module 4 Practice Quiz", "Assignment for Module 4: Advanced Enterprise Data Discovery"], "title": " Business Performance Management Systems"}, {"description": "Module 5 covers BI maturity and strategy. You will learn different levels of BI maturity, the factors that impact BI maturity within an organization, and the main challenges and the potential solutions for a pervasive BI maturity within an organization. The last lesson will focus on the critical success factors for implementing a BI strategy, BI framework, and BI implementation targets. Finally, in your summative project, you will use MicroStrategy visual analytics capabilities to analyze KPIs for a fast food company to find the causes for problems .", "video": ["BI Maturity Video Lecture", "Powerpoint and Lecture Notes for Lesson 5.1", "Additional Resources for Lesson 5.1", "BI Strategy Video Lecture", "Powerpoint and Lecture Notes for Lesson 5.2", "Additional Resources for Lesson 5.2", "Course Closing Video", "Summative  Project: BPM For  Blazin' Burger Fast Food Restaurant", "Modules 3, 4, and 5 Graded Quiz #2"], "title": "BI Maturity, Strategy, and Summative Project"}]}, {"course_info": "About this course: Software industry is going crazy on agile methods.  It is rapidly becoming the choice for software development where requirements are unpredictable or is expected to change over time. This course will help you gain knowledge on what is agile? Why agile is better suited for these situations?  We will also cover some of the most common agile frameworks like scrum and XP in depth.  \n\nPrerequisite: You need basic knowledge of software development process and software development methodologies. \n\nAfter completing this course, you will be able to :\n1) Demonstrate the ability to participate effectively in agile practices/process for software development.  \n2) Explain the purpose behind common agile practices.\n3) Ability to apply agile principles and values to a given situation.\n4) Ability to identify and address most common problems encountered in adopting Agile methods. \n\nProject: You will also be given opportunity to apply what you learn in this course.  You will be given fictional case studies, where after studying the case study, you will have to exercise some of the practices, techniques, etc that team members of an agile team members are expected to know.", "title": "Agile Software Development", "rating": "4.1", "level": "Intermediate", "created_by": "University of Minnesota", "package_name": "Software Development Lifecycle Specialization ", "target_audience": "Who is this class for: It is designed for individuals who are new to agile software development methods or have been developing software using agile and lean methods but wants to gain deeper understanding of these methods and/or getting academic context on these methods", "package_num": "2", "teach_by": [{"name": "Praveen Mittal", "department": "College of Science and Engineering"}], "week_data": [{"description": "In this module, we will learn about agile mindset, the core behind many agile methods.  How agile methods are different than traditional methods and when to use agile methods. We will learn about how to apply agile mindset and finally review different frameworks available to implement agile.", "video": ["Welcome and Course Intro", "Course Learning Plan", "What software development looks like?", "Intro to Software Development Models", "Why Agile?", "Video: Agile Manifesto : Values", "Agile Manifesto: Principles", "Agile Manifesto Explained", "Agile Values and Principles", "Benefits and Challenges of Agile", "Agile: When to Use and When NOT to!", "Using Agile Methods", "Applying an Agile Mindset to a Project", "Agile Frameworks", "Applying an Agile Mindset", "Agile Fundamentals"], "title": "Agile Fundamentals"}, {"description": "In this module we will  learn about user stories and agile estimation and planning techniques. ", "video": ["Gathering Requirements: The agile way", "User Stories: The currency of agile development", "Characteristics of good user stories", "User Stories", "Generating User Stories", "Gathering User Needs", "Agile Estimation and Planning", "Estimation Styles and Process", "Video: Planning Poker", "Agile Estimation", "Velocity", "Release Planning", "Release Tracking", "Release Planning and Tracking", "Requirements and Planning"], "title": "Requirements and Planning"}, {"description": "In this module we will learn about Scrum which is one of the most popular agile framework.  We will learn about scrum practices and the purpose behind these practices. ", "video": ["Scrum Overview", "Scrum Overview", "Sprint Planning", "Sprint Tracking", "Sprint Planning and Tracking", "Sprint Execution and Daily Standups", "Sprint Review", "Sprint Retrospective", "Sprint Review, Retrospective and Execution", "Scrum", "Applying the Agile Mindset and Techniques"], "title": "Scrum"}, {"description": "In this module, we will compare Scrum to XP and learn about some of the engineering practices from XP. ", "video": ["XP Overview", "XP Values", "XP Practices - Part 1", "XP Practices - Part 2", "XP Process Model", "Scrum vs XP", "XP", "Story Mapping"], "title": "XP and Course Wrap-up"}]}, {"course_info": "About this course: To deliver agile outcomes, you have to do more than implement an agile process; you have to create a culture of experimentation. It's this commitment to experimenting that's at the heart of a high-functioning practice  of agile. This course shows you how to integrate the practice of experimentation across concept/feature testing, usability testing, and testing the software itself. \n\nBasically, you’ll learn how to answer these four big questions with experiments: \n1. Should we build it? \n2. Did it matter?\n3. Is it usable?\n4. Did it break?\n\nMore specifically, after completing this course, you’ll be able to: \n  - Identify where and how to invest your team’s scarce time and energy into better testing for maximum impact on outcomes\n  - Coach your team on the relationship between idea, usability, and software testing to get the buy-in you need for strong \n    interdisciplinary collaboration\n  - Test ideas before you build them to avoid waste and help your team focus on what will really drive outcomes\n  - Test alternative interface patterns before you build them to maximize both product usability and purposeful \n    implementation\n  - Understand your delivery pipeline and how to prioritize process and infrastructure improvements so you can deliver faster \n    and more often  \n\nAs a  Project Management Institute (PMI®) Registered Education Provider, the University of Virginia Darden School of Business has been approved by PMI to issue 20 professional development units (PDUs) for this course, which focuses on core competencies recognized by PMI. (Provider #2122) \n\nThis course is supported by the Batten Institute at UVA’s Darden School of Business. The Batten Institute’s mission is to improve the world through entrepreneurship and innovation: www.batteninstitute.org.", "title": "Testing with Agile", "rating": "4.4", "level": null, "created_by": "University of Virginia", "package_name": "Agile Development Specialization ", "target_audience": "Who is this class for: This course is aimed at professionals working in software and IT or interested in moving into this space.", "package_num": "4", "teach_by": [{"name": "Alex Cowan", "department": "Darden School of Business"}], "week_data": [{"description": "Nothing will help a team deliver better outcomes like making sure they’re building something the user values. This might sound simple or obvious, but I think after this module it’s likely you’ll find opportunities to help improve your team’s focus by testing ideas more definitively before you invest in developing software. In this module you’ll learn how to make concept testing an integral part of your culture of experimentation. We’ll continue to apply the Lean Startup methods you learned in Course 2 ‘Running Product Design Sprints’ (and/or you can review the tutorials in the Resources section). We’ll look at how high-functioning teams design and run situation-appropriate experiments to test ideas, and how that works before the fact (when you’re testing an idea) and after the fact (when you’re testing the value of software you’ve released). ", "video": ["Course Overview & Requirements", "Creating a Culture of Experimentation", "Meet the Companies - HVAC in a Hurry and Enable Quiz", "The Test Driven Practice of Agile Part 1", "The Test Driven Practice of Agile Part 2", "The Test Driven Practice of Agile Part 3", "Test-Driven Proposition Design", "Recap on Lean Startup & Experimentation", "Tracking Hypotheses", "Tristan Kromer on the Practice of Lean Startup", "Tristan Kromer on Getting Started with Lean", "Tristan Kromer on Creating a Culture of Experimentation", "David Bland on the Practice of Lean Startup", "David Bland on Creating a Culture of Experimentation, Part 1", "David Bland on Creating a Culture of Experimentation, Part 2", "David Bland on Marrying Agile to Lean Startup", "Laura Klein on Creating a Culture of Experimentation", "Learnings from David, Tristan, and Laura", "Five Core Experiments", "Designing Experiments", "Laura Klein on the Practice of Lean UX", "Testing Features: When and How", "Testing Features: Running the Experiment", "Testing Funnels", "Testing Cohorts", "A/B Testing", "Advanced Outcome Management: The Hook Framework", "Week 1 Quiz: Should we build it? Did it matter?"], "title": "Should we build it? Did it matter?"}, {"description": "The best products are tested for usability early and often, avoiding the destructive stress and uncertainty of a ‘big unveil’. In this module, you’ll learn how to diagnose, design and execute phase-appropriate user testing. The tools you’ll learn to use here (a test plan template, prototyping tool, and test session infrastructure) are accessible/teachable to anyone on your team. And that’s a very good thing- often products are released with poor usability because there ‘wasn’t enough time’ to test it. With these techniques, you’ll be able to test early and often, reinforcing your culture of experimentation.", "video": ["Test-Driven Product Design", "Recap on Designing for Usability", "Creating a Good Test Suite", "Creating Good Test Items", "Testing Your User Stories Part 1", "Testing Your User Stories Part 2", "Running Usability Tests", "Demo: Running a Usability Test", "Demo: Creating Interactive Prototypes in Balsamiq", "Laura Klein on Qualitative vs.Quantitative Research", "Creating Consistency", "The Importance of Comparables and Prototyping", "Common Terms: Wireframes, Mockups, Prototypes & MVPs", "Laura Klein on Lean UX in Enterprise IT", "Final Thoughts on Usability", "How will these techniques help you?", "Week 2 Quiz: Is it usable?", "Peer-reviewed Assignment: Parallel Prototyping"], "title": "Is it usable?"}, {"description": "You’ve learned how to test ideas and usability to reduce the amount of software your team needs to build and to focus its execution.Now you’re going to learn how high-functioning teams approach testing of the software itself. The practice of continuous delivery and the closely related Devops movement are changing the way we build and release software. It wasn’t that long ago where 2-3 releases a year was considered standard. Large firms like Facebook now release new code multiple times per day. In this module, we’ll look at the delivery pipeline and step through what successful practitioners do at each stage and how you can diagnose and apply the practices that will improve your implementation of agile. ", "video": ["Test-Driven Software Development", "The Team that Releases Together", "The Continuous Delivery Pipeline", "Getting Started with Continuous Delivery", "Anders Wallgren on the Advantages of Continuous Delivery", "Anders Wallgren on Getting Started", "The Commit and Small Test Phase", "Anders Wallgren on Unit Testing", "The Job of Version Control", "The Medium Test Phase", "The Large Test Phase", "Creating Large/Behavioral Tests", "Anders Wallgren on Testing UI", "Anders Wallgren on Functional Testing", "The Release Stage", "Anders Wallgren on Deployment", "Chris Kent on Developing with Continuous Delivery", "Chris Kent on Continuous Deployment", "Jim Rose on Continuous Integration and Delivery", "Test-Driven General Management", "Narrative and the \"Happy Path\"", "The Emergence of DevOps and the Ascent of Continuous Delivery", "Design for Deployability", "Anders Wallgren on Creating a Friendly Environment for Continuous Deployment", "Final Thoughts", "Week 3 Quiz: Did it break?"], "title": "Does it break?"}]}, {"course_info": "About this course: This course will begin your journey to creating Virtual Reality experiences. A Virtual Reality experience is a new world that you step into and are entirely immersed in. Creating a VR experience means creating that world and all the objects in it. \n\nIn this course you will learn the basics of 3D graphics: how we create objects and how to lay them out to create an environment. You will learn techniques like materials and texturing that make your objects appear realistic. You will also learn about audio techniques to ensure that your experiences sound great as well as looking great. In all of these topics we will pay attention to the particular requirements of Virtual Reality, including pitfalls and performance issues: making sure your environment runs fast enough in VR. \n\nYou will learn all of this using the professional game and VR engine, Unity3D. Unity is one of the most used game engine and is a relatively easy, but fully featured, introduction to 3D development. \n\nThe course will culminate in a project in which you will create your own VR scene. VR development is something you can only learn by doing it yourself, so working on your project will be the best way to learn.", "title": "3D Models for Virtual Reality", "rating": "4.7", "level": "Intermediate", "created_by": "University of London, Goldsmiths, University of London", "package_name": "Virtual Reality Specialization ", "target_audience": "Who is this class for: This class is for people who are interesting in become Virtual Reality Developers. You don't need any particular experience of development, but some experience of digital creative work (e.g. photoshop, illustrator, digital music) will be helpful. If you are completely new to VR you might want to first follow our course \"Introduction to Virtual Reality\", which covers the basic concepts. \n\nWe don't assume you have any experience of work in 3D graphics or unity. If you already have some experience, then some of the topics will be familiar to you, but we will also cover some VR specific aspects. ", "package_num": "2", "teach_by": [{"name": " Dr Sylvia Xueni Pan", "department": "Goldsmiths, University of London"}, {"name": "Dr Marco Gillies", "department": "Computing Department, Goldsmiths, University of London"}], "week_data": [{"description": "This week you will begin developing 3D Virtual Reality Environments. We will cover the basics of 3D graphics, including a number of 3D engines and development environments that you can use. We will particularly focus on the Unity3D engine. \n", "video": ["Welcome to 3D Models for Virtual Reality!", "Content Creation in VR", "Reflection on Your Skills for VR Work", "Course Blog", "What are 3D Graphics?", "Your Favourite VR Environment", "Introduction to Integrated Development Environments (IDE)", "Why Use A-Frame?", "Learning To Use A-Frame", "Open VR with Lance Putman", "Unreal Engine", "Introduction to Unity", "Learning Unity", "Choosing Game Engines", "Which Engine Will You Use?", "Setting Up Unity", "How Was Setting Up Unity?", "3D Space", "Unity User Interface", "Navigating in Unity", "Objects and Meshes", "Creating Objects in Unity | Primitives", "Unity Basics", "Creating 3D Assets", "The  Asset Store", "Importing Assets From Unity and Other Places", "Importing Assets", "Share Your Work", "VR Environment Project", "VR Project Brief", "Planning your project", "3D Graphics"], "title": "3D Graphics"}, {"description": "In this module you will carry on learning about 3D graphics, including how to use transforms to lay out a 3D scene and how to use materials to give your objects a distinctive appearance. You will also submit the first draft of your project. ", "video": ["Introduction to Week 2", "Transforms", "Compound Objects", "Positioning, Scaling, and Transforming Primitives in Unity", "Cameras in VR", "Transforms and Cameras", "Unity VR Mode | Setting Up Cameras | Standard and VR", "Setting up VR mode", "Setting up Unity for VR", "Keyframe Animation", "Keyframe Animation in Unity", "Unity Animation", "Introduction to Materials", "Lights in VR", "Lights in Unity", "Materials", "Materials in Unity", "Textures", "Textures in Unity", "Graphics in Unity", "Working on Your Project", "VR Graphics Quiz", "Content Creation Work in Progress"], "title": "VR Graphics"}, {"description": "In this week you will learn about using sound in Virtual Reality and how you can use advanced 3D Audio techniques to enhance your experience. ", "video": ["Introduction to Audio in VR", "What is Sound?", "How Do Humans Perceive Sound?", "What is Digital Audio?", "How is Sound Useful?", "Examples of the Use of Sound", "How Do We Use Sound in VR?", "General Guidance for Using Sound", "How Do We Use Filters in VR?", "Using Audio in your Project", "Audio Formats, Sources and Listeners in Unity", "Audio Effects in Unity", "Unity Audio Clips and Files", "Audio Mixers in Unity", "Audio in Unity | Additional Resources", "Learning More About Audio in Unity", "Now It's Your Turn!", "Summary", "Audio and Revision Quiz"], "title": "VR Audio"}, {"description": "In this final week of the course, we will put together everything we have learned to think about how to create compelling VR worlds. We will start by looking behind the scenes at how 3D graphics hardware works and why VR can be so demanding of computing power. Then we will think about the particular requirements of content creation for VR. You will finish by submitting the final version of your project for a peer review. ", "video": ["Introduction to Week 4", "Polygons to Pixels", "Motion to Photon", "Global Illumination", "Unity Shaders", "What Works in VR?", "Why Do We Need Different Graphics Techniques for VR?", "Techniques for Optimising a VR Experience", "How is VR Content Creation Different?", "How is VR Content Creation Different?", "Further Learning", "Further Learning in Unity", "Unity Resources", "Unity Examples", "Share a Useful Resource", "Learning VR Content Creation", "Summary| Creating VR Worlds", "Project Advice", "Final Project Requirements", "Thank you", "Creating VR Environments Project "], "title": "Content Creation: What works in VR?"}]}, {"course_info": "About this course: In this course you will learn and practice techniques of user research and early UI design exploration.  First, you will learn and practice several techniques for user research, including in-person research and survey and log-analysis techniques.  Then, you will learn to analyze and deliver user research in forms that support UI design, including personas, use cases, tasks, and scenarios.  Finally, you will learn and practice ideation techniques that start from user research and broadly generate potential design ideas.", "title": "User Research and Design", "rating": "4.7", "level": null, "created_by": "University of Minnesota", "package_name": "User Interface Design Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Loren Terveen", "department": "Computer Science and Engineering"}, {"name": "Haiyi Zhu", "department": "Computer Science and Engineering"}, {"name": "Lana Yarosh", "department": "Computer Science and Engineering"}, {"name": "Dr. Brent Hecht", "department": "Computer Science and Engineering"}, {"name": "Joseph A Konstan", "department": "Computer Science and Engineering"}], "week_data": [{"description": "Note that weeks 1 and 2 form a cohesive whole, with more lecture content in week 1, and more practice (assignment and quizzing) in week 2.", "video": ["From User Research to Design", "An Introduction to the Course"], "title": "Preface"}, {"description": "", "video": ["Introduction to User Research", "Interview and Focus Groups", "Observations", "Contextual Inquiry", "Ethics and Consent", "Design a User Research Protocol"], "title": "User Research Methods — Part 1"}, {"description": "", "video": ["Log Analysis", "Surveys and Questionnaires", "Assignment Video:  Observing Users", "Observation Assigment Overview", "Observation Review Practice", "Formative Observations of 2 Users", "User Research Methods Quiz"], "title": "User Research Methods — Part 2"}, {"description": "The 3rd and 4th week of the course are intended to be a unit, with more lecture content in week 3, and more practice (assignment and quizzing) in week 4.", "video": ["Introduction: Translating User Research to Support Design", "Qualitative Analysis", "Quantitative Analysis", "Personas I: What They Are; How They're Used", "Personas II: Walking Through Examples", "Use Cases", "Tasks and Walkthrough Scenarios", "Implications for Design"], "title": "Analyzing and Delivering User Research"}, {"description": "", "video": ["From Research to Ideas:  Module Introduction", "Ideation", "Idea Selection", "Communicating Ideas to Stakeholders", "Assignment Video: Ideation and Selection", "Idea Generation & Selection Peer Review", "Delivering User Research, Ideation, and Idea Selection"], "title": "Ideation and Idea Selection"}]}, {"course_info": "About this course: In Software Requirements Elicitation for Secure Software Development, we're going to discuss the overall software requirements process as it applies  in waterfall, spiral, and agile models.  You'll learn about each of these processes and your goals as a software requirements analyst.  This is not an easy task! Who do you talk to, when, and what kind of knowledge are you trying to obtain, in any software life cycle? How do you handle obstacles as you go?\nThese are the questions we will focus on answering in this specialization.", "title": "Requirements Gathering for Secure Software Development", "rating": null, "level": "Beginner", "created_by": "University of Colorado System", "package_name": "Requirements Engineering: Secure Software  Specifications Specialization ", "target_audience": "Who is this class for: This is a graduate level class and can prove useful to those just entering the software engineering process, as well as those who have years of experience.  Coding is not needed.  Software engineers, managers, security engineers, technical writers, testers, and many more can learn much from these lessons in gaining a better understanding of how software requirements tie to your jobs.  You will also gain extended views compared to the software processes your companies currently use.  \nThis specialization is a beginning course into Software Requirements and introduces fundamental software engineering lifecycle comparisons, applied to the roles of the requirements analyst.  \nThis is also a course in the Engineering Secure Software Requirements Certificate, which can be used as a professional certificate or as a start toward further graduate studies in Computer Science or Software Engineering.  \n", "package_num": "1", "teach_by": [{"name": "Kristen Walcott-Justice", "department": "Department of Computer Science"}], "week_data": [{"description": "Software Requirements are a vital part of the Software Development Lifecycle.  While there are many ways to go about collecting and recording requirements, the cost of bad requirements is high.  Here we discuss what Software Requirements Specifications are and some challenges in writing them well.  ", "video": ["About the Lecturer: Hi!", "Introduction to the Specialization", "The Software Requirement Specification Process", "Software Requirement Specification Process - Slides", "Cost of Bad Requirements", "Cost of Bad Requirements - Slides", "Learning from a Customer at the Start", "Getting Started- \"I want THIS\"", "Getting Started: I want THIS - Slides", "Software Specification Process"], "title": "The Software Requirement Specification Process and Cost"}, {"description": "We need to figure out what the customer wants. And moreso- what they need! How do you develop a relationship with you customers and learn about the overall domain and potential solutions?\nHere you will learn about the requirements engineering process, what it entails, how to develop a relationship with your customer, and some tips to succeed early on.  ", "video": ["Introduction to Requirements Engineering", "Introduction to Requirements Engineering - Slides", "Building Requirements", "Building Requirements - Slides", "Requirements Elicitation Towards the Unknown Unknowns", "Requirements Engineering"], "title": "Starting to Build Requirements- What does the customer want?"}, {"description": "Not all requirements documents are created equally- if at all (formally).  How you work with requirements partially depends on the software lifecycle used.  Here we learn about the different software development lifecycles and discuss how they affect the requirements we produce. ", "video": ["The Software Lifecycle", "Different Lifecycle Models", "Hybrid Model/Iterative Lifecycle Approaches", "Software Lifecycle | Lifecycle Models | Hybrid Model - Slides", "Software Development Lifecycles- Approaches and Benefits", "Agile Software Development- The Business of Innovation", "Software Lifecycles"], "title": "Software Lifecycles"}, {"description": "To increase flexibility to change in software development, the agile lifecycle was produced.  The agile process much changes how we deal with requirements.  We discuss these challenges and your role as a requirements analyst.  We also begin to analyze the types of statements that you want to form as you elicit data to move towards clarity.  ", "video": ["Challenges and Your Goals", "The Agile Model - Slides", "Lines and Cats- An interesting look at requirements gathering", "Lines and Cats- What we can learn", "Lines and Cats - Slides", "Who, when, why, and how?", "Requirement Engineering Statement Types", "Requirement Challenges", "WWWH | Requirement Engineering Statement | Requirement Challenges - Slides", "The Analyst - Who and What?", "Steps to Effective Knowledge Acquisition - Identifying Stakeholders", "Obstacles in Data Handling", "The Analyst | Identifying Stakeholder | Obstacles - Slides", "Goals and Models"], "title": "Goals and Models for Elicitation"}]}, {"course_info": "About this course: Optimization is a common form of decision making, and is ubiquitous in our society. Its applications range from solving Sudoku puzzles to arranging seating in a wedding banquet.  The same technology can schedule planes and their crews, coordinate the production of steel, and organize the transportation of iron ore from the mines to the ports. Good decisions in manpower and material resources management also allow corporations to improve profit by millions of dollars.  Similar problems also underpin much of our daily lives and are part of determining daily delivery routes for packages, making school timetables, and delivering power to our homes. Despite their fundamental importance, all of these problems are a nightmare to solve using traditional undergraduate computer science methods.\n\nThis course is intended for students interested in tackling all facets of optimization applications. You will learn an entirely new way to think about solving these challenging problems by stating the problem in a state-of-the-art high level modeling language, and letting library constraint solving software do the rest. This will allow you to unlock the power of industrial solving technologies, which have been perfected over decades by hundreds of PhD researchers.  With access to this advanced technology, problems that are considered inconceivable to solve before will suddenly become easy.\n\nWatch the course promotional video here: https://www.youtube.com/watch?v=hc3cBvtrem0&t=8s", "title": "Basic Modeling for Discrete Optimization", "rating": "4.8", "level": "Intermediate", "created_by": "The University of Melbourne, The Chinese University of Hong Kong", "package_name": null, "target_audience": "Who is this class for: The course is for penultimate/final year undergraduates and graduates in computing and related disciplines.  You will need to have basic computer programming skills, and knowledge of fundamental algorithms, discrete mathematics, logic and linear algebra in order to take this course.  Please note that this course is also available wholly in Chinese, see:  https://www.coursera.org/learn/lisan-youhua-jianmo-jichupian", "package_num": null, "teach_by": [{"name": "Prof. Peter James Stuckey", "department": "Computing and Information Systems"}, {"name": "Prof. Jimmy Ho Man Lee", "department": "Department of Computer Science and Engineering"}], "week_data": [{"description": "In this first module, you will learn the basics of MiniZinc, a high-level modeling language for discrete optimization problems. Combining the simplicity of MiniZinc with the power of open-source industrial solving technologies, you will learn how to solve applications such as knapsack problems, graph coloring, production planning and tricky Cryptarithm puzzles, with great ease.  ", "video": ["Welcome to Basic Modeling for Discrete Optimization", "Course Overview", "Start of Course Survey", "1.1.1 First Steps", "1.1.2 Second Model", "1.1.3 Third Model", "1.1.4 Models and Instances", "1.1.5 Modeling Objects", "1.1.6 Arrays and Comprehensions", "1.1.7 Global Constraints", "1.1.8 Module 1 Summary", "Getting MiniZinc", "Workshop 0: First Steps", "Workshop 0 Solution", "Workshop 1: Temperature", "Workshop 1 Solution", "Assignment Submission - IDE", "Assignment Submission - CLI", "About the Reference Material", "Reference 1: Basic Features", "Reference 2: Booleans Expressions", "Reference 3: Sets, Arrays, Comprehensions", "Reference 4: Enumerated Types", "Reference 5: Strings and Output", "Reference 6: Option Types", "Reference 7: Command Line Interface", "Cryptarithms for Seven Paces Verse"], "title": "MiniZinc introduction"}, {"description": "In this module, you will learn how to model problems involving set selection.  In particular, you will see different ways of representing set variables when the variable has no constraints on its cardinality, has fixed cardinality and bounded cardinality.  You also have to ensure all model decisions are valid decisions, and each valid decision corresponds to exactly one model decision.", "video": ["1.2.1 Selecting a Set", "1.2.2 Choosing a Set Representation", "1.2.3 Choosing a Fixed Cardinality Set", "1.2.4 Sets with Bounded Cardinality", "1.2.5 Module 2 Summary", "Workshop 2: Surrender Negotiations", "Workshop 2 Solution", "Raid Planning"], "title": "Modeling with Sets"}, {"description": "In this module, you will learn how to model pure assignment problems and partition problems, which are functions in disguise.  These problems find applications in rostering and constrained clustering.  In terms of modeling techniques, you will see the power of common subexpression elimination and intermediate variables, and encounter the global cardinality constraint for the first time.  MiniZinc also provides constraints for removing value symmetries.", "video": ["1.3.1 Modeling Functions", "1.3.2 Another Assignment Problem Example", "1.3.3 Modeling Partitions", "1.3.4 Global Cardinality Constraint", "1.3.5 Pure Partitioning", "1.3.6 Module 3 Summary", "Workshop 3: Feast Trap", "Workshop 3 Solution", "Dance Trap"], "title": "Modeling with Functions"}, {"description": "In the final module of this course you will see how discrete optimization problems can often be seen from multiple viewpoints, and modeled completely differently from each viewpoint. Each viewpoint may have strengths and weaknesses, and indeed the different models can be combined to help each other. ", "video": ["1.4.1 Multiple Modeling", "1.4.2 Permutation", "1.4.3 More Permutation Problem", "1.4.4 More Multiple Models", "1.4.5 Module 4 Summary", "Workshop 4: Composition", "Workshop 4 Solution", "End of Course Survey", "Royal Hunt"], "title": "Multiple Modeling"}]}, {"course_info": "About this course: Комбинаторика - это наука, которая, с одной стороны, богата исключительно красивыми постановками задач, зачастую доступными школьнику, а с другой стороны, это очень глубокая современная область знаний, без овладения инструментами которой невозможно серьезное понимание как большинства других фундаментальных дисциплин - анализа, алгебры, теории графов, теории вероятностей и др., - так и многих прикладных проблем.\n\nСовременная комбинаторика, таким образом, это своего рода основа основ: это и красивейшая теория с массой нетривиальных задач и методов, но это и прекрасная база для приложений в computer science, в анализе сложных сетей, в теории кодирования и криптографии, в биоинформатике и др. В курсе мы познакомим слушателей с наиболее важными областями и инструментами современной комбинаторики, причем многие темы курса по сути уникальны: здесь не только классические комбинаторные величины и тождества, но также и общая теория обращения Мебиуса, и диаграммы Юнга, и рекурсия, и производящие функции. Это позволит нам в дальнейших курсах выйти на реальные приложения в анализе таких сложных сетей, как Интернет, социальные, биологические сети, сети межбанковских взаимодействий и др.\n\nДля участия в курсе слушателю необходимо иметь базовые представления о теории множеств и началах анализа. Все остальные понятия будут введены в ходе курса.\n\nКурс состоит из 7 недель лекций и 1 недели экзамена. Каждую неделю слушатель выполняет задания, составляющие 10% от всего курса (5% тест и 5% задачи с ответом). Экзамен также состоит из теста и задач с ответом, каждая часть оценивается в 15% от общей суммы. Для успешного прохождения курса необходимо в каждом задании набрать не менее 50% от общего числа баллов.\n\nДанный курс рекомендуется к прохождению перед курсом Теория вероятностей.", "title": "Современная комбинаторика (Modern combinatorics)", "rating": "4.9", "level": null, "created_by": "Moscow Institute of Physics and Technology", "package_name": null, "target_audience": "Who is this class for: Этот курс ориентирован на сильных студентов первого и второго курса, которые интересуются дискретной математикой и комбинаторикой.  Он будет полезен всем желающим освоить  один из базовых предметов в математике.", "package_num": null, "teach_by": [{"name": "Андрей Райгородский", "department": "кафедра дискретной математики МФТИ"}, {"name": "Дмитрий Ильинский", "department": "кафедра дискретной математики МФТИ"}], "week_data": [{"description": "Основные принципы комбинаторики. Правило сложения. Правило умножения. Принцип Дирихле. Пример применения принципа Дирихле. Теорема о раскраске множества в два цвета. Мощности множества попарно неортогональных {-1,0,1}-векторов : верхняя и нижняя оценки. Числа сочетаний, размещений и перестановок.", "video": ["Программа и расписание курса", "Введение", "Список литературы", "Правила аттестаций", "Правила поведения на форуме", "МФТИ", "МФТИ", "Правила сложения и умножения", "Пример на правило умножения", "Принцип Дирихле", "Пример с квадратом", "Последовательности векторов. Постановка задачи", "Последовательности векторов. Доказательство утверждения", "Условия задач", "Шестизначные числа", "Первокурсники в кинотеатре", "Конспект", "Решение задач", "Числа сочетаний, размещений и перестановок. Определения.", "Теоремы о числе размещений с повторениями и без", "Количество сочетаний без повторений", "Количество сочетаний с повторениями", "Конспект", "Условия задач.", "Дежурство в столовой", "Карты из колоды", "Тома Пушкина на книжной полке", "Условия и решения задач", "Решения задач", "Дополнительные задачи", "Теорема о раскраске множества в два цвета. Формулировка утверждения (*)", "Теорема о раскраске множества в два цвета. Доказательство утверждения (*)", "Теорема о раскраске множества в два цвета. Общая проблема (*)", "Тест к неделе 1", "Задачи к неделе 1"], "title": "Основные принципы комбинаторики"}, {"description": "Бином Ньютона. Полиномиальная формула. Формула включений и исключений. Простейшие тождества. Треугольник Паскаля. Сумма биномиальных и полиномиальных коэффициентов. Сумма квадратов биномиальных коффициентов. Формулы для суммы степеней натуральных чисел. Знакопеременное тождество.", "video": ["Бином Ньютона. Полиномиальный коэффициент", "Полиномиальная формула", "Конспекты", "Условия задач", "Задачи и студенты", "Фигуры на шахматной доске", "Формулировка утверждения", "Условия задач", "Научно-исследовательский институт", "Книги на полке", "Конспект", "Комбинаторные тождества 1-2. Треугольник Паскаля", "Комбинаторные тождества 3-4", "Комбинаторное тождество 5", "Комбинаторное тождество 6", "Сумма степеней натуральных чисел", "Комбинаторные тождества 7-8", "Конспект", "Условия задач", "Сумма биномиальных коэффициентов с чётными показателями", "Вычисление хитрой суммы биномиальных коэффициентов", "Решения задач", "Дополнительные задачи", "База и предположение индукции(*).", "Переход индукции (*)", "Тест к неделе 2", "Задачи к неделе 2"], "title": "Комбинаторные тождества"}, {"description": "Формула для количества ‘слов’. Определение циклической последовательности. Формулировка проблемы. Простое число. Бесконечность простых. Основная теорема арифметики. Функция Мебиуса. Суммы по делителям. Формула обращения Мебиуса. ", "video": ["Циклические слова", "Простые числа", "Основная теорема арифметики", "Исторический анекдот(**)", "Условия задач", "Количество циклических последовательностей длины 2", "Существование разложение в произведение простых чисел (**)", "Вспомогательное утверждение для основной теоремы арифметики(**)", "Доказательство единственности разложения в произведения простых (**)", "Конспект", "Условия и решения задач", "Функция Мёбиуса", "Сумма по делителям числа", "Сумма функции Мебиуса по делителям числа", "Формула обращения Мебиуса. Формулировка", "Формула обращения Мебиуса. Доказательство", "Условия задач", "Пример применения формулы обращения Мёбиуса -1", "Пример применения формулы обращения Мёбиуса - 2", "Пример применения формулы обращения Мёбиуса -3", "Конспект", "Условия и решения задач", "Решения контрольной работы", "Тест к неделе 3", "Задачи к неделе 3"], "title": "Формула обращения Мёбиуса"}, {"description": "Вывод формулы для количества циклических последовательностей. Частично упорядоченное множество. Обобщенная функция Мебиуса. Связь с обычной функцией Мебиуса. Теорема об формуле обращения Мебиуса на ч.у.м. Передоказательство формулы включений и исключений (часть 1) (*).\n", "video": ["Линейные и циклические последовательности", "Период линейной последовательности", "Биекция между множествами последовательностей одного периода", "Количество линейных последовательностей", "Количество циклических последовательностей длины n и периода n", "Количество циклических последовательностей", "Условия задач", "Пример вычисления количества циклических последовательностей", "Пример вычисления количества циклических последовательностей -2", "Конспект", "Решения задач", "Частично упорядоченное множество", "4.8. Функция Мебиуса для ЧУМа", "4.9. Связь с обычной функцией Мебиуса", "4.10 Совпадение функций Мебиуса для произведения различных простых чисел", "4.11 Совпадение функций Мебиуса для остальных чисел", "4.12 Формула обращения Мебиуса на ЧУМе", "Условия задач", "Семинар. Задача 4.3", "Семинар. Задача 4.4", "Конспект", "Условия и решения задач", "Решения задач недели 4.", "4.13 Определение множества.(*)", "4.14 Определение частичного порядка (*)", "4.15 Функция Мёбиуса (*).", "Дополнительные задачи", "Конспект", "Тест к неделе 4", "Задачи к неделе 4"], "title": "Циклические последовательности"}, {"description": "Разбиения чисел на слагемые. Упорядоченные и неупорядоченные разбиения. Формула для числа упорядоченных разбиений. Рекуррентное соотношение для числа неупорядоченных разбиений. Формула Харди-Рамануджана. Диаграмма Юнга. Теоремы Эйлера о равенстве количеств неупорядоченных разбиений. Передоказательство формулы включений и исключений (часть 2) (*).", "video": ["5.1 Разбиения чисел на слагаемые", "5.2 \"Карнавальная\" формулировка задач о разбиениях (**)", "5.3. Задача о \"попойке\"", "5.4 Задача о \"капусте\"", "5.5 Формула Харди-Рамануджана (*), (**)", "Условие задач", "Семинар. Задача 5.1", "Конспект", "Решения задач", "5.6 Диаграмма Юнга", "5.7. Теоремы о количестве неупорядоченных разбиений.", "5.8 Двойственная диаграмма Юнга", "Условия задач", "Семинар. Задача 5.2", "Семинар. Задача 5.3", "Семинар. Задача 5.4", "Конспект", "Условия и решения задач", "5.9 Обобщенная формула обращения Мебиуса (*)", "5.10 Вывод формулы включений и исключений(*).", "Конспект", "Решения задач 5 недели", "Тест к неделе 5", "Задачи к неделе 5"], "title": "Разбиения"}, {"description": "Линейные рекуррентные соотношения. Числа Фибоначчи. Теорема о решении линейного рекуррентного соотношения второго порядка. Формальные степенные ряды. Операции над рядами. Пример “деления в столбик”.", "video": ["6.1 Линейные рекуррентные соотношения", "6.2 Числа Фибоначчи", "6.3 Линейные рекуррентные соотношения второго порядка. Характеристическое уравнение", "6.4 Линейные рекуррентные соотношения второго порядка. Теорема 1. Формулировка", "6.5 Линейные рекуррентные соотношения 2 порядка. Теорема 1. Пункт 1. Доказательство", "6.6 Линейные рекуррентные соотношения 2 порядка. Теорема 1. Пункт 2. Доказательство", "6.7  Линейные рекуррентные соотношения 2 порядка. Теорема 2", "6.8  Линейные рекуррентные соотношения k порядка (*)", "Условия задач", "Семинар. Задача 6.1", "Семинар. Задача 6.2", "Семинар. Задача 6.3", "Семинар. Задача 6.4", "Конспект", "Условия и решения задач", "6.9 Формальные степенные ряды", "6.10 Деление степенных рядов", "6.11 Вывод комбинаторного тождества при помощи формальных степенных рядов", "Условия задач", "Семинар. Задача 6.5", "Семинар. Задача 6.6", "Конспект", "Условия и решения задач", "Решения задач недели 6", "Тест к неделе 6", "Задачи к неделе 6"], "title": "Линейные рекуррентные соотношения. Формальные степенные ряды."}, {"description": "Производящие функции. Теорема о сходимости степенных рядов (б/д). Примеры, иллюстрирующие теоремы. Сходимость на границе интервала. Числа Фибоначчи и их производящая функция. Суммы чисел Фибоначчи, чисел сочетания и пр. Числа Каталана. Извлечение корней из степенных рядов. Формула для числа Каталана: д-во через производящие функции.", "video": ["7.1 Производящая функция", "7.2 Теорема о сходимости рядов", "7.3 Примеры, иллюстрирующие теорему", "7.4 Сходимость на границе круга (*)", "7.5 Пример вычисления производящей функции", "Условия задач", "Семинар. Задача 7.1", "Семинар. Задача 7.2", "Семинар. Задача 7.3", "Семинар. Задача 7.4", "Конспект", "Решения задач", "7.6 Пример с числами Фибоначчи", "7.7 Производящая функция чисел Фибоначчи", "7.8 Числа Каталана", "7.9 Производящая функция чисел Каталана", "7.10 Извлечение корня из формального степенного ряда", "7.11 Формула для чисел Каталана", "Условия задач", "Семинар. Задача 7.5", "Семинар. Задача 7.6", "Семинар. Задача 7.7", "Конспект", "Условия и решения задач", "Решения задач недели 7", "Тест к неделе 7", "Задачи к неделе 7"], "title": "Производящие функции"}, {"description": "Экзамен.", "video": ["Экзаменационный тест", "Экзаменационные задачи"], "title": "Экзамен"}]}, {"course_info": "About this course: The data science revolution has produced reams of new data from a wide variety of new sources. These new datasets are being used to answer new questions in way never before conceived. Visualization remains one of the most powerful ways draw conclusions from data, but the influx of new data types requires the development of new visualization techniques and building blocks. This course provides you with the skills for creating those new visualization building blocks. We focus on the ggplot2 framework and describe how to use and extend the system to suit the specific needs of your organization or team. Upon completing this course, learners will be able to build the tools needed to visualize a wide variety of data types and will have the fundamentals needed to address new data types as they come about.", "title": "Building Data Visualization Tools", "rating": "4.0", "level": "Intermediate", "created_by": "Johns Hopkins University", "package_name": "Mastering Software Development in R Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Roger D. Peng, PhD", "department": "Bloomberg School of Public Health"}, {"name": "Brooke Anderson", "department": "Colorado State University"}], "week_data": [{"description": "Before we get started, we'll take a quick overview of the course.", "video": ["Welcome to Building Data Visualization Tools", "Textbook: Mastering Software Development in R", "Syllabus"], "title": "Welcome to Building Data Visualization Tools"}, {"description": "Now, we'll dive into creating and customizing ggplot2 plots.", "video": ["Introduction", "Initializing a ggplot object", "Plot aesthetics", "Creating a basic ggplot plot", "Geoms", "Using multiple geoms", "Constant aesthetics", "Example plots", "Extensions of ggplot2", "Introduction", "Guidelines for good plots", "Scales and color", "To find out more", "Plotting with ggplot2"], "title": "Plotting with ggplot2"}, {"description": "Mapping is a critical part of many data visualizations. During this module, we'll teach you how to create simple and dynamic maps with ggplot2 and ggmap, how to overlay data, and how to create chloropleth maps of US counties.", "video": ["Introduction", "Basics of Mapping", "ggmap, Google Maps API", "Mapping US counties and states", "More advanced mapping– Spatial objects", "Where to find more on mapping with R", "Overview of htmlWidgets", "plotly package", "Creating your own widget", "Mapping and interactive plots"], "title": "Mapping and interactive plots"}, {"description": "The grid package in R implements the primitive graphical functions that underly the ggplot2 plotting system. In this module, you'll learn how to work with grid to build graphics.", "video": ["Introduction", "Overview of grid graphics", "Grobs", "Viewports", "Grid graphics coordinate systems", "The gridExtra package", "Where to find more about grid graphics", "Basics of grid graphics"], "title": "The grid Package"}, {"description": "Building and modifying a theme in ggplot2 is a key feature of the ggplot2 package and system for building data graphics. In this final module, you'll learn to build a new theme and modifying existing themes with new features.", "video": ["Introduction", "Why Build a New Theme?", "Default Theme", "Building a New Theme", "Summary", "Introduction", "Building a Geom", "Example: An Automatic Transparency Geom", "Building a Stat", "Example: Normal Confidence Intervals", "Combining Geoms and Stats", "Summary", "Build a New Geom"], "title": "Building New Graphical Elements"}]}, {"course_info": "About this course: In the final capstone project you will apply the skills you learned by building a large data-intensive application using real-world data.\n\nYou will implement a complete application processing several gigabytes of data. This application will show interactive visualizations of the evolution of temperatures over time all over the world.\n\nThe development of such an application will involve:\n — transforming data provided by weather stations into meaningful information like, for instance, the average temperature of each point of the globe over the last ten years ;\n — then, making images from this information by using spatial and linear interpolation techniques ;\n — finally, implementing how the user interface will react to users’ actions.", "title": "Functional Programming in Scala Capstone", "rating": "4.4", "level": null, "created_by": "École Polytechnique Fédérale de Lausanne", "package_name": "Functional Programming in Scala Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Dr. Julien Richard-Foy", "department": "Scala Center"}], "week_data": [{"description": "Get an overview of the project and all the information to get started. Transform data provided by weather stations into meaningful information.", "video": ["Project overview", "Scaffolding material", "Project setup", "Data extraction", "Scaffolding material"], "title": "Project overview"}, {"description": "Transform temperature data into images, using various interpolation techniques.", "video": ["Raw data visualization"], "title": "Raw data display"}, {"description": "Generate images compatible with most Web-based mapping libraries.", "video": ["Milestone: interactive visualization in a Web app"], "title": "Interactive visualization"}, {"description": "Get more meaning from your data: compute temperature deviations compared to normals.", "video": ["Data manipulation"], "title": "Data manipulation"}, {"description": "Generate images using bilinear interpolation.", "video": ["Value-added information visualization"], "title": "Value-added information visualization"}, {"description": "Implement how the user interface will react to users’ actions", "video": ["Interactive user interface"], "title": "Interactive user interface"}]}, {"course_info": "About this course: Software is quickly becoming integral part of human life as we see more and more automation and technical advancements. Just like we expect car to work all the time and can't afford to break or reboot unexpectedly, software industry needs to continue to learn better way to build software if it were to become integral part of human life.\n\nIn this course,  you will get an overview of  how software teams work? What processes they use?  What are some of the industry standard methodologies? What are pros and cons of each?  You will learn enough to have meaningful conversation around software development processes.\n\nAfter completing this course, a learner will be able to \n1) Apply core software engineering practices at conceptual level for a given problem. \n2) Compare and contrast traditional, agile, and lean development methodologies at high level.  These include Waterfall, Rational Unified Process, V model, Incremental, Spiral models and overview of agile mindset \n3) Propose a methodology best suited for a given situation", "title": "Software Development Processes and Methodologies", "rating": "4.5", "level": "Beginner", "created_by": "University of Minnesota", "package_name": "Software Development Lifecycle Specialization ", "target_audience": "Who is this class for: It is designed for individuals who are new to software engineering world or have been developing software but wants to gain academic context on why we develop the way we develop software.", "package_num": "1", "teach_by": [{"name": "Praveen Mittal", "department": "College of Science and Engineering"}, {"name": "Kevin Wendt", "department": "Department of Computer Science and Engineering "}], "week_data": [{"description": "In this module and next one, we will learn about various software development processes at a high level to understand what is involved in each of these processes.   In this module, we will cover Requirements and Architecture.", "video": ["Why Take This Course?", "Welcome to the course", "Motivation and Course Intro", "What software development Looks Like?", "What software development Looks Like?", "Why do we need requirements?", "Why do we need requirements?", "Requirements vs Specification", "Requirements vs Specification", "Non-functional Requirements", "Non-functional Requirements", "WRSPM", "WRSPM Quiz", "WRSPM Model: Real-world Example", "Software Architecture: Definition", "Software Architecture: Definition", "Software Architecture: Models", "Software Architecture Models", "Software Architecture: Process", "Software Architecture: Process", "Requirements and Architecture"], "title": "Software development processes : Part 1"}, {"description": "In this module, we will learn about processes that are used to implement the software, verify and validate the software, deploy the software and maintain the software.", "video": ["Software Design: Introduction", "Software Design: Introduction", "Software Design: Modularity", "Software Design: Modularity", "Software Design: Coupling", "Software Design: Coupling", "Software Design: Cohesion", "Software Design: Cohesion", "Implementation", "Implementation", "Deployment", "Deployment", "Deployment: Rollback", "Deployment: Rollback", "Deployment: Cutover Strategies", "Deployment: Cutover Strategies", "Software Testing: Introduction", "Software Testing: Introduction", "Software Testing: Definitions", "Software Testing: Strategies", "Software Testing: Perspectives", "Design, Implementation, and Testing"], "title": "Software Development Processes : Part 2"}, {"description": "In this module we will learn about various traditional models like waterfall, RUP, Incremental, and Spiral models.", "video": ["Software Development Models", "Waterfall Model", "V-Model", "Sashimi Model", "Waterfall methods", "Incremental Models", "Waterfall and Incremental Software Development Models", "Unified Process and its Variants", "Spiral Model", "Unified and Spiral Processes", "Phase Gates / Stage Gates", "Applying Software Development Models", "Traditional Software Development Models", "Project Scenario 1"], "title": "Software Development Models:  Traditional Models"}, {"description": "In this module, we will learn about agile and modern techniques of software development.  We will also learn about techniques that helps you learn faster about your market, your users, and your product.", "video": ["Why Agile?", "Watch Agile Manifesto Video", "Agile Manifesto and Principles", "Agile Manifesto Explained", "Agile Mindset", "Agile Frameworks", "Scrum", "Kanban", "Agile and Lean Summary", "Lean Startup", "Agile Frameworks and models", "Model Selection: When to use which model?", "What Next?", "Agile &  Lean Software Development", "Project Scenario 2"], "title": "Software Development Models: Agile and Lean"}]}, {"course_info": "About this course: Experienced Computer Scientists analyze and solve computational problems at a level of abstraction that is beyond that of any particular programming language.  This two-part class is designed to train students in the mathematical concepts and process of \"Algorithmic Thinking\", allowing them to build simpler, more efficient solutions to computational problems.\n\nIn part 2 of this course, we will study advanced algorithmic techniques such as divide-and-conquer and dynamic programming.  As the central part of the course, students will implement several algorithms in Python that incorporate these techniques and then use these algorithms to analyze two large real-world data sets.  The main focus of these tasks is to understand interaction between the algorithms and the structure of the data sets being analyzed by these algorithms.\n\nOnce students have completed this class, they will have both the mathematical and programming skills to analyze, design, and program solutions to a wide range of computational problems.  While this class will use Python as its vehicle of choice to practice Algorithmic Thinking, the concepts that you will learn in this class transcend any particular programming language.", "title": "Algorithmic Thinking (Part 2)", "rating": "4.7", "level": "Intermediate", "created_by": "Rice University", "package_name": "Fundamentals of Computing Specialization ", "target_audience": null, "package_num": "6", "teach_by": [{"name": "Luay Nakhleh", "department": "Computer Science; Biochemistry and Cell Biology "}, {"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Joe Warren", "department": "Computer Science"}], "week_data": [{"description": "Sorting, searching, big-O notation, the Master Theorem", "video": ["What is Algorithmic Thinking? ", "The sorting problem ", "A simple quadratic algorithm ", "Illustrating MergeSort ", "The recurrence for MergeSort ", "The Master Theorem and MergeSort efficiency ", "Linear vs. binary search ", "Efficiency of binary search ", "Class structure (from part 1)", "Class notes", "Coding notes", "Coding styles and standards  -  PoC", "Testing and machine grading  -  PoC", "Plotting data  - PoC", "Peer assessment - \"We want a shrubbery!\"  - IIPP", "Homework #3"], "title": "Module 3 - Core Materials"}, {"description": "Closest pairs of points, clustering of points, comparison of clustering algorithms", "video": ["Project #3 Description", "Tests and Tips for Implementing the Clustering Methods", "Project Submission History", "Application #3 Description", "Application #3 Solution", "Assignment: Closest Pairs and Clustering Algorithms", "Comparison of Clustering Algorithms"], "title": "Module 3 - Project and Application"}, {"description": "Dynamic programming, running time of DP algorithms, local and global sequence alignment ", "video": ["The RNA secondary structure problem ", "A dynamic programming algorithm ", "Illustrating the DP algorithm ", "Running time of the DP algorithm ", "DP vs. recursive implementation ", "Global pairwise sequence alignment ", "Local pairwise sequence alignment ", "Homework 4"], "title": "Module 4 - Core Materials"}, {"description": "Computation of sequence alignments, applications to genomics and text comparison", "video": ["Project #4 Description", "Application #4 Description", "Application #4 Solution", "Class wrap-up ", "Assignment: Computing Alignments of Sequences", "Applications to Genomics and Beyond"], "title": "Module 4 - Project and Application"}]}, {"course_info": "About this course: This course will introduce you to the multiple forms of parallelism found in modern Intel architecture processors and teach you the programming frameworks for handling this parallelism in applications.  You will get access to a cluster of modern manycore processors (Intel Xeon Phi architecture) for experiments with graded programming exercises.\n\nThis course can apply to various HPC and datacenter workloads and framework including artificial intelligence (AI). You will learn how to handle data parallelism with vector instructions, task parallelism in shared memory with threads, parallelism in distributed memory with message passing, and memory architecture parallelism with optimized data containers. This knowledge will help you to accelerate computational applications by orders of magnitude, all the while keeping your code portable and future-proof.\n\nPrerequisite: programming in C/C++ or Fortran in the Linux environment and Linux shell proficiency (navigation, file copying, editing files in text-based editors, compilation).", "title": "Fundamentals of Parallelism on Intel Architecture", "rating": "2.0", "level": "Intermediate", "created_by": "Intel", "package_name": null, "target_audience": "Who is this class for: For developers of machine learning libraries and frameworks. For innovators looking to combine machine learning and traditional computing in artificial intelligence systems. For engineers, students and researchers in computational disciplines interested in parallel computing. ", "package_num": null, "teach_by": [{"name": "Andrey Vladimirov", "department": "Colfax International"}], "week_data": [{"description": "In the Introduction we will learn...", "video": ["Modern Code", "1.0 Introduction", "1.1 Why this course?", "1.2 How Computers Get Faster", "1.3 Intel Architecture", "1.4 Modern Code", "1.5 What You Are Going To Learn", "1.6 Remote Access", "Register for cluster access", "Modern code", "Hello World"], "title": "Modern Code"}, {"description": "", "video": ["Vectorization", "2.1 Vector Operations", "2.2 Vectorizing Your Code", "2.3.1 Automatic Vectorization", "2.3.2 Will This Vectorize?", "2.4 Guided Automatic Vectorization", "2.8.1 Stencil Introduction", "2.8 Stencil", "Code Download", "2.5 SIMD-Enabled Functions", "2.6 Vector Dependence", "2.7 Strip Mining", "Numerical Integration Introduction", "2.9 Integral Vectorization", "Code Download", "2.10 Learn More", "Vectorization", "Vectorizing Monte-Carlo Diffusion"], "title": "Vectorization"}, {"description": "", "video": ["Multithreading with OpenMP", "3.1 Cores and Threads", "Demo: Forks", "Code Download", "3.2 Creating Threads", "3.3 Variable Sharing", "3.4 Parallel Loops", "3.5 Data Races Mutexes", "3.7 Parallel Reduction", "Stencil Introduction", "Stencil Demonstration", "Code Download", "Learn More", "OpenMP", "Multithreaded Filtering"], "title": "Multithreading with OpenMP"}, {"description": "", "video": ["Memory Traffic", "4.1 Cheap Flops", "4.2 Memory Hierarchy", "4.3 High Bandwidth Memory", "4.4 Memory Allocation", "Stencil Introduction", "Demo: Stencil with numactl", "Demo: Stencil with Memkind", "4.5 Bypassing Caches", "Stencil Demonstration-Nontemporal", "Stencil Demonstration-Char", "Code Download", "4.6 Locality in Space", "4.7 Locality in Time", "Integral Introduction", "Integral Demonstration", "Code Download", "Memory traffic", "Batch FFTs in HBM"], "title": "Memory Traffic"}, {"description": "", "video": ["Clusters and MPI", "5.1 Computing Clusters", "5.2 Message Passing Interface", "5.3 Programming with MPI", "5.4 Compiling and Running with MPI", "5.5 Peer-to-Peer Messaging", "5.6 Collective Communication", "Stencil Introduction", "Stencil Demonstration-MPI", "Code Download", "Integral Introduction", "Integral Demonstration", "Code Download", "Learn More", "MPI", "MPI String Vibration"], "title": "Clusters and MPI"}]}, {"course_info": "About this course: In this course, you will develop more advanced web application programming skills. You will learn how to control data read and write access using methods, publish and subscribe. You will learn how to access your database and server shells using command line tools. You will use the SimpleSchema system to validate data and generate input forms automatically. You will see a complete collaborative code editing environment, TextCircle, being built from scratch. \n\nAt the end of this course, you will be able to:\n- use Meteor methods to control data write access\n- use publish and subscribe to control data read access\n- install and use advanced Meteor packages\n- add user accounts to your applications\n- implement complex MongoDB filters\n- use the MongoDB and meteor server shells\n- define data validations schemas using SimpleSchema\n- generate data input forms automatically using SimpleSchema\n\nIn this course, you will complete:\n2 programming assignments taking ~4 hours each to complete\n4 quizzes, each taking ~20 minutes to complete\nmultiple practice quizzes, each taking ~5 minutes to complete\n\nParticipation in or completion of this online course will not confer academic credit for University of London programmes", "title": "Web Application Development with JavaScript and MongoDB", "rating": "4.6", "level": null, "created_by": "University of London, Goldsmiths, University of London", "package_name": "Responsive Website Development and Design Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Dr Matthew Yee-King", "department": "Computing Department, Goldsmiths, University of London"}], "week_data": [{"description": "Welcome to 'Web Application Development with JavaScript and MongoDB'! In this course we will be creating native mobile apps using Meteor.js, implementing social media features, such as following as well as writing and running unit tests on your JavaScript code. Finally you will set up your own server environment to run Meteor applications and you will implement the publish and subscribe data control model. I hope you enjoy the course! -Matthew ", "video": ["Course introduction", "Course outline", "Grading and assessment information", "Prerequisite quiz"], "title": "Web Application Development with JavaScript and MongoDB: Course overview"}, {"description": "Welcome to the first module of 'Web Application Development with JavaScript and MongoDB!' In this module we will look at accessing MongoDB on the command line, we will understand how to check for valid returns from find queries and identify reactive data sources within the Meteor framework. Finally we learn how to use the Session object to store user data, understand variable scope and use iframes to create separate DOMs. Enjoy! ", "video": ["Overview", "Starter code", "TextCircle", "TextCircle", "Reactive data", "Reactive data", "Reactive sessions", "Reactive sessions", "Scope", "Scope", "Bootstrap it!", "Bootstrap it!", "HTML preview", "HTML preview", "MongoDB, Meteor and reactive data summary", "MongoDB, Meteor and reactive data summary quiz", "M-Instant part 1: working with Session"], "title": "MongoDB, Meteor and reactive data"}, {"description": "Welcome to the second module of 'Web Application Development with JavaScript and MongoDB!' In this module we will learn how to use the core user accounts packages, customise the user accounts UI using third party packages and search for and add packages to an application. We will also look at how to query MongoDB collections from the command line and learn how to control data write access using methods. Enjoy! ", "video": ["Overview", "Source code", "User accounts", "User accounts", "MongoDB shell", "MongoDB shell", "Customise the accounts UI", "Customise the accounts UI", "Who is editing? working with methods", "Who is editing? DB", "Who is editing? UI", "Who is editing? UI", "Improve the UI", "Improve the UI", "User accounts, packages and methods summary", "User accounts, packages and methods summary quiz", "M-instant part 2: working with methods"], "title": "User accounts, packages and methods"}, {"description": "Welcome to the third module of 'Web Application Development with JavaScript and MongoDB!' In this module we will use bootstrap icons and use the publish and subscribe model to control data read access. We will understand the concept of asynchronous execution and work with template data contexts and helper functions. Finally we will use packages to implement in-place content editing and use complex MongoDB filters. Enjoy! ", "video": ["Overview", "Source code", "More docs!", "More docs!", "Docs in the DB", "Docs in the DB", "Using Session", "Using Session", "Loading the new doc", "Loading the new doc", "Document list", "Document list", "Editable title", "Editable title", "Controlling document access", "Controlling document item", "Publish and subscribe", "Publish and subscribe", "Final polish", "Final polish", "Publish and subscribe MongoDB filters summary", "Publish and subscribe MongoDB filters summary quiz", "M-instant part 3: publish and subscribe"], "title": "Publish and subscribe model and MongoDB filters"}, {"description": "Welcome to the final module of 'Web Application Development with JavaScript and MongoDB!' In this module we will create a well organised application using special Meteor folders and we will organise templates into multiple files. We will also learn how to use the iron:router package to create multiple page applications and we will generate data entry forms automatically using SimpleSchema and autoform. Finally, we will validate user data automatically using SimpleSchema. Enjoy! ", "video": ["Overview", "Learning outcomes", "Source code", "Reorganising the code", "Reorganising the code", "Fixing bugs", "Fixing bugs", "Routing", "Routing", "Iron:router", "Iron:router", "Grid layout", "Grid layout", "Find and FindOne", "Find and FindOne", "Comment box", "Comment box", "Comment list", "Comment list", "SimpleSchemas, autoform and code re-organisation summary", "Final version of source code", "SimpleSchemas, autoform and code re-organisation summary quiz", "M-Instant part 4 - multiple chatrooms!"], "title": "SimpleSchemas, autoform and code re-organisation"}, {"description": "", "video": ["Summary"], "title": "Summary"}]}, {"course_info": "About this course: In this course you will learn how to design and prototype user interfaces to address the users and tasks identified in user research.  Through a series of lectures and exercises, you will learn and practice paper- and other low-fidelity prototyping techniques; you will learn and apply principles from graphic design, including design patterns; you will learn to write a design rationale; and you will learn how to design for specific populations and situations, including principles and practices of accessible design.", "title": "Prototyping and Design", "rating": "4.7", "level": null, "created_by": "University of Minnesota", "package_name": "User Interface Design Specialization ", "target_audience": "Who is this class for: This course is part of a specialization in User Interface Design, and is appropriate for those who want to learn to design and prototype interfaces to computer systems, whether or not you have prior familiarity with computer programming.  We strongly recommend that you first complete an introduction to user interface design and a course on user research, though this course can stand alone for those who have learned those topics elsewhere.", "package_num": "3", "teach_by": [{"name": "Loren Terveen", "department": "Computer Science and Engineering"}, {"name": "Haiyi Zhu", "department": "Computer Science and Engineering"}, {"name": "Lana Yarosh", "department": "Computer Science and Engineering"}, {"name": "Dr. Brent Hecht", "department": "Computer Science and Engineering"}, {"name": "Joseph A Konstan", "department": "Computer Science and Engineering"}], "week_data": [{"description": "A brief introduction to the topic and course structure.", "video": ["Introduction to Prototyping and Design", "Course Introduction"], "title": "Preface"}, {"description": "An introduction to prototyping, including paper and tool-based prototyping.", "video": ["Prototyping:  What, Why, and How", "Low-Fidelity Prototyping", "Paper Prototype Example", "Wireframing and Tool-Based Prototyping", "Physical Low Fidelity Prototyping", "Tool Example #1 (Pop)", "Tool Example #2 (Balsamiq)", "Limits of Prototyping", "Paper Prototyping Assignment Video", "Prototyping Quiz", "Paper prototype assignment"], "title": "Interface Prototyping Techniques"}, {"description": "An introduction to design principles from graphic design, interaction design patterns, and two examples of commercial design guidelines and standards.", "video": ["Introduction to Design Principles & Patterns", "Layout", "Color and Consistency", "Cultural Factors", "Interaction Design Patterns", "Direct Manipulation & User Control (Interview with Ben Shneiderman)", "Case Example:  Google's Material Design", "Case Example: Apple Human Interface Guidelines", "Design Critiques:  Eliciting and Giving Feedback", "Principles and Patterns Quiz"], "title": "Design Principles and Patterns"}, {"description": "An introduction to universal design, with specific lectures focused on particular impairments, limitations, and populations.", "video": ["Introduction to Universal Design", "Universal Design: Sensory Impairments", "Universal Design: Cognitive Impairments", "Universal Design: Physical Limitations", "Universal Design: Tools and Standards", "Design for Older Adults (Interview with Anne Marie Piper)", "Design for Children", "Design and Socioeconomic Differences", "Supporting Low-Literacy Self-Help (Interview with Apala Chavan)", "Universal Design, Accessibility, and Special Populations Quiz"], "title": "Universal Design, Accessibility, Special Populations"}, {"description": "A look at several important and challenging design contexts and how interfaces can address those contexts.", "video": ["Introduction to Platforms and Context", "Mobile UI Design", "Wearable", "Automotive User Interfaces", "IoT & Physical Computing", "Platforms and Contexts Quiz"], "title": "Design for Different Platforms and Contexts"}]}, {"course_info": "About this course: This two-part course introduces the basic mathematical and programming principles that underlie much of Computer Science. Understanding these principles is crucial to the process of creating efficient and well-structured solutions for computational problems.  To get hands-on experience working with these concepts, we will use the Python programming language. The main focus of the class will be weekly mini-projects that build upon the mathematical and programming principles that are taught in the class. To keep the class fun and engaging, many of the projects will involve working with strategy-based games.\n\nIn part 2 of this course,  the programming portion of the class will focus on concepts such as recursion, assertions, and invariants. The mathematical portion of the class will focus on searching, sorting, and recursive data structures.  Upon completing this course, you will have a solid foundation in the principles of computation and programming.  This will prepare you for the next course in the specialization, which will begin to introduce a structured approach to developing and analyzing algorithms.  Developing such algorithmic thinking skills will be critical to writing large scale software and solving real world computational problems.", "title": "Principles of Computing (Part 2)", "rating": "4.8", "level": null, "created_by": "Rice University", "package_name": "Fundamentals of Computing Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Joe Warren", "department": "Computer Science"}, {"name": "Luay Nakhleh", "department": "Computer Science; Biochemistry and Cell Biology "}], "week_data": [{"description": "This week, we will explain the importance of searching.  We will also explore various data structures and learn about inheritance.", "video": ["Introduction ", "The Importance of Searching ", "Generators", "Stacks and Queues ", "Inheritance ", "Grid Class", "Grid search", "Mini-project Video", "Mini-project Description", "Assignment Submission History", "Math Notes on Growth Rates of Functions", "Math Notes on Grid Representations", "Math Notes on Breadth-First Search", "Practice Activity - Sorting strings", "Practice Activity - Working with Distance Fields", "CodeSkulptor  (optional video from our previous class)", "Saving in CodeSkulptor  (optional video from our previous class)", "Beyond CodeSkulptor  (optional video from our previous class)", "Homework 1", "Assignment: Zombie Apocalypse"], "title": "Searching and Data Structures"}, {"description": "This week, we will explain the importance of recursion.", "video": ["The Importance of Recursion ", "Recursion ", "Binary Search ", "Visualizing Recursion ", "Recurrences", "Reading Files ", "Mini-project Video", "Mini-project Description", "Math Notes on Recurrence Relations", "Practice Activity -  Recursion", "Practice Activity - Binary representations for numbers", "Practice Activity - Visualizing recurrences", "Homework 2", "Assignment: Word Wrangler"], "title": "Recursion"}, {"description": "This week, we will explain the importance of trees.  We will also explore how to set up game trees so that we can efficiently search them.", "video": ["The Importance of Trees ", "Lambda ", "Trees", "Illustration of Trees ", "Minimax", "Mini-project Video", "Mini-project Description", "TTTBoard Class", "Math Notes on Trees", "Math Notes on Minimax", "Practice Activity - Nim (Tree search)", "Practice Activity - Drawing trees", "Homework 3", "Assignment: Tic-Tac-Toe (Minimax)"], "title": "Trees"}, {"description": "This week, we will explain the importance of modeling.  We will also explore how to use assertions and invariants to ensure that our models are always consistent and correct.", "video": ["The Importance of Modeling ", "Assertions ", "Invariants", "Modeling ", "Software Development ", "The Basics of the Fifteen Puzzle", "Mini-project Video", "Mini-project Description", "Math Notes on Invariants", "Practice Activity - Solitaire Tantrix", "What is Algorithmic Thinking? ", "Homework 4", "Assignment: The Fifteen Puzzle"], "title": "Modeling, Assertions, and Invariants"}]}, {"course_info": "About this course: This course covers techniques for monitoring your projects in order to align client needs, project plans, and software production. It focuses on metrics and reviews to track and improve project progress and software quality.\n \nUpon successful completion of this course, you will be able to:\n\n - Apply techniques to measure and visualize project progress\n - Integrate Agile review practices to increase project visibility\n - Reflect on lessons learned in software projects through retrospective exercises\n - Improve project and process quality through ongoing measurement", "title": "Reviews & Metrics for Software Improvements", "rating": "4.6", "level": null, "created_by": "University of Alberta", "package_name": "Software Product Management Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "Welcome to the first module! This module is all about creating the “right product”. You will examine various ways of ensuring that you are creating the right product for both your client and your users. You will learn how to conduct a sprint review meeting and why they are an important step for delivering the right product. Then you will look at user studies. You will learn about several techniques for determining the needs of your users. The module concludes by examining how some of the big companies in the industry ensure that they are delivering the right product to their users. \n", "video": ["Specialization Preview", "Meet your presenters: Morgan Patzelt", "Meet your presenters: Bradley Poulette", "Meet Your Facilitator – Christopher Djuric", "Introduction to Reviews & Metrics for Software Improvements", "Course Resources: Reviews & Metrics for Software Improvements", "Course Map: Reviews and Metrics for Software Improvements", "5.1.1: Introduction to Monitoring", "5.1.2: Sprint Review Meeting", "5.1.3: User Studies", "Discussion: Other Methods of Usability Testing", "5.1.4: Industry Examples", "5.1.4A: Industry Examples - Interview", "Module 1: Supplemental Resources", "Module 1: Assessment (Graded)"], "title": "Module 1: Right Product"}, {"description": "Welcome to the second module! Now that you’ve learned about how to make sure you’re creating the “right product”, it’s time to explore how to ensure that product is “done right”. Here, you’ll start with review techniques, some issues surrounding project monitoring in general, and the Goal Quality Metric framework. Then, you’ll move on to desirable properties of metrics and dive into some key metrics for ensuring that you’re on track. You’ll finish off the module with defect analysis, leading you into getting your product “managed right” in the next module.\n", "video": ["5.2.1: Review Techniques", "5.2.1A: Review Techniques", "5.2.2: Monitoring Issues", "5.2.3: Goal, Question, Metric (GQM)", "5.2.4: Desirable Properties of Metrics", "5.2.5: Other Metrics", "5.2.6: Defect Analysis", "Module 2: Supplemental Resources", "Module 2: Assessment (Graded)"], "title": "Module 2: Done Right"}, {"description": "This third module examines the concept of managing your project right. You will learn some important and popular project management techniques. The module starts off by introducing you to the Daily Scrum meeting. You will learn ways to implement daily scrums with the teams that you work with as well as techniques to improve the meetings if they are not working well. Then we will cover the concept of Velocity in more detail which will prepare you for learning about burndown charts. This module covers both Release Burndowns, as well as Iteration Burndowns. We show you how to create, read, and use these useful tracking tools with the teams you work with. Together, these lessons will teach you how to ensure your projects are “managed right”.\n", "video": ["5.3.1: Daily Scrum", "5.3.1A: Daily Scrum - Challenges", "Discussion: Daily Scrum", "5.3.2: Velocity", "5.3.3: Release Burndown Chart", "5.3.3A: Release Burndown Chart - Changing Requirements", "Reading: Release Burndown How-To Guide", "5.3.4: Iteration Burndown Chart", "Module 3: Supplemental Resources", "Module 3: Assessment (Graded)"], "title": "Module 3: Managed Right"}, {"description": "Welcome to the final module of the course! The previous module was focused on ensuring your project was managed right by exploring techniques in project planning. This module will focus on an often-neglected, but very valuable tool: Retrospectives. You’ll explore what retrospectives are and some issues surrounding them. Then, you’ll learn about how a retrospective looks, along with some recommended retrospective exercises. Finally, you’ll round the module off with a summary of the course!\n", "video": ["5.4.1: Retrospectives", "5.4.2: Retrospectives Issues", "5.4.3: Sprint Retrospective", "5.4.4: Project Retrospective Exercises", "5.4.4A: Project Retrospective Exercises - Readying", "5.4.4B: Project Retrospective Exercises - Past", "5.4.4C: Project Retrospective Exercises - Future", "Module 4: Supplemental Resources", "5.4.5: Course Summary", "Acknowledgements", "Module 4: Assessment (Graded)", "Course Assessment (Graded)"], "title": "Module 4: Project Retrospectives"}]}, {"course_info": "About this course: This course will teach you how to develop an embedded systems device. In order to reduce the time to market, many pre-made hardware and software components are available today. You'll discover all the available hardware and software components, such as processor families, operating systems, boards and networks. You'll also learn how to actually use and integrate these components.\n\nAt the end of the course you will be ready to start architecting and implementing your own embedded device! You'll learn how to debug and finetune your device and how to make it run on a low power supply.", "title": "Architecting Smart IoT Devices", "rating": "4.2", "level": "Intermediate", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: In this course you'll learn about the basics of embedded systems components. If you're a product manager, a technical manager or involved in developing embedded systems or other products, then this is the course for you! This course focuses on embedded systems applications in the area of the IoT. Our blended learning approach offers you the best of both worlds: you can learn online whenever you want to, but can still get hands-on coaching from industry experts.\n\nThis course is for first year Master students in Electrical Engineering or Computer Science. Note that as a consequence, quiz questions are more exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Martin Timmerman", "department": "Royal Military Academy Brussels - Vrije Universiteit Brussels (VUB-ETRO) - Dedicated Systems Experts NV/SA (CEO)"}, {"name": "Maarten Weyn", "department": "Faculty of Applied Engineering - University of Antwerp / iMinds"}], "week_data": [{"description": "What you'll learn and how you'll learn it!", "video": ["Welcome to Architecting Smart IoT Devices", "Hardware you'll need for the assignments", "How to navigate through this course", "Getting to know you!"], "title": "Welcome to Architecting Smart IoT Devices"}, {"description": "", "video": ["Welcome to Module 1!", "Processors", "What's a web tour and what does it have to do with quizzes?", "Study of a few Embedded Processor Families", "MCU, SOC, FPGA", "Cache, pipeline and coupling", "Boards", "Where do (development) boards come in?", "Explore examples of boards", "Networks", "Optional Resources", "Network basics - for network newbies", "Sensor Networks for IoT", "Software Components", "Multi-what?", "Operating System types", "Protocol stacks", "Licenses", "Integrated Development Environment", "IoT Components", "IoT today and tomorrow", "IoT and big data (in the cloud)", "Complete solution market offerings", "Application protocols", "SensorTag Experiment", "SensorTag Experiment: what did you find out? ", "Processors", "Boards", "Networks", "Software Components", "IoT Components"], "title": "Hardware & Software for EmS"}, {"description": "", "video": ["Welcome to Module 2!", "From XXS to XXL", "Optional Resources", "Silicon vendor - independent OS", "Silicon vendor OS for IoT", "XXS (RT)OS for IoT", "Evaluation reports on the embedded OS", "Real-time Scheduling", "Optional Resources", "Arbitration in a hardware bus-based environment", "Scheduling algorithms", "Synchronisation and Communication", "Optional Resources", "RTOS overview", "Reading more about RTOS", "What is priority inversion, inheritance and ceiling?", "What does an RTOS have to offer?", "Multitasking programming language", "Investigate an RTOS of your choice", "Device Drivers", "Optional Resources", "VRTX vs Nucleus", "Processor interrupt models", "Device Driver model example", "Driver certification programs", "Five rules for architecting a multithreading design", "Optional Resources", "Rules for tasking", "Rate Monotonic Scheduling", "Tools for schedulability analysis", "Fault-Tolerance Design", "Turn your smartphone into a BB gateway", "Turn your smartphone into a BB gateway", "XXS/XXL", "Real-Time Scheduling", "Synchronisation and Communication web tour", "Device Drivers", "Multithreading Design"], "title": "RTOS"}, {"description": "", "video": ["Welcome to Module!", "Software development tools and environments", "Optional Resources", "Challenges in Embedded Systems Development", "Connecting target and host", "IDE examples", "Languages for Embedded Systems", "Remote debugginng (optional experiment)", "Cross-compiler practice", "Debugging basics: Thread and Device Drivers", "Optional Resources", "Simulation on host", "Logical remote debugging", "Realtime debugging", "Step by step (optional)", "Debugging Specials and Code Tuning", "Optional resources", "MMU as debugging tool", "Finetuning", "Testing and Device Simulation", "Optional Resources", "White- and black-box testing", "Simulating input, capturing output", "Sporadic bugs", "System survival under failure", "Hardware or Software Security?", "Hardware or Software Security?", "Security requirements", "Security coding techniques", "Cryptography", "Security models", "No reverse engineering", "How vendors deal with security issues", "Private Clouds", "Development Tools and Environments", "Debugging Basics", "Debugging Specials"], "title": "System Finalisation "}, {"description": "", "video": ["Welcome to Module 4!", "What is low power?", "Power Budget", "Measuring Power Consumption", "On-board communication", "External Communication", "How long will the battery last?", "Discussion prompt", "Reading assignment", "Graded Quiz Low Power"], "title": "Low Power"}]}, {"course_info": "About this course: This project-centered course provides a guided opportunity for you to practice your agile development skills. Using the venture design process that frames the four courses in this Specialization, you will apply agile processes to a project of your choice or to a provided venture concept. From persona, problem scenario, and user story development to designing user testing and product launch, you’ll practice leading an agile project. You’ll finish the course with a portfolio-building design brief that demonstrates your learning and specialized skills in agile product development.\n\nTo get the most out of this course, we suggest you first complete the other four courses in the Agile Development Specialization (Getting Started: Agile Meets Design Thinking; Running Product Design Sprints, Managing an Agile Team, Testing with Agile). \n\nBy the end of this course, you'll be able to:\n--Formulate foundational positioning statements\n--Create, refine and test actionable personas\n--Conduct user interviews and analyze the results\n--Determine a 'happy path' to quickly test user stories\n--Run motivation and usability testing and evaluate the results\n\nAs a  Project Management Institute (PMI®) Registered Education Provider, the University of Virginia Darden School of Business has been approved by PMI to issue 40 professional development units (PDUs) for this course, which focuses on core competencies recognized by PMI. (Provider #2122) \n\nThis course is supported by the Batten Institute at UVA’s Darden School of Business. The Batten Institute’s mission is to improve the world through entrepreneurship and innovation: www.batteninstitute.org.", "title": "Agile Development in Practice (Project-centered Course)", "rating": "4.6", "level": "Intermediate", "created_by": "University of Virginia", "package_name": "Agile Development Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Alex Cowan", "department": "Darden School of Business"}], "week_data": [{"description": "Welcome to this project-centered course. By completing the four prerequisite courses, you are now ready to  bring together all that you have learned and apply it to develop a product from charter to user testing. To get started, read the course overview and introduce yourself to your classmates. Next, watch the \"Welcome and Getting Started\" video lecture and then get to work developing your positioning statement. We've included some optional review videos to guide you through the process. Post in the discussion forums your Positioning Statement--then take some time to read through your peers' posts and give feedback. ", "video": ["Welcome and Getting Started", "Course and Project Overview", "Introduce yourself", "Giving Feedback", "Milestone 1: Create your position statement", "Milestone 1: What's your position statement?", "The 20-Minute Strategy Brief", "IT Strategy Brief: Value Definition", "IT Strategy Brief: The Customer Journey", "IT Strategy Brief: Key Activities", "The Venture Design Framework"], "title": "Introduction to Your Project"}, {"description": "Welcome to Week 2. This week you'll work on getting a baseline on your personas and discovery plan. Submit this by the end of the week to get (and give) feedback to help improve your final product. If you want to accelerate your learning, go ahead and get started on user interviews and set up a few Google AdWords.", "video": ["Develop Personas and Problem Scenarios", "Focusing Your Persona: Think, See, Feel, Do", "Designing User Stories: Problem Scenarios", "Demo: Creating an Interview Guide Personas", "Demo: Creating an Interview Guide Problem Scenarios", "Overview: Problem Scenario Sprint", "Using \"Day in the Life\" to Drive Empathy", "Milestone 2: Personas, Problem Scenarios & Alternatives"], "title": "Develop Personas and Problem Scenarios"}, {"description": "Welcome to Week 3. This week, you'll continue working on persona development by interviewing at least three people. As you process the transcripts, look for key learnings and share these in the discussion forum, noting how these interviews impact your direction and point of view. If you want to accelerate your learning, interview at least three more learners and complete a \"Day in the Life\".", "video": ["Complete Persona Discovery", "Milestone 3: Persona Discovery", "Milestone 3: What did you learn from persona interviews?", "Getting People to Interview", "Talking with Users", "Skit: Interviewing Trent the Technician", "Overview Problem Scenario Sprint"], "title": "Complete Persona Discovery"}, {"description": "Welcome to Week 4! This week, you're ready work on Milestone 4: Design experiments to test your value proposition. This is an intensive--and exciting--week as you'll get to actually run your tests. Spending around 5 hours probably means just testing your experiment design once. That's fine--that's a great accomplishment! After that, you'll have a solid idea of how to proceed and generally how to test motivation. You'll post your experiment design for peer review and then let the group know how it went in the discussions.", "video": ["Design and Test Your Value Proposition", "How did your experiments go?", "Demo: Drafting Problem Scenarios, Alternatives, and Value Propositions", "Learning What's Valuable", "Recommendations by Type of Project", "Preparing for Motivation Sprints", "Milestone 4: Design and Test Your Value Proposition"], "title": "Design and Test Your Value Proposition"}, {"description": "Welcome to Week 5! This week, you'll focus on creating strong user narrative, going in depth to detail out the user experience and plan atomic rewards. You'll develop epic user stories, child stories, test cases--and then put them up on the wall using sticky notes. Then take a picture and submit it along with the relevant portions of the Venture Design Template for peer review. Be sure to save time to give a thorough review to at least one of your peer's submissions.", "video": ["Create Strong User Narrative", "Writing Great User Stories", "IT Strategy Brief: The Customer Journey", "Good Collaboration", "Milestone 5: User Narrative"], "title": "Create Strong User Narrative"}, {"description": "Welcome to Week 6. This week, you'll focus on developing your user test plan, exploring patterns & comparables for one user story, and then drafting at least two different concepts for that story based on alternative patterns and comparables. You'll also develop interactive wireframes that directly relate to the narrative. At the end of this week, you will submit your test plan and wireframes for peer review and give feedback to at least one of your peer's on their test plan.", "video": ["Design User Tests", "Test-Driven Proposition Design", "Creating Good Test Items", "The Importance of Comparables and Prototyping", "Models, Patterns & Comparables", "Demo: Creating Interactive Prototypes in Balsamiq", "Milestone 6: User Testing"], "title": "Design Prototypes and Usability Test for Them"}, {"description": "Welcome to week 7. This week you will conduct user testing and reflect on the results. With this accomplished, you can finalize your Venture Design Template and upload it (or a link to it) for your peers to review next week.  We're excited to see these projects! ", "video": ["Conduct User Testing", "User Testing Results", "Testing Usability", "Running Usability Tests", "Your Completed Venture Design--including user testing"], "title": "Conduct User Testing and Submit Your Full Project for Review"}, {"description": "Welcome to week 8, our final week together. Your main assignment this week is to carefully review at least three different projects. This is no small task--but please complete it promptly so that everyone can receive their Specialization Certificate on time. We've also provided resources for you to create a portfolio to showcase your final project for your team, your employer, or for an interview. Finally, please share your reflections about the course experience. It's been great working with--and learning from--you! ", "video": ["Milestone 8: Peer reviewing final projects", "So, how did it go?", "Final Thoughts", "Portfolio Resources"], "title": "Review Your Peers' Projects"}]}, {"course_info": "About this course: Writing good code for data science is only part of the job. In order to maximizing the usefulness and reusability of data science software, code must be organized and distributed in a manner that adheres to community-based standards and provides a good user experience. This course covers the primary means by which R software is organized and distributed to others. We cover R package development, writing good documentation and vignettes, writing robust software, cross-platform development, continuous integration tools, and distributing packages via CRAN and GitHub. Learners will produce R packages that satisfy the criteria for submission to CRAN.", "title": "Building R Packages", "rating": "4.3", "level": "Intermediate", "created_by": "Johns Hopkins University", "package_name": "Mastering Software Development in R Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Roger D. Peng, PhD", "department": "Bloomberg School of Public Health"}, {"name": "Brooke Anderson", "department": "Colorado State University"}], "week_data": [{"description": "", "video": ["Welcome to Building R Packages", "Before You Start", "Using Mac OS", "Using Windows", "Using Unix/Linux", "R packages", "Basic Structure of an R Package", "DESCRIPTION File", "NAMESPACE File", "Namespace Function Notation", "Loading and Attaching a Package Namespace", "The R Sub-directory", "The man Sub-directory", "Summary", "The devtools package", "Creating a Package", "Other Functions", "R Package and devtools"], "title": "Getting Started with R Packages"}, {"description": "", "video": ["Documentation", "Vignette's and README Files", "Knitr / Markdown", "Common knitr Options", "Help Files and roxygen2", "Common roxygen2 Tags", "Overview", "Data for Demos", "Internal Data", "Data Packages", "Summary", "Introduction", "The testthat Package", "Passing CRAN Checks", "Documenting Code"], "title": "Documentation and Testing"}, {"description": "", "video": ["Overview", "The General Public License", "The MIT License", "The CC0 License", "Overview", "Paying it Forward", "Linus’s Law", "Hiring", "Summary", "Introduction", "git", "Initializing a git repository", "Committing", "Browsing History", "Linking local repo to GitHub repo", "Syncing RStudio and GitHub", "Issues", "Pull Request", "Merge Conflicts", "Introduction", "The Unix Philosophy", "Default Values", "Naming Things", "Playing Well With Others", "Summary", "Testing, GitHub, and Open Source"], "title": "Licensing, Version Control, and Software Design"}, {"description": "", "video": ["Overview", "Web Services for Continuous Integration", "Using Travis", "Using AppVeyor", "Summary", "Introduction", "Handling Paths", "Saving Files & rappdirs", "rappdirs", "Options and Starting R", "Package Installation", "Environmental Attributes", "Summary", "Building an R Package"], "title": "Continuous Integration and Cross Platform Development"}]}, {"course_info": "About this course: The device or \"platform\" that a game is developed for and played on has a massive impact on the game development process. In this hands-on course you will explore how to develop a game for a variety of modern platforms, including Web, Windows, Mac OS X, iOS, and Android. While building a complete game, you will learn intermediate and advanced game development techniques in the Unity game engine.  By the end of the course, you will understand how to develop, refine, package, and prepare your game for distribution on a variety of game platforms. Particular attention will be given to developing a 2D platformer game that supports multiple forms of input (keyboard/mouse, controller, and touch), works across multiple forms of output (screen size, screen resolution, sound), and performs well on a variety of computing devices.", "title": "Game Development for Modern Platforms", "rating": "4.8", "level": null, "created_by": "Michigan State University", "package_name": "Game Design and Development Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Brian Winn", "department": "Media and Information"}], "week_data": [{"description": "Hello game developers! Across this course, we will build a complete 2D platformer game as a vehicle to talk about how to develop, refine, package, and prepare games for distribution on a variety of game platforms.  This week we will launch right into the thick of it and set up our 2D game, create our player, and give the player control.If you are having troubles with a concept, quiz, or technical issue with Unity, you should post on the Discussion Forum to ask for help.  Remember to be a good Coursera community member and help others out when you can.Let’s get started!", "video": ["Course Overview", "Brief History of Game Platforms", "History of Video Games", "Modern Game Platforms", "Project Overview", "Download and Install (the latest) Unity3D", "Troubleshooting Tips", "Downloading Project Assets", "Getting Started", "Creating Tree Sprite", "Creating Ground Tiles", "Creating Platforms", "Setting up the Player", "Tags", "Layers", "Sorting Layers", "Player Animations", "Player Animator Controller", "Character Controller", "Solutions to Sparty not moving", "Using Game Controllers", "Game Controller Details", "Week 1 Quiz"], "title": "Starting the Project"}, {"description": "Welcome back!\n\nThis week we will continue to build our 2D platformer game, getting into some level design and gameplay enhancements, including adding an enemy to our game. Along the way we will start to introduce some Unity Editor tips and tricks and some more advanced programming concepts.\n\nAs always, if you are having troubles with a concept, quiz, or technical issue with Unity or the project, you should post on the Discussion Forum to ask for help.  Remember to be a good Coursera community member and help others out when you can.\n\nOnward!", "video": ["Level Design with a Snap!", "Moving Platforms", "Project Organization", "Camera Follow", "Character Controller Code Part 1", "Character Controller Code Part 2", "Adding Double Jump", "Death Zone", "Alternative to Deathzone?", "Coins", "Victory", "Particle Effects", "Enemy Setup", "Enemy Animation", "Attacking and Stunning Enemy", "Moving Enemy", "Enemy Code Part 1", "Enemy Code Part 2", "Player Bounce on Enemy Stun", "Alternative way to bounce?", "Week 2 Quiz"], "title": "Getting the Game Playable"}, {"description": "Hi!\n\nThis week we will finish our example game, bringing in some visual polish and UI, adding a game manager, and making sure our game controls work across multiple platforms.  We will continue to introduce additional design and programming concepts along the way.  And, at the end of this week, you will start the process of modifying the game and transforming it into your own creation!  How exciting!\n\nAs always, if you are having troubles with a concept, quiz, or technical issue with Unity or the project, you should post on the Discussion Forum to ask for help.  Remember to be a good Coursera community member and help others out when you can.\n\nGo! Go! Go!", "video": ["Parallax Scrolling Part 1", "Parallax Scrolling Part 2", "Image Effects", "User Interface Setup", "Hiding UI in the Scene View", "Game Manager", "Player Prefs", "Alternative to PlayerPrefs?", "Game Manager Code", "Custom Editor Tools", "Out-of-Game Scenes", "The Main Menu", "Cross Platform Menu Controller Support", "Supporting Mobile Cross Platform Input", "Course Project Goals", "Modification Discussion", "Week 3 Quiz"], "title": "Building Out the Game"}, {"description": "Welcome back game developers!\n\nThis week, while you work on your game, we will discuss how to polish, balance, and optimize your game (and future games), build the game for various modern platforms, as well as bring the game to market.  These lectures and readings contain a wealth of game making goodness that I hope will inspire and excite you. \n\nAs always, if you are having troubles with a concept, quiz, or technical issue with Unity or the project, you should post on the Discussion Forum to ask for help.  Remember to be a good Coursera community member and help others out when you can.\n\nLet the final crunch commence!", "video": ["Game Polish (aka, Game Feel and Juice)", "Integrating Analytics", "Monetization", "Playtesting and Balancing", "Optimization", "Building Overview (+ Web Player)", "Building for WebGL", "Building for PC and Mac", "Building for iOS", "Building for Android", "Building for iOS and Android Resources", "Taking Screenshots", "Creating a Game Trailer", "Creating a Game Web Page", "Game Web Page Resources", "Distribution Channel Resources", "Marketing and Distribution Discussion", "Finishing Up", "End of Course", "Additional Resources", "2D Platformer Game Peer Review"], "title": "Preparing to Ship!"}]}, {"course_info": "About this course: This 4 week MOOC builds upon the core Android app components and concurrency frameworks covered in Course 2 by focusing on started and bound services, local inter-process communication (IPC), and content providers. Case study apps will be examined from multiple perspectives to learn how to program these app components using Android's material design paradigm. Students will work incrementally on a hands-on project involving a material design-based RSS reader app. Each week you will add additional capabilities to the project, based on material covered in the lecture videos. You'll spend roughly 4 hours per week watching video lectures, taking quizzes, and programming assignments with Java and Android.", "title": "Android App Components - Services, Local IPC, and Content Providers", "rating": "4.3", "level": "Beginner", "created_by": "Vanderbilt University", "package_name": "Android App Development Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Dr. Douglas C. Schmidt", "department": "Electrical Engineering and Computer Science"}], "week_data": [{"description": "This module provides an introduction to the contents of the MOOC and summarizes effective learning strategies. Learning objectives are presented in the Module Introduction video lecture.", "video": ["MOOC 3 Overview", "Responses to Frequently Asked Questions (FAQ) and PDF Versions of Slides", "Module Introduction", "MOOC Contents, Organization, and Learning Strategies (Part 1)", "MOOC Contents, Organization, and Learning Strategies (Part 2)", "Overview of Layered Architectures", "Primary and Secondary Storage Mechanisms", "Kernel IPC and Processing Mechanisms", "Android Kernel Extensions", "An Introduction to Key Concepts", "Android Hardware Abstraction Layer (HAL)", "Android Runtime: Execution Environments", "Android Runtime: Core and Native Libraries", "Overview of Object-Oriented Frameworks", "Service Frameworks and Packaged Apps", "Module 1 - Overview of the Android App Components"], "title": "MOOC Overview"}, {"description": "Learning objectives are presented in the Module Introduction video lecture.", "video": ["Module Introduction", "Overview of Android Services (Part 1)", "Overview of Android Services (Part 2)", "Overview to Android Services (Part 3)", "Service Lifecycle Operations (Part 1)", "Service Lifecycle Operations (Part 2)", "Service Lifecycle Operations (Part 3)", "The IntentService Framework", "Service Deployment and Communication Models", "Case Study: PingPongReceiverService App", "Peer Review: Peer Review: Assignment 1: IntentServices (Optional)", "Module 2 - Started and Bound Services"], "title": "Android Started and Bound Services"}, {"description": "Learning objectives are presented in the Module Introduction video lecture.", "video": ["Module Introduction", "Overview of Android Local Inter-Process Communication (IPC) (Part 1)", "Overview of Android Local Inter-Process Communication (IPC) (Part 2)", "Service and Activity Communication\u000b Via Android Messengers (Part 1)", "Service and Activity Communication\u000b Via Android Messengers (Part 2)", "Programming Started Services with Intents & Messengers  (Part 1)", "Programming Started Services with Intents & Messengers (Part 2)", "Programming Started Services with Intents & Messengers (Part 3)", "Programming Started Services with Intents & Messengers (Part 4)", "Programming Bound Services with Messengers (Part 1)", "Programming Bound Services with Messengers (Part 2)", "Programming Bound Services with Messengers (Part 3)", "Programming Bound Services with Messengers (Part 4)", "Peer Review: Assignment 2: IntentService & Messages (Optional)", "Module 3 - Android: Local Inter-Process Communication (IPC)"], "title": "Android Local Inter-Process Communication (IPC)"}, {"description": "Learning objectives are presented in the Module Introduction video lecture.", "video": ["Module Introduction", "Overview of Content Providers & Content Resolvers (Part 1)", "Overview of Content Providers & Content Resolvers (Part 2)", "Overview of SQLite (Part 1)", "Overview of SQLite (Part 2)", "Developing a Content Provider (Part 1)", "Developing a Content Provider (Part 2)", "Case Study: The HobbitContentProvider App (Part 1)", "Case Study: The HobbitContentProvider App (Part 2)", "Case Study: The HobbitContentProvider App (Part 3)", "Assignment 3: Content Providers (Optional)", "Module 4 - Android Content Providers"], "title": "Android Content Providers"}]}, {"course_info": "About this course: In this MOOC, we will learn the basic concepts and principles of crytography, apply basic cryptoanalysis to decrypt messages encrypted with mono-alphabetic substitution cipher, and discuss the strongest encryption technique of the one-time-pad and related quantum key distribution systems.  We will also learn the efficient symmetric key cryptography algorithms for encrypting data, discuss the DES and AES standards, study the criteria for selecting AES standard, present the block cipher operating modes and discuss how they can prevent and detect the block swapping attacks,  and examine how to defend against replay attacks. We will learn the Diffie-Hellman Symmetric Key Exchange Protocol to generate a symmetric key for two parties to communicate over insecure channel. We will learn  the modular arithmetic and the Euler Totient Theorem to appreciate the RSA Asymmetric Crypto Algorithm,  and use OpenSSL utility to realize the basic operations of RSA Crypto Algorithm. Armed with these knowledge, we learn how to use PHP  Crypto API to write secure programs for encrypting and decrypting documents  and for signing and verify documents. We then apply these techniques to enhance the registration process of a web site which ensures the account created is actually requested by the owner of the email account.", "title": "Basic Cryptography and Programming with Crypto API", "rating": null, "level": "Intermediate", "created_by": "University of Colorado System", "package_name": "Fundamentals of Computer Network Security Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Edward Chow", "department": "Computer Science"}], "week_data": [{"description": "In this module we learn the basic concepts and principles of crytography, introduce the basic concept of cryptoanalysis using mono-alphabetic substitution cipher as an example, and discuss the one-time-pad and quantum key distribution concepts.", "video": ["Course Overview", "Basic Cryptography", "Introduction to cryptology, Part1, from IBM developerWorks", "Kerckhoff's Principle", "What makes a cryptographic protocol strong?", "CryptoAnalysis of Monoalphabetic Substitution Cipher", "Basic Cryptoanalysis. Three Basic Variations of Cryptoanalysis or Cipher Attack:", "Columnar Transposition Ciphers", "Columnar transposition Ciphers", "One-Time Pad & Quantum Key Distribution", "One time pad encryption", "Discussion Topic", "Exam 2.1"], "title": "Basic Cryptography"}, {"description": "In this module we present the basic mechanism of symmetric key crytography algorithms, discuss the DES and AES standard, describe the criteria for selecting AES standard, present the block cipher operating modes and discuss how the block swapping attacks and replay attacks can be prevented and detected. ", "video": ["Symmetric Key Algorithm", "Symmetric Key Encryption and DES", "Advanced Encryption Standard", "AES: The Advanced Encryption Standard by Avi Kak", "AES Expansion/Schedule", "Section 8.8 Key Expansion Algorithm from Prof. Section 8.8 Key Expansion Algorithm Lecture Note", "AES Selection Criteria", "Report on the Development of the Advanced Encryption Standard (AES)", "Dealing with Block Swapping and Replay Attacks", "Block Cipher Mode of Operation", "Block cipher mode of operation", "Project 2a. Using OpenSSL to encrypt/decrypt data", "Exam 2.2. Symmetric Key Algorithm"], "title": "Symmetric Key Cryptography"}, {"description": "In this module we will learn the modular arithmetic, the Euler Totient Theorm, the RSA Asymmetric Crypto Algorithm,  use OpenSSL to realize the basic operations of RSA Crypto Algorithm,  and Diffie-Hellman Symmetric Key Exchange Protocol to derive session keys.", "video": ["Diffie-Hellman Symmetric Key Exchange Protocol", "Diffie-Hellman Key Exchange Protocol", "Modular Arithmetic", "Modular Arithemetic", "Euler Totient Theorem", "Euler's Totient Theorem", "RSA Asymmetric Crypto Algorithm", "RSA Cryptosystem", "Understanding RSA with OpenSSL", "OpenSSL Command-Line HOWTO", "Project 2b. Decipher the message encrypted with shared key established by the  Diffie-Hellman Key Exchange Protocol", "Exam 2.3. Asymmetric Key Cryptography"], "title": "Asymmetric Key Cryptography"}, {"description": "In this module, we learn how to use Crypto API to write secure programs for encrypting and decrypting documents,  and for signing and verify documents. We then apply the techniques to enhance the registration process of a web site which ensures the account created is actually belonging to the owner of the email account the request profile.", "video": ["Use Crypto API to Encrypt and Decrypt", "PHP encrypt and decrypt crypto api", "Use Crypto API to Sign and Verify", "PHP Openssl sign and verify API", "Mini Capstone: Enhance Registration Web Site Security", "Ashley Madison Case", "Exam 2.4. Develop Secure Programs with Crypto API"], "title": "Develop Secure Programs with Crypto API"}]}, {"course_info": "About this course: Relational Database Support for Data Warehouses is the third course in the Data Warehousing for Business Intelligence specialization. In this course, you'll use analytical elements of SQL for answering business intelligence questions. You'll learn features of relational database management systems for managing summary data commonly used in business intelligence reporting. Because of the importance and difficulty of managing implementations of data warehouses, we'll also delve into storage architectures, scalable parallel processing, data governance, and big data impacts.", "title": "Relational Database Support for Data Warehouses", "rating": "4.6", "level": null, "created_by": "University of Colorado System", "package_name": "Data Warehousing for Business Intelligence Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Michael Mannino", "department": "Business School, University of Colorado Denver"}], "week_data": [{"description": "Module 1 introduces the course and covers concepts that provide a context for the remainder of this course. In the first two lessons, you’ll understand the objectives for the course and know what topics and assignments to expect. In the remaining lessons, you will learn about DBMS extensions, a review of schema patterns, data warehouses used in practice problems and assignments, and examples of data warehouses in education and health care. This informational module will ensure that you have the background for success in later modules that emphasize details and hands-on skills.You should also read about the software requirements in the lesson at the end of module 1. I recommend that you try to install the Oracle software this week before assignments begin in week 2. If you have taken other courses in the specialization, you may already have installed the Oracle software.", "video": ["Course introduction video", "Course objectives video lecture", "Powerpoint lecture notes for lesson 1", "Course topics and assignments video lecture", "Powerpoint lecture notes for lesson 2", "Optional textbook", "DBMS extensions video lecture", "Powerpoint lecture notes for lesson 3", "Relational database schema patterns video lecture", "Powerpoint lecture notes for lesson 4", "Colorado Education Data Warehouse video lecture", "Powerpoint lecture notes for lesson 5", "Data warehouse standards in health care video lecture", "Powerpoint lecture notes for lesson 6", "Overview of software requirements", "Overview of database software installation", "Oracle installation notes", "Making connections to a local Oracle database", "SQL statements for Store Sales tables", "SQL statements for Inventory tables", "Optional textbook reading material", "Module 1 quiz"], "title": "DBMS Extensions and Example Data Warehouses"}, {"description": "Now that you have the informational context for relational database support of data warehouses, you’ll start using relational databases to write business intelligence queries! In module 2, you will learn an important extension of the SQL SELECT statement for subtotal operators. You’ll apply what you’ve learned in practice and graded problems using Oracle SQL for problems involving the CUBE, ROLLUP, and GROUPING SETS operators. Because the subtotal operators are part of the SQL standard, your learning will readily apply to other enterprise DBMSs. At the end of this module, you will have solid background to write queries using the SQL subtotal operators as a data warehouse analyst.", "video": ["GROUP BY clause review video lecture", "Powerpoint lecture notes for lesson 1", "Additional problems for lesson 1", "SQL CUBE operator video lecture", "Powerpoint lecture notes for lesson 2", "Additional problems for lesson 2", "SQL ROLLUP operator video lecture", "Powerpoint lecture notes for lesson 3", "Additional problems for lesson 3", "SQL GROUPING SETS operator video lecture", "Powerpoint lecture notes for lesson 4", "Additional problems for lesson 4", "Variations of subtotal operators video lecture", "Powerpoint lecture notes for lesson 5", "Additional problems for lesson 5", "Optional textbook reading material", "Assignment notes", "Module 2 quiz", "Quiz for module 2 assignment", "Assignment for module 2"], "title": "SQL Subtotal Operators"}, {"description": "After your experience using the SQL subtotal operators, you are ready to learn another important SQL extension for business intelligence applications. In module 3, you will learn about an extended processing model for SQL analytic functions that support common analysis in business intelligence applications. You’ll apply what you’ve learned in practice and graded problems using Oracle SQL for problems involving qualitative ranking of business units, window comparisons showing relationships of business units over time, and quantitative contributions showing performance thresholds and contributions of individual business units to a whole business. Because analytic functions are part of the SQL standard, your learning will apply to other enterprise DBMSs. At the end of this module, you will have solid background to write queries using the SQL analytic functions as a data warehouse analyst.", "video": ["Processing Model and Basic Syntax video lecture", "Powerpoint lecture notes for lesson 1", "Additional  problems for lesson 1", "Extended Syntax and Ranking Functions video lecture", "Powerpoint lecture notes for lesson 2", "Additional problems for lesson 2", "Window Comparison I video lecture", "Powerpoint lecture notes for lesson 3", "Additional problems for lesson 3", "Window Comparisons II video lecture", "Powerpoint lecture notes for lesson 4", "Additional problems for lesson 4", "Functions for Ratio Comparisons video lecture", "Powerpoint lecture notes for lesson 5", "Additional problems for lesson 5", "Optional textbook reading material", "Assignment notes", "Module 3 quiz", "Quiz for module 3 assignment", "Assignment for module 3"], "title": "SQL Analytic Functions"}, {"description": "After acquiring query formulation skills for development of business intelligence applications, you are ready to learn about DBMS extensions for efficient query execution. Business intelligence queries can use lots of resources so materialized view processing and design has become an important extension of DBMSs. In module 4, you will learn about an SQL statement for creating materialized views, processing requirements for materialized views, and rules for rewriting queries using materialized views. To gain insight about the complexity of query rewriting, you will practice rewriting queries using materialized views. To provide closure about relational database support for data warehouses, you will learn about about Oracle tools for data integration, the Oracle Data Integrator, along with two SQL statements useful for specific data integration tasks. After this module, you will have a solid background to use materialized views to improve query performance and deploy the Extraction, Loading, and Transformation approach for data integration as a data warehouse administrator or analyst.", "video": ["Background on traditional views video lecture", "Powerpoint lecture notes for lesson 1", "Additional problems for lesson 1", "Materialized view definition and processing video lecture", "Powerpoint lecture notes for lesson 2", "Additional problems for lesson 2", "Query Rewriting Rules video lecture", "Powerpoint lecture notes for lesson 3", "Query Rewriting Examples video lecture", "Powerpoint lecture notes for lesson 4", "Additional problems for lesson 4", "Oracle Tools for Data Integration video lecture", "Powerpoint lecture notes for lesson 5", "Additional problems for lesson 5", "Optional textbook reading material", "Assignment notes", "Module 4 quiz", "Quiz for module 4 assignment", "Assignment for module 4"], "title": "Materialized View Processing and Design"}, {"description": "Module 5 finishes the course with a return to conceptual material about physical design technologies and data governance practices. You will learn about storage architectures, scalable parallel processing, big data issues, and data governance. After this module, you will have background about conceptual issues important for data warehouse administrators.", "video": ["Storage Architectures video lecture", "Powerpoint lecture notes for lesson 1", "Scalable Parallel Processing Approaches video lecture", "Powerpoint lecture notes for lesson 2", "Big data issues video lecture", "Powerpoint lecture notes for lesson 3", "Data Governance video lecture", "Powerpoint lecture notes for lesson 4", "Optional textbook reading material", "Closing Lecture", "Module 5 quiz"], "title": "Physical Design and Governance"}]}, {"course_info": "About this course: Engineering Maintainable Android Apps, which is a 4 week MOOC that shows by example various methods for engineering maintainable Android apps, including test-driven development methods and how to develop/run unit tests using JUnit and Robotium (or equivalent automated testing frameworks for Android), as well as how to successfully apply common Java/Android software patterns to improve the extensibility and clarity of Android apps. Students will work on the appropriate automated unit quizzes, based on the material covered in the lecture videos. These lessons will demonstrate the benefits of good software engineering practices that are targeted at creating maintainable code for mobile apps.\n\nThere will be roughly 3-4 hours of student engagement time per week, including video lectures, and quizzes. The ordering of the modules within the course is designed to be flexible.  In particular, students can watch the videos in whatever order suits their experience and needs, e.g., they may want to watch the unit testing videos prior to the software pattern videos if they prefer to learn about unit testing first.", "title": "Engineering Maintainable Android Apps", "rating": "4.3", "level": null, "created_by": "Vanderbilt University", "package_name": "Android App Development Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Dr. Douglas C. Schmidt", "department": "Electrical Engineering and Computer Science"}, {"name": "Michael Walker", "department": "EECS"}, {"name": "Dr. C. Jules White", "department": "Electrical Engineering and Computer Science"}], "week_data": [{"description": "Engineering Maintainable Android Apps, which is a 4 week MOOC that shows by-example various methods for engineering maintainable Android apps, including test-driven development methods and how to develop/run unit tests using JUnit and Robotium (or equivalent automated testing frameworks for Android), as well as how to successfully apply common Java/Android software patterns to improve the extensibility and clarity of Android apps. ", "video": ["Course Intro"], "title": "MOOC Overview"}, {"description": "", "video": ["Software Engineering as Search", "Why Test?", "Unit Testing", "Unit Testing with Android Studio", "The Importance of Test Automation", "Code Coverage", "Styles of Testing", "Assignment: Testing (Optional)", "Testing I Quiz"], "title": "Software Engineering & Testing I"}, {"description": "", "video": ["Functional & Non-functional Properties", "Refactoring", "Refactoring and Regression Testing", "Integration Testing", "Integration Testing with Android Studio", "Mock Objects with Android Studio", "UI Testing with Espresso in Android Studio", "Optional Assignment 1: Android Test Driven Development (Programming)", "Testing II Quiz"], "title": "Software Engineering & Testing II"}, {"description": "", "video": ["Security & Sustainability", "Economy of Mechanism", "Economy of Mechanism Example", "Least Privilege", "Least Privilege Example", "Complete Mediation", "Complete Mediation Example", "Secure Defaults", "Secure Defaults Example", "Security I Quiz"], "title": "Security & Sustainability I"}, {"description": "This module provides an introduction to Unit Testing using the Junit 4.0 Framework in Android, as well as an introduction to Testing Frameworks using the Robotium open-source test framework for writing graybox testing cases to automate the testing of multi-Activity Android apps.", "video": ["Traditional App Accounts", "Traditional vs. Mobile App Accounts", "App Account Mapping to Linux Users", "Apps Lie & Steal", "How Android Protects Apps", "What Android Does Not Protect", "The Challenges of Secure Coding", "Security Vulnerability Walkthrough", "The iRemember App Example", "Privilege Escalation I", "Privilege Escalation II", "Privilege Escalation III", "Course Wrap-up", "Security II Quiz"], "title": "Security & Sustainability II"}]}, {"course_info": "About this course: In this six-week capstone course, you will gain practical management experience in a safe, simulated software production setting. You will apply Agile practices and techniques to conquer industry-inspired challenges. Interacting with a realistic client, you will discern what they want and express what they truly need in software requirements to drive software production. Upon completing the capstone, you will be prepared to advance your career as a confident software product management professional.", "title": "Software Product Management Capstone", "rating": "4.8", "level": null, "created_by": "University of Alberta", "package_name": "Software Product Management Specialization ", "target_audience": null, "package_num": "6", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "week_data": [{"description": "Welcome to the first week of the capstone. This week, you will be primarily focusing on eliciting requirements. You will get to meet your client as well as collaborate with an expert advisor. You will also meet the development team that you will be working with. They will help you to clarify and elaborate on the information elicited from the client and expert. You will finish off the week by creating a Requirements Document. ", "video": ["Capstone Preview", "Meet Your Facilitator – Christopher Djuric", "Software Product Management Capstone: Open Study Guide", "Course Map: Software Product Management Capstone", "0.1 Introduction", "0.2 Tutorial: Capstone Introduction", "0.3 Software Product Management Capstone Community Guidelines", "0.4 Plagiarism", "0.6 Discussion Forum: Introduce Yourself", "0.7 Capstone Assignments Time Estimates", "0.8 Resource: Software Product Manager Job Posting", "1.1 Email: Greetings from Inukshuk Books", "1.2 Tutorial: Decision Tree", "1.3 Decision Tree: Meeting the Client", "1.4 Decision Tree: Expert Advisor Meeting", "1.5 Email: TedTalk Video", "1.6  Video Simulation: Development Team Introduction (Monday)", "1.7 Video Simulation: Development Team Meeting (Monday)", "1.8 Tutorial: Google Docs Tutorial (Video Tutorial)", "1.9 Tutorial: Google Docs Tutorial (Written Tutorial)", "0.5 Plagiarism Quiz", "1.10 Assignment: Requirements Document (Graded)"], "title": "Capstone Project - Week 1"}, {"description": "Now that the requirements are elicited, it’s now time to start refining those user stories! This week, you will conduct Requirements Technical Reviews on your peers Requirements Documents. You will also discuss risks with the development team and generate a risk plan. \n", "video": ["2.3 Video Simulation: Risk Discussion (Wednesday)", "2.5 Email: Removing Android", "2.1 Assignment: Requirements Technical Review - Part 1 (Graded)", "2.2 Assignment: Requirements Technical Review - Part 2 (Graded)", "2.4 Assignment: Risk Plan (Graded)"], "title": "Capstone Project - Week 2"}, {"description": "There’s a lot of work to be done this week to prepare for the first sprint. User stories need to be prioritized and assessed for risks, release and iteration plans need to be created, and design needs to begin. You will work with your team to get everything ready so that Sprint 1 can start promptly next week!", "video": ["3.1 Resource: Project Requirements/User Stories", "3.2 Email: Size Estimates and Dependencies", "3.3 Tutorial: Prioritization Template", "3.4 Decision Tree: Prioritization Meeting", "3.5 Email: Risk Assessment", "3.7 Exercise: Week 3 Release Planning", "3.9 Resource: Week 3 Project Release Plan (Proposed Solution)", "3.10 Video Simulation: Task Breakdown Meeting", "3.11 Email: Task Breakdown", "3.6 Assessment: Prioritization (Graded)", "3.8 Assignment: Week 3 Release Plan (Graded)", "3.12 Assignment: Iteration Plan for Sprint 1 (Graded)", "3.13 Assignment: Product Wireframe (Graded)"], "title": "Capstone Project - Week 3"}, {"description": "This is your first development sprint! You will have stand-up meetings with the development team. Your team will also demo the product to the client and expert at the end of the week. There will be issues that need solving, plans to make for the next sprint, and monitoring that will need to be done! \n", "video": ["4.1 Video Simulation: Standup Meeting (Wednesday)", "4.2 Email: Acceptance Tests", "4.4 Simulation: Office Chat Conversation (Thursday)", "4.5 Video Simulation: Standup Meeting (Friday)", "4.6 Video Simulation: Client Demo and Backlog Refinements (Friday)", "4.8 Video Simulation: Sprint Retrospective (Friday)", "4.9 Resource: Sprint 1 Retrospective - Meeting Minutes", "4.10 Exercise: Week 4 Release Planning", "4.12 Resource: Week 4 Project Release Plan  (Proposed Solution)", "4.14 Email: Iteration Plan Explanation", "4.3 Assignment: Writing Acceptance Criteria and Tests", "4.7 Assignment: Iteration Burndown Sprint 1 (Graded)", "4.11 Assignment: Week 4 Release Plan (Graded)", "4.13 Assignment: Iteration Plan for Sprint 2 (Graded)"], "title": "Capstone Project - Week 4"}, {"description": "This is Sprint 2 of development. Similar to last week, there will be standups and other meetings. The team will also demo the product at the end of the sprint. You will be expected to monitor the progress of the project and prepare a plan for the third and final sprint--but a surprise twist at the end of the sprint might require you to be agile. ", "video": ["5.1 Video Simulation: Standup Meeting (Monday)", "5.3 Video Simulation: Standup Meeting (Wednesday)", "5.4 Video Simulation: Standup Meeting (Friday)", "5.5 Video Simulation: Client Demo (Friday)", "5.6 Video Simulation: Backlog Refinement  (Friday)", "5.7 Exercise: Week 5 Release Planning", "5.9 Resource: Week 5 Project Release Plan (Proposed Solution)", "5.11 Video Simulation: Sprint Retrospective (Friday)", "5.12 Resource: Sprint 2 Retrospective - Meeting Minutes (Friday)", "5.2 Assignment: Risk Plan Update (Graded)", "5.8 Assignment: Week 5 Release Plan (Graded)", "5.10 Assignment: Release Burndown (Graded)", "5.13 Assignment: Iteration Plan for Sprint 3 (Graded)"], "title": "Capstone Project - Week 5"}, {"description": "With the trade show quickly approaching, you will need to work with the team to create an impressive working demo by the end of this sprint. With the added pressure, issues may arise. Will the team get the product completed in time? ", "video": ["6.1 Video Simulation: Standup Meeting (Wednesday)", "6.2 Decision Tree: Loose Cannon", "6.3 Video Simulation: Standup Meeting (Friday)", "6.4 Video Simulation: Client Demo (Friday)", "6.6 Supplemental Reading: Release Burndown Solution", "6.7 Video Simulation: Project Retrospective", "6.8 Resource: Project Retrospective - Meeting Minutes", "6.10 Congratulations on completing the Capstone", "Discussion Forum: Your Specialization Experience", "Acknowledgements", "6.5 Assignment: Release Burndown (Graded)", "6.9 Assignment: Personal Project Retrospective (Graded)"], "title": "Capstone Project - Week 6"}]}, {"course_info": "About this course: This course is for anyone who would like to apply their technical skills to creative work ranging from video games to art installations to interactive music, and also for artists who would like to use programming in their artistic practice. \n\nThis course will teach you how to develop and apply programming skills to creative work. This is an important skill within the development of creative mobile applications, digital music and video games. It will teach the technical skills needed to write software that make use of images, audio and graphics, and will concentrate on the application of these skills to creative projects. Additional resources will be provided for students with no programming background. \n\nAt the end of this course, you will be able to:\n\n* Write creative, audiovisual programs in the Processing environment that run on desktop and mobile \n* Programatically manipulate sound in creative ways \n* Display images and image sequences\n* Generate interactive, algorithmic graphics\n* Work with a 2D physics engine to create a basic game", "title": "Creative Programming for Digital Media & Mobile Apps", "rating": "4.7", "level": null, "created_by": "University of London, Goldsmiths, University of London", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Dr Marco Gillies", "department": "Computing Department, Goldsmiths, University of London"}, {"name": "Dr Matthew Yee-King", "department": "Computing Department, Goldsmiths, University of London"}, {"name": "Dr Mick Grierson", "department": "Computing Department, Goldsmiths, University of London"}], "week_data": [{"description": "This week we are getting up and running with the Processing IDE. We will show you the basics of writing Processing sketches then move onto some graphics and audio concepts. Mick will then introduce our first audiovisual example - SonicPainter, which allows users to interactively paint with synchronised graphics and sound. ", "video": ["1.1 Introduction", "Week 1 Code Pack", "Slide pack", "1.2 Processing", "Install processing URL", "1.25 Install Javascript Mode Instructions", "Javascript mode is here!", "Practice Quiz: Processing", "1.3 Graphics and drawing", "1.35 Setup, draw and mouse interaction", "Practice Quiz: Graphics, drawing and interaction", "1.4 Running Apps on iOS and Android", "Practice Quiz: Running Apps on iOS and Android", "1.5 Introduction to Audio   ", "Practice Quiz: Introduction to Audio", "1.6 Sonic Painter  ", "Practice Quiz: Sonic Painter", "1.7 Outro ", "Additional Lecture: Introduction To Programming ", "Additional Lecture: Variables ", "Sonic Painter", "Set up Processing"], "title": "Sonic Painter"}, {"description": "This week we are looking at using images and video, and also finding out how to control sound more fully in an interactive way. We're going to be showing you a really basic interactive VJ/DJ app called 'DJTube', which is a very simple example of how to create and load video, images and animations on desktops / mobile devices, and also use them as a basic user interface. \n", "video": ["Week 2 Code Pack", "Slide Pack", "2.1 Intro ", "2.2 Images ", "Practice quiz: Images", "2.3 Controlling audio speed ", "Practice Quiz: Controlling audio speed", "2.4 Controlling audio stop/ start ", "Practice Quiz: Controlling audio stop/start", "2.5 DJTube ", "Practice Quiz: DJTube", "2.6 Outro ", "Additional Lecture: Arrays ", "Additional Lecture: Conditionals ", "DJTube"], "title": "DJTube"}, {"description": "This week is all about creating an Audiovisualiser. This is a really popular and interesting topic that has lots of applications, from music players, to game engines, to more complex things such as DSP. We'll be learning about algorithmic graphics, audio analysis, and also about using the accelerometer features of your phone. Remember that many desktops don't have accelerometers, no matter how much you shake them! ", "video": ["3 Introduction ", "Week 3 Code Pack", "Lecture Pack", "3.1 Transforms (part 1) ", "Practice Quiz: Transforms (part 1)", "3.1 Transforms (part 2) ", "Practice Quiz: Transforms (part 2)", "3.2 Trigonometry ", "Practice Quiz: Trigonometry", "3.3 Accessing Accelerometer Data ", "Practice Quiz: Accessing Accelerometer Data", "3.4 Audio Analysis ", "Practice Quiz: Audio Analysis", "3.5 Building Audio Visualisers", "3.6 Outro", "3: Parameterised visualisation", "Customise one of the examples"], "title": "Audio Visualiser"}, {"description": "This week we will be creating a physics based game using a Physics engine based on Box2D. Physics engines are a fantastic way of creating dynamic gameplay that models the real world. Box2D is one of the most popular because it is optimised to be fast for 2D games that don't need the heavy processing of a 3D engine. It is used in many important 2D games, most famously Angry Birds. We will be using boxwrap2D which is a Java port of the original C++ version of Box2D, that is designed to work with Processing. Since boxwrap2D is java only we have created our own port to JavaScript, which interfaces to the javascript version of Box2D, but provides an almost identical interface to the Processing version. ", "video": ["4 Introduction ", "Week 4 Code Pack", "Slide Pack", "4.1 Physics ", "Practice Quiz: Physics", "4.2 Forces ", "Practice Quiz: Forces", "4.3 Preparing and playing sound FX ", "Practice Quiz: Preparing and playing sound FX", "4.4 Integrating audio and physics ", "Practice Quiz: Integrating audio and physics", "4.5 Group discussion ", "Practice Quiz: Group discussion", "4.6 Outro ", "Additional Lecture: Functions ", "Additional Lecture: Loops ", "AngryDroids"], "title": "AngryDroids"}, {"description": "Welcome to the final week of Creative Programming for Digital Media and Mobile apps. This week, we are going to move back to one of our favorite areas of app development - music apps. We have a very special guest this week - Martin Roth from RJDJ. Martin has lots of experience working on consumer mobile music applications, including the amazing Inception app, and The Dark Knight Rises. He shares his views on the expanding space in mobile music applications, and offers us his opinion on the WebAudio API. Meanwhile, Matt will be showing you how to create a very basic drum sequencer, and Marco will take you through the basics of sliders and multisliders, which are particularly useful for controlling parameters in music apps. Mick will then be taking you through some synthesiser examples in WebAudio, and talk you through the Music Machine example, which is a great place to kick off making a professional interactive music app for mobile.", "video": ["5 Intro", "Week 5 Code Pack", "5.1 Basic drum sequencer", "Practice Quiz: Basic drum sequencer", "5.2 Slider widget", "Practice Quiz: Slider widget", "5.3 (Part 1) Music Machine discussion with Martin Roth from RJDJ", "5.3 (Part 2) Music Machine", "Practice Quiz: Music Machine", "5.4 Outro", "Music Machine Quiz", "Customise AngryDroids or MusicMachine"], "title": "Music Machine"}]}, {"course_info": "About this course: Meeting another person is one of the most amazing experiences you can have in Virtual Reality. It is quite unlike communicating through any other medium except a real life face-to-face conversation. Because the other person is life size and shares a virtual space with you, body language works in a way that cannot be done on a flat screen. This course will enable you to create realistic social interactions in VR. \n\nYou will learn about both the psychology of social interaction and the practical skills to implement it in Unity3D. We will take you through the basics of 3D character animation and how to create body language. You will learn about how to make characters that can respond to players’ speech and body language. You will also learn about avatars: the virtual representation of other players, and agents: computer controlled NPC characters and how to implement both of them. \n\nAs many people have said before us, social is the future of VR. This course will help you become part of the future of Virtual Reality social experiences.", "title": "Building Interactive 3D Characters and Social VR", "rating": null, "level": "Intermediate", "created_by": "University of London, Goldsmiths, University of London", "package_name": "Virtual Reality Specialization ", "target_audience": "Who is this class for: This class is for people who are interested in becoming Virtual Reality Developers. You don't need any particular experience of development, but some experience of digital creative work (e.g. photoshop, illustrator, digital music) will be helpful. If you are completely new to VR you might want to first follow our courses \"Introduction to Virtual Reality\", \"3D models for Virtual Reality\" and \"3D Interaction Design in Virtual Reality\"  which cover the basic concepts and how to create 3D models and interaction design. ", "package_num": "4", "teach_by": [{"name": " Dr Sylvia Xueni Pan", "department": "Goldsmiths, University of London"}, {"name": "Dr Marco Gillies", "department": "Computing Department, Goldsmiths, University of London"}], "week_data": [{"description": "In this module you will start to learn about the role of human-like characters in VR. Characters can represent other real people: avatars, or they can be computer controlled: agents. Either way they are the very foundation of social interaction in VR.", "video": ["Introduction to Social VR and Virtual Characters", "Introduction to Virtual Characters", "Virtual Characters | Realism", "Virtual Character Realism", "Agents and Avatars", "Agents and Avatars", "Applications of Virtual Characters", "Introduction to Character Animation", "Virtual Character Application", "Cristina", "Designing Virtual Characters", "Uncanny Valley", "Course Blog", "Getting Started in Unity", "Importing a Virtual Character to Unity", "Where to download virtual characters", "Embodiment in Unity using Mobile VR", "Unity Mecanim Tutorial", "Virtual Character Project Brief", "Project Briefing", "Planning your project", "Virtual Characters Quiz"], "title": "Introduction to Virtual Characters"}, {"description": "In this module you will learn about the role of the body in social interaction and also about how to animate and control virtual characters' body movements. ", "video": ["Introduction to Body Language", "Observe other's body language.", "Introduction to Skeletal Animation", "Introduction to Motion Capture", "Motion Capture", "Markerless mocap", "Speech", "Posture and Gesture", "Gestures", "Backchannel", "Sensing the User’s Body Language", "Proxemics", "Body Language for Avatars", "Bodily Communication", "A great example of body animation", "Applying Motion Capture Data onto a Virtual Character", "Where can you find Mocap data", "The Virtual Character Interaction Scripts", "Speech Interaction", "Gesture Interaction", "Body Movement", "Virtual Character"], "title": "Body Animation in VR"}, {"description": "The face is one of the most important social and emotional signals. In this module you will learn about the role of the face and eyes in social interactions and how to recreate them in VR.", "video": ["Introduction to Facial Expressions | The Psychology", "Introduction to Facial Expressions", "Facial Motion Capture", "Introduction to Facial Expression in Unity", "Interaction Scripts", "Blinking and Lip Sync Animation", "Facial Animation: find out more", "A great example of facial animation", "The Importance of Gaze in Social Interaction", "A great example of gaze animation", "Gaze Interaction", "Gaze Animation", "Other Facial Features and Their Psychological Effect", "Body language around the world", "Facial Expressions"], "title": "Facial Animation"}, {"description": "This module brings together everything you have learned about virtual characters to talk about how you can build truly social experiences in VR. ", "video": ["Introduction to Social VR", "How does social interaction work?", "The Psychology Behind Social Interaction", "Automatic Imitation", "Extended reading: applications using Virtual Characters", "Challenges in Human-Avatar Interaction", "Human-avatar: Social VR apps", "Challenges in Human-avatar interaction in VR", "Challenges in Human-Agent Interaction", "Human-agent interaction", "Evaluation of Social Interaction in VR", "Self-Avatar | Implementation and Applications", "Embodiment - implementation and psychological effect", "Summary of Social VR", "Thank you", "Interactive Virtual Character"], "title": "Social VR"}]}, {"course_info": "About this course: In this course, we will explore MongoDB, a very popular NoSQL database and Web Services concepts and integrate them both with Ruby on Rails. MongoDB is a used to handle documents with a pre-defined schema which will give the developers an ability to store, process and use data using it’s rich API. The modules will go in-depth from installation to CRUD operations, aggregation, indexing, GridFS and various other topics where we continuously integrate MongoDB with RailsRuby.  We will be covering the interface to MongoDB using the Mongo Ruby API and the Mongoid ORM framework (the MongoDB access counterpart to RDBMS/ActiveRecord within Rails).  The last portion of the course will focus on Web Services with emphasis on REST, its architectural style and integration of Web Services with Rails.  Core concepts of Web Services like request/response, filters, data representation (XML/JSON), web linking and best practices will covered in depth.\n\nThis course is ideal for students and professionals who have some programming experience and a working knowledge of databases.", "title": "Ruby on Rails Web Services and Integration with MongoDB", "rating": "4.3", "level": null, "created_by": "Johns Hopkins University", "package_name": "Ruby on Rails Web Development Specialization ", "target_audience": null, "package_num": "3", "teach_by": [{"name": "Kiran Chittargi", "department": "Whiting School of Engineering"}], "week_data": [{"description": "In this module, we’re going to explore the history and the rationale behind NoSQL databases, their relationship to RDBMS, and dive into the basics of MongoDB. We will install MongoDB, create a database, collections and perform CRUD operations. We will end this module by integrating MongoDB with Ruby Shell and try out some simple examples.", "video": ["Course Introduction", "Grading", "Welcome to Module 1: Introduction to MongoDB, Mongo-Ruby API, and CRUD", "Github Repository for Module 1", "Introduction to NoSQL", "Categories of NoSQL", "Introduction to MongoDB", "Mongo Installation", "MongoDB Basics", "Practice Programming Assignment - MongoDB Ruby Driver Connection", "Inserting Documents", "Practice Programming Assignment - MongoDB Ruby Driver CRUD", "Find", "Paging", "Advanced Find", "Replace, Update, and Delete", "Introduction: Integrating MongoDB with Ruby Driver", "Rails Setup", "DAO Class Infrastructure", "CRUD", "Scaffolding", "MVC Application", "MongoLab Setup", "Heroku Setup", "Integrating MongoDB Ruby Driver and Rails"], "title": "Introduction to MongoDB, MongoDB-Ruby API, and CRUD"}, {"description": "In this module, we’re going to explore the fundamentals of the Aggregation framework in MongoDB.  We will work on examples where you will process data records and return computed results. You will learn about and get to work on hands-on examples where you will be grouping values from multiple documents and performing a variety of operations on the grouped data to get a single result. We will look at a number of aggregation commands and paging. We will explore some advanced concepts like full text search, GridFS, Geospatial API, and wrap up the module with detailed demonstrations of all the capabilities presented in this module.", "video": ["Welcome to Module 2: Aggregation Framework, Performance, and Advanced MongoDB", "Github Repository for Module 2", "Introduction to Aggregation", "Practice Programming Assignment - Aggregation Framework", "$project", "$group", "$match", "$unwind", "Schema Design", "Normalization", "Relationships", "Practice Programming Assignment: Schema Design", "GridFS", "GridFS Demo 1", "GridFS Demo 2", "GridFS Demo 3", "Geospatial", "Geospatial Demo", "Introduction to Indexes", "Creating Indexes", "Listing & Deleting Indexes", "Unique, Sparse & TTL Indexes", "Advanced MongoDB Ruby Driver Topics"], "title": "Aggregation Framework, Performance, and Advanced MongoDB"}, {"description": "In this module, we’re going to explore Mongoid, which is an Object-Document-Mapper (ODM) for MongoDB written in Ruby. We will learn to integrate Mongoid with Rails and work to understand document and relationship mapping, as well. We will work on a number of queries using the Mongoid API and wrap up the module by implementing Rails/Mongoid Model View Controller.", "video": ["Welcome to Module 3: Mongoid", "Github Repository for Module 3", "Introduction to Mongoid", "Document Class", "Mongoid CRUD", "Movie Application Setup", "Practice Programming Assignment: Mongoid Setup and Document CRUD", "1:1 Embedded Relationship", "M:1 Linked Relationship", "1:M Embedded Relationship", "M:1 Embedded Relationship", "1:1 Linked Relationship", "M:M Linked Relationship", "Constraints and Validation", "Constraints and Validation: Demo", "Practice Programming Assignment: Mongoid Relationships", "Queries (Find)", "Queries (Where)", "Pluck and Scope", "Scaffolding", "Mongoid and Rails Scaffold"], "title": "Mongoid"}, {"description": "In this module, we’re going to explore Web Services with a focus on caching and security. We will start off by looking at REST fundamentals, RMM (Richardson Maturity Model) and URI best practices. We will wrap up the topic by covering Client and Server Caching along with Web Service Security (OAuth 2).", "video": ["Welcome to Module 4: Web Services", "Github Repository for Module 4", "Introduction to Web Services", "REST and RMM", "Resources", "URIs", "Nested URIs", "Query Parameters", "Methods", "Web Services and REST", "Idempotence", "Representations", "Versioning", "Content Negotiations", "Headers and Status", "Interfaces", "Client Caching", "Cache Revalidation Headers", "Cache Controls", "Server Caching", "Caching", "OAuth2", "Assembly", "Devise", "Integrated Authentication", "OAuth Integration", "Web Services"], "title": "Web Services"}]}, {"course_info": "About this course: This accelerated 6-hour course with labs introduces AWS professionals to the core capabilities of Google Cloud Platform (GCP) in the four technology pillars: networking, compute, storage, and database. It is designed for AWS Solution Architects and SysOps Administrators familiar with AWS features and setup and want to gain experience configuring GCP products immediately. With presentations, demos, and hands-on labs, participants get details of similarities, differences, and initial how-tos quickly. If you prefer to learn fast by doing, this course is for you.\n\nLearning Objectives\n\nThis course teaches participants the following skills:\n● Identify GCP counterparts for Amazon VPC, subnets, routes, NACLs, IGW, Amazon EC2, Amazon EBS, auto-scaling, Elastic Load Balancing, Amazon S3, Amazon Glacier, Amazon RDS, Amazon Redshift, AWS IAM, and more\n● Configure accounts, billing, projects, networks, subnets, firewalls, VMs, disks, auto scaling, load balancing, storage, databases, IAM, and more\n● Manage and monitor applications\n● Explain feature and pricing model differences\n● Locate documentation and training.\n\nPrerequisites\n\nTo get the most of out of this course, participants should have basic proficiency with networking technologies like subnets and routing. Students are also expected to have experience with Amazon VPC, Amazon EC2 instances, and disks. Familiarity with Amazon S3 and AWS database technologies is recommended.", "title": "Google Cloud Platform Fundamentals for AWS Professionals", "rating": "4.5", "level": "Intermediate", "created_by": "Google Cloud", "package_name": null, "target_audience": "Who is this class for: This class is intended for 1) AWS Solution Architects just getting started with Google Cloud Platform, 2) AWS SysOps Administrators used to building IaaS solutions, and 3) Architects and Engineers operating in multi-cloud environments.", "package_num": null, "teach_by": [{"name": "Google Cloud Training", "department": null}], "week_data": [{"description": "", "video": ["Concepts", "GCP Infrastructure"], "title": "Module 1: Intro to Google Cloud Platform"}, {"description": "", "video": ["Concepts", "Demo Part 1", "Demo Part 2", "Demo Part 3", "Google Codelab: Open an Account and Manage Billing and Projects", "Setting Up Accounts and Billing"], "title": "Module 2: Setting Up Accounts and Billing"}, {"description": "", "video": ["Concepts Part 1", "Concepts Part 2", "Demo Part 1", "Demo Part 2", "Google Codelab: Spin Up Instances and Check Connectivity", "Networking"], "title": "Module 3: Networking"}, {"description": "", "video": ["Concepts Part 1", "Concepts Part 2", "Demo Part 1", "Demo Part 2", "Google Codelab: Deploy Instances and Apps by Console and Command-Line", "Working with VM Instances"], "title": "Module 4: Working with VM Instances"}, {"description": "", "video": ["Concepts Part 1", "Concepts Part 2", "Concepts Part 3", "Demo Part 1", "Demo Part 2", "Demo Part 3", "Google Codelab: Scale and Load Balance Instances and Apps", "Scaling and Load Balancing Apps"], "title": "Module 5: Scaling and Load Balancing Apps"}, {"description": "", "video": ["Concepts Part 1", "Concepts Part 2", "Demo Part 1", "Demo Part 2", "Google Codelab: Secure Instances and Apps with Custom Networks", "Isolating Instances and Apps"], "title": "Module 6: Isolating Instances and Apps"}, {"description": "", "video": ["Concepts Part 1", "Concepts Part 2", "Demo", "Google Codelab: Use gsutil to Perform Operations on Buckets and Objects", "Using Storage as a Service Quiz"], "title": "Module 7: Using Storage as a Service"}, {"description": "", "video": ["Concepts Part 1", "Concepts Part 2", "Concepts Part 3", "Concepts Part 4", "Demo", "Google Codelab: Load and Analyze Data in BigQuery", "Using Database as a Service"], "title": "Module 8: Using Database as a Service"}, {"description": "", "video": ["Concepts Part 1", "Concepts Part 2", "Concepts Part 3", "Demo", "Google Codelab: Deploy Your Infrastructure Using Deployment Manager", "Deployment and Monitoring"], "title": "Module 9: Deployment and Monitoring"}]}, {"course_info": "About this course: In this course you will learn and practice several techniques for user interface evaluation.  First we start with techniques that can be applied alone or in a design team, including action analysis, walkthroughs, and heuristic evaluation.  Then we move on to user testing, including learning from a series of usability tests carried out in a real usability lab, and techniques to carry out your own tests even without a lab.  Finally, we wrap up the discussion of evaluation--and of UI Design in the specialization as a whole--by looking at the question of how to set and measure usability goals, and in turn, when a design is usable enough to release it.", "title": "Evaluating User Interfaces", "rating": "4.7", "level": null, "created_by": "University of Minnesota", "package_name": "User Interface Design Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Loren Terveen", "department": "Computer Science and Engineering"}, {"name": "Haiyi Zhu", "department": "Computer Science and Engineering"}, {"name": "Lana Yarosh", "department": "Computer Science and Engineering"}, {"name": "Dr. Brent Hecht", "department": "Computer Science and Engineering"}, {"name": "Joseph A Konstan", "department": "Computer Science and Engineering"}], "week_data": [{"description": "We situate evaluation in the larger UI design process and provide an introduction to the course's content.", "video": ["Introduction to Evaluating User Interfaces and Evaluation in the UI Design Process", "Evaluating User Interfaces: An Introduction"], "title": "Preface"}, {"description": "We cover industry-standard techniques for evaluating interfaces without users, a lower-cost approach that precedes higher-cost \"with user\" strategies (Part 1 of 2).", "video": ["Evaluation without Users:  Introduction", "Action Analysis:  GOMS and Informal Action Analysis", "Case Example:  Action Analysis", "Assignment Video:  Action Analysis Assignment", "Informal Action Analysis Assignment", "Cognitive Walkthroughs", "Informal Action Analysis"], "title": "Evaluation without Users (Part 1)"}, {"description": "We continue our overview of evaluation techniques that do not involve users (Part 2 of 2).", "video": ["Assignment Video:  Cognitive Walkthrough Assignment", "Introduction to Heuristic Evaluation", "Nielsen's Heuristics (Part 1)", "Nielsen's Heuristics (Part 2)", "Nielsen's Heuristics (Part 3)", "Assignment Video:  Heuristic Evaluation", "Wrap-up Lecture:  Evaluation without Users", "Cognitive Walkthrough", "Heuristic Evaluation Assignment", "Evaluation without Users Quiz"], "title": "Evaluation without Users (Part 2)"}, {"description": "We dive into the most important - and most costly - family of evaluation techniques: those that involve testing your user interface with real users (Part 1 of 3)", "video": ["Introduction to User Testing", "User Testing Goals:  Formative and Summative Evaluation", "Usability Lab Tour", "Usability Lab Example 1 - User 1", "Usability Lab Example 1 - User 2", "Usability Lab Example 2 - User 1", "Usability Lab Example 2 - User 2"], "title": "Evaluation with Users (Part 1)"}, {"description": "We continue our discussion of with-user evaluation techniques (Part 2 of 3)", "video": ["Ethics in User Evaluation", "Drafting a User Test Plan", "Field Study Case Example:  ShareTable Deployment", "Assignment Video: User Test Plan", "User Test Plan"], "title": "Evaluation with Users (Part 2)"}, {"description": "We continue our discussion of with-user evaluation techniques (Part 2 of 3)", "video": ["Eye-Tracking: Introduction and First Demonstration", "Eye-Tracking: Second Demonstration", "Eye-Tracking: Review", "Eye-Tracking: Discussion and Conclusion", "Field Studies, Alpha Releases, and A/B Tests", "Controlled Field Experiments", "Industry Practice: Massive A/B Testing (Interview with Ronny Kohavi)", "Log Analysis in Evaluation"], "title": "Evaluation with Users (Part 3)"}, {"description": "We revisit our overview of UI evaluation.", "video": ["Usability Goals and Measures", "Evaluating User Interfaces: Course Recap", "Evaluation with Users Quiz"], "title": "Wrap-Up"}]}, {"course_info": "About this course: This course will teach you how to design futureproof systems that meet the requirements of IoT systems: systems that are secure, interoperable, modifiable and scalable. Moreover, you'll learn to apply best-in-class software architecture methods to help you design complex IoT and other applications. Lastly, you'll come to understand the business impact of the technical decisions that you make as an IoT system architect.\n\nYou'll learn all about software architecture in the next 5 weeks! In the first week, you'll discover why having a well-designed architecture is important and which challenges you might come across while developing your architecture. By the end of the second week, you'll already be able to write your own requirements! In the third and fourth week, you will learn how to correctly write quality attributes and quality attribute scenarios for a specific case. In the last week, you'll learn to describe your own patterns and tactics and see how they're used in an Android framework.", "title": "Software Architecture for the Internet of Things", "rating": "4.2", "level": null, "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: You're at the right address if you're a software engineer, embedded systems engineer or a technical manager who aspires to connect their career to the internet of the future: the Internet of Things. Our blended learning approach offers you the best of both worlds: you can learn online whenever you want to, but can still get hands-on coaching from industry experts. \n\nAlthough useful for professionals, this course is meant for first year Master students in Electrical Engineering or Computer Science. Note that as a consequence, quiz questions are more like exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Frank Gielen", "department": "UGent/IBCN: Internet Based Communication Networks"}], "week_data": [{"description": "This module will introduce you to the world of software architecture. We'll define what SA actually is, why it is important and talk about some of the challenges faced in modern Software Engineering. This course is also part of a Blended Master Programme in Internet of Things through Embedded Systems. ", "video": ["Welcome to Software Architecture for IoT", "How to navigate through this course", "Learning objectives per week", "Want more software architecture?", "IoT and you", "Challenges in Modern Software Engineering", "What is Software Architecture?", "Why is software architecture important? (1)", "Why is software architecture important? (2)", "How business goals drive architectural design", "Business goals", "The role of the software architect", "Software Architecture in practice: 1, 2, 3", "Challenges in modern software engineering", "The role of the Software Architect"], "title": "Getting to know Software Architecture"}, {"description": "Creating good software starts with a solid understanding of the requirements that will have an influence on the software. In this module, we will discuss both functional and non-functional requirements, such as quality attributes, business requirements and constraints.", "video": ["The Software Architecture Design Process", "Software requirements", "Documenting Requirements", "IoT project: requirements", "What is the ADD process?", "ADD paper", "Software Architecture in the Development Process", "Enabling agility through architecture", "Design process", "Optional: ADD applied example", "Designing architectures in the real world", "UberGoogle?", "Software architecture in practice: 4, 16, 17", "Requirements", "Documenting requirements", "Attribute driven design", "The place of software architecture in the software development process", "UberGoogle Requirements"], "title": "Design process and software requirements"}, {"description": "Up till now, we have been talking about quality in an informal way. However, if you want to build systems that support the required qualities you will need a way to express those quality attributes and understand how you can achieve them. After this module you should be able to formulate your own quality requirements. We will also study 2 qualities that are especially relevant for Internet of Things: interoperability and modifiability.", "video": ["What are quality attributes?", "The nature of quality attributes", "What are QAS?", "QA - Interoperability", "QA - Modifiability", "Quality attributes", "IoT project: quality attributes", "The missing towels problem", "Software Architecture in practice: 5, 6, 7", "Quality Attributes", "Quality attribute scenarios", "Interoperability", "The Missing Towels"], "title": "Quality Attributes"}, {"description": "In the fourth week, we will explain how architectural tactics can help you create a software architecture that achieves the predefined requirements. This is what needs to be done in step three of the ADD - remember? We'll start of by learning about the difference between tactics and patterns. We will give some examples of tactics to achieve interoperability and modifiability. We will discuss the MVC pattern and its relation to the modifiability tactics. Lastly, we'll discuss how MVC is being used in Android.", "video": ["What are tactics? How do they differ from patterns?", "Different types of tactics", "Tactic - Modifiability", "Modifiability - tactics and patterns pt. 1", "Introduction to DYAMAND", "Problems and solutions", "Tactics"], "title": "Tactics"}, {"description": "In this last week, we will explain how architectural patterns can help you create a software architecture that achieves the predefined requirements. Patterns are closely related to tactics, as we saw last week. First, we'll look at different types of patterns. Then, we'll learn how to combine tactics and patterns. We'll conclude this last week with a case study: DYAMAND's requirements and their architecture.", "video": ["Different types of patterns", "Combining Tactics and Patterns", "Modifiability - tactics and patterns pt. 2", "IoT project: tactics and patterns", "Where to find patterns and tactics", "DYAMAND's requirements", "DYAMAND's architecture (1)", "DYAMAND's architecture (2)", "Software Architecture in practice: 13", "DYAMAND case study reflection", "Patterns"], "title": "Patterns"}]}, {"course_info": "About this course: This course will teach you about one of the most important aspects of VR, how you interact with a VR world. Virtual Reality is completely different from an on screen app or game. You are completely immersed in a VR world, so it doesn't make sense to interact only through buttons or menus. You will get the most out of VR if you can interact with the world just as you would with the real world: with your natural body movements. You will learn about the basic concepts and technologies of VR Interaction. You will then get hands on, learning about how to move around in VR and how to interact with the objects in your world. The course will finish with some advice from experts on VR interaction design and you will do a project where you will get real experience of developing VR Interaction.", "title": "3D Interaction Design in Virtual Reality", "rating": "4.9", "level": "Intermediate", "created_by": "University of London, Goldsmiths, University of London", "package_name": "Virtual Reality Specialization ", "target_audience": "Who is this class for: This class is for people who are interesting in become Virtual Reality Developers. You don't need any particular experience of development, but some experience of digital creative work (e.g. photoshop, illustrator, digital music) will be helpful. If you are completely new to VR you might want to first follow our courses \"Introduction to Virtual Reality\" and \"3D models for Virtual Reality\", which covers the basic concepts and creating 3D environments. ", "package_num": "3", "teach_by": [{"name": " Dr Sylvia Xueni Pan", "department": "Goldsmiths, University of London"}, {"name": "Dr Marco Gillies", "department": "Computing Department, Goldsmiths, University of London"}], "week_data": [{"description": "Welcome to Week 1! In this week, we will cover interaction in VR. You will discover different types of interaction, and how interaction works with different HMDs. We'll end the week by introducing you to this MOOC's project.", "video": ["Welcome to 3D Interaction Design in Virtual Reality", "Course Blog", "Natural Interaction", "Magic Interaction", "Active and Passive Interaction", "Affordances", "VR Interaction Theory", "An example of VR interaction", "User Input in VR", "Standard HMDs", "Other Devices", "VR Interaction", "Interaction Samples", "Project Requirements", "Getting Started in Unity", "Unity Examples", "Interaction Scripts", "Download the VR Interaction Package", "VR Interaction Project Brief", "Planning your project", "Introduction to VR Interaction and User Input"], "title": "Interaction in VR"}, {"description": "Welcome to Week 2! This week, we'll cover moving around in VR. We'll look at physical navigation, such as walk-in-place, and virtual navigation, such as teleportation. You will end the week by beginning your project, and submitting your work in progress.", "video": ["Introduction to Navigation in VR", "Real Walking", "Redirected Walking", "Walk-in-Place", "Implementing Walk In Place", "Virtual Navigation", "Teleporting", "Teleportation", "Implementing Teleporting", "Travel in VR | Quality Factors", "Movement in VR", "Project Advice", "Physical and Virtual Navigation", "Project Work in Progress"], "title": "Moving around in VR"}, {"description": "Welcome to Week 3! This week, we will be looking at interacting with objects in VR. We'll cover topics such as interacting with objects within reach, hyper-natural interaction, and magic interaction. We'll then move on to physics interaction, and how this works in VR. \n", "video": ["Introduction to Objects Interaction | Part 1", "Introduction to Objects Interaction | Part 2", "Object Interaction Within Reach", "Hyper-Natural Interaction", "Magic Interaction", "Evaluation Metrics", "Introduction to Physics Interaction", "Physics Objects", "Physics Objects in Unity", "Physics in VR", "Physics Interaction in Unity with NewtonVR", "Physics in Unity", "State Machines", "State Machine Interactions in Unity", "Unity State Machines", "Object Interaction", "Physics and State Machine Interaction"], "title": "Interacting with Objects in VR"}, {"description": "Welcome to Week 4! In the final week of this MOOC, we'll be looking at challenges in VR interaction, and user interfaces in VR. You'll begin by learning about graphical user interfaces in VR, including abstract interfaces and diegetic and non-diegetic UI, before moving on to designing VR interaction. ", "video": ["Introduction to Graphical User Interfaces in VR", "Abstract Interfaces", "Diegetic and Non-Diegetic UI", "Unity UI Tutorial", "Unity User Interfaces", "Gestural Interaction", "Unity gesture plugin", "Issues in VR Interaction", "Harry Brenton on VR Interaction Design", "Reflective Quiz: Your Interaction Design Process", "User Evaluation", "Harry Brenton on the UX of VR", "Bespoke VR", "Think of a Great VR Interaction", "Final Project Requirements", "Thank you", "3D Interaction in VR: Final Project"], "title": "Challenges in VR interaction and User Interfaces in VR"}]}, {"course_info": "About this course: What will you learn?\n\nEmbedded Systems are so ubiquitous that some of us take them for granted: we find them in smartphones, GPS systems, airplanes and so on. But have you ever wondered how these devices actually work? If so, you're in the right place! \n\nIn this course, you'll learn about the characteristics of embedded systems: the possibilities, dangers, complications and recipes for success. We'll discuss all of this in the framework of a flourishing embedded systems field: the Internet of Things, where billions of intercommunicating devices could enable unprecedented, innovative products and services. If you'd like to learn how to create similarly innovative products, then this is the course for you!\n\nAt the end of the course, you'll be able to:\n- make the right choice for your own project when it comes to the target market, parallel executions, time and the lifecycle of your system\n- hack, avoid failure and promote success \n- decide whether to buy or to build components\n- how to assemble a good team\n- install case tools\n- learn how to work with SysML\n\nThis is an introductory course. Check out our more advanced course Architecting Smart IoT Devices soon if you want to go beyond the basics!", "title": "Introduction to Architecting Smart IoT Devices", "rating": "3.7", "level": "Beginner", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: This course provides an overview of the basic aspects of embedded systems components. If you are a product manager, a technical manager or involved in developing products, this course will give you an overview of the different aspects of embedded systems.  We'll focus on applying this knowledge in the area of IoT. Our blended learning approach offers you the best of both worlds: you can learn online whenever you want to, but can still get hands-on coaching from industry experts.\n\nAlthough useful for professionals, this course is aiming for first year Master students in Electrical Engineering or Computer Science. Note that as a consequence, quiz questions are more exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Martin Timmerman", "department": "Royal Military Academy Brussels - Vrije Universiteit Brussels (VUB-ETRO) - Dedicated Systems Experts NV/SA (CEO)"}], "week_data": [{"description": "This first module will define what embedded systems are by looking at the most important EmS market areas and different characteristics of EmS. Furthermore we will talk about dealing with multiple events at the same time, the importance of world time, and the duration of an EmS lifecycle.", "video": ["Course introduction", "Welcome to Introduction to Architecting Smart IoT Devices!", "Welcome to Module1!", "Market", "History Of Embedded Systems", "Today's Embedded Systems' Markets", "EmS Characteristics", "What is a real-time system?", "Shannon's Principle", "COTS", "Parallel Executions", "Parallel - Concurrent - Multithreading", "Tightly versus Loosely Coupled", "Time", "Time Definitions", "Time on our Planet", "Electronic time references", "System Lifecycle", "Babylon? Methodology, method, model, framework, approach, paradigm", "The phases in the process or methodology", "Simulation, virtual reality and automatic code generation", "Take this quiz after checking all resources in the Market web tour!", "Take this quiz after checking all resources in the EmS Characteristics web tour!", "Take this quiz after checking all resources in the Parallel Executions web tour!", "Take this quiz after checking all resources in the Time web tour!"], "title": "What are Embedded Systems?"}, {"description": "In this module we will be tackling the problems of existing embedded systems and system hackings, the failure of systems and how we can make these systems more successful, the influence of production quantity, and the increasing EmS complexity. ", "video": ["Welcome to Module 2!", "Abuse", "Hacking and Vulnerability", "Hacking for Beginners", "Stuxnet", "ATM Hacking", "Medical device hacking", "Failure", "Ariane V failure", "Mars Pathfinder failure", "Embedded Systems Failure", "Model-Based Design", "Succes Rate", "CHAOS reports - success rates", "Why software (and hardware) fails", "Embedded systems risk areas", "Build or Buy?", "What is COTS?", "Build or Buy", "Skills needed in COTS world", "COTS and testing", "COTS example", "Complexity", "What is SLOC?", "Complex, smart, intelligent", "Team Size", "Take this quiz after checking all resources in the Abuse web tour!", "Take this quiz after checking all resources in the Failures web tour!", "Take this quiz after checking all resources in the Success rate web tour!", "Take this quiz after checking all resources in the Build or Buy web tour!", "Take this quiz after checking all resources in the Complexity web tour!"], "title": "Problems and Failures"}, {"description": "This last module will discuss the different models to design a system lifecycle, the gathering of requirements for architectural design, and the use of structural models and modelling language. ", "video": ["Welcome to Module 3!", "Lifecycle Basics", "Methodological models versus system modelling", "Definitions on Lifecycle", "Architectural Design", "Requirements gathering", "Functional and non-functional requirements", "Requirement Traceability Matrix", "Design Patterns", "Model-based Design", "Models: diagrams and mathematics", "CASE TOOLS vs IDE", "Business versus Embedded Systems Models", "What CASE Tool? Low cost tools", "Intro to SysML", "Finding the SysML references and training", "SysML overviews, tutorials, examples", "Install a SysML Case tool", "Get the book: SysML Distilled - A Brief Guide to the Systems Modeling Language", "SysML Diagrams", "MagicDraw and Delligatti: how to prepare for the final quiz", "Take this quiz after checking all resources in the Lifecycle basics web tour!", "Take this quiz after checking all resources in the Architectural Design web tour!", "Take this quiz after checking all resources in the Model-based Design web tour!", "Take this quiz after checking all resources in the SysML Diagrams web tour!"], "title": "System Life Cycle"}]}, {"course_info": "About this course: Optimization is a common form of decision making, and is ubiquitous in our society. Its applications range from solving Sudoku puzzles to arranging seating in a wedding banquet.  The same technology can schedule planes and their crews, coordinate the production of steel, and organize the transportation of iron ore from the mines to the ports. Good decisions in manpower and material resources management also allow corporations to improve profit by millions of dollars.  Similar problems also underpin much of our daily lives and are part of determining daily delivery routes for packages, making school timetables, and delivering power to our homes. Despite their fundamental importance, all of these problems are a nightmare to solve using traditional undergraduate computer science methods.\n\nThis course is intended for students who have completed Basic Modelling for Discrete Optimization. In this course you will learn much more about solving challenging discrete optimization problems by stating the problem in a state-of-the-art high level modeling language, and letting library constraint solving software do the rest.  This course will focus on debugging and improving models, encapsulating parts of models in predicates, and tackling advanced scheduling and packing problems. As you master this advanced technology, you will be able to tackle problems that were inconceivable to solve previously.\n\nWatch the course promotional video here: https://www.youtube.com/watch?v=hc3cBvtrem0&t=8s", "title": "Advanced Modeling for Discrete Optimization", "rating": "4.9", "level": "Intermediate", "created_by": "The University of Melbourne, The Chinese University of Hong Kong", "package_name": null, "target_audience": "Who is this class for: The course is for penultimate/final year undergraduates and graduates in computing and related disciplines.  You will need to have basic computer programming skills, and knowledge of fundamental algorithms, discrete mathematics, logic and linear algebra in order to take this course. Please note, this course is also available wholly in Chinese, see:        https://www.coursera.org/learn/lisan-youhua-jianmo-gaojiepian", "package_num": null, "teach_by": [{"name": "Prof. Jimmy Ho Man Lee", "department": "Department of Computer Science and Engineering"}, {"name": "Prof. Peter James Stuckey", "department": "Computing and Information Systems"}], "week_data": [{"description": "Similar to computer programs, models can have bugs.  In this module, you will see the symptoms (unsatisfiability, too many solutions, too few solutions) of different bugs, and learn methods to discover what is going wrong with your model and how to fix it.  Equipped with these tools, you will be able to develop and debug complex models.", "video": ["Welcome to Advanced Modeling for Discrete Optimization", "Course Overview", "Start of Course Survey", "2.1.1 Model Debugging", "2.1.2 Tracing Models", "2.1.3 Relational Semantics", "2.1.4 Too Many Solutions", "2.1.5 Missing Solutions", "2.1.6 Basic Model Improvement", "2.1.7 Module 1 Summary", "Getting MiniZinc", "Workshop 5: Poetry Challenge", "Workshop 5 Solution", "Assignment Submission - IDE", "Assignment Submission - CLI", "About the Reference Material", "Reference 1: Basic Features", "Reference 2: Booleans Expressions", "Reference 3: Sets, Arrays and Comprehensions", "Reference 4: Enumerated Types", "Reference 5: Strings and Output", "Reference 6: Option Types", "Reference 7: Predicates", "Reference 8: Flattening", "Reference 9: Transforming Data", "Reference 10: User Defined Functions", "Reference 11: Command Line Interface", "Escape to Jing Province"], "title": "Debugging and Improving Models"}, {"description": "In this module, you will learn how to encapsulate a complex constraint definition in a predicate definition to enable its reuse.  This will enable the construction of far more complex models with improved readability in a modular manner.  You will also encounter for the first time a problem with multiple objectives and learn how to compress them into one single objective.  In addition to this, you will learn how to model the banquet seating problem, which will assist you in many occasions in life.", "video": ["2.2.1 Predicates", "2.2.2 The let-in Construct", "2.2.3 Using Predicates", "2.2.4 Contexts", "2.2.5 Module 2 Summary", "Workshop 6: Weighing an Elephant: Part 1", "Workshop 6 Solution", "Weighing the Elephant"], "title": "Predicates"}, {"description": "Learn how to tackle complex project scheduling problems of various forms, progressively from ones with only basic precedence requirements to ones with unary resources and even cumulative resources. You will see how to model some of the complex constraints that arise in these applications.", "video": ["2.3.1 Basic Scheduling", "2.3.2 Disjunctive Scheduling", "2.3.3 Cumulative Scheduling", "2.3.4 Sequence Dependent Scheduling 1", "2.3.5 Sequence Dependent Scheduling 2", "2.3.6 Module 3 Summary", "Workshop 7: Visiting Zhuge Liang", "Workshop 7 Solution", "Suitor Schedule"], "title": "Scheduling"}, {"description": "In this module, you will learn the important application of packing, from the packing of squares to rectilinear shapes with and without rotation.  Again, you will see how to model some of the complex constraints that arise in these applications.  ", "video": ["2.4.1 Square Packing", "2.4.2 Rectilinear Packing without Rotation", "2.4.3 Rectilinear Packing with Rotation"], "title": "Packing"}, {"description": "This final module looks at the various forms of symmetries that can appear in discrete optimization problems.  You will learn various methods and special constraints to break such symmetries so as to increase solving efficiency.  You will also learn the notion of dominance, which is a generalization of symmetries, and also dominance breaking techniques.", "video": ["2.5.1 Symmetries and LexLeader", "2.5.2 Matrix Model Symmetries", "2.5.3 Value Symmetries", "2.5.4 Dominance", "2.5.5 Module 4 & 5 Summary", "Where to from here?", "Workshop 8: The Dieda Plasters", "Workshop 8 Solution", "End of Course Survey", "To Borrow Arrows from Thatched Boats"], "title": "Symmetry and Dominance"}]}, {"course_info": "About this course: Virtual Reality is one of the most exciting experiences that technology can give us. The immersion and presence you can have in VR is quite unlike any other medium. Like many others, you are excited about the possibilities of this new medium and want to get started developing your own VR experiences. This course will take you through all of the steps you need to create a VR game or other project. \n\nThis is the final course in our Specialisation: Virtual Reality. The previous courses teach you the skills you need to make a VR game. This course brings them all together to create a project of your own. \n\nWe will guide you through all the steps of a VR project: coming up with an idea, storyboarding, prototyping, testing and implementation. By the end of this course you will have a complete VR project that demonstrates your skills and could be the first step in creating a professional game. \n\nWe hope this course can be your entry into professional VR development. To help you get started, some good advice always helps. That is why we have interviewed VR experts from all over the world, ranging from technology pioneers with over 30 years experience in VR to the latest cutting edge VR creators. We have asked all of them to give you their advice and we hope it inspires you to become part of the future of VR.", "title": "Making Your First Virtual Reality Game", "rating": null, "level": "Intermediate", "created_by": "University of London, Goldsmiths, University of London", "package_name": "Virtual Reality Specialization ", "target_audience": "Who is this class for: This class is for people who are interested in becoming Virtual Reality Developers. You don't need any particular experience of development, but some experience of digital creative work (e.g. photoshop, illustrator, digital music) will be helpful. If you are completely new to VR you might want to first follow our courses \"Introduction to Virtual Reality\", \"3D models for Virtual Reality\", \"3D Interaction Design in Virtual Reality\" and \"Building 3D Interactive Characters and Social Virtual Reality\" which cover the basic concepts and how to create 3D models and characters. ", "package_num": "5", "teach_by": [{"name": " Dr Sylvia Xueni Pan", "department": "Goldsmiths, University of London"}, {"name": "Dr Marco Gillies", "department": "Computing Department, Goldsmiths, University of London"}], "week_data": [{"description": "This week you will start the process of creating your first VR Game. We will explain the steps you will go through when you're creating the game and you will start thinking of your idea. You will also meet our experts who will be explaining their VR projects and giving advice to you. ", "video": ["Introduction to the Course", "Learning Technical Skills", "Introduction to the Structure", "What Are You Planning For Your Project?", "Example Projects", "Your Project", "Getting Started in Unity", "Course Blog", "Meet The Experts", "Shafi Ahmed", "Avril Furness", "Harry Brenton", "Jesus Eduardo Russian", "David Swapp", "Lance Putnam", "Ben Lok", "Betty Mohler", "Gregory Welch", "Tabitha Peck", "Mar Gonzalez Franco", "Susumu Tachi", "Larry Hodges", "Frederic Fol Leymarie", "What Inspired You From Our Experts?", "How You Will Learn In This Course", "How We Will Use To Do Lists In This Project", "Your Project Idea", "To Do List", "What Will You Need To Do For Your Project?", "Pitch Your Idea"], "title": "Welcome"}, {"description": "This week you will be developing your game idea into a more complete design by developing a storyboard. ", "video": ["Designing a VR Experience", "How to Create a Storyboard", "Creating a Storyboard", "What Types Of Games Work in VR?", "Kevin Young", "Kim-Leigh Pontin", "James Edward Marks", "Dave Ranyard", "Yates Buckley", "Doug Bowman", "Bruce Thomas", "Doron Friedman", "Hrvoje Benko", "Lynda Joy Gerry", "Mary Whitton", "Sook Lei Liew", "What Inspired You?", "To Do List", "Your Game Concept"], "title": "The game concept"}, {"description": "This week you will be developing your first working prototype, which will test out the basic mechanics and interaction of your game. ", "video": ["Prototyping", "Prototyping", "What To Include In Your Prototype?", "Hardware and Software Platforms | Montage", "Hardware and Software Platforms | Montage", "Game Demo | Playstation VR Worlds", "What Did You Learn?", "To Do List", "Prototype"], "title": "Prototyping"}, {"description": "Last week you developed a prototype, and this week you will test it with players to see if it works for them and to gather feedback for your future development.", "video": ["Evaluating VR Games with Users", "Testing Plan", "Testing Plan", "Unit9 | Part 1", "Unit9 | Part 2", "Unit9 | Part 3", "Unit9 | Part 4", "Unit9 | Part 5", "What Did You Learn From The Case Study?", "Reflecting On Your Testing", "What Did You Learn From Testing?", "To Do List", "Testing Plan"], "title": "Testing"}, {"description": "This week you will use the results of your user testing to start developing the game proper: refining the interaction and implementing the graphics. ", "video": ["Implementing Your VR Project", "Implementing Your Game", "The Greatest Challenges In Implementing Your Game", "VR Industry and Market", "Advice for Someone New | Montage", "Advice for Someone New | Montage", "Mutator VR", "What Advice Will You Take Back With You?", "To Do List", "Work in Progress Game"], "title": "Developing your game"}, {"description": "This is the final week of this course, and the whole specialisation. You will be finishing your game project and submitting it for peer review. You will also have a chance to reflect on what you have learned and look to the future of VR, and your place in it. ", "video": ["Introduction to the Week", "Project Checklist", "Reflection: Project Retrospective", "What Did You Learn?", "What Advice Do You Have For Others?", "Summary", "The Future of VR | Montage", "The Future of VR | Montage", "The Future of VR", "Thank You!", "Final Project Hand In"], "title": "The final project"}]}, {"course_info": "About this course: While scrum and XP were transforming the software development industry, there were another set of ideas (derived from lean manufacturing and Six Sigma) that started to influence software development methods.  These ideas around Lean Software Development forms the foundation of number of agile methods. \n\nIn this course, we will explore lean concepts and cover some of the common Lean methods and techniques like Kanban, Value Stream Mapping, etc.\n \nIn this course, we will also learn techniques like Lean Startup and Design Thinking that can help team learn about user and market needs much faster and cheaper. \n\nAs part of this course, you will also apply the knowledge gained  in this course to fictional case studies.  These projects will help you gain experience to confidently apply these techniques in real world.\n\nAt the end of the course,  you will be able to apply lean techniques / methods to software development.  You will also be able to apply methods to learn about your users and market needs much faster and cheaper.", "title": "Lean Software Development", "rating": "1.0", "level": "Beginner", "created_by": "University of Minnesota", "package_name": "Software Development Lifecycle Specialization ", "target_audience": "Who is this class for: This class is anyone who has 1-2 years of experience building software using Traditional and Agile methods and looking to learn about applying lean principles to software development", "package_num": "3", "teach_by": [{"name": "Praveen Mittal", "department": "College of Science and Engineering"}], "week_data": [{"description": "In this module, we will first learn about core lean principles from manufacturing. After that we will learn how you can apply these lean principles in software development. Finally we will learn about  Lean Principles of software development in depth.  At the end of this module, you will build the foundational knowledge around lean concepts.", "video": ["Welcome and Course Intro", "Course Learning Plan", "What do we mean by Lean?", "Video: Five Principles of Lean Manufacturing", "Lean for software development", "Video: Lean vs. Agile", "Lean Fundamentals", "Video: Eliminate Waste", "Amplify Learning / Create Knowledge", "Defer Commitments", "Build Quality In", "Lean Principle: Respect People", "Deliver Fast", "Optimize the whole", "Lean Principles"], "title": "Lean Fundamentals"}, {"description": "In this module we will learn about Kanban and other Lean practices like Value Stream Mapping, Kaizen etc. You will gain the ability to participate effectively in using these tools and practices.", "video": ["Kanban for Software Development", "Lean Metrics : Tracking Flow Based Methods like Kanban", "Kanban", "Value Stream Mapping", "Video: Intro to Kaizen", "Video: Kaizen Examples", "Video: The 5 Whys", "Value Stream Map", "Kanban, Value Stream Mapping and Kaizen"], "title": "Kanban, Value Steam Mapping and Kaizen"}, {"description": "In this lesson we will learn techniques like Lean Startup and Design Thinking that can help your team learn about user and market needs much faster. ", "video": ["Lean Startup Principles", "Lean Startup (validated Learning and Build-measure-learn)", "Innovation Accounting", "A Talk by Eric Ries on Lean Startup", "Lean Startup"], "title": "Lean Startup"}, {"description": "In this module, we will learn about a technique called \"Learn Startup with Design Thinking\".  These techniques help the team learn about user needs. You will also get an opportunity to apply this technique on a fictional case study.  At the end of this module, you will be able to uncover user needs using \"Lean Startup with Design Thinking\".", "video": ["Design Thinking", "Lean Startup with Design Thinking", "Identifying and Classifying Assumptions", "Prototype and Test", "Design Thinking", "Applying Design Thinking"], "title": "Design Thinking"}]}, {"course_info": "About this course: You already know how to build a basic web application with the Ruby on Rails framework. Perhaps, you have even taken Course 1, \"Ruby on Rails: An Introduction\" (we highly recommend it) where you relied on external web services to be your “data layer”. But in the back of your mind, you always knew that there would come a time when you would need to roll up your sleeves and learn SQL to be able to interact with your own relational database (RDBMS). But there is an easier way to get started with SQL using the Active Record Object/Relational (ORM) framework. In this course, we will be able to use the Ruby language and the Active Record ORM framework to automate interactions with the database to quickly build the application we want.\n \nIn Rails with Active Record and Action Pack, we will explore how to interact with relational databases by using Active Record, a Ruby gem, which Rails uses by default for database access. We will then take a look at what role Active Record plays in the overall request-response cycle, when a client (the browser) requests data from the server, as well as how to submit the data to the server.  Of course, when accessing data, security is of paramount importance! We will talk about vulnerabilities such as SQL injection, as well as how to secure access to data by authenticating and authorizing users accessing the data. Take this course to build a Ruby on Rails application with Active Record to automate the detailed SQL interactions with our database.", "title": "Rails with Active Record and Action Pack", "rating": "4.7", "level": null, "created_by": "Johns Hopkins University", "package_name": "Ruby on Rails Web Development Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Kalman Hazins", "department": "Whiting School of Engineering"}], "week_data": [{"description": "In this module, we will begin exploring the database-interaction portion of Rails. We will start off with migrations that enable you to create and modify the schema of the database. We will then move on to discussing the Active Record gem Rails uses, which enables you to create, retrieve, update, and delete the data from the database. Before looking at Active Record, we will talk about some advanced Ruby features of meta-programming that will help facilitate our Active Record journey.", "video": ["Course Introduction", "Grading", "Welcome to Module 1: Introduction to Active Record", "Github Repository for Module 1", "Recommended Books", "Scaffolding", "Database Setup and SQLite", "Introduction to Migrations", "Creating and Modifying Tables and Columns", "Scaffold and Migrations", "Dynamic Dispatch", "Dynamic Methods", "Ghost Methods", "Introduction to Active Record", "Active Record CRUD: Part 1", "Active Record CRUD: Part 2", "Active Record Queries", "Basic Active Record CRUD"], "title": "Introduction to Active Record"}, {"description": "In this module, we will continue exploring Active Record and look at ways to code advanced queries without exposing ourselves to risk from SQL injection (as well as what SQL injection actually is). We will then look at expressing relationships between entities in Active Record and validating the data being saved to the database.", "video": ["Welcome to Module 2: Deep Dive into Active Record", "GitHub Repository for Module 2", "Recommended Books", "Seeding the Database", "SQL Fragments and Dangers of SQL Injection", "Array and Hash Condition Syntax", "Advanced Querying", "One-to-One Association", "One-to-Many Association", "Many-to-Many Association", "Rich Many-to-Many Association", "Relationships", "Active Record Scopes", "Validations", "N+1 Queries Issue and DB Transactions", "Active Record Relationships"], "title": "Deep Dive into Active Record"}, {"description": "In this module, we will introduce Rails' Action Pack, which is a combination of Action Controller and Action View. We will see how REST has influenced routing in a Rails application and also talk about partials, form helpers, and layouts.", "video": ["Welcome to Module 3: Introduction to Action Pack", "GitHub Repository for Module 3", "Recommended Books", "Introduction to Action Pack", "REST and Rails", "Action Pack", "Restful Actions: Index", "Restful Actions: Show and Destroy", "Restful Actions: New and Create", "Strong Parameters and Flash", "Restful Actions: Edit and Update", "Restful Actions", "Partials", "Form Helpers and Layouts", "ActionPack"], "title": "Introduction to Action Pack"}, {"description": "In this module, we will talk about how to deal with nested resources in Rails. We will then talk about securing your app with a username and password combination for authentication purposes and making sure that users are only authorized to make changes to and view their own resources. We will finish off the module by discussing pagination and deploying to Heroku Paas (Platform as a Service).", "video": ["Welcome to Module 4: Security and Nested Resources in Action Pack", "GitHub Repository for Module 4", "Recommended Books", "Building an App with Multiple Resources", "Nested Resources: Part 1", "Nested Resources: Part 2", "Nested Resources", "Authentication", "HTTP Sessions and Cookies", "Sessions Controller and View", "Authorization", "Authentication", "Pagination", "Deploying to Heroku and Enabling SSL", "Nested Resources, Security, and Pagination"], "title": "Security and Nested Resources in Action Pack"}]}, {"course_info": "About this course: As requirements are being gathered and prioritized, they also need to be documented. In Diagrammatic Notations and Software Requirements Specification Writing, we discuss and practice the process of turning requirements into something readable to the customers at a high level, and the developers.  When a designer or developer reads your document, they should be able to understand the overall idea, the scope, the domain, the resources, the expectations, and why alternative choices are not selected. To create a document in this way, you use a balance between storytelling (with pictures!) and complex diagrams.", "title": "SRS Documents: Requirements and Diagrammatic Notations", "rating": null, "level": "Beginner", "created_by": "University of Colorado System", "package_name": "Requirements Engineering: Secure Software  Specifications Specialization ", "target_audience": "Who is this class for: This is a graduate level class and can prove useful to those just entering the software engineering process, as well as those who have years of experience.  Coding is not needed.  Software engineers, managers, security engineers, technical writers, testers, and many more can learn much from these lessons in gaining a better understanding of how software requirements tie to your jobs.  You will also gain extended views compared to the software processes your companies currently use.  \nThis specialization is a beginning course into Software Requirements and introduces fundamental software engineering lifecycle comparisons, applied to the roles of the requirements analyst.  This course focuses on how we document all of the information we've obtained over time.  Start early- keep revising.  \nThis is also a course in the Engineering Secure Software Requirements Certificate, which can be used as a professional certificate or as a start toward further graduate studies in Computer Science or Software Engineering.  ", "package_num": "5", "teach_by": [{"name": "Kristen Walcott-Justice", "department": "Department of Computer Science"}], "week_data": [{"description": "Beginning to write a Software Requirements Specification (SRS) is a daunting process.  As you start elicitation and move onward through the requirements cycle, you should plan your approach and begin writing as soon as possible.  In this module, we discuss local and global rules that should be followed to lead to success.", "video": ["Introduction to Diagrammatic Notations and Software Requirements Specification Writing", "Introduction to Diagrammatic Notations - Slides", "Following Local Rules", "Standardized Statement Templates", "Local Rules | Standardized Templates - Slides", "Global Organization Templates", "Global Organization Templates - Slides", "Begin to Write an SRS Document"], "title": "Beginning to Write an SRS Document"}, {"description": "Within a requirements document, you should tell a story.  Pictures help in stories! In this lesson, we'll look into some of the \"pictures\" that you can create to clarify understanding for all readers and to help yourself know that all points are being covered clearly and completely. Specifically, we'll consider high, system-scope diagrams.", "video": ["Diagramming- Adding Use/Misuse/Abuse Cases", "Diagramming-Adding Use/Misuse/Abuse Cases -Slides", "Misuse Cases: Use Cases with Hostile Intent", "Misuse and abuse cases: getting past the positive", "Context and Problem Diagrams", "Frame Diagrams", "Context and Problem | Frame Diagrams - Slides", "Relating software requirements and architectures using problem frames", "Problem Frames and Approaches- A discussion", "Use/Misuse Cases and High Level Diagramming"], "title": "Beginning Diagramming"}, {"description": "At a lower level, Entity Relationship Diagrams, Data Flow Diagrams, and SADT diagrams can be used.  All three sets of diagrams work together to explain lower-level relationships and dataflow for components in the system-to-be.  In this lesson, we'll discuss what these diagrams look like and what information should be included in such diagrams.", "video": ["Entity Relationship and Class Diagrams", "The entity-relationship model for multilevel security", "SADT Diagrams: Actigrams and Datagrams", "Data Flow Diagrams", "Creating a Data Flow Diagram", "Entity Relationship | SADT |Data Flow Diagrams - Slides", "Lower-Level Diagramming"], "title": "Lower-Level Diagramming"}, {"description": "System level diagram and low level diagrams work together.  Each low level diagram also relates to other low level diagrams.  In addition to these diagrams, we also have diagrams to explain events. ", "video": ["Putting the Diagrams Together", "Event Trace Diagrams", "Putting the Diagrams Together | Event Trace Diagrams - Slides", "State Machine Diagrams", "Concurrent StateCharts and R-Nets", "State Machine Diagrams | Concurrent State Charts & R-Nets - Slides", "Tracing Events", "Event trace diagrams, ER diagrams, and Dataflow Diagrams"], "title": "Tracing Events"}, {"description": "All diagrams created for a SRS document must link together, in addition to being linked to and explained in the text.  In this lesson, we consider inter-view relationships between diagrams and how the combination of multiple diagrams assists in analysis of our system view and explanation.    We also talk briefly about a more formal format of requirements writing for mission critical and safety critical systems.  Lastly, we discuss using diagrams to correspond with text in the SRS document- remember: you're telling a story!", "video": ["Diagrams: Putting them all together", "Diagrams: Putting Them All Together - Slides", "Formal Notation", "Formal Notation - Slide", "Combining Natural Language and Diagrams - Reminders", "Combining Natural Language and Diagrams - Slide", "Model driven security for process-oriented systems", "Combining and Confirming Diagram Consistency and Completeness"], "title": "Combining and Confirming Diagram Consistency and Completeness"}]}, {"course_info": "About this course: This course talks about software development lifecycles a description/prescription for how we write software.  Design is a step in this life cycle, and the course explores the implications of this.  Design has a role in the life cycle; it is always there, regardless of the kind of life cycle we’re talking about.  Why is that?  Why was design considered as a step in this life cycle?", "title": "Software Design as an Element of the Software Development Lifecycle", "rating": "5.0", "level": null, "created_by": "University of Colorado System", "package_name": "Secure Software Design Specialization ", "target_audience": "Who is this class for: This is a graduate class and it will be best appreciated by students who have a solid foundation in basic software engineering, who can code well (although no real coding is required) and who have had at least internships if not full-time jobs in software development.  This is not to say that you need to know how to design software before you learn about designing secure software.  It is to say that the more experience you already have in software development, the more the examples and ideas put forth in this course will resonate with you.", "package_num": "1", "teach_by": [{"name": "Albert Glock", "department": "Computer Science"}], "week_data": [{"description": "Design requires that you be much more than minimally knowledgeable about your project and how to accomplish it.", "video": ["Introduction to Software Design", "Additional Resource", "Thinking", "Additional Resource", "Discussion 1", "Introduction to Secure Software Design"], "title": "Design, is a Thoughtful Process"}, {"description": "How Design translates requirements into specifications which coders can understand and use.", "video": ["What's an SDLC", "Additional Resource", "What happens in Design", "Additional Resource", "Discussion 2", "How Design fits"], "title": "How Design fits into the flow of software development"}, {"description": "There are different ways to develop software, but design plays a similar set of roles regardless of why way is used.", "video": ["Design in different SDLCs", "Additional Resource", "Interfacing with Requirements and Implementation", "Additional Resource", "Discussion 3", "Design in the Context of Different SDLC's"], "title": "Design in the Context of Different SDLC's"}, {"description": "The difference between high-level and detailed design and how high-level design is good at handling security issues.", "video": ["The role of Architecture in Design", "Additional Resource", "Permitted Activities that Can Cause Problems", "Discussion 4", "How High-Level Design (or Architecture) handles Security Problems"], "title": "How High-Level Design (or Architecture) handles Security Problems"}, {"description": "A comprehensive course assessment comprising of 5 quizzes. Each assessment contains a randomized set of questions from different modules of the course. ", "video": ["Assessment 1", "Assessment 2", "Assessment 3", "Assessment 4", "Assessment 5"], "title": "Final Exam"}]}, {"course_info": "About this course: In this course, application developers learn how to design, develop, and deploy applications that seamlessly integrate components from the Google Cloud ecosystem. Through a combination of presentations, demos, and hands-on labs, participants learn how to use GCP services and pre-trained machine learning APIs to build secure, scalable, and intelligent cloud-native applications\n\nCourse objectives\n\nThis course teaches participants the following skills:\nUse best practices for application development.\nChoose the appropriate data storage option for application data.\nImplement federated identity management.\nDevelop loosely coupled application components or microservices.\nIntegrate application components and data sources.\nDebug, trace, and monitor applications.\nPerform repeatable deployments with containers and deployment services.\nChoose the appropriate application runtime environment; use Google Container Engine as a runtime environment and later switch to a no-ops solution with Google App Engine flexible environment.", "title": "Getting Started With Application Development", "rating": "4.5", "level": "Intermediate", "created_by": "Google Cloud", "package_name": "Developing Applications with Google Cloud Platform Specialization ", "target_audience": "Who is this class for: This course is primarily aimed at application developers who want to build cloud-native applications or redesign existing applications that will run on Google Cloud Platform.", "package_num": "2", "teach_by": [{"name": "Google Cloud Training", "department": null}], "week_data": [{"description": "", "video": ["Welcome to the Specialization", "Course Information", "Topics covered in the course"], "title": "Introduction to Getting Started With Application Development"}, {"description": "", "video": ["Loosely Coupled Microservices and API Gateways", "Security, Reliability, and Migration", "Best Practices for Application Development Quiz"], "title": "Best Practices for Application Development"}, {"description": "", "video": ["Google Cloud SDK, Google Cloud Client Libraries, & Firebase SDK", "Demo: API Explorer Walkthrough", "Lab Overview", "Qwiklabs – Setting Up a Development Environment", "Module Review", "Google Cloud Client Libraries, Google Cloud SDK, and Google Firebase SDK Quiz"], "title": "Google Cloud Client Libraries, Google Cloud SDK, and Google Firebase SDK"}, {"description": "", "video": ["Cloud Storage, Cloud Datastore, Cloud Bigtable, Cloud SQL, and Cloud Spanner", "BigQuery, Microsoft SQL Server images on GCP, and Firebase Storage Options", "Demo: Connecting Securely to a Cloud SQL Database", "Module Review", "Data Storage Options Quiz"], "title": "Data Storage Options"}, {"description": "", "video": ["Cloud Datastore Concepts and Indexes", "Demo: Explore Cloud Datastore", "Design Considerations & Sharding", "Replication, Query Types, Transactions, and Handling Errors", "Demo: Use Cloud Dataflow to bulk-load data into Cloud Datastore", "Lab Overview", "Qwiklabs – Storing Application Data in Cloud Datastore", "Module Review", "Using Cloud Datastore Quiz"], "title": "Best Practices for Using Cloud Datastore"}, {"description": "", "video": ["Cloud Storage Concepts & Classes", "Demo: Explore Cloud Storage", "Bucket / Object Operations and Truncated Exponential Backoff", "Demo: Enable CORS configuration in Cloud Storage", "Best Practices for Cloud Storage", "Lab Overview", "Qwiklabs – Storing Image and Video Files in Cloud Storage", "Module Review", "Using Cloud Storage Quiz"], "title": "Best Practices for Using Cloud Storage"}, {"description": "", "video": ["Course Conclusion"], "title": "Wrap Up"}]}, {"course_info": "About this course: Content is an eminent example of the features that contributed to the success of wireless Internet. Mobile platforms such as the Snapdragon™ processor have special hardware and software capabilities to make acquisition, processing and rendering of multimedia content efficient and cost-effective. \n\nIn this course, you will learn the principles of video and audio codecs used for media content in iTunes, Google Play, YouTube, Netflix, etc.  You will learn the file formats and codec settings for optimizing quality and media bandwidth and apply them in developing a basic media player application. \n\nLearning Goals: After completing this course, you will be able to:\n\n1.\tExplain the tradeoffs between media quality and bandwidth for content delivery. \n2.\tExtract and display metadata from media files.\n3.\tImplement and demonstrate a simple media player application using DragonBoard™ 410c.", "title": "Internet of Things: Multimedia Technologies", "rating": "4.3", "level": null, "created_by": "University of California, San Diego", "package_name": "Internet of Things Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Harinath Garudadri", "department": "Qualcomm Institute of Calit2, UC, San Diego"}, {"name": "Ganz Chockalingam", "department": "Qualcomm Institute of Calit2, UC, San Diego"}], "week_data": [{"description": "Welcome to the Internet of Things! Before diving into this course give us a chance to let you know what it is all about! We will walk you through a module by module outline that will give you highlights on the interesting aspects of the course.", "video": ["Specialization Trailer", "Course 5 Slides"], "title": "Introduction"}, {"description": "In this course, you will see a lot of new words and acronyms you might not be familiar with. If you feel comfortable with your knowledge of tech terminology, feel free to skip these lessons since they will not affect the overall integrity of the course. If you see something that you want to know a little more about, feel free to watch the video to gain insight on some basic concepts. We do expect you to know the majority of this material before going into the next module, we would recommend going through the lessons as a quick brush up.", "video": ["Introduction to Lesson 1", "Acronyms", "Terminology", "A look back at Lesson 1", "Additional Links", "Introduction to Lesson 2", "Multimedia Computing and Classification", "Multimedia Importance", "Driving Forces in Multimedia", "Multimedia Applications", "Working with Libraries", "A look back at Lesson 2", "Introduction to Lesson 3", "Android Multimedia", "C/C++", "Python", "A look back at Lesson 3", "Module 1 Quiz"], "title": "Terminology/Cheat Sheet (Beginner)"}, {"description": "In this module our esteemed Professor Harinath Garudadri will talk about coders and decoders (Codecs). This will allow us to make better use of our multimedia choices when working with the DragonBoardTM 410c. We want to look at the motivation behind using Codecs, the different ways to take advantage of redundancies when using codecs and finally the ability to take advantage of different receiver / transmitter combinations. If we are able to understand the way that information is sent and received over the data plane we can create and use the right codecs.", "video": ["Multimedia Technologies", "Introduction to Lesson 1", "A Generic Model", "Audio Processing", "Image Processing", "Video Processing", "Quality Evaluation", "Introduction to Lesson 2", "Pixel Camera", "Fall Risk Assessment", "An Objective Balance Test", "Reading Material Links", "Quiz 2"], "title": "Codecs"}, {"description": "In this module we will talk in depth about computer vision. We will talk about a variety of current applications of computer vision, and brainstorm the future applications you all are capable of making! Ultimately we will set up a computer vision development environment on your Linaro/Debian release capable of creating a wide variety of computer vision projects. By the end of this module we will have built a great basic application in Python, we will add a few features and pass the code on to you! Hopefully this code can serve as a great template for you all to use.", "video": ["Introduction to Lesson 1", "What is Computer Vision?", "Applications of CV", "A look back at Lesson 1", "Introduction to Lesson 2", "SimpleCV vs OpenCV", "Setting up your environment", "A look back at Lesson 2", "Setup Commands", "Introduction to Lesson 3", "Basic Application", "Adding Features", "Server Setup", "A look back at Lesson 3", "Code access", "Module 3 Quiz"], "title": "Computer Vision and our Application"}]}, {"course_info": "About this course: The integration of ICT (information and communications technology) in different applications is rapidly increasing in e.g. Embedded and Cyber physical systems, Communication protocols and Transportation systems. Hence, their reliability and dependability increasingly depends on software. Defects can be fatal and extremely costly (with regards to mass-production of products and safety-critical systems).\n\nFirst, a model of the real system has to be built. In the simplest case, the model reflects all possible states that the system can reach and all possible transitions between states in a (labelled) State Transition System. When adding probabilities and discrete time to the model, we are dealing with so-called Discrete-time Markov chains which in turn can be extended with continuous timing to Continuous-time Markov chains. Both formalisms have been used widely for modeling and performance and dependability evaluation of computer and communication systems in a wide variety of domains. These formalisms are well understood, mathematically attractive while at the same time flexible enough to model complex systems. \n\nModel checking focuses on the qualitative evaluation of the model. As formal verification method, model checking analyzes\nthe functionality of the system model. A property that needs to be analyzed has to be specified in a logic with consistent syntax and semantics. For every state of the model, it is then checked whether the property is valid or not.\nThe main focus of this course is on quantitative model checking for Markov chains, for which we will discuss efficient computational algorithms. The learning objectives of this course are as follows:\n\n- Express dependability properties for different kinds of transition systems .\n- Compute the evolution over time for Markov chains.\n- Check whether single states satisfy a certain formula and compute the satisfaction set for properties.", "title": "Quantitative Model Checking", "rating": "4.5", "level": "Intermediate", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: This course is meant for Master students in Computer Science, Electrical Engineering and Embedded Systems as a specialisation in the area of formal models and methods.\n\nNote that as a consequence, quiz questions are more like exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Anne Remke", "department": "Computer Science"}], "week_data": [{"description": "We introduce Labeled Transition Systems (LTS), the syntax and semantics of Computational Tree Logic (CTL) and discuss the model checking algorithms that are necessary to compute the satisfaction set for specific CTL formulas. ", "video": ["Welcome!", "Introduction", "Script 1 and 2.1", "Semantics of CTL", "Script 2.2 and 2.3", "Model Checking CTL", "The Until Operator", "Check your understanding of CTL", "The Always Operator", "Script 2.4", "Formulate for yourself", "Test your understanding of CTL semantics", "Model checking eventually, always  and  until"], "title": "Module 1: Computational Tree Logic"}, {"description": "We enhance transition systems by discrete time and add probabilities to transitions to model probabilistic choices. We discuss important properties of DTMCs, such as the memoryless property and time-homogeneity. State classification can be used to determine the existence of the limiting and / or stationary distribution. ", "video": ["Introduction to DTMCs", "Script 3.1 and 3.2", "Evolution in Time", "Evolution of DTMCs", "Transient probabilities", "State classification", "Script 3.3", "Classification of DTMC states True or False?", "Steady-state probabilities", "Compute transient probabilities", "State classification", "Steady-state computation"], "title": "Discrete Time Markov Chains"}, {"description": "We discuss the syntax and semantics of Probabilistic Computational Tree logic and check out the model checking algorithms that are necessary to decide the validity of different kinds of PCTL formulas. We shortly discuss the complexity of PCTL model checking. ", "video": ["Syntax of PCTL", "PCTL Syntax", "Model checking and the Next operator", "Script: 4.1 and 4.2", "Time-bounded Until", "Test your understanding of PCTL Until", "Backwards computation", "Script: 4.3.1 and 4.3.2", "Unbounded Until", "Script 4.3.3", "Test your understanding of PCTL", "Checking PCTL next", "Checking time-bounded until", "Checking unbounded until"], "title": "Probabilistic Computational Tree Logic"}, {"description": "We enhance Discrete-Time Markov Chains with real time and discuss how the resulting modelling formalism evolves over time. We compute the steady-state for different kinds of CMTCs and discuss how the transient probabilities can be efficiently computed using a method called uniformisation. ", "video": ["Definition of a CTMC", "Script: 5.1 and 5.2", "Generator matrix", "Test your understanding of CTMCs", "Steady-state probabilities", "Steady state probability in CTMCs", "Triple Modular Redundancy", "Script: 5.3", "Uniformisation", "Test your understanding of Uniformisation", "Generator matrix", "Identifying BSCCs", "Uniformisation"], "title": "Continuous Time Markov Chains"}, {"description": "We introduce the syntax and semantics of Continuous Stochastic Logic and describe how the different kinds of CSL formulas can be model checked. Especially,  model checking the time bounded until operator requires applying the concept of uniformisation, which we have discussed in the previous module.", "video": ["Model checking CSL", "Model checking and Time-bounded next", "Script: 6.1", "Test your understanding of CSL (I)", "Model checking the steady-state operator", "Test your understanding of CSL (II)", "Script: 6.2", "Time-bounded Until", "Test your understanding of CSL (III)", "An application", "Assembly line", "Steady state and next", "Time bounded until in CSL"], "title": "Continuous Stochastic Logic"}]}, {"course_info": "About this course: Since many software developers are compulsive coders, they have created software over the years to help them do their job.  There are tools which make design and its associated tasks easier.  The course introduces some basic tools and techniques to help you with design.  Tools aren’t always tangible, however.  The last two lessons of this course discuss questions of Ethics in software development. The purpose here is, as with tools, to equip you to better carry our your responsibilities as a designer. Students will be required to have a prior knowledge of writing and delivering software and some programming knowledge in java.", "title": "Software Design Methods and Tools", "rating": null, "level": "Intermediate", "created_by": "University of Colorado System", "package_name": "Secure Software Design Specialization ", "target_audience": "Who is this class for: This is a graduate class and it will be best appreciated by students who have a solid foundation in basic software engineering, who can code well (although no real coding is required) and who have had at least internships if not full-time jobs in software development.  This is not to say that you need to know how to design software before you learn about designing secure software.  It is to say that the more experience you already have in software development, the more the examples and ideas put forth in this course will resonate with you.", "package_num": "3", "teach_by": [{"name": "Albert Glock", "department": "Computer Science"}], "week_data": [{"description": "What is in a design and an introduction to hierarchical design representations.", "video": ["Intro to Design Methods and Tools", "Additional Resource", "Jackson Structured Design", "Additional Resource", "Discussion 1", "General Design Notions"], "title": "General Design Notions"}, {"description": "Hierarchical design which shows data flow, and rigorous, formally provable methods of design representation.", "video": ["Data Flow Diagrams", "Additional Resource", "Z", "Additional Resource", "Discussion 2", "Dynamic and Algebraic Designs"], "title": "Dynamic and Algebraic Designs"}, {"description": "An introduction to IBM Rhapsody, a UML modeling tool.", "video": ["UML : Obtaining Rhapsody from IBM", "UML Class diagrams with Rhapsody", "Additional Resource", "Building a Sequence Diagram with Rhapsody", "Additional Resource", "Discussion 3", "UML Tools"], "title": "UML Tools"}, {"description": "An introduction to the use of JUnit which performs unit testing for Java software.", "video": ["JUnit Install", "TestRunner Download", "Using JUnit", "Additional Resource", "Discussion 4", "Unit Testing"], "title": "Unit Testing"}, {"description": "Unusual situations in a project in which you may find yourself, and what to do about them.", "video": ["Ethics I", "Additional Resource", "Project Ethics II", "Additional Resource", "Discussion 5", "Ethics", "Ethics"], "title": "Ethics"}, {"description": "A comprehensive course assessment comprising of 5 quizzes. Each assessment contains a randomized set of questions from different modules of the course. ", "video": ["Assessment 1", "Assessment 2", "Assessment 3", "Assessment 4", "Assessment 5"], "title": "Final Exam"}]}, {"course_info": "About this course: In Elicitation: Artifact and Stakeholder Driven Analysis, you will learn to use both recorded and presently unrecorded knowledge in your elicitation techniques.  As you get started in finding out about the new product, you must first learn about the product that was (if there was one) and then learn about the system to be.  Oftentimes, you'll find yourself in an environment you know nothing about! This course will help you find ways to learn about the domain, the system that was, and the system to be.  Please review: \"Who this class is for to determine if you are ready to take this graduate level course\".", "title": "Requirements Elicitation: Artifact and Stakeholder Analysis", "rating": null, "level": "Beginner", "created_by": "University of Colorado System", "package_name": "Requirements Engineering: Secure Software  Specifications Specialization ", "target_audience": "Who is this class for: This is a graduate level class and can prove useful to those just entering the software engineering process, as well as those who have years of experience.  Coding is not needed.  Software engineers, managers, security engineers, technical writers, testers, and many more can learn much from these lessons in gaining a better understanding of how software requirements tie to your jobs.  You will also gain extended views compared to the software processes your companies currently use.  \nThis specialization is a beginning course into Software Requirements and introduces fundamental software engineering lifecycle comparisons, applied to the roles of the requirements analyst. Artifact driven and stakeholder driven elicitation techniques are the focus.   Who do you talk to and how?\nThis is also a course in the Engineering Secure Software Requirements Certificate, which can be used as a professional certificate or as a start toward further graduate studies in Computer Science or Software Engineering.  \nHere we primarily focus on artifact and stakeholder driven elicitation and how it can be used toward gathering domain knowledge and knowledge of the system that was and the system to be.", "package_num": "2", "teach_by": [{"name": "Kristen Walcott-Justice", "department": "Department of Computer Science"}], "week_data": [{"description": "One step of gathering domain knowledge and knowledge of the system that was and the system to be is through artifact-driven elicitation.   Here we will discuss what artifact-driven elicitation entails, how to go about learning background from the stakeholders, and methods to obtain and deal with the data.", "video": ["Artifact-driven elicitation- What is it?", "Artifact-driven Elicitation - Slides", "Who are your Stakeholders? A Meeting Scheduler Example", "Artifact Driven Elicitation Challenge Questions", "Artifact gathering - Questionnaires", "Artifact Gathering - Slides", "Artifact Gathering Practice Questions", "Repertory grids", "Repertory Grids - Slide", "Practice Questions Repertory Grids", "Card sorts/conceptual laddering", "Card Sorts / Conceptual Laddering - Slide", "Artifact Driven Elicitation"], "title": "Artifact Driven Elicitation"}, {"description": "As you talk with customers early on, developing storyboards and scenarios help.  They are easily communicable to both the customer and later to developers and work in all software development lifecycles.  Mockups and prototypes can also be used- CAREFULLY.  Here we explain these concepts along with their large benefits and dangers.", "video": ["Storyboarding", "Storyboarding", "Scenarios", "Scenario Advantages and Disadvantages", "Scenarios / Scenarios Advantages & Disadvantages - Slides", "Requirements Elicitation: Towards the Unknown Unknowns", "Challenge/Practice Questions Storyboarding/Scenarios", "Mockups and Prototypes", "Mockups and Prototypes - Slides", "Challenge questions Mockups/Prototypes", "Storyboarding Discussion", "Storyboards and Scenarios", "Storyboarding and Putting a Project Together"], "title": "Storyboarding and Scenarios"}, {"description": "In understanding the system to be and the system that was, existing knowledge of the domain and current scenarios needed are helpful.  These can be related back to models.  This lesson discusses knowledge that can be obtained, from what resources, and how that can be mapped to existing models for help in further elicitation. ", "video": ["Knowledge Reuse", "Knowledge Reuse - Slides", "Practice Questions for Knowledge ReUse", "Discussion Knowledge Reuse", "Meta-Model Usage and Reuse Pros and Cons", "Meta-Model Usage and Reuse Pros and Cons - Slides", "Inferring declarative requirements specifications from operational scenarios", "Challenge Questions Meta-model Useage", "Reusing Existing Knowledge"], "title": "Reusing Existing Knowledge"}, {"description": "Knowledge of the system-as-is and the system-to-be can be obtained through interviews.  While the concept of conducting an interview seems easy overall, an efficient and effective interview is challenging to conduct.  Here we'll talk about guides to meeting effectiveness and guidelines for conducting a useful interview, specifically for determining what the stakeholder has and needs.", "video": ["Stakeholder Elicitation: Starting Interviewing Techniques", "Stakeholder Elicitation: Starting Interviewing Techniques - Slides", "Stakeholder Elicitation-Interviewing Techniques Challenge Questions", "SAMOSAs- Leading to Meeting Effectiveness", "SAMOSAs - Leading to Meeting Effectiveness - Slides", "Interview Pros and Cons", "Guidelines for Effective Interviews", "Guidelines for Effective Interviews - Slide", "Practice Questions: SAMOSAs, Interview techniques", "Observation and Ethnographic Studies", "Observation and Ethnographic Studies - Slides", "Discussion Interviewers", "Combining Techniques", "Combining Techniques and Conclusions - Slides", "Practice Questions Combining Techniques/Ethnographic studies", "Interviewing- Learning from the Sources"], "title": "Interviewing- Learning from the Sources"}]}, {"course_info": "About this course: Risk Analysis, Assessment, and Prioritization looks at how you can manage conflicts at system levels, but it can also be applied to lower level assessments.   How do you manage and document conflict, along with alternatives?  In analyzing alternatives, you must consider risks.  In this course, we'll look into how to analyze risk, evaluate risk, document risks, and use this information for prioritization of requirements.  Qualitative and Quantitative approaches will be covered.", "title": "Software Requirements Prioritization: Risk Analysis", "rating": null, "level": "Beginner", "created_by": "University of Colorado System", "package_name": "Requirements Engineering: Secure Software  Specifications Specialization ", "target_audience": "Who is this class for: This is a graduate level class and can prove useful to those just entering the software engineering process, as well as those who have years of experience.  Coding is not needed.  Software engineers, managers, security engineers, technical writers, testers, and many more can learn much from these lessons in gaining a better understanding of how software requirements tie to your jobs.  You will also gain extended views compared to the software processes your companies currently use.  \nThis specialization is a beginning course into Software Requirements and introduces fundamental software engineering comparisons, applied to the roles of the requirements analyst.  Here we especially discuss analysis and prioritization of requirements with stakeholder assistance toward determining what should be included in your document of full requirements. \nThis is also a course in the Engineering Secure Software Requirements Certificate, which can be used as a professional certificate or as a start toward further graduate studies in Computer Science or Software Engineering.  \n\nIt is recommended any learner of this course to have a good understanding or working knowledge of requirement elicitation as a prerequisite.", "package_num": "4", "teach_by": [{"name": "Kristen Walcott-Justice", "department": "Department of Computer Science"}], "week_data": [{"description": "Once requirements have been somewhat/mostly determined, we next need to go carefully through our work.  This involves analyzing risk, assessing alternative plans, and prioritizing.  In this module, we examine how to begin documenting conflicts and generating conflict resolution. ", "video": ["Intro to Risk Analysis, Assessment, and Prioritization", "Documenting Conflicts", "Module 1.1 Practice Quiz", "Generating Conflict Resolution", "Module 1.2 Practice Quiz", "Introduction | Documenting Conflicts | Conflict Resolution - Slides", "Bringing Security into Risk Analysis", "Module 1 Discussion", "Managing Conflicts"], "title": "Risk Analysis, Assessment and Prioritization"}, {"description": "Risk goes far beyond security.  Most non-functional requirements are part of risk analysis.  In this lesson, we discuss different types of risks, how they can be identified, and how to visualize a causal linking of failures, causes, and consequences using risk trees and cut-set trees.", "video": ["What is a Risk?", "A risk taxonomy proposal for software maintenance", "What is Risk? A taxonomy document", "Risk and Cut-Set Trees", "Module 2 Practice Quiz", "What is a Risk? |Cut-Set Trees - Slides", "Module 2 Discussion", "Dealing with Risk"], "title": "Dealing with Risk"}, {"description": "In writing use cases and scenarios, we'll discover risk in the interactions.  Interactions may happen out of order, to quickly or slowly, or not occur at all.  In risk assessment, we assess the likelihood of risks and their severity, the likelihood of consequences, and thus, attempt to control high-priority risks.\n", "video": ["Risk Assessment", "Risk Control and Countermeasures", "Module 3 Practice Quiz", "Software risk management: principles and practices", "Risk Assessment | Risk Control and Countermeasures - Slides", "Module 3 Discussion", "Controlling Risk"], "title": "Controlling Risk"}, {"description": "Many approaches can be used to incorporate risk management into your software requirements engineering process.  One is Defect Detection Prevention (DDP).  We can also analyze alternatives qualitatively and quantitatively.  We discuss Defect Detection Prevention, Value Cost Prioritization, and the Analytic Hierarchal Process in this module and how these techniques can be scaled for every day use.  ", "video": ["Integrating Risk Management", "Risk-Driven Revision of Requirements Models", "Evaluating Alternatives", "Module 4.1 Practice Quiz", "Quantitative Risk Prioritization: Analytic Hierarchic Process", "AHP using Excel", "Reducing the cost of AHP using Machine Learning", "Risk Analysis, Assessment, and Prioritization Conclusions... and Reminders", "Module 4.2 Practice Quiz", "Risk Management through Analysis, Assessment, Prioritization | Conclusions - Slides", "Module 4 Discussion", "Risk Management"], "title": "Incorporating Risk Management into Your Process"}]}, {"course_info": "About this course: There is a significant number of tasks when we need not just to process an enormous volume of data but to process it as quickly as possible. Delays in tsunami prediction can cost people’s lives. Delays in traffic jam prediction cost extra time. Advertisements based on the recent users’ activity are ten times more popular.\n\nHowever, stream processing techniques alone are not enough to create a complete real-time system. For example to create a recommendation system we need to have a storage that allows to store and fetch data for a user with minimal latency. These databases should be able to store hundreds of terabytes of data, handle billions of requests per day and have a 100% uptime. NoSQL databases are commonly used to solve this challenging problem.\n\nAfter you finish this course, you will master stream processing systems and NoSQL databases. You will also learn how to use such popular and powerful systems as  Kafka, Cassandra and Redis.\n\nTo get the most out of this course, you need to know Hadoop and Hive. You should also have a working knowledge of Spark, Spark SQL and Python.\n\nDo you want to learn how to build Big Data applications that can withstand modern challenges? Jump right in!", "title": "Big Data Applications: Real-Time Streaming", "rating": null, "level": "Advanced", "created_by": "Yandex", "package_name": "Big Data for Data Engineers Specialization ", "target_audience": "Who is this class for: This course is aimed to everybody, who feel interest in Big Data. As the technologies covered throughout the course operate in Unix environment, we expect you to have basic understanding of the subject. Things like processes and files assumed to be familiar for the learner. Python is required to complete programming assignments. To get the most out of this course, you need to know Hadoop and Hive. You should also have a working knowledge of Spark, Spark SQL and Python.", "package_num": "4", "teach_by": [{"name": "Ivan Puzyrevskiy", "department": null}, {"name": "Pavel Mezentsev ", "department": "PulsePoint inc"}, {"name": "Emeli Dral ", "department": null}, {"name": "Alexey A. Dral", "department": "Algorithms and Programming Technologies dept. MIPT"}], "week_data": []}, {"course_info": "About this course: In Requirements Goal Development and Language Analysis, we move from the spoken word to precise writing.  A first step in this is writing goals.  We will talk about goals used in requirements engineering and, from this, writing use cases from what we learn.  Use cases can be in diagram and written form.  Then- the villains enter- misuse cases and abuse cases are discussed in how we can deal with them in a Requirements environment.  In gathering requirements, you'll have many questions remaining.  Often this leads to the need of more interviews and group sessions.  We'll go through how to handle group meetings, dealing with inconsistency, and handling conflict between stakeholders.", "title": "Requirements Specifications: Goals and Conflict Analysis", "rating": null, "level": "Beginner", "created_by": "University of Colorado System", "package_name": "Requirements Engineering: Secure Software  Specifications Specialization ", "target_audience": "Who is this class for: This is a graduate level class and can prove useful to those just entering the software engineering process, as well as those who have years of experience.  Coding is not needed.  Software engineers, managers, security engineers, technical writers, testers, and many more can learn much from these lessons in gaining a better understanding of how software requirements tie to your jobs.  You will also gain extended views compared to the software processes your companies currently use.  \nThis specialization is a beginning course into Software Requirements and introduces fundamental software engineering lifecycle comparisons, applied to the roles of the requirements analyst.  Here you will especially learn about how to begin writing a requirements document early!  It is an iterative process.  Start with a firm model.  \nThis is also a course in the Engineering Secure Software Requirements Certificate, which can be used as a professional certificate or as a start toward further graduate studies in Computer Science or Software Engineering.  ", "package_num": "3", "teach_by": [{"name": "Kristen Walcott-Justice", "department": "Department of Computer Science"}], "week_data": [{"description": "After learning a lot from your customers, you now need to analyze, evaluate, and negotiate.  One way to begin working with the data is to write out explicit goals from the information you've gathered.  Goals can be written at high and low levels, but  they need to be clear and measurable at any level.  The first step is determining behavioral goals.", "video": ["Introduction to Goal Development and Language Conflict Analysis", "Introduction to Goal Development and Language Conflict Analysis", "Generating Goals", "Goal Overview", "Module 1.1 Practice Quiz", "High Level Goal Types", "Low Level Goal Types", "Module 1.2 Practice Quiz", "Fuzzy goals for requirements-driven adaptation", "Goal Development | Language Conflict Analysis |Goal Types - Slides", "Module 1 Discussion", "Module 1 Graded Quiz"], "title": "Goal Creation"}, {"description": "Once goals have been identified, they can be pulled together to create use cases; these are easy to read and understand by both customer and developer.  To address security, misuse cases and abuse cases can also be defined, in written or drawn form.  ", "video": ["The Use Case Diagram", "The Use Case and Use Case Description", "Module 2 Discussion: Use Case for ATM System", "Use Case | Description | ATM System - Slides", "Module 2.1 Practice Quiz", "Misuse Cases for Security", "Benefits of Misuse Cases", "Eliciting security requirements with misuse cases", "Misuse and abuse cases: Getting past the positive", "Misuse Cases| Security Benefits - Slides", "Module 2.2 Practice Quiz", "Use Case Creation"], "title": "Use, Misuse, and Abuse Cases"}, {"description": "While writing use cases, you'll likely realize that you are missing many components, have questions, and realize that some statements conflict.  Group Sessions can help you get more information quickly and begin the negotiation process.  Here you'll learn about different types of group sessions and how to make group sessions efficient and effective. ", "video": ["Group Sessions in Analysis and Negotiation", "Group Sessions: Tips and Tricks", "Group Sessions - Slides", "Module 3.1 Practice Quiz", "Structured and Unstructured Sessions", "JAD: Joint application design", "QFD: Quality Function Deployment", "Group Session Benefits", "Structured & Unstructured Sessions | Group Session Benefits - Slides", "Module 3.2 Practice Quiz", "Module 3 Discussion", "Module 3 Graded Quiz"], "title": "Group Sessions for Elicitation, Analysis, and Negotiation"}, {"description": "Inconsistency and conflicts often arise due to language that's being used.  There are many types of inconsistency that you can identify early on.  The conflicts identified need to be clarified and fixed.  In this module, identifying inconsistency, identifying clashes, and handling conflict are discussed.", "video": ["Learning to Discover Inconsistency", "Dealing with Conflict", "Software Requirements Negotiation and Renegotiation Aids: A Theory-W Based Spiral Approach", "Module 4 Practice Quiz", "Applying WinWin to quality requirements: a case study", "Module 4 Discussion: Boundary Conditions- How to Find Them", "Goal Development and Language Conflict Summary", "Inconsistency | Conflict | Boundary Condition - Slides", "Module 4 Graded Quiz"], "title": "Finding Conflicts and Risks"}]}, {"course_info": "About this course: 如果将软件开发人员看作行走江湖的武侠，那么各种软件开发技术就是武侠赖以傍身的武术秘籍。有的秘籍以易学灵巧见长，练习者很快掌握，并有立竿见影的功效，但失之厚重持久；有的秘籍初学乍练顿显困难，虽冥思苦解仍不得要领，需坚持不断的内功修炼方成正果，却是成为武林大侠必备的至宝。本课程有些类似于后者。\n\n《面向对象技术高级课程》深入、系统、完整地讲解当今主流的面向对象软件开发方法的分析、设计、实现及重构方法，深入讲解UML语言的高级技术细节，以及近年来面向对象方法最新的发展趋势。课程集百家之所言，并结合主讲者最新的研究成果，并通过大量、丰富、完整、不同领域、应用不同技术的案例将其中的关键知识点串联起来，便于理解和应用。\n\n本课程并不拘限于某一特定的面向对象的编程语言的编程技巧，但却包含了基于当前主流的面向对象编程语言的多项完整案例。本课程引导选课同学从更为抽象和共性的模型角度描述现实世界和软件世界,即构建分析与设计模型，之后再将其落实到软件编程实现。这种工程化的理念对于开发大型、复杂、困难、攸关软件系统是非常必要的，也是作为高级程序员、系统分析师、软件架构师等高级软件技术职位所必需具有的素质。\n\n作为一门面向广大受众的中文MOOC课程，本次课程力求向不同需求和背景的朋友呈现中华文化氛围、生动有趣的案例、跨专业的广阔的视野、以及深入实用的技术综合。\n\n同时作为一门传授软件专门知识的MOOC课程，本次课程将为具有编程能力的同学带来有趣的软件开发项目作业，在实际的软件开发中感受学以致用的快乐，体会面向对象方法学的深刻内涵。\n\n本次课程仍将邀请面向对象领域著名学者北京大学信息科学技术学院邵维忠教授和麻志毅副教授讲解某些章节，并对面向对象方法学中的某些关键问题进行讨论。", "title": "面向对象技术高级课程（The Advanced Object-Oriented Technology）", "rating": "4.1", "level": "Beginner", "created_by": "Peking University", "package_name": null, "target_audience": "Who is this class for: 面向广大软件开发爱好者，并不局限专业与学历层次。最佳选课者为计算机科学和软件工程专业的大学生和硕士研究生。选课者最好具有一门面向对象的编程语言的基本知识和软件工程的基本知识。", "package_num": null, "teach_by": [{"name": "蒋 严冰", "department": "软件与微电子学院"}, {"name": "邵 维忠", "department": "北京大学信息科学技术学院"}], "week_data": [{"description": "介绍贯穿于课程始终的基本概念：系统、模型、方法学、方法、语言等，回顾软件开发方法学的历史、现状，并展望未来。", "video": ["1.第二次MOOC开课引言", "2.系统的概念", "3.结构的概念", "4.模型与科学模型", "5.工程模型", "6.软件模型", "7.方法学、方法、语言与图", "8.软件方法学的历史", "9.软件方法学的现状", "10.UML扩展的必要性", "11.UML扩展的机制", "12.meta、元与元模型", "13.元模型与实例", "14.软件方法的未来发展", "15.模型驱动的双向工程案例", "16.小结", "补充1.软件工程的作用与本课程的价值", "补充2.模型驱动的双向工程案例（高清）", "下节介绍", "第1节测试"], "title": "第1节：绪论-软件开发方法的演化与最新趋势 "}, {"description": "", "video": ["1.本课程的方法中应用的概念与原则（邵维忠教授主讲 11：10）", "2.本课程的方法中用到的模型与规约（邵维忠教授主讲 9：29）", "3.本课程中方法中的建模过程（邵维忠教授主讲 4：57）", "4.本课程中OOA和OOD的关系（邵维忠教授主讲 9：29 ）", "5.引例概述与需求描述（8：10）", "6.引例需求分析（16：41）", "7.引例系统分析—类图（14：16）", "8.引例系统分析—顺序图（13：54）", "9.引例系统设计—总述（9：37）", "10.引例系统设计—问题域设计与人机交互设计（17：12）", "11.引例系统设计—控制驱动设计与数据管理设计（28：16）", "12.引例系统实现与演示（8：58）", "第2节测试"], "title": "第2节：本课程方法概要与完整的引例及项目作业说明"}, {"description": "", "video": ["1.哲学中的对象", "2.对象与结构", "3.软件中的对象与面向对象方法学中的原则", "4.面向对象与基于对象", "5.封装与信息隐藏", "6.实例化", "7.消息传递", "8.消息的编译原理与消息传递的意义", "9.泛化与多态", "10.多态的编程实例", "11.覆盖、重载、基调与原型", "12.多态的实现原理", "13.关联与聚合", "第3节测试"], "title": "第3节：面向对象方法学概述"}, {"description": "", "video": ["1.几种不同的分析设计方法", "2.OOA与OOD", "3.面向对象方法的主要优点", "4.不同流派的OO方法：Booch方法", "5.不同流派的OO方法：Coad-Yourdon方法", "6.不同流派的OO方法：Jacobson方法", "7.不同流派的OO方法：Rumbaugh方法", "8.UML的产生背景与发展历史", "9.UML是什么不是什么", "10.UML的四层模型结构", "11.UML中的抽象元类和具体元类", "12.UML1中的模型图与扩展机制", "13.UML2概况", "14.UML的贡献与存在问题", "15.举例：UML体系结构中的问题", "16.学习UML的建议", "第4节测试"], "title": "第4节：面向对象方法与UML的历史与发展"}, {"description": "", "video": ["1.usecase图的历史与黑盒视角", "2.参与者的概念、分类与关系", "3.识别参与者的策略与技巧", "4.用况与简单案例", "5.用况与参与者及用况之间的关系与案例", "6.不同学者对包含关系与扩展关系的区别", "7.用况之间的泛化关系、用况的详细描述、识别策略与注意问题", "8.用况图的应用场合、复杂案例与建模要点", "9.用况驱动的方法研究，及用况与用户故事、场景、业务用况的比较研究", "10.使用Eclipse GMF自制usecase图建模工具的过程演示", "第5节测试", "作业：用况图建模作业"], "title": "第5节：需求分析——usecase图"}, {"description": "", "video": ["1.类图引言", "2.识别类与对象的方法", "3.识别属性与服务", "4.识别关系—泛化关系", "5.泛化关系的识别策略、关联关系", "6.关联关系的分类与识别策略", "7.分析模式简介", "8.聚合与组合关系", "9.依赖与实现关系", "10.建立类图实例", "第6节测试", "作业：建立类图"], "title": "第6节：系统分析—类图"}, {"description": "", "video": ["1.交互图引言", "2.简单顺序图、同步消息和异步消息", "3.顺序系统和并发系统与同步消息和异步消息的关系", "4.简单顺序图实例", "5.复杂顺序图", "6.其他交互图、综合案例（用况、类图、顺序图）", "第7节测试", "作业：建立顺序图"], "title": "第7节：系统分析—交互图"}, {"description": "", "video": ["1.状态图引言与基本概念", "2.状态的表示、内部转换、延迟事件、伪状态与最终状态", "3.状态图中的动作、活动与转换", "4.结合点与选择点", "5.简单状态图的建模实例", "6.将简单状态图转换为C++代码的方法", "7.复杂的状态图、历史状态", "8.并发状态与正交区", "9.复杂状态图的建模实例", "第8节测试", "作业：建立状态图"], "title": "第8节：系统分析—状态图"}, {"description": "", "video": ["1.设计概述、问题域部分设计概述", "2.基于复用和为了复用的设计", "3.泛化与聚合的互换", "4.泛化需要注意的其他问题", "5.一题多解案例", "6.设计模式简介", "第9节测试"], "title": "第9节：系统设计—问题域部分的设计"}, {"description": "", "video": ["1.人机交互部分设计简介", "2.控制驱动设计部分—概述与相关概念", "3.控制驱动设计引例", "4.控制驱动设计的步骤及分布式体系结构分类", "5.识别控制流的策略", "6.例1：多线程动画", "7.例1：实现与展示", "8.例2：电梯模拟控制器", "9.例2：电梯模拟控制器展示", "10.线程模式简介", "第10节测试"], "title": "第10节：系统设计—人机交互部分设计与控制驱动部分的设计"}, {"description": "", "video": ["1.数据管理部分设计概述", "2.数据管理中数据存储方案与接口的设计", "3.根据类图设计关系型数据表结构", "4.关联关系、泛化关系的到数据表的映射", "5.构件与部署设计概述", "6.活动图简介", "7.活动图的语法语义", "8.活动图表示UML的制定过程", "9.面向对象的系统实现概述", "第11节测试"], "title": "第11节：系统设计—数据管理设计、构件部署设计、活动图&系统实现"}, {"description": "", "video": ["1.网上书店的需求描述", "2.网上书店的需求分析", "3.网上书店的系统分析", "4.网上书店的系统设计：问题域部分", "5.网上书店的系统设计：人机交互部分", "6.网上书店的系统设计：数据管理部分", "7.网上书店的系统展示", "8.立体五子棋的需求描述与需求分析", "9.立体五子棋的系统分析", "10立体五子棋的系统设计", "11.立体五子棋的系统展示"], "title": "第12节：综合案例"}, {"description": "", "video": ["期末考试"], "title": "期末考试"}]}, {"course_info": "About this course: Have you ever experienced software systems failing? Websites crash, calendar not synchronising, or even a power blackout. Of course you have! But did you know that many of these errors are the result of communication errors either within a system or between systems? Depending on the system, the impact of software failures can be huge, even resulting in massive economic damage or loss of lives. Software, and in particular the communication between software-intensive systems, is very complex and very difficult to get right. However, we _need_ dependability in the systems we use, directly or indirectly, to support us in our everyday lives.\n\nSystem Validation helps you to design embedded system behaviour that is structurally sound. It also enforces you to make the behaviour simple and insightful; systems that are designed for sound behaviour are also much easier to maintain and adapt. System Validation is the field that studies the fundamentals of system communication and information processing. The techniques put forward in system validaton allow to prove the absence of errors. \n\nThis first course ’Automata and behavioural equivalences', builds the foundation of the subsequent courses, showing you how to look at system behaviour as state machines. It discusses behavioural equivalences and illustrate these in a number of examples and quizzes. This course explains labelled transition systems or automata to model behaviour for especially software controlled systems. An important question is when two behaviours represented by such automata are equal. The answer to this question is not at all straightforward, but the resulting equivalences are used as powerful tools to simplify complex behaviour. This allows us to exactly investigate and understand the behavioural properties of such systems precisely. Especially, in the combination with hiding of behaviour, equivalence reduction is a unique technique to obtain insight in the behaviour of systems, far more effective than simulation or testing. Using this insight we can make the models correct. Such models form an excellent basis for the production of concise, reliable and maintainable software.\n\nThis course is part I of the set of courses for System Validation. System Validation, as a set of courses, is part of a larger EIT Digital online programme called 'Internet of Things through Embedded Systems'.", "title": "System Validation: Automata and behavioural equivalences", "rating": "4.0", "level": "Intermediate", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: This class is for first year Master students in Electrical Engineering or Computer Science. Note that as a consequence, quiz questions are more exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Jan Friso Groote", "department": "Mathematics and Computer Science, Eindhoven University of Technology"}], "week_data": [{"description": "System Validation is the field that studies the fundamentals of system communication and information processing. It allows automated analysis based on behavioural models of a system to see if a system works correctly. We want to guarantee that the systems does exactly what it is supposed to do. The techniques put forward in system validaton allow to prove the absence of errors. It allows to design embedded system behaviour that is structurally sound and as a side effect enforces you to make the behaviour simple and insightful. This means that the systems are not only behaving correctly, but are also much easier to maintain and adapt.’Automata and behavioural equivalences' shows you how to look at system behaviour as state machines. It discusses behavioural equivalences and illustrate these in a number of examples and quizzes. This module introduces automata or labelled transition systems as the basic way to model the behaviour of software controlled systems. It subsequently addresses the question when such behaviours are equivalent.\n\nReading material. J.F. Groote and M.R. Mousavi. Modeling and analysis of communicating systems. The MIT Press, 2014.", "video": ["Welcome", "An automaton as a model for behaviour", "Non-deterministic behaviour", "The definition of an automaton", "The wolf, the goat and the cabbage", "Automata to model behaviour"], "title": "Behavioural modelling"}, {"description": "This module shows the most important equivalences that express when the behaviour of two automata can be considered to be equivalent. It will become obvious that there are multiple of such notions, all fit for use under different circumstances. Furthermore, the all-important notion of the internal or hidden action is introduced with some associated behavioural equivalences.", "video": ["Behavioural equivalences", "Strong bisimulation", "Trace equivalence", "The internal or τ -action.", "Branching bisimulation", "Rooted branching bisimulation", "Basic behavioural equivalences"], "title": "Basic behavioural equivalences"}, {"description": "This module elaborates on the equivalences provided earlier. It is shown how it can be applied, especially to the alternating bit protocol. Furthermore, a number of additional equivalences are introduced. ", "video": ["The alternating bit protocol", "Divergence preserving branching bisimulation", "Weak trace equivalence", "Weak bisimulation", "Language, failure, and completed trace equivalence", "When to use which behavioural equivalence", "Transition systems with data, time and probabilities", "More behavioural equivalences."], "title": "More behavioural equivalences"}]}, {"course_info": "About this course: The design step in developing software has some unique characteristics.  First of all, it’s the only step where drawing pictures of things is the norm.  Why is that?  What do pictures do that other representations cannot do?  Pictures have varying levels of detail; pictures have context.  Pictures…paint a picture.  Why are these things important?  In this course, too, we begin looking at other disciplines (building architecture is a favorite one) for lessons on design.", "title": "Software Design as an Abstraction", "rating": null, "level": "Intermediate", "created_by": "University of Colorado System", "package_name": "Secure Software Design Specialization ", "target_audience": "Who is this class for: This is a graduate class and it will be best appreciated by students who have a solid foundation in basic software engineering, who can code well (although no real coding is required) and who have had at least internships if not full-time jobs in software development.  This is not to say that you need to know how to design software before you learn about designing secure software.  It is to say that the more experience you already have in software development, the more the examples and ideas put forth in this course will resonate with you.", "package_num": "2", "teach_by": [{"name": "Albert Glock", "department": "Computer Science"}], "week_data": [{"description": "Contrasted to design as a step in the software development process, a look at design as an abstract representation of the project.", "video": ["Intro to Design as an Abstraction", "Additional Resource", "The Birds Eye View", "Additional Resource", "Discussion 1", "Who needs abstractions?"], "title": "Who needs abstractions?"}, {"description": "Design considerations to make when users are involved.", "video": ["User Interface Design", "Additional Resource", "User Experience", "Additional Resource", "Discussion 2", "Focus on the Users"], "title": "Focus on the Users"}, {"description": "Design considerations to make when users are not involved", "video": ["Back end design", "Additional Resource", "Database Design", "Additional Resource", "Discussion 3", "What if there are no users?"], "title": "What if there are no users?"}, {"description": "When to create a database in third-normal form, and when not to.", "video": ["Database Design II", "Additional Resource", "Database Design III and Overall Database Security", "Additional Reading", "Discussion 4", "Advanced database design"], "title": "Advanced database design"}, {"description": "When and how design patterns are useful and when they are not.", "video": ["Design Patterns", "Additional Resource", "The Mindless Cobbling together of existing capabilities", "Additional Resource", "Discussion 5", "The Good and Bad of Design Patterns"], "title": "The Good and Bad of Design Patterns"}, {"description": "Choose languages and operating systems wisely because you will have to live with them.", "video": ["Languages and Operating Systems", "Additional Resource", "Operating System Selection", "Additional Resource", "Discussion 6", "Language Choices"], "title": "Language choices"}, {"description": "A comprehensive course assessment comprising of 5 quizzes. Each assessment contains a randomized set of questions from different modules of the course. ", "video": ["Assessment 1", "Assessment 2", "Assessment 3", "Assessment 4", "Assessment 5"], "title": "Final Exam"}]}, {"course_info": "About this course: VERSIÓN ESPAÑOL\n\nDentro de la creación del videojuego, ¿qué papel juega su diseño? Este curso proporciona conocimientos y pautas sobre cómo diseñar un videojuego. Partiendo  desde un concepto básico, se dan las pautas para trabajar correctamente sus conentidos, de cara a conseguir un objetivo claro: el documento de “game concept” que constituye el documento inicial sobre el que se basa cualquier videojuego. \n\nDe cara a mejorar la comprensión de los conceptos, los ejemplos y referencias se fundamentarán en videojuegos reales, para permitir así visualizar el documento y cuáles son los resultados finales del diseño descrito en el mismo.\n\nIMPORTANTE\nPuedes seguir el curso también en Inglés (subtítulos y cuestionarios).\n\n_________________\n\nENGLISH VERSION\n\nWhich role plays design in video games creation? This course provides guidelines and knowledge on how to design a video game. Setting off a basic concept, they give the guidelines to properly work on their contents in aim to get a clear objective: the game concept document is the starting document on which any video game is based.\n\nTo improve the concepts comprehension, the examples and references will be based on real video games, to help us visualizing the document and which are the final results of the specified design.\n\nIMPORTANT\nYou are able to follow this course in English (subtitles and quizzes).", "title": "Diseño de videojuegos", "rating": "4.5", "level": null, "created_by": "Universitat Autònoma de Barcelona", "package_name": "Diseño y Creación de videojuegos Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Enric Martí Gòdia", "department": "Computer Science"}, {"name": "Pere Nolla Rodríguez", "department": "Ciencias de la Computación (UAB)"}], "week_data": [{"description": "En este primer módulo daremos una introducción inicial a qué son los videojuegos, ya que resulta indispensable para una posterior comprensión del proceso de creación y desarrollo de este tipo de productos de entretenimiento. Empezaremos por definir qué son los juegos, y por qué jugamos, para continuar analizando brevemente la historia de los videojuegos y el estado actual de la industria. Finalmente, señalaremos los roles principales presentes en el desarrollo de videojuegos, y explicaremos las diferentes tareas que implica diseñar.", "video": ["Antes de empezar", "Formato del curso y evaluación", "Sobre las suscripciones", "Preguntas frecuentes", "Introducción", "Definición", "Estudio del juego (Parte I)", "Estudio del juego (Parte II)", "Historia de los videojuegos (Parte I)", "Historia de los videojuegos (Parte II)", "Historia de los videojuegos (Parte III)", "Aspectos sociales", "Plataformas (Parte I)", "Plataformas (Parte II)", "Industria (Parte I)", "Industria (Parte II)", "Roles", "Qué es diseñar", "Análisis (Parte I)", "Análisis (Parte II)", "Resumen", "Diapositivas", "Cuestionario 1"], "title": "Conceptos generales"}, {"description": "En este módulo entraremos de lleno en los elementos clave para entender el proceso de diseño de un videojuego. Empezaremos analizando al jugador y definiendo la experiencia que queremos que sienta; también comentaremos una visión general sobre los elementos artísticos y tecnológicos que son necesarios tener en cuenta a la hora de diseñar. Daremos especial atención al estudio de las mecánicas, el control y el balance, que suponen el núcleo del diseño conceptual de un videojuego. Finalmente analizaremos qué es el gameplay (jugabilidad) y cómo se puede ajustar según sea necesario.", "video": ["Introducción", "Definir la experiencia (Parte I)", "Definir la experiencia (Parte II)", "Definir la experiencia (Parte III)", "Conocimiento jugador (Parte I)", "Conocimiento jugador (Parte II)", "Creación de ideas (Parte I)", "Creación de ideas (Parte II)", "Elementos de un videojuego (Parte I)", "Elementos de un videojuego (Parte II)", "Mecánicas (Parte I)", "Mecánicas (Parte II)", "Mecánicas (Parte III)", "Mecánicas (Parte IV)", "Control (Parte I)", "Control (Parte II)", "Balance", "Jugabilidad (Parte I)", "Jugabilidad (Parte II)", "Análisis (Parte I)", "Análisis (Parte II)", "Resumen", "Diapositivas", "Cuestionario 2"], "title": "Elementos básicos del diseño I"}, {"description": "En este módulo continuaremos con los elementos claves del diseño de un videojuego. A partir de la jugabilidad, comentaremos los distintos géneros existentes; también hablaremos del diseño a lo largo del proceso de desarrollo. A continuación nos ocuparemos de la documentación, centrándonos en el game concept document (documento de concepto de juego). \n\nAnalizaremos como se crea el diseño de nivel y como se consigue una experiencia progresiva a lo largo de un juego. Y para terminar, abordaremos otros elementos de mucha importancia en el diseño, como son la ambientación, la historia, la narrativa y la usabilidad.\n", "video": ["Introducción", "Géneros (Parte I)", "Géneros (Parte II)", "Géneros (Parte III)", "Géneros (Parte IV)", "El proceso de desarrollo", "Documentación (Parte I)", "Documentación (Parte II)", "Documentación (Parte III)", "Diseño de nivel (Parte I)", "Diseño de nivel (Parte II)", "Diseño de nivel (Parte III)", "Progresión (Parte I)", "Progresión (Parte II)", "Ambientación (Parte I)", "Ambientación (Parte II)", "Narrativa (Parte I)", "Narrativa (Parte II)", "Usabilidad", "Análisis (Parte I)", "Análisis (Parte II)", "Resumen", "Diapositivas", "Cuestionario 3"], "title": "Elementos básicos del diseño II"}, {"description": "En este módulo explicaremos cómo se implementan elementos de diseño en un videojuego. Para ello nos valdremos de un motor comercial (Unity 3D), que nos permitirá mostrar de manera práctica aspectos y conceptos que se han tratado en los módulos anteriores. Partiendo de un proyecto básico de un videojuego, modificaremos su diseño y jugabilidad para mejorar su experiencia de uso. Empezaremos explicando brevemente como funciona la herramienta del motor, para posteriormente comentar cada uno de los elementos claves de la jugabilidad: Control, Cámara, personaje, enemigos, inteligencia artificial, etc. ", "video": ["Introducción", "Prototipado (Parte I)", "Prototipado (Parte II)", "Scripting (Parte I)", "Scripting (Parte II)", "Cámara (Parte I)", "Cámara (Parte II)", "Control", "Personaje (Parte I)", "Personaje (Parte II)", "Enemigo (Parte I)", "Enemigo (Parte II)", "Diseño de nivel (Parte I)", "Diseño de nivel (Parte II)", "Eventos (Parte I)", "Eventos (Parte II)", "Testeo (Parte I)", "Testeo (Parte II)", "Finalizamos el curso", "Diapositivas", "Cuestionario 4"], "title": "Implementación del diseño"}]}, {"course_info": "About this course: The design step in developing software has some unique characteristics.  First of all, it’s the only step where drawing pictures of things is the norm.  Why is that?  What do pictures do that other representations cannot do?  Pictures have varying levels of detail; pictures have context.  Pictures…paint a picture.  Why are these things important?  In this course, too, we begin looking at other disciplines (building architecture is a favorite one) for lessons on design.", "title": "Software Design Threats and Mitigations", "rating": null, "level": "Intermediate", "created_by": "University of Colorado System", "package_name": "Secure Software Design Specialization ", "target_audience": "Who is this class for: This is a graduate class and it will be best appreciated by students who have a solid foundation in basic software engineering, who can code well (although no real coding is required) and who have had at least internships if not full-time jobs in software development.  This is not to say that you need to know how to design software before you learn about designing secure software.  It is to say that the more experience you already have in software development, the more the examples and ideas put forth in this course will resonate with you.", "package_num": "4", "teach_by": [{"name": "Albert Glock", "department": "Computer Science"}], "week_data": [{"description": "How to use the CVE and CWE on-line databases to assess threats and mitigations", "video": ["Introduction to Threats and Mitigations", "Additional Resource", "Open source threat and mitigation information", "Additional Resource", "Discussion 1", "Open source threat and mitigation information", "Medical analogies", "Additional Resource", "Secure software design is good software design.", "Additional Resource", "Discussion 2", "Secure software design is good software design"], "title": "Common Vulnerabilities and Weaknesses"}, {"description": "Specific things you can do to create a better design.", "video": ["Design Principles in detail -- I", "Additional Resource", "Design Principles in detail - II", "Additional Resource", "Discussion 3", "Design Principles in detail"], "title": "Specific Design Considerations"}, {"description": "Security must be built in to a project, not added on.", "video": ["Security as a build-on, not an add-on", "Active vs Passive security", "Discussion 4", "Active vs Passive security"], "title": "Building Security in"}, {"description": "The consequences of a bad design can haunt you forever.", "video": ["Therac-25 Case Study", "Additional Resource", "Discussion 5", "Therac-25 Case Study"], "title": "A Dramatic Failure"}, {"description": "A detailed look at the first two sentences of the abstract of Nakamoto's 2009 paper announcing Bitcoin.", "video": ["Intro to Bitcoin", "Additional Resource", "Bitcoin Lecture 2", "Additional Resource", "Discussion 6", "Bitcoin Foundations"], "title": "Bitcoin Foundations"}, {"description": "Continuing with the abstract of Nakamoto's Bitcoin paper.  More details on how it works and how security is integrated into it.", "video": ["Bitcoin Lecture 3", "Additional Reading", "Bitcoin Lecture 4", "Additional Resource", "Discussion 7", "Bitcoin 2"], "title": "The Bitcoin Project"}, {"description": "A look into the specifics of two common exploitation techniques--buffer overflow and SQL injections.  Even though they're \"old\", these exploits are still used today!", "video": ["Buffer Overflow", "Additional Resource", "SQL Injection", "Additional Resource", "Discussion 8", "SQl Injection", "Software Life Cycle and Management considerations", "Additional Resource", "Discussion 9", "Software Life Cycle and Management considerations"], "title": "Simple software compromises"}, {"description": "A comprehensive course assessment comprising of 5 quizzes. Each assessment contains a randomized set of questions from different modules of the course. ", "video": ["Assessment 1", "Assessment 2", "Assessment 3", "Assessment 4", "Assessment 5"], "title": "Final Exam"}]}, {"course_info": "About this course: VERSIÓN EN ESPAÑOL\n\nProbablemente, todos hemos jugado a algún videojuego, pero ¿qué hay detrás de él? Podemos decir que - con independencia del videojuego - hay un árduo trabajo multidisciplinar que incluye desde aspectos de diseño hasta la programación como tal del videojuego. Este curso pretende ser un curso introductorio que muestre qué aspectos hay que considerar en el videojuego, y que permita con posterioridad abordar individualmente los temas que se consideran nucleares: diseño, arte, motor del videojuego y 'game play'. \n\nAl completar este curso introductorio, podrás identificar, nombrar y explicar la importancia de los diferentes aspectos que hay que considerar al diseñar un videojuego. Pretendemos también que puedas evaluar qué partes del videojuego te interesan más, de cara a que puedas seguir un curso específico sobre esa temática, o bien, si deseas el conocimiento global, puedas abordar todo el programa especializado. Estarás listo para abordar más en profundidad estos temas nucleares (diseño, arte, motor del videojuego y 'gameplay') que se cubren de forma individualizada y en detalle en el resto de cursos del programa especializado.\n\n\nIMPORTANTE\nPuedes seguir el curso también en Inglés (subtítulos y cuestionarios).\n\n__________________\n\nENGLISH VERSION\n\nWe have all probably played a video game at least once in our life, but... what's behind them? We can say that -no matter what game it is- there's a difficult multidisciplinary work that involves factors that go from the design to the video game's programming. This is an introductory course that will show you which aspects we must consider in the video game, and it will subsequently help you to individually study the different videogames creation's nucleus: design, art, video game engine and gameplay.\n\nWhen you finish this introductory course, you will be able to identify, tell and explain the importance of the many aspects we must consider when designing a video game. We also want you to be able to avaluate which parts of a video game you're most interested in, so that you can later take the specific course on this topic -if you seek global knowledge you can see all the specialised program. Then you'll be ready to study more deeply these main topics -design, art, video game engine and gameplay- which are individually studied with detail during the other courses of the specialized program.\n\nIMPORTANT\nYou are able to follow this course in English (subtitles and quizzes).", "title": "Videojuegos: ¿de qué hablamos?", "rating": "4.3", "level": null, "created_by": "Universitat Autònoma de Barcelona", "package_name": "Diseño y Creación de videojuegos Specialization ", "target_audience": null, "package_num": "1", "teach_by": [{"name": "Enric Martí Gòdia", "department": "Computer Science"}, {"name": "Pere Nolla Rodríguez", "department": "Ciencias de la Computación (UAB)"}, {"name": "Jordi Arnal Montoya", "department": "Ciencias de la Computación (UAB)"}], "week_data": [{"description": "«De las industrias audiovisuales, la de los videojuegos es una de las más importantes. Incluso ha llegado a sobrepasar al cine en volumen de negocio». Pero, ¿qué es un videojuego? ¿quiénes están detrás de los videojuegos? ¿qué aplicaciones tienen? ", "video": ["Videojuegos: ¿de qué hablaremos?", "Sobre las suscripciones", "¿Qué es un videojuego? (Parte I)", "¿Qué es un videojuego? Características de los videojuegos (Parte II)", "¿Qué es un videojuego? Aplicaciones: entretenimiento (Parte III)", "¿Qué es un videojuego? Aplicaciones: videojuegos educativos y gamificación (Parte IV)", "Material complementario", "Cuestionario 1"], "title": "Presentación e introducción"}, {"description": "La obra del holandés Maurits Cornelius Escher, litografías en las que se mezclan arquitecturas y perspectivas imposibles sirvió de base e inspiración para un juego de ambientación fantástica perteneciente al género puzle, el videojuego Monument Valley. En este módulo aprenderás qué tipo de géneros se utilizan para clasificar los videojuegos y te mostraremos algunos ejemplos de cada uno de ellos.", "video": ["Géneros de los videojuegos: de laberintos a simulación (Parte I)", "Géneros de los videjuegos: del RPG al género shooter (Parte II)", "Material complementario", "Cuestionario 2"], "title": "Géneros de los videojuegos"}, {"description": "Sabías que... ¿la historia de los videojuegos es de tan solo unos 60 años? ¿el juego OXO (Tres en raya) surgió en 1952? ¿Space invaders es de 1978 y tuvo mucho éxito en Japón? ¿el juego Pacman está basado en un cuento japonés? En este módulo harás un pequeño viaje a través de la historia de los videojuegos.", "video": ["Historia de los videojuegos: desde los inicios hasta la crisis de 1983 (Parte I)", "Historia de los videojuegos: videojuegos y ordenadores (Parte II)", "Material complementario", "Cuestionario 3"], "title": "Historia de los videojuegos"}, {"description": "Conocer lo que hay detrás de un videojuego y los actores que intervienen requiere conocer dos aspectos importantes, como son los componentes de un videojuego (qué hay que realizar) y los roles (quiénes intervienen en el proceso de creación, desarrollo y distribución del videojuego). Crear y desarrollar un videojuego no es un trabajo de uno solo...", "video": ["Componentes y roles. Componentes (Parte I)", "Componentes y roles. ¿Qué roles intervienen en el proceso de creación de un videojuego? (Parte II)", "Componentes y roles. Fases de entrega de un videojuego y la importancia de las 3Cs (Parte III)", "Material complementario", "Cuestionario 4"], "title": "Componentes de un videojuego y roles"}, {"description": "«En el desarrollo de un videojuego se generan partes específicas; no se diseña el juego completo». Pero, ¿qué es diseñar? ¿Cuál o cuáles son las finalidades principales del diseño?", "video": ["Diseño de videojuegos: de la idea a las mecánicas, retos y Gameplay (Parte I)", "Diseño de videojuegos: de la documentación a la implementación del diseño (Parte II)", "Material complementario", "Cuestionario 5"], "title": "Diseño de videojuegos"}, {"description": "«El acabado artístico es el principal elemento seductor del videojuego. [...] Cada vez más se encarga la composición de bandas sonoras específicas a compositores de renombre». Pero, ¿qué aspectos hay que tener en cuenta cuando hablamos de arte en un videojuego?", "video": ["El arte en los videojuegos: dirección de arte, arte conceptual y arte 2D/3D (Parte I)", "El arte en los videojuegos: de la animación a la música y el sonido (Parte II)", "Material complementario", "Cuestionario 6"], "title": "El arte en el videojuego"}, {"description": "Detrás de un videojuego existen múltiples capas de cierta complejidad que interactúan entre ellas para confluir en el videojuego como tal. En este módulo verás una breve introducción a diferentes componentes usados en videojuegos, como las API's gráficas o las librerías físicas o de audio.", "video": ["Tecnología. Una introducción a los componentes de un videojuego", "Material complementario", "Cuestionario 7"], "title": "Tecnología"}, {"description": "Componentes de un videojuego, roles, diseño, arte... ¿Cómo unir todo ello con el usuario? La interacción del usuario con el videojuego se realiza gracias a la programación del gameplay, que tendrá aspectos a tener en cuenta como la inteligencia artificial de los enemigos, o la lógica del juego. En este módulo aprenderás más sobre el Gameplay.", "video": ["Gameplay. Introducción y primeros contactos con el Unity (Parte I)", "Gameplay. Qué más hay que saber (Parte II)", "Gameplay. Últimas consideraciones (Parte III)", "Material complementario", "Glosario", "Visitamos el estudio Kaneda Games", "Visitamos Ubisoft (Barcelona)", "Cuestionario 8"], "title": "Gameplay"}]}, {"course_info": "About this course: Welcome to Quantitative Formal Modeling and Worst-Case Performance Analysis. In this course, you will learn about modeling and solving performance problems in a fashion popular in theoretical computer science, and generally train your abstract thinking skills.   \n\nAfter finishing this course, you have learned to think about the behavior of systems in terms of token production and consumption, and you are able to formalize this thinking mathematically in terms of prefix orders and counting functions. You have learned about Petri-nets, about timing, and about scheduling of token consumption/production systems, and for the special class of Petri-nets known as single-rate dataflow graphs, you will know how to perform a worst-case analysis of basic performance metrics, like throughput, latency and buffering.\n\nDisclaimer: As you will notice, there is an abundance of small examples in this course, but at first sight there are not many industrial size systems being discussed. The reason for this is two-fold. Firstly, it is not my intention to teach you performance analysis skills up to the level of what you will need in industry. Rather, I would like to teach you to think about modeling and performance analysis in general and abstract terms, because that is what you will need to do whenever you encounter any performance analysis problem in the future. After all, abstract thinking is the most revered skill required for any academic-level job in any engineering discipline, and if you are able to phrase your problems mathematically, it will become easier for you to spot mistakes, to communicate your ideas with others, and you have already made a big step towards actually solving the problem. Secondly, although dataflow techniques are applicable and being used in industry, the subclass of single-rate dataflow is too restrictive to be of practical use in large modeling examples. The analysis principles of other dataflow techniques, however, are all based on single-rate dataflow. So this course is a good primer for any more advanced course on the topic.\n\nThis course is part of the university course on Quantitative Evaluation of Embedded Systems (QEES) as given in the Embedded Systems master curriculum of the EIT-Digital university, and of the Dutch 3TU consortium consisting of TU/e (Eindhoven), TUD (Delft) and UT (Twente). The course material is exactly the same as the first three weeks of QEES, but the examination of QEES is at a slightly higher level of difficulty, which cannot (yet) be obtained in an online course.", "title": "Quantitative Formal Modeling and Worst-Case Performance Analysis", "rating": "4.5", "level": null, "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: This course is aiming for first year Master students in Electrical Engineering or Computer Science. Note that as a consequence, quiz questions are more like exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Dr.ir. Pieter Cuijpers", "department": "Mathematics and Computer Science"}, {"name": "Anne Remke", "department": "Computer Science"}], "week_data": [{"description": "This course is part of a Blended Master Programme in Embedded Systems. ", "video": ["Introduction", "Some suggested reading material"], "title": "Introduction"}, {"description": "In this module/week you will learn to draw a model of a token consumption/production system, and communicate your interpretation of this model with others in an informal manner. At the end of this model, you will be able to draw your own models, and explain your interpretation of them in general terms. Also, you will know about the standard Petri-net interpretation of consumption/production systems, and will be able to point out particular patterns in Petri-net models. Finally, you will be able to refine a consumption/production model into a model that contains sufficient information to allow worst-case performance analysis. This is all tested using a peer-reviewed assignment. ", "video": ["A single picture tells more than a thousand words", "Consumption and production of tokens", "Always ask yourself...", "Modeling an intensive care unit", "Modeling a wireless LAN radio", "Modeling and refining an industrial robot", "Modeling Warehouse 13", "Pick your own system", "Classes of Petri-nets", "Causality, choice and concurrency (modeling patterns)", "Refinement of consumption/production systems", "The refinement of the robot.", "Definition of refinement", "Interpreting pictures for performance analysis", "Draw your own model", "Tooling", "Basic modeling ideas", "Modeling features", "Which is a refinement of which?", "Draw your own model"], "title": "Modeling systems as token consumption/production systems"}, {"description": "In this module/week, you will be really training your abstract thinking skills. After finishing this module, you will have learned how to formalize the behavior of any dynamical system as a prefix order, and how to formalize the interpretation of a consumption/production system as a counting function on such a prefix order. You understand how the Petri-net interpretation puts certain restrictions on these counting functions, and how you can exploit those restrictions to prove properties about Petri-net interpretations, without knowing the actual interpretation itself. At the end of the module, you will practice the formalization of performance metrics as logical properties of counting functions, by recognizing right and wrong examples of formalization. \n\nThose who are already familiar with Petri-net theory, may find that the prefix order semantics that I introduce in this course is slightly different from what they are used to. Traditional Petri-net semantics is usually based on markings, transition systems, or the execution trees thereoff. Execution trees are a particular example of a prefix order, but in general prefix orders offer the added flexibility that they do not restrict the user to discrete interpretations of behavior only. This is particularly suitable when seeking connection between theoretical computer science and an application field like embedded systems, from which this course originates, where also the continuous behavior of physical systems has to be taken into account.", "video": ["Warning: prepare for some set theory!", "Flags and Fitch style proofs", "Syntax and semantics", "The basics", "Extensions", "Prefix orders", "Exercise on prefix orders", "Proof that flows form a prefix order", "Slides of the proof", "Formalizing interpretations as functions", "Counting is order preserving", "Thinking about observation functions", "Isomorphism", "Formalizing the Petri-net interpretation", "Proof that the number of tokens in a single-rate dataflow cycle is constant", "Slides of the proof", "Summarize!", "Formalizing timing", "Exercise: Formalize best-case response times", "Formalizing eager scheduling", "Formalizing periodic scheduling", "About the next quiz.", "Formalizing performance properties", "Bipartite graphs"], "title": "Syntax and semantics"}, {"description": "In this module/week you will learn to exploit the structure of single-rate dataflow graphs to perform worst-case analysis of performance metrics like throughput, latency and buffering. After this week, you know how to calculate the maximum cycle mean of a dataflow graph, how to construct a periodic schedule for it, how to optimize this schedule for latency analysis, and how to determine the size of buffers with back-pressure such that the worst-case analysis remains valid. If you understood the material of the previous module/week, the proofs presented in this week will give you a deeper understanding of the mathematical underpinning of these methods.", "video": ["Running example", "Throughput is bounded by 1/MCM", "Proof - a", "Proof - b", "Proof - c", "Proof - d", "Proof - e", "Proof - f", "Proof - g", "Proof - h", "Proof - i", "Proof - j", "Slides of the proof", "Summarize!", "The throughput bound is tight", "Alternative proof in synchronization and linearity", "Periodic scheduling of a dataflow graph", "Latency analysis of a periodic schedule", "Latency analysis of an eager schedule", "The formal definition of latency", "The boot-up time of a dataflow graph", "Optimizing latency estimates w.r.t. boot-up time", "Buffering and backpressure", "Calculating the MCM and worst-case throughput", "Calculate some periodic schedules", "Calculating optimal periodic schedules and their latencies", "Calculating suitable buffer sizes"], "title": "Performance analysis"}, {"description": "In this last week, we just discuss one more example, following the outline of the peer-reviewed assignment of the first module/week. It's just a little summary, combining everything we have learned so far, and there is some additional reading material to trigger an appetite for further discovery.", "video": ["One final example", "2015 Assignment on dataflow modeling.", "Additional dataflow exercises", "Example of an exam at masters level (without solutions)", "Another example of an exam (with solutions)", "Material created by fellow students"], "title": "One final example"}]}, {"course_info": "About this course: System Validation is the field that studies the fundamentals of system communication and information processing. It allows automated analysis based on behavioural models of a system to see if a system works correctly. We want to guarantee that the systems does exactly what it is supposed to do. The techniques put forward in system validation allow to prove the absence of errors. It allows to design embedded system behaviour that is structurally sound and as a side effect enforces you to make the behaviour simple and insightful. This means that the systems are not only behaving correctly, but are also much easier to maintain and adapt. ’Modeling Software Protocols, and other behaviour' demonstrates the power of formal methods in software modelling, communication protocols, and other examples. Reading material. J.F. Groote and M.R. Mousavi. Modeling and analysis of communicating systems. The MIT Press, 2014.", "title": "System Validation (4): Modelling Software, Protocols, and other behaviour", "rating": "4.4", "level": "Advanced", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: This course is meant for first year Master students in Electrical Engineering or Computer Science. Note that as a consequence, quiz questions are more like exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Jan Friso Groote", "department": "Mathematics and Computer Science, Eindhoven University of Technology"}], "week_data": [{"description": "We show how the behavior of simple programs and communication protocols can be modelled and analysed. Furthermore, we introduce the notion of a linear process: a simple normal form to which every behavior can be reduced. This normal form is the workhorse when it comes to the analysis of behavior. ", "video": ["Introduction to MOOC modelling software, protocols and other behaviour", "Modelling a parallel algorithm to calculate the GCD", "Linear process equations and linearisation", "Manipulating linear processes", "Parameterised boolean equation systems", "The alternating bit protocol revisited", "The sliding window protocol, or Tanenbaum’s bug", "Philips remote control standard 6, or the bounded retransmission protocol", "Advanced modelling"], "title": "Advanced modelling"}, {"description": "In this lecture you see various modelling techniques that can be used to keep the state space of your models small.", "video": ["Guidelines to avoid the state space explosion problem", "Push versus poll", "Restrict the use of data", "Avoid parallelism among components", "Compositional design ; specify external behaviour", "Modelling guidelines"], "title": "Modelling guidelines"}]}, {"course_info": "About this course: ¡Hola!\n \n¡Bienvenidos a Diseño de videojuegos: una introducción! El diseño de videojuegos es el arte de aplicar conceptos de diseño para crear la interacción entre jugadores. Es un ejercicio mental que requiere varios conocimientos en diferentes campos y la habilidad de comunicar qué es lo que se quiere lograr.\n \nEste curso hace parte del Programa desarrollo y diseño de videojuegos, de la Universidad de lo Andes, Colombia. En este ambiente de aprendizaje los estudiantes aprenderán las bases del diseño de videojuegos, aplicarán éstas al diseño de juegos de acción y de plataformas en 2D y prepararán una especificación funcional en un documento de 10 puntos y no más de 10 páginas. Al final deben presentar un prototipo funcional en Unity del juego.\n \nSe recomienda que los participantes hayan visto el curso de \"Desarrollo de videojuegos en Unity: una Introducción\", pues para el desarrollo de los prototipos deberán tener conocimientos de programación en este motor de desarrollo de ambientes lúdicos y bajo control del usuario.\n\nTen en cuenta que este curso ha sido diseñado como el segundo de cinco cursos que hacen parte del programa especializado en Desarrollo y Diseño de Videojuegos. Puedes tomar todos los cursos por separado o sólo uno de ellos, sin embargo te recomendamos que te inscribas y participes en los cinco, ojalá en el orden que te proponemos, de manera que llegues al último curso denominado \"Desarrollo y Diseño de Videojuegos: proyecto final\" preparado para aplicar los conocimientos adquiridos en los cursos anteriores. \n\nPara inscribirte únicamente a este curso debes ir a la página del mismo: https://www.coursera.org/learn/diseno-videojuegos-intro/home/welcome. Haz click en el botón azul de la izquierda \"Enroll now\" o \"Inscribirse ahora\", donde podrás elegir si deseas tomar el curso pagando por la certificación con una suscripción mensual o anual, en cuyo caso debes hacer unas evaluaciones adicionales obligatorias y cumplir con los otros requisitos de certificación; o si deseas auditarlo, es decir acceder al contenido sin pagar por el certificado o suscripción.", "title": "Diseño de Videojuegos: Una introducción", "rating": "4.6", "level": "Beginner", "created_by": "Universidad de los Andes", "package_name": "Desarrollo y Diseño de Videojuegos Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Gabriel Vasco", "department": "Departamento de Diseño"}], "week_data": [{"description": "¡Bienvenido  al curso Diseño de Videojuegos! El diseño de videojuegos es el arte de aplicar conceptos de diseño para crear la interacción entre jugadores. En este módulo inicial definirás de una manera general: ¿qué constituye un videojuego?. Estudiarás de dónde viene este tipo de juegos y qué tipo de personas están involucradas en su desarrollo. Empezarás a ver, analizar y dimensionar para quienes están dirigidos estos sistemas interactivos.", "video": ["Prerrequisitos para este curso", "Lectura: Información básica y recomendaciones", "Lectura: Objetivos de aprendizaje y evidencias de logro", "Actividad: Saludar y presentarse", "Actividad: ¿Qué es un videojuego? ", "Video: ¿Qué es un videojuego y quién lo hace?", "Video: ¿Cuál es la estructura de un videojuego?", "Video: ¿Para quién están hechos los juegos?", "Actividad: ¿Qué sabemos acerca de un juego?", "Video: ¿Qué es un videojuego? - Julián Castillo", "Video: Ser un diseñador de videojuegos", "Actividad: Bartok ", "Video: Pensar como un diseñador de videojuegos", "Video: Trabajar como un diseñador de video", "Video: Game Designer - Mateo Rojas", "Exploración: Videojuegos del módulo 1 Super Mario Bros y The Passage", "Reflexión: ¿Qué es un buen videojuego? Reflexiones a partir de Super Mario Bros y The Passage", "Actividad: ¿Qué aprendimos en el módulo 1? ", "¿Qué sabemos acerca de un juego?", "El diseño y sus fuentes", "Documento de diseño de página 1"], "title": "¡Bienvenido al curso introductorio de Diseño de Videojuegos!"}, {"description": "En este módulo verás cómo se construye un juego, desde 0. Entenderás cómo se construyen las reglas que rigen los juegos y cómo funcionan las mecánicas que nacen de las reglas. ", "video": ["Lectura: Objetivos de aprendizaje y evidencias de logro", "Video: Los juegos tienen reglas", "Video: Los juegos tienen mecánicas", "Video: Los juegos tienen un flujo", "Video: Los juegos guían al jugador", "Video: Los juegos tienen niveles", "Video: ¿Cómo diseñar un juego desde cero? - Mateo Rojas", "Exploración: Videojuegos del módulo 2 The Stanley Parable y Hack ´n´Slash", "Reflexión: Sobre la libertad en los videojuegos a partir de jugar The Stanley Parable y Hack ´n´Slash", "Guía de trabajo: Documento de diseño #2, a lo sumo 10 páginas", "Documento de diseño de 10 páginas - Primera Versión", "Actividad: ¿Qué aprendimos en el módulo 2?", "Fundamentos de diseño"], "title": "Fundamentos de diseño"}, {"description": "Durante este módulo te enfocarás en los juegos de acción, para lo cual analizarás cómo funcionan y cuáles son las características más importantes de este tipo de juegos. ", "video": ["Lectura: Objetivos de aprendizaje y evidencias de logro", "Video: Juegos de Acción", "Video: ¿Cuáles son las mecánicas centrales?", "Video: ¿Cuáles son los retos del juego?", "Video: ¿Cómo progresa el jugador?", "Video: Diseño de niveles - Julian Castillo", "Exploración: Videojuegos del módulo 3 MediEvil e Ico", "Reflexión: Juegos de acción, aprendiendo de MediEvil e Ico  ", "Actividad ¿Qué aprendimos en el módulo 3?", "Versión final documento de diseño de 10 páginas"], "title": "Fundamentos de juegos de acción "}, {"description": "\nDurante este módulo te enfocarás  en el diseño de un tipo de videojuego específico denominado  juego de plataforma en 2D. A lo largo del módulo analizarás cómo funciona y cuál es  la característica más importante, de este tipo de juego.\n", "video": ["Lectura: Objetivos de aprendizaje y evidencias de logro", "Video: ¿Qué es un juego de plataformas?", "Video: ¿Cuáles son las mecánicas centrales?", "Video: ¿Cuáles son las mecánicas periféricas?", "Video: ¿Cuáles son los retos? Parte 1", "Video: ¿Cuáles son los retos? Parte 2", "Video: ¿Cómo se progresa a través de un nivel?", "Video: El game designer - Julián Castillo", "Exploración: Videojuegos del módulo 4 Ori and the blind forest, Thomas was alone, Mark of the Ninja", "Reflexión: Aprendo de los títulos jugados en el módulo 4", "Prototipo del módulo 4: plaftformer 2D ", "Reflexión final: Galería de trabajos ", "Actividad: ¿Qué aprendimos en el módulo 4?", "Platformers"], "title": "Fundamentos de juegos de plataformas en 2D"}]}, {"course_info": "About this course: System Validation is the field that studies the fundamentals of system communication and information processing. It is the next logical step in computer science and improving software development in general. It allows automated analysis based on behavioural models of a system to see if a system works correctly. We want to guarantee that the systems does exactly what it is supposed to do. The techniques put forward in system validation allow to prove the absence of errors. It allows to design embedded system behaviour that is structurally sound and as a side effect enforces you to make the behaviour simple and insightful. This means that the systems are not only behaving correctly, but are also much easier to maintain and adapt. ’Model process behaviour' is the follow up MOOC to 'Automata and behavioural equivalences'. This MOOC shows you how to model process behaviour, in particular protocols and distributed algorithms, dive deeper in the properties of system behaviour, and keep things simple to avoid a state space explosion. Reading material. J.F. Groote and M.R. Mousavi. Modeling and analysis of communicating systems. The MIT Press, 2014.\n\nThis course is part 2 of the set of courses for System Validation. System Validation, as a set of courses, is part of a larger EIT Digital online programme called 'Internet of Things through Embedded Systems'.", "title": "System Validation (2): Model process behaviour", "rating": "4.0", "level": "Intermediate", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: This course is meant for first year Master students in Electrical Engineering or Computer Science. Note that as a consequence, quiz questions are more like exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Jan Friso Groote", "department": "Mathematics and Computer Science, Eindhoven University of Technology"}], "week_data": [{"description": "", "video": ["Introduction MOOC model process behaviour", "Actions, multi-actions, alternative and sequential composition", "Process axioms", "Recursive process specifications", "Processes and actions with data; the conditional operator", "The sum operator", "The alarm clock revisited", "Sequential behaviour"], "title": "Sequential behaviour"}, {"description": "", "video": ["The construction of data types", "Specification of Peano numbers", "Specification of efficient numbers", "Specification of lists", "Functions, sets and bags", "Structured types", "Quantifiers", "Knuth's dancing links", "Data Types"], "title": "Data types"}, {"description": "", "video": ["The parallel, communication and allow operators", "The hiding operator", "Peterson's mutual exclusion algorithm", "Parallel Behaviour"], "title": "Parallel behaviour"}]}, {"course_info": "About this course: You will learn to make fluid digital interactive experiences that are suitable for gaming and use the advanced sensor hardware built into the iPhone and iPad. This includes drawing 2D graphics, playing sounds and music, integrating with Game Center, the iOS physics engine and detecting device orientation and location.\n\nUpon completing this course, you will be able to:\n1.       Use the reverse geocode service to convert latitude and longitude to location names\n2.       Implement GeoFences to make an app efficiently monitor an iOS device’s location\n3.       Leverage the power of accelerometers, magnetometers and gyroscopes to orient a device in physical space\n4.       Create an app that responds to ambient light levels by using screen brightness as a proxy\n5.       Play sound effects and other media as audio\n6.       Make a game like Pong\n7.       Make a game like Breakout\n8.       Manipulate graphics in a game environment\n9.       Use the physics engine to create realistic game worlds\n10.     React to multi-touch events for complex interaction design\n11.     Detect and respond to collisions and contacts efficiently\n12.     Chain complex sequences of actions, animations and sounds with precision\n13.     Animate multi-frame sprites\n14.     Create particle systems to simulate fire, smoke and magic (and more!)\n15.     Interface with Game Center to create leaderboards and achievements that can be shared through social networks", "title": "Games, Sensors and Media", "rating": "4.6", "level": null, "created_by": "University of California, Irvine", "package_name": "iOS Development for Creative Entrepreneurs Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Don Patterson", "department": "Informatics and Computer Science"}, {"name": "Sam Kaufman", "department": null}], "week_data": [{"description": "In this week we are going to do a deep dive on the sensors in the iOS platform.  Sensors are one of the aspects of smartphones that make them a unique platform and form a bridge between the digital and physical world.  We will look at different ways of bridging that divide with location sensors (and street address look-ups via reverse geocoding), geofencing and motion sensors. This will give you the skills to write code that makes your apps aware of the world around them and possibly even react to a user’s physical movement.", "video": ["Course Overview", "Welcome!", "Reverse Geocode Concept", "Reverse Geocode Design", "Reverse Geocode Case Study 01", "Reverse Geocode Case Study 02", "Intro to GeoFences", "Simulating Location", "GeoFence Case Study 01", "GeoFence Case Study 02", "GeoFence Case Study 03", "GeoFence Case Study 04", "GeoFence Coupons Assignment Instructions", "Sensor Overview", "Raw Acceleromter Case Study 01", "Raw Acceleromter Case Study 02", "Device Motion Case Study", "Reference Frame Case Study", "User Acceleration Case Study", "GeoFence Coupons"], "title": "Location, Locomotion and Motion"}, {"description": "Working with light levels from the physical world is tough on iOS, but this week we will show you a way to access the ambient light around the device by leveraging the screen brightness. Then we will flip the paradigm. Instead of trying to sense the physical world, we will act in the physical world by playing sounds. We will introduce two methods of playing sounds in apps (not the only ways by any means).", "video": ["Light Sensor Case Study 01", "Light Sensor Case Study 02", "Intro to Audio 01", "System Sound Services Case Study", "Intro to Audio 02", "Drum Kit Assignment Instructions", "Drum Kit"], "title": "Lights and Sounds"}, {"description": "This week we give you the foundation for making games with SpriteKit. How do you build a game?  How do you load assets into your game?  How do you make them move and respond?  We will start with the “Hello, World” of games, “Pong”.  That will give a quick intro into how games work. Then we will return to each of the steps that we leveraged in making Pong and go into more depth explaining what we did along the way.  In the in depth tutorial we will keep a running example of a game of “Breakout” tracking along with our progress.  The focus of this style of game is on leveraging the physics engine, and detecting and responding to collisions in 2 dimensions.  We will show the student how to place sprites, react to multi-touch interaction, detect and respond to contact events.", "video": ["Intro to SpriteKit", "Make Pong", "Starting your game", "Break-Out Case Study 01", "Intro to Physics Engine", "Break-Out Case Study 02", "Intro to Multi-Touch Events", "Break-Out Case Study 03", "Intro to Collisions 01", "Intro to Collisions 02", "Break-Out Case Study 04", "Sprite Container Assignment Instructions", "Sprite Container "], "title": "Touch, Collision, Reaction"}, {"description": "In this final week we will explore the different actions that can be initiated by your Sprites to create dynamic games.  By leveraging the SKAction class, complicated multi-step animations, sounds and effects can be chained together without the app developer having to micro-manage their unfolding.  We will also introduce particle systems as they are a fun and efficient way to simulate effects like smoke, fire and magic. Lastly, we will show you how to interact with Game Center so that you can add social action to your games. That includes leaderboards and achievements that are visible to the user’s social network and add a fun element of competition to any game.", "video": ["SKActions - explosions and sounds", "SKActions Code Check", "Animating Textures", "Intro to Particle Systems", "Particle System Code Check", "Break-Out Case Study 05", "Intro to Game Center", "Collision Effects Assignment Instructions", "Collision Effects ", "Final Exam"], "title": "Where the Action Is "}]}, {"course_info": "About this course: Learn about traditional and mobile malware, the security threats they represent, state-of-the-art analysis and detection techniques, and the underground ecosystem that drives such a profitable but illegal business.\n\nMalicious Software and its Underground Economy: Two Sides to Every Story is a short, introductory, and experimental (i.e., pilot) course featuring 6 lectures. Each lecture lasts roughly anything between 1h and 1.5h and is logically divided in a number of ~15 mins self-contained units. Although a non-negligible effort has been made to fulfill this breakdown, some units last definitely longer and require a bit more effort---just pause the video and take a break ;-)\n\nIn addition, the course features 6 multiple-choices mandatory quizzes (i.e., 1 per lecture) and 1 bonus quiz. Passing all the mandatory quizzes awards a \"pass\" mark of the course, while passing all the mandatory quizzes and the bonus one awards a \"distinction\" mark.", "title": "Malicious Software and its Underground Economy: Two Sides to Every Story", "rating": null, "level": null, "created_by": "University of London", "package_name": null, "target_audience": null, "package_num": null, "teach_by": [{"name": "Dr  Lorenzo Cavallaro", "department": "Information Security Group, Royal Holloway, University of London"}], "week_data": []}, {"course_info": "About this course: System Validation is the field that studies the fundamentals of system communication and information processing. It allows automated analysis based on behavioural models of a system to see if a system works correctly. We want to guarantee that the systems does exactly what it is supposed to do. The techniques put forward in system validation allow to prove the absence of errors. It allows to design embedded system behaviour that is structurally sound and as a side effect enforces you to make the behaviour simple and insightful. This means that the systems are not only behaving correctly, but are also much easier to maintain and adapt. ’Requirements by modal formulas' is the third course that shows you how to specify requirements for the automata in order to establish the correct relation between the requirements and the behaviour of the system. Reading material. J.F. Groote and M.R. Mousavi. Modeling and analysis of communicating systems. The MIT Press, 2014.", "title": "System Validation (3): Requirements by modal formulas", "rating": "3.8", "level": "Advanced", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: This course is meant for first year Master students in Electrical Engineering or Computer Science. Note that as a consequence, quiz questions are more like exam questions where you have to construct the answer based on the principles that are taught in the web lectures, rather than to recall the literal text of the teacher.", "package_num": null, "teach_by": [{"name": "Jan Friso Groote", "department": "Mathematics and Computer Science, Eindhoven University of Technology"}], "week_data": [{"description": "In this module you learn how to specify requirements on behaviour. First Hennessy-Milner logic is explained, which is subsequently extended with fixed-points. Using this logic you will be able to formally characterise virtually any behavioral property on the behavior of software. This varies from simple properties such as a system is free from deadlocks, to complex properties such as \"in a warehouse the controllers will instruct all the robots such that my ordered item will appear for certain within finite time at the output\".", "video": ["Introduction MOOC requirements by modal formulas", "Hennessy-Milner logic", "Identities for HM-logic", "Dualities", "Fixed point operators", "Regular formulas", "Basic Modal Formulas"], "title": "Basic modal formulas"}, {"description": "This module elaborates on modal formulas. It shows how to use data in the formulas which makes modelling of complex properties much easier. Furthermore, it shows how fairness properties can be modelled in the framework using nested fixed point operators. The last lectures introduce parameterised boolean equation systems and boolean equation systems as important technology to establish that a modal formula is valid for a particular specified behaviour. ", "video": ["Data in modal formulas", "Alternating fixed points", "Peterson's algorithm revisited", "Translation to a Boolean Equation System (BES)", "Solving a Boolean Equation System", "Advanced modal formulas"], "title": "Advanced modal formulas"}]}, {"course_info": "About this course: This capstone project course ties together the knowledge from three previous courses in IoT though embedded systems: Development of Real-Time Systems, Web Connectivity & Security and Embedded Hardware and Operating Systems. The students will develop a larger system using the learning outcomes from these courses, and the students will evaluate the developed system in a real-world programming environment. This course is a true engineering task in which the student must, not only implement the algorithm code, but also handle the interfaces between many different actors and hardware platforms. The students will learn how to motivate engineering decisions and how to choose implementations to make a system actually running. The students will also learn to evaluate the efficiency and the correctness of their system as well as real-world parameters such as energy consumption and cost.", "title": "Capstone:  Autonomous Runway Detection for IoT", "rating": "5.0", "level": "Advanced", "created_by": "EIT Digital ", "package_name": null, "target_audience": "Who is this class for: The course serves most parts from the embedded computing domain. Since real-time systems and embedded hardware and security are a part of our day-to-day life, systems engineers from most parts of the embedded spectrum such as automotive, avionics and most industrial sectors will benefit from this course. Also, engineers in multimedia based systems such as video processing, filtering and cloud platforms as well as Master's and graduate students benefit from this course.", "package_num": null, "teach_by": [{"name": "Juha Plosila", "department": "Information Technology"}], "week_data": [{"description": "Looking for a project where you actually learn practical software development? In this course you can show off your newly developed embedded software skills by putting together a large scale system consisting of a wide range of functionalities! This project makes you take a step into the most modern edge of software development for embedded systems, we implement a system for IoT-based autonomous aircraft landing for future airliners. In other words, a system based on embedded real-time processing devices, secure web connectivity and cloud-based high performance back ends. The project does not only focus on the implementation of the algorithms in these parts, but also something every embedded software designer faces sooner or later: the interfacing of the parts. We offer you the opportunity to participate in this project and let loose your engineering skills! Creativity and innovation are the key points to succeed as we give you free hands to pick all the software pieces together, and you show us the result of you innovative thinking in a project which can be applied in real industrial products today. ", "video": ["Course introduction", "Project overview", "Algorithms and Framework", "General discussion", "Quiz comments", "Project summary and instructions", "NASA media license", "Capstone quiz"], "title": "Introduction and methods"}, {"description": "In this module you will implement the runway detection system presented in the other module. Please refer to documentation, discussion forums and instructions about the project before starting. Also please study the requirements for successfully completing the project, and the instructions document for giving a peer review grading.", "video": ["Implementation", "Deliverables", "FreeRTOS API", "Algorithms and implementation", "Setting up the FreeRTOS tool chain", "Grading", "Project template", "Canny filter", "RSA encryption"], "title": "Implementation and integration"}, {"description": "", "video": ["Grading instructions", "Capstone project"], "title": "Project submission and Peer review"}]}, {"course_info": "About this course: Are you ready to close the loop on your Big Data skills? Do you want to apply all your knowledge you got from the previous courses in practice? Finally, in the Capstone project, you will integrate all the knowledge acquired earlier to build a real application leveraging the power of Big Data.\n\nYou will be given a task to combine data from different sources of different types (static distributed dataset, streaming data, SQL or NoSQL storage). Combined, this data will be used to build a predictive model for a financial market (as an example). First, you design a system from scratch and share it with your peers to get valuable feedback. Second, you can make it public, so get ready to receive the feedback from your service users. Real-world experience without any 3G-glasses or mock interviews.", "title": "Big Data Services: Capstone Project", "rating": null, "level": "Advanced", "created_by": "Yandex", "package_name": "Big Data for Data Engineers Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Alexey A. Dral", "department": "Algorithms and Programming Technologies dept. MIPT"}, {"name": "Ivan Puzyrevskiy", "department": null}], "week_data": []}, {"course_info": "About this course: VERSIÓN EN ESPAÑOL\n\nPara todas aquellas personas que han querido saber cómo se creaba un videojuego, en este curso vamos a explicar cómo crear un pequeño motor, uno de los elementos nucleares de cualquier videojuego. El curso persigue comprender su concepto, entender qué es ese núcleo que en terminología inglesa se conoce como 'game engine', Analizaremos no solo su papel, sino qué utilidades debe proporcionar para ser utilizado en un videojuego. Y todo ello, explicando cómo crear un pequeño motor desde cero, que nos permitirá crear un videojuego en DirectX11.\n\nUn curso donde cualquier persona podrá entender los conocimientos básicos sobre el funcionamiento de un motor, y donde las personas con formación en programación aprenderán a crear su propio motor.\n\nEl curso está estructurado de tal forma que desde el primer día tengamos resultados en pantalla y cualquier persona pueda seguir el propio curso.\n\nEl resultado será un pequeño motor de videojuegos 3D sobre DirectX11, donde crearemos un pequeño videojuego de tipo FPS.\n\n\nIMPORTANTE\nSubtítulos en inglés disponibles.\n\n_________________\n\nENGLISH VERSION\n\nFor those who ever wanted to know how to create a video game, in this course we will explain how to create a small engine, one of the main elements in any video game. This course wants to understand their concept, understand what is this nucleus called 'game engine'. We will analyze their role and which utility it has to provide in aim to be used in a video game. We will do all this by explaining how to create a small engine which will allow us to create a DirectX11 video game.\n\nA course in which anyone will be able to understand the basic knowledges on an engine's functioning, and where people who have studied programming will be able to create their own engine.\n\nThis course is structured so that from the first day we have results on screen and anyone can follow them.\n\nIMPORTANT\nEnglish subtitles are available for this course.", "title": "Motores gráficos en videojuegos: game engine", "rating": "3.9", "level": null, "created_by": "Universitat Autònoma de Barcelona", "package_name": "Diseño y Creación de videojuegos Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Enric Martí Gòdia", "department": "Computer Science"}, {"name": "Jordi Arnal Montoya", "department": "Ciencias de la Computación (UAB)"}], "week_data": [{"description": "En este módulo aprenderemos los conocimientos necesarios para crear una aplicación DirectX 11 con Microsoft Visual Studio.\nUna vez creada nuestra aplicación en DirectX 11 64 bits aprenderemos a pintar modelos de tipo Debug como Ejes, cajas, esferas y grids.\n", "video": ["Presentación del curso", "Antes de empezar", "Formato del curso y evaluación", "Sobre las suscripciones", "Preguntas frecuentes", "Introducción a un motor 3D (Parte I)", "Introducción a un motor 3D (Parte II)", "Introducción a un motor 3D (Parte III)", "Introducción a un motor 3D (Parte IV)", "Introducción a un motor 3D (Parte V)", "Introducción a un motor 3D (Parte VI)", "Material complementario", "Investiga: ejercicios opcionales", "Cuestionario 1"], "title": "Introducción a un motor 3D"}, {"description": "En este módulo aprenderemos los conocimientos para poder renderizar modelos 3D exportados de una herramienta 3D Studio MAX en formato ASE.\nPor otra parte aprenderemos a cargar texturas en nuestro motor que podremos utilizar en nuestros modelos.\nPor último conoceremos los fundamentos de una librería de física como nVidia Physx que nos permitirá controlar la física y colisiones de nuestro videojuego.\n", "video": ["Tipos de primitivas", "Renderable Vertex", "Ficheros Ase (Parte I)", "Ficheros ASE (Parte II)", "Bounding Box y Bounding Sphere. Texturas", "Scenary", "Física", "Items", "Material complementario", "Investiga: ejercicios opcionales", "Cuestionario 2"], "title": "Mallas 3D y Física"}, {"description": "En este módulo aprenderemos a integrar una librería de animación esqueletal como Cal3D dentro de nuestro motor de juego. Gracias a esta librería podremos integrar modelos animados con animaciones de tipo acción o ciclos.\nPor último aprenderemos a implementar una Inteligencia artificial mediante una máquina finita de estados para aplicarlo en los bots de nuestro juego.\n", "video": ["Animación 3D. Librería Cal 3D", "Tipos de animaciones. Librería Cal 3D", "Modelos animados (Parte I)", "Modelos animados (Parte II)", "Inteligencia artificial", "Clases auxiliares", "Bots (Parte I)", "Bots (Parte II)", "Player", "Material complementario", "Investiga: ejercicios opcionales", "Cuestionario 3"], "title": "Animación esqueletal. Inteligencia Artificial "}, {"description": "En este módulo integraremos una librería de sonido como OpenAL en nuestro videojuego y aprenderemos a utilizar efectos de sonido en nuestro videojuego.\nAprenderemos el concepto de Billboards que nos permitirá introducir partículas en el motor.\nPor último implementaremos una pequeña GUI en nuestro juego que nos mostrará información de juego en pantalla mediante texto e imágenes 2D.\n", "video": ["Sonido en videojuegos", "Librerías de sonido", "Billboards", "GUI", "Fonts", "Material complementario", "Investiga: ejercicios opcionales", "Cuestionario 4"], "title": "Billboards. Sonido. GUI"}]}, {"course_info": "About this course: En este curso podrás crear una interfaz gráfica para una aplicación móvil de iOS. Aplicarás el patrón de diseño Modelo-Vista-Controlador, el cual te permitirá crear aplicaciones fácilmente actualizables. Asimismo, emplearás los principales componentes gráficos que casi siempre aparecen en una interfaz y podrás identificar los principios básicos de diseño recomendados por Apple en la creación de aplicaciones exitosas. \n\nHacia el final del curso te guiaremos para que puedas crear tu primera aplicación móvil completa, la cual será tu llave de entrada al mundo de las aplicaciones comerciales en iOS.\n\nPara asegurar una experiencia exitosa en el estudio de este curso, es importante que tengas una experiencia previa en el lenguaje Swift y en el desarrollo de aplicaciones a través de Xcode.", "title": "Interfaz de usuario en iOS", "rating": "4.3", "level": null, "created_by": "Tecnológico de Monterrey", "package_name": "Desarrollo de Aplicaciones iOS Specialization ", "target_audience": null, "package_num": "2", "teach_by": [{"name": "Dr. José Martín Molina Espinosa", "department": "Programas de Posgrado en Tecnologías de la Información"}], "week_data": [{"description": "La interfaz gráfica, una pieza fundamental en la creación de apps. Introducción al curso, presentación de los temas centrales del curso.", "video": ["Bienvenidos al curso"], "title": "Introducción y bienvenida"}, {"description": "La relación entre usuarios y apps se realiza a través de la interfaz gráfica. De ahí, la vital importancia en cuidar la creación y diseño de las mismas. En este módulo inicial identificarás los principales componentes gráficos para que los usuarios puedan introducir y desplegar información.", "video": ["La experiencia gráfica", "Plantillas prefabricadas de proyectos en Xcode", "Los widgets visuales en iOS", "Vistas web y textos", "Comportamiento de componentes gráficos básicos", "Definición de una calculadora de índice de masa corporal", "Uso de etiquetas y campos de texto", "Uso de botones", "Patrón de diseño MVC", "Restricciones en componentes gráficos", "Definición de delegados en las propiedades", "Manejo del teclado", "Las vistas gráficas y sus componentes visuales"], "title": "La interfaz gráfica, la cara que enamora"}, {"description": "Las apps normalmente ofrecen una gran variedad de funciones a través de grupos de componentes gráficos. La gran mayoría de las veces no es posible que toda la aplicación esté contenida en una sola pantalla. En este módulo realizarás la creación de apps con funcionalidad rica expresada a través de varias pantallas.", "video": ["Las apps necesitan más de una pantalla", "Creación de app con varias vistas", "Tipos de comunicación entre vistas", "Creación de app multipantalla", "Comunicación de datos entre vistas", "Proyecto app basada en pestañas", "Carga de imágenes para pestañas", "La vida de una vista", "Principios de diseño de GUI en iOS", "Creación de apps multivista", "App para crear una pizza desde iPhone"], "title": "Creación de apps multivistas"}, {"description": "El Apple Watch ha creado nuevas formas de comunicación con el usuario. Este nuevo dispositivo funciona de manera amalgamada con el iPhone, logrando así nuevas posibilidades de comunicación con el usuario ampliando las funciones ofrecidas por las apps.", "video": ["Tipos de apps en Apple Watch", "Creación de un proyecto Apple Watch", "Componentes gráficos en Apple Watch", "Componentes hardware y software del Apple Watch", "Creación de app para Apple Watch a través de calculadora de IMC", "Manejo de sliders en Apple Watch", "Creación funcionalidad de la calculadora de IMC en Apple Watch", "Creación de apps con más de una pantalla en Apple Watch", "Comunicación de datos entre pantallas", "Diseño visual de apps en Apple Watch", "La interfaz gráfica en Apple Watch"], "title": "La interfaz gráfica en Apple Watch"}, {"description": "Las etapas de depuración y pruebas de apps son muy importantes en el ciclo de vida de desarrollo. Estas actividades permiten la verificación de la app para determinar si esta realiza correctamente las funciones para las cuales fue diseñada.", "video": ["Introducción a las pruebas unitarias", "Creación y ejecución de pruebas unitarias en una app", "La depuración de apps mediante puntos de interrupción", "Manejo de puntos de interrupción", "Puntos de interrupción: acciones y condiciones", "Depuración y pruebas de apps", "App para crear una pizza desde Apple Watch"], "title": "Depuración y pruebas de apps"}, {"description": "", "video": ["Hasta pronto"], "title": "Cierre del curso"}]}, {"course_info": "About this course: En este curso construirás aplicaciones que logren interactuar con el hardware del dispositivo, con el propósito de crear aplicaciones más interesantes, atractivas y útiles.\n\nEl hardware del dispositivo incluye aditamentos como bocinas, GPS, acelerómetro, cámara, etc., por lo que las aplicaciones pueden interactuar con este hardware para reproducir música, conocer la posición del dispositivo en el Globo Terráqueo, conocer la aceleración a la que está sujeto el dispositivo debido al movimiento que se realiza con él, o agregar fotografías del usuario a sus aplicaciones.", "title": "Interactuando con el hardware del dispositivo iOS", "rating": "4.7", "level": null, "created_by": "Tecnológico de Monterrey", "package_name": "Desarrollo de Aplicaciones iOS Specialization ", "target_audience": null, "package_num": "4", "teach_by": [{"name": "Dr. Víctor Manuel de la Cueva Hernández", "department": "Tecnologías de Información y Computación"}], "week_data": [{"description": "¡Hola a todos! Este módulo establece algunas características que debe cumplir una app exitosa, con base en el análisis de algunas apps de ejemplo. También revisa la importancia del trabajo en equipo para el desarrollo de una buena aplicación.Como siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros.) Vayamos a revisar el material preparado para esta semana, suerte.", "video": ["Bienvenida", "Características de una buena app", "Ejemplos de aplicaciones exitosas", "Mejores Apps"], "title": "Creando mejores Apps"}, {"description": "¡Hola a todos! Este módulo trata del proceso para agregar media a una aplicación. Particularmente, se incluye la reproducción de sonido y video. Como siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros). Vayamos a revisar el material preparado para esta semana, suerte.", "video": ["Media: Audio y video", "Audio: Audio Toolbox", "Reproducción de sonido corto", "Reproducción de sonido largo", "Reproducción de video", "Framework Audio Toolbox", "Framework AVFoundation", "Framework AVKit", "Media", "Reproductor de Música"], "title": "Media"}, {"description": "¡Hola a todos! Este módulo utiliza el acelerómetro para obtener datos del movimiento del dispositivo, los cuales se usan para lanzar algunas acciones en la aplicación. Particularmente, se logran detectar sacudidas, un gesto muy común para lanzar acciones. Esto se hace por medio de lecturas del acelerómetro y, alternativamente, como un gesto.Como siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros.) Vamos a revisar el material preparado para esta semana, suerte.", "video": ["Movimiento en el dispositivo", "Acceso al acelerómetro", "Lectura del acelerómetro", "Detección de “sacudida” del dispositivo", "Detección de “sacudida” como un gesto", "Framework Core Motion", "Clase UIResponder", "Movimiento"], "title": "Movimiento"}, {"description": "¡Hola a todos! Este módulo utiliza los diferentes medios de posicionamiento (e.g. GPS) que tiene el dispositivo para establecer las coordenadas esféricas del mismo en el Globo Terráqueo. También lee valores de la brújula para conocer la orientación del dispositivo con respecto al norte, tanto geográfico como magnético. \nLa aplicación realizará ciertas acciones dependiendo de los valores obtenidos por estos sensores. \n\nComo siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros.) Vayamos a revisar el material preparado para esta semana, suerte.", "video": ["Localización del dispositivo", "Iniciando las lecturas de localización", "Obteniendo los datos de posición", "Lectura de la localización del dispositivo", "Lectura de la orientación del dispositivo", "Mapas para una app", "Agregando mapas y anotaciones", "Framework Core Location", "Framework Map Kit", "Localización", "Marcando la Ruta"], "title": "Localización"}, {"description": "¡Hola a todos! Este módulo agregar fotos del usuario a las aplicaciones. Dichas fotos provienen de alguna de las dos fuentes principales del dispositivo, la cámara o el álbum de fotos. También se usa la cámara para crear aplicaciones de realidad aumentada. Como siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros.) Vayamos a revisar el material preparado para esta semana, suerte.", "video": ["Manejo de fotos", "El delegado del Image Picker", "Manejo de fotos en una app", "Realidad aumentada", "Una app con realidad aumentada", "Resumen del curso y despedida", "Clase Image Picker", "Fotos"], "title": "Fotos"}]}, {"course_info": "About this course: Agile embraces change which means that team should be able to effectively make changes to the system as team learns about users and market.  To be good at effectively making changes to the system, teams need to have engineering rigor and excellence else embracing change becomes very painful and expensive.  \n\nIn this course we will learn about engineering practices and processes that agile team uses to make sure the team is setup for change.\n\nIn additional to this, we will also learn about practices, techniques and processes that can help team build high quality software\n\nAt the end of this course, you will be able to comfortably and effectively participate in various techniques and processes for building secure and high quality software.", "title": "Engineering Practices for Building Quality Software", "rating": null, "level": null, "created_by": "University of Minnesota", "package_name": "Software Development Lifecycle Specialization ", "target_audience": "Who is this class for: This class is anyone new to software development or looking to brush-up their knowledge on software development", "package_num": "4", "teach_by": [{"name": "Praveen Mittal", "department": "College of Science and Engineering"}, {"name": "Kevin Wendt", "department": "Department of Computer Science and Engineering "}], "week_data": []}, {"course_info": "About this course: Learn to deploy and run Microsoft Windows® applications on Google Cloud Platform (GCP). Through lectures and hands-on labs, learn how to configure and run Microsoft Windows and Microsoft SQL Server in Google Compute Engine. You will also learn how to develop and deploy ASP.NET applications and deploy them to Google Compute Engine, Google App Engine, and Google Container Engine.\n\nCourse objectives\nThis course teaches participants the following skills:\n• Configuring Microsoft Windows and Microsoft SQL Server in Google Compute Engine\n• Deploying ASP.NET MVC applications to Google Compute Engine\n• Deploying .NET Core applications to Google Compute Engine, Google Compute Engine, and Google Container Engine\n\nPre-requisites\n• System-administration or application-development experience with Microsoft Windows\n• A general familiarity with cloud computing", "title": "Develop and Deploy Windows Applications on Google Cloud Platform", "rating": "5.0", "level": "Beginner", "created_by": "Google Cloud", "package_name": null, "target_audience": "Who is this class for: This training is primarily for software developers, system administrators, and IT professionals who are focused on Microsoft Windows.", "package_num": null, "teach_by": [{"name": "Google Cloud Training", "department": null}], "week_data": [{"description": "Get to know the basics of Google Cloud Platform and how to create Windows virtual machines. You'll learn about the scope and structure of GCP, options for Windows deployment on GCP, and GCP interfaces.", "video": ["What is Google Cloud?", "Demo of Creating Windows VMs on GCP", "Lab 1: Sign Into Qwiklabs, Create a Windows VM", "Introduction to Google Cloud"], "title": "Module 1: Introduction to Google Cloud Platform"}, {"description": "You'll learn about Google Compute Engine virtual machine options, integrating Active Directory with Google Compute Engine virtual machines, and running SQL Server in Google Compute Engine for high availability.", "video": ["Google Compute Engine Fundamentals", "Architecting Windows Solutions on GCE", "High-Availability SQL Server on GCE", "Demo of Creating Highly Available SQL Servers", "Lab 2: Create a highly available SQL Server backend using AlwaysOn Availability Groups", "Windows Workloads on Google Cloud Platform"], "title": "Module 2: Windows Workloads on Google Compute Engine"}, {"description": "You'll learn about the model-view-controller structure, using Microsoft Visual Studio’s Web Project template to develop in ASP.NET, and deploying applications to Microsoft Internet Information Server (IIS) in GCE.\n", "video": ["Developing ASP.NET MVC Applications", "Demo of Creating an ASP.NET MVC Web App", "Lab 3: Create an ASP.NET MVC Application", "Developing ASP.NET MVC Applications"], "title": "Module 3: Developing ASP.NET MVC applications "}, {"description": "You'll learn about deploying instances across GCP zones, using instance groups to create pools of virtual machines, and load balancing Windows applications.", "video": ["Configuring Resilient Workloads", "Making an ASP.NET App Highly Available and Scalable", "Lab 4: Load Balance ASP.NET MVC on GCP", "Configuring Resilient Workloads"], "title": "Module 4: Configuring Resilient Workloads "}, {"description": "Finally, you'll learn about .NET Core and EF Core, options for deploying ASP.NET Core applications on Google Cloud Platform, and how to deploy ASP.NET Core applications on Google Compute Engine, Google Container Engine, and Google App Engine.", "video": ["Introducing .NET Core", "ASP.NET Core and Google Container Engine", "ASP.NET Core and Google App Engine", "Lab 5a/5b/5c: Develop/Deploy an ASP.NET Core Application on GCE/GKE/GAE", "Introducing ASP.NET Core on GCP", "ASP.NET Core and Google Container Engine", "ASP.NET Core and Google App Engine"], "title": "Module 5: Delivering Next-Generation ASP.NET Core on GCP "}]}, {"course_info": "About this course: This Capstone Course for the UI Design Specialization is a group design project in which you will combine and demonstrate the user research, design/prototyping, and evaluation skills you've learned by designing the solution to one of a set of selected projects.", "title": "UI Design Capstone", "rating": "4.5", "level": null, "created_by": "University of Minnesota", "package_name": "User Interface Design Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Joseph A Konstan", "department": "Computer Science and Engineering"}, {"name": "Loren Terveen", "department": "Computer Science and Engineering"}, {"name": "Haiyi Zhu", "department": "Computer Science and Engineering"}, {"name": "Lana Yarosh", "department": "Computer Science and Engineering"}, {"name": "Dr. Brent Hecht", "department": "Computer Science and Engineering"}], "week_data": [{"description": "", "video": ["Welcome to UI Design Capstone Project", "Project structure", "Project choices", "How to use ProjectLens: the Group Project Supporting Tool", "How to use Slack: the Group  Communication Tool", "Team work guidelines and exit options", "Project Evaluation Metrics", "Frequently Asked Questions", "Instruction: Project Sign-up", "Project sign-up"], "title": "Preface"}, {"description": "", "video": ["Entrance to ProjectLens", "Milestone requirements", "Sample deliverable"], "title": "User research and ideation I"}, {"description": "", "video": ["Entrance to ProjectLens"], "title": "User research and ideation II"}, {"description": "", "video": ["Course Survey (User research)", "Entrance to Project", "Milestone requirements", "Sample deliverable"], "title": "First prototype"}, {"description": "", "video": ["Teammate evaluation (First prototype)", "Entrance to ProjectLens", "Milestone requirements", "Sample submission"], "title": "Cognitive Walkthrough and heuristic evaluation"}, {"description": "", "video": ["Teammate evaluation (Cognitive walkthrough and heuristic evaluation)", "Entrance to ProjectLens", "Milestone requirements", "Sample submission"], "title": "Second prototype and user test plan"}, {"description": "", "video": ["Course survey (Second prototype)", "Entrance to ProjectLens", "Milestone requirements", "Sample submission"], "title": "User test"}, {"description": "", "video": ["Teammate evaluation (User test)", "Peer grading instructions", "Entrance to ProjectLens", "Specialization Conclusion", "Receive your grades"], "title": "Peer grading and Specialization Conclusion"}]}, {"course_info": "About this course: In this Capstone course, you will design a microcontroller-based embedded system. As an option, you can also build and test a system. The focus of your project will be to design the system so that it can be built on a low-cost budget for a real-world application. To complete this project you'll need to use all the skills you've learned in the course (programming microcontrollers, system design, interfacing, etc.). The project will include some core requirements, but leave room for your creativity in how you approach the project. In the end, you will produce a unique final project, suitable for showcasing to future potential employers.  \n\nNote that for the three required assignments you do NOT need to purchase software and hardware to complete this course. There is an optional fourth assignment for students who wish to build and demonstrate their system using an Arduino or Raspberry Pi. Please also note that this course does not include discussion forums.\n\nUpon completing this course, you will be able to:\n1.       Write a requirements specification document\n2.       Create a system-level design\n3.       Explore design options\n4.       Create a test plan", "title": "Programming for the Internet of Things Project", "rating": "4.6", "level": null, "created_by": "University of California, Irvine", "package_name": "An Introduction to Programming the Internet of Things (IOT) Specialization ", "target_audience": null, "package_num": "6", "teach_by": [{"name": "Ian Harris", "department": "Department of Computer Science"}], "week_data": [{"description": "This section will answer questions you might have about the project assignment, the grading rubric, and what you can expect in the upcoming weeks together. ", "video": ["Course Overview", "Links to Relevant Course Content", "Grading", "Honor Code & Plagiarism", "FAQs", "Introduction to the Capstone"], "title": "Get Started "}, {"description": "This module will assist you in selecting an idea for your Capstone project. There are many variables to consider in this decision so it's important to know the parameters and how they impact your choice. Your decision will then drive the content of the very first step in your Capstone project -- preparing a requirements specification. ", "video": ["1.1 - Deciding on a Project Idea", "1.2 - The Design Process", "1.3 - Specification Example", "Assignment 1: Requirements Specification Document"], "title": "Capstone Design, Part 1"}, {"description": "With the requirements specification out of the way, it's time to turn your attention to the system-level design of your project. This module will walk you through the constraints your project will need to satisfy. You'll also be informed about how to consider alternatives to your design.\n", "video": ["2.1 - System-level Design", "2.2 - Key System Design Decisions", "Assignment 2: Design Document"], "title": "Capstone Design, Part 2"}, {"description": "Naturally testing is a key component of any technical design. This module will walk you through the important aspects of a test plan for your design. ", "video": ["3.1 - Testing", "Assignment 3: Testing Document"], "title": "Capstone Design, Part 3"}, {"description": "In this final module, you will have the option of actually building out and then demonstrating your final project. This module is optional because it requires you to have the necessary equipment. ", "video": ["Prof. Harris' Quadcopter Video Demo", "Video of Your Final Project Working (Optional)"], "title": "Capstone Design, Part 4 (OPTIONAL) "}, {"description": "Let's wrap up our time together as we have traveled through the specialization.", "video": ["Keep the Momentum Going!"], "title": "Specialization Wrap-Up"}]}, {"course_info": "About this course: The Capstone project integrates material from throughout the Android App Development Specialization to exercise and assess the ability of learners to create an interesting Android app. Learners will apply knowledge and skills learned in previous MOOCs in this Specialization, including Java programming features; Android activity, broadcast receiver, service, and content provider (plus SQLite) components; and unit, integration, and user interface testing. The project itself is similar in scope to previous assignments in the earlier MOOCs in the Specialization.  However, it is intentionally designed to enable learners to create a customized app that demonstrates their creativity and mastery of the Specialization topics.", "title": "Capstone MOOC for \"Android App Development\"", "rating": "4.1", "level": null, "created_by": "Vanderbilt University", "package_name": "Android App Development Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Dr. Douglas C. Schmidt", "department": "Electrical Engineering and Computer Science"}, {"name": "Michael Walker", "department": "EECS"}, {"name": "Dr. C. Jules White", "department": "Electrical Engineering and Computer Science"}], "week_data": [{"description": "This module provides an introduction to the contents of the MOOC and summarizes effective learning strategies. In particular, it explains the specification and evaluation rubrics for the Android app that will be implemented by learners in the Capstone", "video": ["Overview of the Capstone Project", "Summary of the Capstone Requirements and Evaluation Process", "Milestone 1 Overview", "Capstone Milestone 1 (Mandatory)"], "title": "Capstone Overview"}, {"description": "", "video": ["Milestone 2 Overview", "Capstone Milestone 2 (Mandatory)"], "title": "Week 2 Milestone"}, {"description": "", "video": ["Milestone 3 Overview", "Capstone Milestone 3 (Mandatory)"], "title": "Week 3 Milestone"}, {"description": "", "video": ["Final Submission Overview", "Capstone Final Submission (Mandatory)"], "title": "Capstone Final Submission"}]}, {"course_info": "About this course: While most specializations on Coursera conclude with a project-based course, students in the \"Fundamentals of Computing\" specialization have completed more than 20+ projects during the first six courses of the specialization. Given that much of the material in these courses is reused from session to session, our goal in this capstone class is to provide a conclusion to the specialization that allows each student an opportunity to demonstrate their individual mastery of the material in the specialization.\n\nWith this objective in mind, the focus in this Capstone class will be an exam whose questions are updated periodically. This approach is designed to help insure that each student is solving the exam problems on his/her own without outside help. For students that have done their own work, we do not anticipate that the exam will be particularly hard. However, those students who have relied too heavily on outside help in previous classes may have a difficult time. We believe that this approach will increase the value of the Certificate for this specialization.", "title": "The Fundamentals of Computing Capstone Exam", "rating": "4.8", "level": "Intermediate", "created_by": "Rice University", "package_name": "Fundamentals of Computing Specialization ", "target_audience": null, "package_num": "7", "teach_by": [{"name": "Joe Warren", "department": "Computer Science"}, {"name": "Scott Rixner", "department": "Computer Science"}, {"name": "Luay Nakhleh", "department": "Computer Science; Biochemistry and Cell Biology "}], "week_data": [{"description": "Complete a 25 question exam to demonstrate your mastery of the material in the Specialization", "video": ["Class Overview", "Exam Preparation", "Frequently Asked Questions", "Honor Code (IMPORTANT)", "Class Wrap Up", "Capstone Exam"], "title": "Fundamentals of Computing Capstone Exam"}]}, {"course_info": "About this course: Note: You should complete all the other courses in this Specialization before beginning this course.\n\nThis six-week long Project course of the Data Mining Specialization will allow you to apply the learned algorithms and techniques for data mining from the previous courses in the Specialization, including Pattern Discovery, Clustering, Text Retrieval, Text Mining, and Visualization, to solve interesting real-world data mining challenges. Specifically, you will work on a restaurant review data set from Yelp and use all the knowledge and skills you’ve learned from the previous courses to mine this data set to discover interesting and useful knowledge. The design of the Project emphasizes: 1) simulating the workflow of a data miner in a real job setting; 2) integrating different mining techniques covered in multiple individual courses; 3) experimenting with different ways to solve a problem to deepen your understanding of techniques; and 4) allowing you to propose and explore your own ideas creatively. \n\nThe goal of the Project is to analyze and mine a large Yelp review data set to discover useful knowledge to help people make decisions in dining. The project will include the following outputs: \n\n1. Opinion visualization: explore and visualize the review content to understand what people have said in those reviews.\n2. Cuisine map construction: mine the data set to understand the landscape of different types of cuisines and their similarities.\n3. Discovery of popular dishes for a cuisine: mine the data set to discover the common/popular dishes of a particular cuisine.\n4. Recommendation of restaurants to help people decide where to dine: mine the data set to rank restaurants for a specific dish and predict the hygiene condition of a restaurant.\n\nFrom the perspective of users, a cuisine map can help them understand what cuisines are there and see the big picture of all kinds of cuisines and their relations. Once they decide what cuisine to try, they would be interested in knowing what the popular dishes of that cuisine are and decide what dishes to have. Finally, they will need to choose a restaurant. Thus, recommending restaurants based on a particular dish would be useful. Moreover, predicting the hygiene condition of a restaurant would also be helpful. \n\nBy working on these tasks, you will gain experience with a typical workflow in data mining that includes data preprocessing, data exploration, data analysis, improvement of analysis methods, and presentation of results. You will have an opportunity to combine multiple algorithms from different courses to complete a relatively complicated mining task and experiment with different ways to solve a problem to understand the best way to solve it. We will suggest specific approaches, but you are highly encouraged to explore your own ideas since open exploration is, by design, a goal of the Project. \n\nYou are required to submit a brief report for each of the tasks for peer grading. A final consolidated report is also required, which will be peer-graded.", "title": "Data Mining Project", "rating": "4.5", "level": null, "created_by": "University of Illinois at Urbana-Champaign", "package_name": "Data Mining  Specialization ", "target_audience": null, "package_num": "6", "teach_by": [{"name": "Jiawei Han", "department": "Department of Computer Science"}, {"name": "ChengXiang Zhai", "department": "Department of Computer Science"}, {"name": "John C. Hart", "department": "Department of Computer Science"}], "week_data": [{"description": "In this module, you will become familiar with the course, your instructor, your classmates, and our learning environment.", "video": ["Welcome to the Data Mining Project!", "Orientation Overview", "Syllabus", "About the Discussion Forums", "Updating Your Profile", "MeTA Installation and Overview", "Data Set and Toolkit Acquisition", "Getting to Know Your Classmates"], "title": "Orientation"}, {"description": "", "video": ["Task 1 Overview", "Task 1 Rubric", "Task 1 Submission"], "title": "Task 1 - Exploration of a Data Set"}, {"description": "", "video": ["Task 2 Overview", "Task 2 Rubric", "Task 2 Submission"], "title": "Task 2 - Cuisine Clustering and Map Construction"}, {"description": "", "video": ["Task 3 Overview", "Task 3 Rubric", "Task 3 Report Submission"], "title": "Task 3 - Dish Recognition"}, {"description": "", "video": ["Task 4 and 5 Overview", "Task 4 and 5 Rubric", "Task 4 and 5 Submission"], "title": "Task 4 & 5 - Popular Dishes and Restaurant Recommendation"}, {"description": "", "video": ["Task 6 Overview", "Task 6 Rubric", "Task 6 Report Submission"], "title": "Task 6"}, {"description": "", "video": ["Final Report Instructions", "Final Report Rubric", "Final Report Submission"], "title": "Final Report"}]}, {"course_info": "About this course: Ever wonder how Netflix decides what movies to recommend for you? Or how Amazon recommends books? We can get a feel for how it works by building a simplified recommender of our own!\n\nIn this capstone, you will show off your problem solving and Java programming skills by creating recommender systems. You will work with data for movies, including ratings, but the principles involved can easily be adapted to books, restaurants, and more. You will write a program to answer questions about the data, including which items should be recommended to a user based on their ratings of several movies. Given input files on users ratings and movie titles, you will be able to:\n\n1. Read in and parse data into lists and maps;\n2. Calculate average ratings;\n3. Calculate how similar a given rater is to another user based on ratings; and\n4. Recommend movies to a given user based on ratings. \n5. Display recommended movies for a given user on a webpage.", "title": "Java Programming: Build a Recommendation System", "rating": "4.7", "level": "Intermediate", "created_by": "Duke University", "package_name": "Java Programming and Software Engineering Fundamentals Specialization ", "target_audience": "Who is this class for: This course is for anyone who has passed the first four courses in the Java Programming and Software Engineering Fundamentals Specialization, who has the ability to program in Java and design algorithms. Bring together everything you’ve learned to make a movie recommendation system that you can put on the web and send to your colleagues and friends!", "package_num": "5", "teach_by": [{"name": "Robert Duvall", "department": "Computer Science"}, {"name": "Owen Astrachan", "department": "Computer Science"}, {"name": "Andrew D. Hilton", "department": "Electrical and Computer Engineering"}, {"name": "Susan H. Rodger", "department": "Computer Science"}], "week_data": [{"description": "You will start out the capstone project by taking a look at the features of a recommender engine. Then you will choose how to read in and organize user, ratings, and movie data in your program. The programming exercise will provide a check on your progress before moving on to the next step.", "video": ["Module Description / Resources", "Introduction and Motivation", "Reading and Storing Data", "Programming Exercise: Step One", "End of Module Survey", "Step One"], "title": "Introducing the Recommender"}, {"description": "Your second step in building a recommender will focus on making simple recommendations based on the average ratings that a movie receives. You'll also make sure that each recommended movie has a least a minimal number of user ratings before including it in your recommendations. Throughout this step you are encouraged you use your knowledge of the seven step process to design useful algorithms and successful programs to solve the challenges you will face.", "video": ["Module Description", "Average Ratings", "Programming Exercise: Step Two", "End of Module Survey", "Step Two"], "title": "Simple Recommendations"}, {"description": "In your third step, you will be encouraged to use interfaces to rewrite your existing code, making it more flexible and more efficient. You will also add filters to select a desired subset of movies that you want to recommend, such as 'all movies under two hours long' or 'all movies made in 2012'. You'll also make your recommendation engine more efficient as you practice software design principles such as refactoring.", "video": ["Module Description", "Filtering Recomendations", "Programming Exercise: Step Three", "End of Module Survey", "Step Three"], "title": "Interfaces, Filters, Database"}, {"description": "In your fourth step, you will complete your recommendation engine by finding users in the database that have similar ratings and weighting their input to provide a more personal recommendation for the users of your program. Once you complete this step, you could request ratings of movies from those you know, run your program, and give them recommendations tailored to their own interests and tastes!", "video": ["Module Description", "Calculating Weighted Averages", "Programming Exercise: Step Four", "End of Module Survey", "Step Four", "Step Five"], "title": "Weighted Averages"}, {"description": "Congratulations on completing your recommender programming project! As we conclude this capstone course, our instructors have a few parting words as you embark in future learning and work in computer science!", "video": ["Farewell from the Instructor Team"], "title": "Farewell"}]}, {"course_info": "About this course: This course intends to make the student familiar with information security management. When you have finished with this course you will know more about: \n\n• Governance: including the mission, roles and responsibilities of the InfoSec governance function, and the strategic planning process and InfoSec’s role in the organization’s strategic planning effort.\n• You will understand the various types of InfoSec policies and how effective information security policy is created and used.\n• Risk management and the risk management process\n• Certain laws and ethical issues impacting information security in the organization. And some common information security management practices such as benchmarking and performance measures.", "title": "The Business of Cybersecurity Capstone", "rating": "4.7", "level": "Beginner", "created_by": "University System of Georgia", "package_name": "Cybersecurity: Developing a Program for Your Business Specialization ", "target_audience": "Who is this class for: This course is targeted at those who do not have practical knowledge of information security management bu who might be interested to know what is included in this are of business operation.", "package_num": "4", "teach_by": [{"name": "Dr. Humayun Zafar", "department": "Information Systems"}, {"name": "Dr. Traci Carte", "department": "Information Systems"}, {"name": "Herbert J. Mattord, Ph.D., CISM, CISSP, CDP", "department": "Information Systems"}, {"name": "Mr. Andy Green", "department": "Kennesaw State University - Department of Information Systems"}, {"name": "Michael Whitman, Ph.D., CISM, CISSP", "department": "Information Systems"}], "week_data": [{"description": "This module provides a welcome to the course and describes the course modules that follow. The lecture and reading will introduce you to the broad topic of security management and establish the basic terminology needed for later modules. Also, you will begin learning about the case company that you will use in an extended simulation that spans the rest of this course as you build on your learning by engaging in real world analysis and reporting on cybersecurity topics.", "video": ["An overview of this course", "Welcome to security Management", "What is security management?", "Pretest: Test your knowledge before you begin", "What is cybersecurity?", "Capstone Project: Getting started", "Capstone Project: Getting started"], "title": "Welcome to the Management of Information Security"}, {"description": "In this module, you will explore how organizations organize the cybersecurity function and engage in strategic planning. This will include coverage of where the information security management team is placed in the organizational hierarchy, what functions does the CSO of an organization fulfill, as well as some explanation of the strategic planning function.You will also develop a simulated organizational plan in a report to executive management as part of the ongoing case study.", "video": ["How organizations are governed", "How organizations structure the security function", "Where does the security management team belong?", "What does the CSO do?", "How organizations make strategic plans for security", "Executive viewpoint on governance in cybersecurity", "Governance and strategic planning in information security practice quiz", "Capstone Project: Organizing for cybersecurity", "Capstone Project: Organizing for cybersecurity", "Governance and strategic planning in information security quiz"], "title": "Governance and Strategic Planning in Information Security"}, {"description": "This module will define risk management and explore the processes used by organizations to identify and control risk. This will include basic techniques used to identify and assess risk as well as exploration of the risk control strategies that can be used to help control risk. You will also experiment with reading an industry standard risk report that you will summarize and analyze as you assess operational risk for higher management as part of the ongoing case-based project.", "video": ["An overview of the risk management process", "The risk identification process", "The risk assessment process", "More on identifying and assessing risk", "Determining risk control strategies", "Methods used to implement risk management", "Executive viewpoint on risk management methodology", "Selecting a risk management methodology", "Risk management practice quiz", "Capstone Project: Identifying risks", "Capstone Project: Identifying risks", "Risk management quiz"], "title": "Risk Management"}, {"description": "In this module you will learn about how organizations must manage the complex issues emerging from the rapidly changing legal and regulatory environment. It will include a short overview of the laws and regulations you should plan to learn about as well as an introduction to how ethics is encountered in the workplace. Then you will engage on a discussion on compliance with industry standards and governmental regulation as a means to move closer to a more secure work environment. As part of the ongoing case study you will be asked to advise management on an ethical dilemma currently facing some of the management team at CHI.", "video": ["An introduction to law, ethics, and compliance", "The legal landscape of cybersecurity", "Workplace ethics", "Are ethics important on the job?", "Common processes in cybersecurity programs", "Is compliance with the regulations enough to have good security?", "Executives viewpoint on implementing compliance programs", "Regulations, law, ethics, and compliance practice quiz", "Capstone Project: Ethical decision making", "Capstone Project: Ethical decision making", "Regulations, law, ethics, and compliance"], "title": "Regulatory Compliance, Law and Ethics"}, {"description": "This module explores some of the other important elements commonly found in information security management programs. While you will not cover every security management topic, you will explore performance measurement, managing technical controls, and contingency planning. Then, you will assess and report on the proposed incident response plans of the simulated company as part of the ongoing case study.", "video": ["Measuring performance", "Managing technical controls", "What is the most urgent technical control?", "Contigency planning including incident response", "Security programs practice quiz", "Capstone Project: Assessing an incident response plan", "Capstone Project: Assessing an incident response plan", "Security programs"], "title": "Security Programs"}, {"description": "In this module, you will synthesize the content in the course, complete a final exam, and complete your Capstone Project.", "video": ["Executive viewpoint on the importance of cybersecurity", "Pulling it all together", "Capstone Project: Completion Report", "Final Exam", "Capstone Project: Completion Report"], "title": "Conclusion"}]}, {"course_info": "About this course: In the game design and development capstone, you will create an original game from initial concept through implementation and then launch it to the world! Along the way, you will have the opportunity to put your game ideas in front of your peers and for the best-of-the-best you will have the chance to get feedback from game industry professionals. The capstone experience gives you the opportunity to push your skills further and demonstrate your newfound skills as a game developer. The capstone also contains guest talks from game industry professionals at Riot Games, Deep Silver Volition, Iron Galaxy, Radiant Entertainment, Goodgame Studios, Stardock, GREE, Heart Shaped Games, Kongregate, and more.", "title": "Game Design and Development Capstone", "rating": "4.7", "level": null, "created_by": "Michigan State University", "package_name": "Game Design and Development Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Brian Winn", "department": "Media and Information"}, {"name": "Casey O'Donnell", "department": "Media and Information"}], "week_data": [{"description": "Welcome to the Game Design and Development Capstone. In this module we'll give you a little bit of a sense of what to expect over the coming weeks. We're going to be honest with you though, this is going to be a fair amount of work. As you have learned, making games takes time and effort.  And the goal of the Capstone is to prove that you have the knowledge, skills, and attitude to make games. So, get ready to flex those game design and development muscles that you have developed across the specialization.", "video": ["Capstone Overview", "FAQ", "Industry Guest Talks", "\"What is Success in Video Game Development\" by Ziba Scott, Founder, Popcannibal", "\"Game Design Problem Solving Basics\" by Scott Brodie, Founder and Lead Designer, Heart Shaped Games"], "title": "What's in the Capstone?"}, {"description": "You're going to notice a lot of overlap in terms of the kinds of activities we're asking you to do in this capstone and the things we already asked you to do in the previous courses. This isn't because we're lazy, it is because making games is how you get better at making games. So, the first thing you need to do is come up with a new idea. The next thing you need to do is convince us that it is worth giving you our time and hopefully money to explore that idea.", "video": ["Getting Started", "High Concept Discussion", "High Concept Document", "Getting Better at Talking about Your Game", "\"Finding An Art Style for Your Small Game\" by Marie Lazar, 3D Environment Artist, Goodgame Studios", "High Concept and Pitch"], "title": "Milestone 1: Your Game Idea"}, {"description": "Now you have to start the process of making your game a reality. No matter how you do this, either as a non-digital prototype or a digital prototype, you need to start building and testing some of your core gameplay systems and mechanics.", "video": ["Early Prototyping", "Blueprint (vs. Design Document)", "An Early Progress Report", "\"Programming Best Practices\" by Matthew Vorce, Programmer, Pixo Group"], "title": "Milestone 2: Early Prototype, Blueprint, and Progress Report"}, {"description": "The next step is to get something that you can start putting in front of people to begin getting feedback and working to \"find the fun.\" Good luck.", "video": ["First Playable Prototype", "\"User Interface and User Experience for Games\" by Charles Roman, Senior Software Engineer, Radiant Entertainment", "First Playable Playtest"], "title": "Milestone 3: First Playable and Fun Test (aka, playtest)"}, {"description": "Once you've found that core game idea, the next step is to begin building enough of it that it can begin feeling like a game. Your goal at this point is to continue iterating on that core game idea and build out enough features and content that you move beyond the prototyping phase (goodbye cubes and spheres) and on to something that really starts to look and feel like your game.", "video": ["Alpha Build and Reflection", "An Alpha Progress Report", "\"Game Production Overview\" by Chris Bray, Studio Head and Senior Producer, Stardock", "\"How to Be a Producer\" by Greg Donovan, Senior Producer, Deep Silver Volition", "\"Project Management\" by Jared Riley, Engineering Manager, GREE International"], "title": "Milestone 4: Alpha Build"}, {"description": "Now is the time to finish all the features, build all the levels, and begin polishing. You're not going to be done yet, but that's what you're working toward.", "video": ["Beta Build", "Thinking about Your Release Now", "Distributing your capstone game through Kongregate", "\"Intro to Kongregate\" by John Cooney, Director of Launchpad, Kongregate.com", "\"An Overview of the Business of Free Games\" by Anthony Pecorella, Virtual Goods Director, Kongregate.com", "\"Introduction to the Kongregate API\" by Matt Starsoneck, Virtual Goods Analyst, Kongregate.com"], "title": "It is Crunch Time!"}, {"description": "You are in the final crunch leading up to the beta testing! Good luck and try to keep up your energy level with your project.", "video": ["Polish it up and test it!", "\"Optimization in 3D Video Games\" by Jon Moore, Graphics Engineer, Iron Galaxy Studios", "\"Empowering Content Creators\" by Eric Arnold, Studio Architect of Programming, Deep Silver Volition", "\"Games as a Service\" by Will Bonner, Associate Test Engineer, Riot Games", "Beta Testing"], "title": "Milestone 5: Beta Build and Beta Testing"}, {"description": "Rule #1 of GameDev: If you don't ship, it doesn't exist. In this module, it is time to say, \"Enough is enough,\" and ship your game. We're literally asking you to create a final build of something and put it somewhere where the world can see it. That can be Kongregate, the iOS App Store, Google Play or wherever you think is most appropriate.", "video": ["When to Release Your Game?", "Release Build(s)", "Create Supporting Materials", "Introduction to Career Journey and Advice Guest Talks", "Marie Lazar, 3D Environment Artist, Goodgame Studios", "Eric Arnold, Studio Architect of Programming, Deep Silver Volition", "Will Bonner, Associate Test Engineer, Riot Games", "Jon Moore, Graphics Engineer, Iron Galaxy Studios", "Matthew Vorce, Programmer, Pixo Group", "Chris Bray, Studio Head and Senior Producer, Stardock", "Greg Donovan, Senior Producer, Deep Silver Volition", "Scott Brodie, Founder and Lead Designer, Heart Shaped Games", "Jared Riley, Engineering Manager, GREE International", "Charles Roman, Senior Software Engineer, Radiant Entertainment", "PEER REVIEW: Has it Shipped?"], "title": "Milestone 6: Ship It!"}]}, {"course_info": "About this course: R Programming Capstone", "title": "Mastering Software Development in R Capstone", "rating": "4.1", "level": "Intermediate", "created_by": "Johns Hopkins University", "package_name": "Mastering Software Development in R Specialization ", "target_audience": null, "package_num": "5", "teach_by": [{"name": "Roger D. Peng, PhD", "department": "Bloomberg School of Public Health"}, {"name": "Brooke Anderson", "department": "Colorado State University"}], "week_data": [{"description": "The overall goal of the capstone project is to integrate the skills you have developed over the courses in this Specialization and to build a software package that can be used to work with the NOAA Significant Earthquakes dataset.", "video": ["Welcome to the Capstone Project", "Introduction", "Module 1: Obtain and Clean the Data"], "title": "Obtain and Clean the Data"}, {"description": "Show us when earthquakes occurred in different countries, their magnitude, and their toll on human life.", "video": ["Module 2: Visualization Tools"], "title": "Building Geoms"}, {"description": "Show and annotate the earthquake epicenters.", "video": ["Module 3: Mapping Tools"], "title": "Building a Leaflet Map"}, {"description": "Documentation is one of the most important and most commonly overlooked steps when writing software, but you're not going to let that happen in your project.", "video": ["Documentation and Packaging Tasks", "Testing", "Documentation, Packaging, and Testing"], "title": "Documentation and Packaging"}, {"description": "The moment of truth. It's time to push your package to GitHub.", "video": ["GitHub and Travis"], "title": "Deployment"}, {"description": "It's time to submit your deployed package for evaluation and to evaluate the work of a few of your classmates.", "video": ["Package Evaluation"], "title": "Final Assessment"}]}, {"course_info": "About this course: Ce cours initie aux bases de la programmation en utilisant le langage C++ : variables, boucles, fonctions, ...\nIl ne présuppose pas de connaissance préalable. Les aspects plus avancés (programmation orientée objet) sont donnés dans un cours suivant, «Introduction à la programmation orientée objet (en C++)». \nIl s'appuie  sur de nombreux éléments pédagogiques : vidéos sous-titrées, quizz dans et hors vidéos, exercices, devoirs notés automatiquement, notes de cours.", "title": "Initiation à la programmation (en C++)", "rating": "4.8", "level": "Beginner", "created_by": "École Polytechnique Fédérale de Lausanne", "package_name": null, "target_audience": "Who is this class for: Ce cours s'adresse à toute personne désireuse d'apprendre les concepts de base de la programmation. Aucun prérequis n'est nécessaire, mais la formulation des exercices présuppose une « culture » niveau lycée (sans que ce soit rédhibitoire non plus).", "package_num": null, "teach_by": [{"name": "Jean-Cédric Chappelier", "department": "School of Computer and Communication Sciences"}, {"name": "Jamila Sam", "department": "School of Computer and Communication Sciences"}], "week_data": [{"description": "Cette semaine vous accueille dans le cours et vous présente les premiers concepts de base de la programmation.", "video": ["Bienvenue", "Déroulement du cours", "Contributeurs", "Installation d'un environnement de développement C++11 sous Linux", "Installation sous Linux (Ubuntu)", "Installation d'un environnement de développement C++11 sous Mac OS X", "Installation  sous MacOS 10.9 et supérieurs", "Installation sous MacOS 10.8 et inférieurs", "Installation d'un environnement de développement C++11 sous Window", "Installation sous Windows", "[optionnel] Debugging sous Geany", "Introduction", "Variables", "Variables : lecture/écriture", "Expressions", "Notes de cours", "Exercices", "Compléments de cours (variables et expressions)", "(non noté) Premiers programmes", "Variables et expressions"], "title": "Initiation à la programmation   "}, {"description": "Nous abordons cette semaine, et continuerons la semaine prochaine, les « structures de contrôle » qui permettent de décrire comment certaines données peuvent influencer les traitements à effectuer. Nous commençons par les « branchements conditionnels » grâce auxquels une portion de programme peut être exécutée ou non suivant différents tests.", "video": ["Branchements conditionnels", "Conditions", "Erreurs de débutant le type bool", "Notes de cours", "Exercices", "Compléments de cours (branchements conditionnels)", "Branchements conditionnels et booléens", "Branchements conditionnels"], "title": "Structures de contrôle (1) : branchements conditionnels"}, {"description": "Cette semaine, nous terminons la présentation des « structures de contrôle » avec les boucles et les itérations qui permettent de faire répéter certaines parties d'un programme.", "video": ["Itérations : introduction", "Itérations : approfondissement et exemples", "Itérations : quiz", "Boucles conditionnelles", "Blocs d'instructions", "Notes de cours", "Exercices", "Boucles et itérations", "Boucles et itérations"], "title": "Structures de contrôle (2) : boucles et itérations"}, {"description": "Cette semaine aborde un sujet fondamental en programmation : les « fonctions » qui permettent de beaucoup mieux structurer les programmes et d'éviter d'avoir à récrire plusieurs fois la même portion de code.", "video": ["Fonctions : introduction", "Fonctions : appels", "Fonctions : passage des arguments", "Fonctions : prototypes", "Fonctions : définitions", "Fonctions : méthodologie", "Fonctions : arguments par défaut et surcharge", "Notes de cours", "Exercices", "Fonctions", "Fonctions"], "title": "Fonctions"}, {"description": "Après plusieurs semaines sur les traitements, nous revenons cette semaine et les suivantes sur les données pour présenter des types de données plus avancés que les types de base. Cette semaine : les tableaux qui permettent de regrouper plusieurs données de même type.", "video": ["Errata", "Tableaux : introduction", "Tableaux : déclaration et initialisation des vector", "Tableaux : utilisation des vector", "Tableaux : exemples simples (vector)", "Tableaux : fonctions spécifiques vector", "Tableaux : tableaux dynamiques multidimensionnels", "Tableaux : array", "Notes de cours", "Exercices", "Complément de cours : les tableaux « à la C »", "Tableaux"], "title": "Tableaux"}, {"description": "Après les tableaux, cette semaine continue la présentation de nouveaux types de données avec les « chaînes de caractères », ensembles de lettres, et les « structures », regroupement de données devant logiquement aller ensemble.", "video": ["string : introduction", "string : traitements", "Typedef : alias de types", "Structures", "Notes de cours", "Exercices", "Chaînes de caractères et structures", "Tableaux, chaînes et structures"], "title": "Chaînes de caractères et structures"}, {"description": "Cette semaine nous terminons notre présentation de nouveaux types de données avec les « pointeurs » et « références » qui permettent de faire référence à d'autres données existantes ou d'en créer de nouvelles dynamiquement.", "video": ["Pointeurs et références : introduction", "Références", "Pointeurs : concept et analogie", "Pointeurs : déclaration et opérateurs de base", "Pointeurs : allocation dynamique", "Pointeurs « intelligents »", "Notes de cours", "Exercices", "Pointeurs et références"], "title": "Pointeurs et références"}, {"description": "Nous voulons terminer notre cours avec une étude de cas, la création d'un jeu de « Puissance 4 », nous permettant de revoir tous les concepts abordés au long du cours. Nous en profitons pour présenter un dernier type de données : le type « énuméré ».", "video": ["Puissance 4 : introduction", "Puissance 4 : premières fonctions", "Puissance 4 : fonction joue 1ère version", "Puissance 4 : fonction joue variantes et révision", "Puissance 4 : moteur de jeu", "Puissance 4 : fonctions est_ce_gagne et compte", "Puissance 4 : finalisation", "Code source de l'étude de cas", "Notes de cours", "Exercices", "Types énumérés"], "title": "Etude de cas"}]}, {"course_info": "About this course: Ce cours initie aux bases de la programmation en utilisant le langage Java : variables, boucles, fonctions, ...\nIl ne présuppose pas de connaissance préalable. Les aspects plus avancés (programmation orientée objet) sont donnés dans un cours suivant, «Introduction à la programmation orientée objet (en Java)». \nIl s'appuie  sur de nombreux éléments pédagogiques : vidéos sous-titrées, quizz dans et hors vidéos, exercices, devoirs notés automatiquement, notes de cours.", "title": "Initiation à la programmation (en Java)", "rating": "4.8", "level": "Beginner", "created_by": "École Polytechnique Fédérale de Lausanne", "package_name": null, "target_audience": "Who is this class for: Ce cours s'adresse à toute personne désireuse d'apprendre les concepts de base de la programmation. Aucun prérequis n'est nécessaire, mais la formulation des exercices présuppose une « culture » niveau lycée (sans que ce soit rédhibitoire non plus).", "package_num": null, "teach_by": [{"name": "Jean-Cédric Chappelier", "department": "School of Computer and Communication Sciences"}, {"name": "Jamila Sam", "department": "School of Computer and Communication Sciences"}], "week_data": [{"description": "Cette semaine vous accueille dans le cours et vous présente les premiers concepts de base de la programmation.", "video": ["Bienvenue", "Déroulement du cours", "Contributeurs", "Généralités", "A propos de l'installation de Eclipse", "Installation d'un environnement de développement Java sous Linux", "Installation sous Linux (Ubuntu)", "Installation d'un environnement de développement Java sous MacOS", "Installation sous MacOS", "Installation d'un environnement de développement Java sous Windows", "Installation sous Windows", "Configuration d'Eclipse", "Erratum", "Introduction", "Variables", "Variables : lecture/écriture", "Expressions", "Transparents et notes de cours", "Exercices", "Complements de cours (variables et expressions)", "(non noté) Premiers programmes", "Variables et expressions"], "title": "Initiation à la programmation"}, {"description": "Nous abordons cette semaine, et continuerons la semaine prochaine, les « structures de contrôle » qui permettent de décrire comment certaines données peuvent influencer les traitements à effectuer. Nous commençons par les « branchements conditionnels » grâce auxquels une portion de programme peut être exécutée ou non suivant différents tests.", "video": ["Branchements conditionnels", "Conditions", "Erreurs de débutant, Le type boolean", "Transparents et notes de cours", "Exercices", "Compléments de cours (branchements conditionnels)", "Branchements conditionnels et booléens", "Branchements conditionnels"], "title": "Structures de contrôle (1) : branchements conditionnels"}, {"description": "Cette semaine, nous terminons la présentation des « structures de contrôle » avec les boucles et les itérations qui permettent de faire répéter certaines parties d'un programme.", "video": ["Itérations : introduction", "Itérations : approfondissement et exemples", "Itérations : quizz", "Boucles", "Blocs d'instructions", "Transparents et notes de cours", "Exercices", "Boucles et itérations", "Boucles et itérations"], "title": "Structures de contrôle (2) : boucles et itérations"}, {"description": "Cette semaine et les suivantes nous présentons des types de données plus avancés que les types de base. Cette semaine : les tableaux qui permettent de regrouper plusieurs données de même type.", "video": ["Erratum", "Tableaux : introduction", "Tableaux : déclaration", "Tableaux : traitements courants", "Tableaux : affectation et comparaison", "Tableaux à plusieurs dimensions", "Transparents et notes de cours", "Exercices", "Tableaux de taille fixe", "Tableaux et chaines de caractères"], "title": "Tableaux"}, {"description": "Nous continuons notre présentation des tableaux puis passons à un autre nouveau type : les chaînes de caractères (i.e. suites de lettres).", "video": ["Erratum", "String : introduction", "String : comparaisons", "String : traitements", "Tableaux dynamiques", "Transparents et notes de cours", "Exercices", "Semaine 5 quiz"], "title": "Tableaux dynamiques et chaînes de caractères"}, {"description": "Cette semaine aborde un sujet fondamental en programmation : les « fonctions » qui permettent de beaucoup mieux structurer les programmes et d'éviter d'avoir à récrire plusieurs fois la même portion de code.", "video": ["Fonctions : introduction", "Fonctions : appel", "Fonctions : passage des arguments", "Fonctions : entêtes", "Fonctions : définitions", "Fonctions : méthodologie", "Fonctions : surcharge", "Transparents et notes de cours", "Exercices", "Fonctions/Méthodes", "Fonctions"], "title": "Fonctions / Méthodes"}, {"description": "Nous voulons terminer notre cours avec une étude de cas, la création d'un jeu de « Puissance 4 », nous permettant de revoir tous les concepts abordés au long du cours. ", "video": ["Errata", "Puissance 4 : introduction", "Puissance 4 : premières fonctions", "Puissance 4 : méthode joue 1ère version", "Puissance 4 : révision de la méthode joue", "Puissance 4 : moteur de jeu", "Puissance 4 : méthodes estCeGagne et compte", "Puissance 4 : finalisation", "Transparents et notes de cours", "Exercices", "Code source de l'étude de cas"], "title": "Etude de cas"}]}, {"course_info": "About this course: Ce cours introduit la programmation orientée objet (encapsulation, abstration, héritage, polymorphisme) en l'illustrant en langage Java. Il présuppose connues les bases de la programmation (variables, types, boucles, fonctions, ...). Il est conçu comme la suite du cours « Initiation à la programmation (en Java) ».\nComme son prédécesseur, ce cours s'appuie  sur de nombreux éléments pédagogiques : vidéos sous-titrées, quizz dans et hors vidéos, exercices, devoirs notés automatiquement, notes de cours.", "title": "Introduction à la programmation orientée objet (en Java)", "rating": "4.8", "level": "Intermediate", "created_by": "École Polytechnique Fédérale de Lausanne", "package_name": null, "target_audience": "Who is this class for: Ce cours s'adresse à toute personne ayant des connaissances de base en  programmation simple et désireuse d'apprendre les concepts fondamentaux de la programmation orientée objet.", "package_num": null, "teach_by": [{"name": "Jamila Sam", "department": "School of Computer and Communication Sciences"}, {"name": "Jean-Cédric Chappelier", "department": "School of Computer and Communication Sciences"}], "week_data": [{"description": "Cette semaine vous accueille dans le cours et vous présente les premiers concepts de base de la programmation dite « orientée objet ».", "video": ["Bienvenue", "Déroulement du cours", "Contributeurs", "Généralités", "A propos de l'installation de Eclipse", "Installation d'un environnement de développement Java sous Linux", "Installation d'un environnement de développement Java sous Linux (Ubuntu)", "Installation d'un environnement de développement Java sous MacOS", "Installation d'un environnement de développement Java sous MacOS", "Installation d'un environnement de développement Java sous Windows", "Installation d'un environnement de développement Java sous Windows", "Configuration d'Eclipse", "Introduction", "Classes, objets, attributs et méthodes en Java", "public et private", "Encapsulation et abstraction : résumé", "Encapsulation et abstraction : étude de cas", "Exercices", "(non noté) base de POO", "Notes de cours", "Classes et objets"], "title": "Introduction à la Programmation Orientée Objet"}, {"description": "Cette semaine aborde l'initialisation des objets (via ce qu'on appelle des « constructeurs »), ainsi que ce qui se passe lorsque l'on affiche, compare et affecte des objets en Java.\nLa question de comment se passe la « fin de vie » des objets est aussi abordée.", "video": ["Erratum", "Constructeurs (Introduction)", "Constructeurs par défaut en Java", "Constructeur de copie", "Fin de vie, affectation, affichage et comparaison d'objets", "Exercices", "Notes de cours", "Constructeurs", "Constructeurs"], "title": "Constructeurs"}, {"description": "Cette semaine nous abordons deux notions fondamentales de la programmation orientée objet : l'héritage et le polymorphisme.", "video": ["Héritage : concepts", "Héritage : droit d'accès protected", "Héritage : masquage", "Héritage : constructeurs", "Polymorphisme : introduction", "Compléments de cours  (paquetages)", "Exercices", "Notes de cours", "Héritage", "Héritage"], "title": "Héritage"}, {"description": "Cette semaine nous étudions la notion de classe abstraite et approfondissons les notions d'héritage et de polymorphisme. Nous abordons aussi une notion complémentaire qui n'est pas directement liée à ces thèmes, le modificateur final. ", "video": ["Classes et méthodes abstraites", "Héritage et polymorphisme : compléments", "Le modificateur final", "Exercices", "Notes de cours", "Polymorphisme", "Polymorphisme"], "title": "Polymorphisme (modificateur abstract) ; le modificateur final "}, {"description": "Cette semaine nous abordons la notion importante d'interface qui va complémenter vos acquis sur l'orienté objet en Java. Nous étudions aussi le modificateur static.", "video": ["Erratum", "Attributs statiques", "Méthodes statiques", "Interfaces", "Les interfaces depuis Java 8", "Complément de cours (Membres statiques d'interfaces)", "Exercices", "Notes de cours", "Interfaces / Membres statiques"], "title": " Le modificateur static ; Interfaces"}, {"description": "Nous étudions cette semaine comment gérer, au moyen du mécanisme des exceptions,  des situations anormales pouvant survenir lors de l'exécution d'un programme.", "video": ["Gestion des exceptions : introduction", "Gestion des exceptions : syntaxe", "Gestion des exceptions : compléments", "Exercices", "Notes de cours", "Exceptions", "Dernier devoir noté"], "title": "Gestion des exceptions"}, {"description": "Nous terminons notre cours par une étude de cas détaillée qui met en lumière les différents concepts rencontrés.", "video": ["Etude de cas : présentation et modélisation du problème", "Etude de cas : affichage polymorphique", "Etude de cas : première version", "Etude de cas : modélisation des mécanismes", "Etude de cas : copie profonde", "Exercices", "Codes sources de l'étude de cas", "Notes de cours"], "title": "Etude de cas"}]}, {"course_info": "About this course: Ce cours introduit la programmation orientée objet (encapsulation, abstration, héritage, polymorphisme) en l'illustrant en langage C++. Il présuppose connues les bases de la programmation (variables, types, boucles, fonctions, ...). Il est conçu comme la suite du cours « Initiation à la programmation (en C++) ».\nComme son prédécesseur, ce cours s'appuie  sur de nombreux éléments pédagogiques : vidéos sous-titrées, quizz dans et hors vidéos, exercices, devoirs notés automatiquement, notes de cours.", "title": "Introduction à la programmation orientée objet (en C++)", "rating": "4.9", "level": "Intermediate", "created_by": "École Polytechnique Fédérale de Lausanne", "package_name": null, "target_audience": "Who is this class for: Ce cours s'adresse à toute personne ayant des bases de programmation simple et désireuse d'apprendre les concepts de base de la programmation orientée objet.", "package_num": null, "teach_by": [{"name": "Jamila Sam", "department": "School of Computer and Communication Sciences"}, {"name": "Jean-Cédric Chappelier", "department": "School of Computer and Communication Sciences"}], "week_data": [{"description": "Cette semaine vous accueille dans le cours et vous présente les premiers concepts de base de la programmation dite « orientée objet ».", "video": ["Bienvenue ", "Déroulement du cours", "Contributeurs", "Installation d'un environnement de développement C++11 sous Linux", "Installation sous Linux (Ubuntu) ", "Installation d'un environnement de développement C++11 sous Mac OS X", "Installation sous MacOS 10.9 et supérieurs", "Installation sous Mac OS 10.8 et inférieurs", "Installation d'un environnement de développement C++11 sous Window", "Installation sous Windows", "Debugging sous Geany (>=1.26, Unix)", "Introduction ", "Classes, objets, attributs et méthodes en C++ ", "public: et private: ", "Encapsulation et abstraction : résumé ", "Encapsulation et abstraction : étude de cas", "Transparents", "Exercices", "(non noté) bases de la POO", "Notes de cours", "Classes et objets"], "title": " Introduction à la Programmation Orientée Objet"}, {"description": "Cette semaine aborde l'initialisation des objets (via ce qu'on appelle des « constructeurs »), ainsi que ce qui se passe « en fin de vie » des objets.", "video": ["Constructeurs (introduction) ", "Constructeurs par défaut en C++ ", "Constructeur de copie ", "Destructeurs", "Transparents", "Exercices", "Complément : const et les classes", "Notes de cours", "Constructeurs/destructeurs", "Constructeurs et destructeurs"], "title": "Constructeurs et destructeurs"}, {"description": "Cette semaine nous étudions comment étendre les opérateurs du langage C++ à nos propres classes.", "video": ["Variables et méthodes de classe", "Surcharge d'opérateurs : introduction ", "Surcharge d'opérateurs : surcharge externe ", "Surcharge d'opérateurs : surcharge interne ", "Surcharge d'opérateurs : compléments", "Transparents", "Exercices", "Complément : liste des opérateurs", "Notes de cours", "Surcharge des opérateurs", "Surcharge des opérateurs"], "title": "Surcharge des opérateurs"}, {"description": "Cette semaine nous abordons la troisième notion fondamentale de la programmation orienté objet : l'héritage.", "video": ["Héritage : concepts ", "Héritage : droit protégé ", "Héritage : masquage ", "Héritage : constructeurs (1/2)", "Héritage : constructeurs (2/2) ", "Copie profonde ", "Transparents", "Exercices", "Notes de cours", "Héritage", "Héritage"], "title": "Héritage"}, {"description": "Cette semaine nous abordons la quatrième et dernière notion fondamentale de la programmation orienté objet : le polymorphisme.", "video": ["Polymorphisme et résolution dynamique des liens ", "Polymorphisme : méthodes virtuelles ", "Masquage, substitution et surcharge ", "Classes abstraites ", "Collections hétérogènes ", "Collections hétérogènes : compléments avancés ", "Transparents", "Exercices", "Notes de cours", "Pointeurs et références : introduction ", "Références ", "Pointeurs : concept et analogie ", "Pointeurs : déclaration et opérateurs de base ", "Pointeurs : allocation dynamique", "Pointeurs «intelligents»", "Polymorphisme"], "title": " Polymorphisme"}, {"description": "Cette semaine présente comment une classe peut hériter de plusieurs classes et discute les problèmes que cela peut engendrer.", "video": ["Héritage multiple : concept et constructeurs ", "Héritage multiple : masquage ", "Classes virtuelles ", "Transparents", "Exercices", "Notes de cours", "Héritage multiple", "Dernier devoir"], "title": "Héritage multiple"}, {"description": "Nous terminons notre cours par une étude de cas détaillée qui met en lumière les différents concepts rencontrés.", "video": ["Complément : codes sources", "Etude de cas : présentation et modélisation du problème ", "Etude de cas : affichage polymorphique ", "Etude de cas : surcharge d'opérateur et première version ", "Etude de cas : modélisation des mécanismes", "Etude de cas : copie profonde ", "Transparents", "Erratum", "Exercices", "Notes de cours"], "title": "Etude de cas"}]}]