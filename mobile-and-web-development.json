[{"title": "Introduction to HTML5", "course_info": "About this course: Thanks to a growing number of software programs, it seems as if anyone can make a webpage. But what if you actually want to understand how the page was created? There are great textbooks and online resources for learning web design, but most of those resources require some background knowledge. This course is designed to help the novice who wants to gain confidence and knowledge. We will explore the theory (what actually happens when you click on a link on a webpage?), the practical (what do I need to know to make my own page?), and the overlooked (I have a page, what do I do now?). Throughout the course there will be a strong emphasis on adhering to syntactic standards for validation and semantic standards to promote wide accessibility for users with disabilities.  The textbook we use is available online, “The Missing Link: An Introduction to Web Development and Programming” by Michael Mendez from www.opensuny.org. \n\nThis course will appeal to a wide variety of people, but specifically those who would like a step-by-step description of the basics. There are no prerequisites for this course and it is assumed that students have no prior programming skills or IT experience. The course will culminate in a small final project that will require the completion of a very simple page with links and images. The focus of this course is on the basics, not appearance. You can see a sample final page at http://intro-webdesign.com/html5-plain.html.  \n\nThis is the first course in the Web Design For Everybody specialization. Subsequent courses focus on the marketable skills of styling the page with CSS3, adding interactivity with JavaScript and enhancing the styling with responsive design. You can see a sample site for the capstone course at http://intro-webdesign.com/", "target_audience": null, "created_by": "University of Michigan", "teach_by": [{"name": "Colleen van Lent, Ph.D.", "department": "School of Information"}], "package_num": "1", "package_name": "Web Design for Everybody (Basics of Web Development and Coding) Specialization ", "level": null, "rating": "4.7", "week_data": [{"title": "Week One", "description": "This week we will uncover the \"mystery\" behind the Internet.  What happens when you type a URL into your browser so that a webpage magically appears?  What is HTML5 and what happened to HTML 1 - 4?  We will also cover some practical concepts that you need to master before you begin coding your own pages. ", "video": ["Syllabus", "01.01 - Welcome to Introduction to HTML5", "Required Materials", "Optional Resources", "Help us learn more about you!", "01.02 - The Evolution of HTML", "OPTIONAL -  The browser wars", "OPTIONAL - The origins of MOSAIC", "01.03 - How it Works: The \"Magic\" of Page Requests", "Browsers", "01.04 - Looking at Your Browser Options", "01.05 - Editors: How to use an editor to create an HTML file", "Week One - HTML/Web basics"]}, {"title": "Week Two", "description": "This week you will need to take a deep breath and jump into coding.  I will cover a large number of HTML tags, but it is important that you do more than just listen to these video and read the text book material.  You need to practice (and fail!) in order to learn.     Believe it or not, once you master the basic idea of using tags and attributes you will know everything you need to use any HTML5 tag.  The page may not look the way you want it to look yet, but you will be able to  use text, links, images, tables, and even music and videos!    If you want to refer to a textbook this week for reinforcement of concepts, we will be covering Chapters 7 (again), 9, 10, 11, 13, 16, and 18.  Some of the quiz questions may come from the reading!!\n", "video": ["02.01 - The Document Object Model [DOM]", "02.02 - HTML5 Tags and Syntax", "02.03 - Semantic Tags", "02.04 - Template Page", "02.05 - Images", "02.06 - Hyperlinks", "02.07 - Multimedia", "02.08 - Tables", "02.09 - Useful Tags", "Tags!"]}, {"title": "Week Three", "description": "Okay, you created a file...what now?  This week we will begin by covering the important but often overlooked concepts of validation and accessibility.  Did you follow the DOM structure when you created your page?  Did you use semantic tags to make sure that page viewers can access all of the information, even if they have physical or cognitive disabilities?   This is knowledge you can use if you would like to pursue a career as a web accessibility specialist.  Finally I will briefly cover the steps needed to post your site to the web.  There are many free and paid services that you can use to get your work off your computer and on to the Internet.  ", "video": ["03.01 - Accessibility", "03.02 - Validating Your Site", "Optional - Validation Article", "Putting Your Code Out on to the Web", "03.03 - Hosting Your Site", "03.04 - cPanel", "03.05 - Using Secure File Transfer Protocol", "Final Project Description", "03.06 - Final Project Demo", "The Final Exam has changed.", "Congratulations!", "03.07 - Closing", "Watch for a link to more material", "Post-course Survey", "Hosting and Validation", "Final Project - Put it Together"]}]}, {"title": "Build Your First Android App (Project-Centered Course)", "course_info": "About this course: What you’ll achieve:\n\nIn this project-centered course*, you’ll design, build, and distribute your own unique application for the Android mobile platform. We’ll provide you with a set of customizable building blocks that you can assemble to create many different types of apps, and that will help you become familiar with many important specificities of Android development. When you complete the project, in addition to having a personalized app that you can use and share, you’ll have the skills and background you need to move on to more advanced coursework in Android development. \n\n What you’ll need to get started:\n\nThis project-centered course is designed for learners who have some prior experience programming in Java, such as an introductory college course or Coursera’s Java Programming Specialization (https://www.coursera.org/specializations/java-programming).\n\nYou will need a computer with a stable Internet connection, but you will not need an Android phone - we’ll use free software that you can use to emulate a phone on your computer. We'll use Android Studio as IDE; it is compatible with most computer and operating systems. You can find detailed system requirements here: https://developer.android.com/sdk/index.html#Requirements.\n\n*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share. \n\nTime: 10 hours of study, 10 hours of active project work", "target_audience": null, "created_by": "CentraleSupélec", "teach_by": [{"name": "Dr. Virginie Galtier", "department": "Computer Science"}, {"name": "Michel Ianotto ", "department": "Computer Science"}], "package_num": null, "package_name": null, "level": null, "rating": "4.3", "week_data": [{"title": "Introduction", "description": "This module presents our pedagogic approach and demonstrates the kind of applications you will be able to build at the end of the course.", "video": ["Overview of the Course", "Overview of the Course", "Course’s Grading Policy", "Who are you? ", "Your Motivation(s)", "Hello, World!", "About the Exemplars", "Music Tutor App", "MOOC Motivation App", "Birth Date App", "What is a \"good\" app?"]}, {"title": "Create the Storyboard for Your Application", "description": "In this module you will design your personalized app from a user's perspective. We will show you elements you can combine in your design, and how to  document it to get feedback from prospective users or to organize your thoughts. If you get stuck on the quiz or peer-reviewed assignment, you should post on the Discussion Forum to ask for help. And if you finish early, we hope you'll go there to help your fellow classmates as well. To get started, please jump into the first lesson below!", "video": ["What will you do in this module?", "Some components of the graphical user interface", "Layout: organize the views on your screens", "Add actions", "Quiz about Activities and GUI", "Notice about source code", "Block 1: Buttons and Toast", "Can you come up with an idea of application which uses only buttons and pop-up messages?", "Block 2: Clickable List in two Languages", "Block 3: Layouts", "Block 4: Playing Sounds (and Using a Switch)", "Block 5: Saving Preferences (and Radio Buttons)", "Block 6: Images (and Slider)", "Block 7: Web Pages", "Block 8: From one activity to the next", "Block 9: SMS", "Look for the building blocks in the Coursera app", "Wireframes, Mockups and Prototypes", "Favorite Tools?", "Quiz about Application Design", "General Rubric: Qualities of an Android App", "Your first application design"]}, {"title": "Install Tools, Create HelloWorld App", "description": "This module guides you in the development of an Android application using the Android Studio Integrated Development Environment (IDE). First it points you to the right place to install the Android Studio IDE and the Android Software Development Kit (SDK). Next it walks you through the steps of using them to create a basic \"Hello World\" application and it describes how to transfer the application for execution on a physical Android device and on an emulator. At the end of the module you will be familiar with Android tools.", "video": ["Create your first basic application with Android Studio", "Basic Knowledge about Android"]}, {"title": "Build Your First Interactive Application", "description": "In this module you associate for the first time a graphical user interface with an activity controlling it, resulting in a first interactive application. We will re-use this same schema next week when developing the 9 apps presented in week 2 (and so will your personalized app). ", "video": ["Create an interactive application", "Create an interactive application", "Code the \"km-miles conversion\" app"]}, {"title": "Toward Your Application, Step-By-Step", "description": "This module spans 2 weeks. This week, we walk you step by step in the development of 5 of the basic building blocks.", "video": ["How to use these lessons", "Block 1 Step-by-Step: part 1", "Source code for block 1 - part 1", "Block 1 Step-by-Step: part 2", "Source code for block 1 - part 2", "Block 1 Step-by-Step: part 3", "Source code for block 1 - part 3", "block 1", "Block 2 Step-by-Step", "Source code for block 2", "block 2", "Block 3 Step-by-Step", "Source code for block 3", "block 3: layouts", "Block 4 Step-by-Step", "Source code for block 4", "block 4", "Block 5 Step-by-Step", "Source code for block 5", "block 5"]}, {"title": "Transform Your Storyboard Into Actual Application", "description": "In this second part of the module, we develop the remaining 4 basic building blocks. All you have to do after that is to combine them to transform your idea of application into executable code!", "video": ["Block 6 Step-by-Step", "Source code for block 6", "block 6", "Block 7 Step-by-Step", "Source code for block 7", "block 7", "Block 8 Step-by-Step", "Source code for block 8", "block 8", "Warning", "Block 9 Step-by-Step", "Source code for block 9", "block 9", "Activity Life Cycle (and Crtl+F11, and telnet to emulator)", "Log", "Life Cycle and Log", "Final Quiz", "Code Your Application!"]}]}, {"title": "Programming Foundations with JavaScript, HTML and CSS", "course_info": "About this course: Learn foundational programming concepts (e.g., functions, for loops, conditional statements) and how to solve problems like a programmer. In addition, learn basic web development as you build web pages using HTML, CSS, JavaScript. By the end of the course, will create a web page where others can upload their images and apply image filters that you create.\n\nAfter completing this course, you will be able to:\n1. Think critically about how to solve a problem using programming;\n2. Write JavaScript programs using functions, for loops, and conditional statements;\n3. Use HTML to construct a web page with paragraphs, divs, images, links, and lists;\n4. Add styles to a web page with CSS IDs and classes; and\n5. Make a web page interactive with JavaScript commands like alert, onClick, onChange, adding input features like an image canvas, button, and slider.", "target_audience": "Who is this class for: This course is for anyone interested in taking their first step toward a career in computer programming. Learners with no prior experience are encouraged to take this course! In addition, this is the first course of the Java Programming and Software Engineering Fundamentals Specialization, providing learners the programming fundamentals they will need to successfully complete the course series and the web development portion of the capstone project\f.", "created_by": "Duke University", "teach_by": [{"name": "Susan H. Rodger", "department": "Computer Science"}, {"name": "Robert Duvall", "department": "Computer Science"}, {"name": "Owen Astrachan", "department": "Computer Science"}, {"name": "Andrew D. Hilton", "department": "Electrical and Computer Engineering"}], "package_num": "1", "package_name": "Java Programming and Software Engineering Fundamentals Specialization ", "level": "Beginner", "rating": "4.5", "week_data": [{"title": "Welcome", "description": "Welcome! In this module, you will be introduced to this course's approach to teaching the basics of programming, from building web pages, to writing programs with JavaScript, to making web pages interactive.", "video": ["Course Overview", "A Student's Perspective on Learning Programming", "Resources to Help You Succeed", "Tips for Learning Programming", "Using Forums: How to Ask for Help Effectively", "Module Feedback Surveys"]}, {"title": "Designing a Web Page with HTML and CSS", "description": "In this module, you will learn the basics of HTML and CSS to design a web page. Over the course of the module you will build your first web page!", "video": ["Using CodePen", "Try It! Create Your CodePen Account", "What Is HTML?", "Metadata and Sectioning Elements", "Try It! Build a “My Interests” Web Page", "Asking for Help in the Forums", "Formatting Text and Nesting Tags", "Try It! Format Text", "Adding Images and Links", "Images and Storage", "Try It! Add Links and Images", "Lists and Tables", "Try It! Create Lists and Tables", "Using HTML", "How CSS Is Used to Design Web Pages", "CSS Basics", "Try It! Style Your Web Page with CSS", "Colors and Names in CSS", "Try It! Customize Your Web Page’s Colors", "Share your “My Interests” Web Page", "Styling with CSS", "End of Module Survey", "Designing a Web Page with HTML and CSS"]}, {"title": "Algorithms and Programming Concepts", "description": "", "video": ["Introduction", "Everything Is a Number", "How Is That a Number?", "Developing an Algorithm", "A Seven Step Approach to Solving Programming Problems", "Solving Programming Problems", "Variables", "Methods", "Functions", "Types", "DukeLearnToProgram Environment", "Try It! Using Variables, Methods and Functions", "For Loops", "Try It! Using For Loops", "Conditional Execution", "Programming Exercise: Modifying Images", "Modifying Images with JavaScript", "Translating to Code", "Thinking Critically about Your Program", "Finding Bugs in Code", "Programming Exercise: Advanced Modifying Images", "Debugging Your Code", "End of Module Survey", "Overview of Programming Concepts"]}, {"title": "JavaScript for Web Pages", "description": "", "video": ["Introduction", "Buttons with Divs", "Try It! Buttons with Divs", "Changing Pages Interactively", "Try It! Change Pages Interactively", "Using HTML5 Canvas", "Try It! Canvas", "Inputs and Events", "Try It! Inputs and Events", "Event-Driven Programming", "Upload and Display an Image", "Try It! Upload and Display an Image", "Convert Image to Grayscale", "Try It! Convert an Image to Grayscale", "Moving to CodePen", "Try It! Green Screen Online", "End of Module Survey", "Interactive Web Pages"]}, {"title": "MiniProject: Image Filters on the Web", "description": "", "video": ["Introduction", "MiniProject Part 1", "MiniProject Part 2", "MiniProject Challenge", "End of Module Survey", "Extra Challenge", "Steganography Part I", "Steganography Part II", "Steganography math", "Steganography Part III", "Steganography Review", "Steganography Coding Example", "Steganography: Programming Exercise Guide", "Review of HTML, CSS, and JavaScript", "Steganography"]}]}, {"title": "Introduction to Structured Query Language (SQL)", "course_info": "About this course: In this course, you'll walk through installation steps for installing a text editor, installing MAMP or XAMPP (or equivalent) and creating a MySql Database. You'll learn about single table queries and the basic syntax of the SQL language, as well as database design with multiple tables, foreign keys, and the JOIN operation. Lastly, you'll learn to model many-to-many relationships like those needed to represent users, roles, and courses.", "target_audience": "Who is this class for: Students with interest, but no experience in structured query language (SQL) or database design", "created_by": "University of Michigan", "teach_by": [{"name": "Charles Severance", "department": "School of Information"}], "package_num": "2", "package_name": "Web Applications for Everybody Specialization ", "level": "Intermediate", "rating": "4.8", "week_data": [{"title": "Installing PHP and SQL", "description": "Our first technical task is to work through the installation steps including installing a text editor, installing MAMP or XAMPP (or equivalent), creating a MySql Database, and writing a PHP program.", "video": ["Textbook & Course Resources", "Welcome to the Course", "Installing MAMP on a Macintosh", "Installing MAMP on Windows 10", "Installing XAMPP on Windows 10", "Installing LAMP On Linux", "Your Database Experience", "Assignment Specifications: Installing PHP/MySQL", "Peer Graded: Installing PHP/MySQL"]}, {"title": "Introduction to Structured Query Language (SQL)", "description": "We learn about single table queries and the basic syntax of the SQL language.", "video": ["Overview of Databases", "Basic SQL Operations", "Data Types in SQL", "Database Keys and Indexes", "Bonus: Liz Fong - Standardizing SQL", "SQL Queries", "Assignment Specifications: Single-Table SQL", "Autograder: Single-table SQL (Users)"]}, {"title": "Database Design", "description": "Covering database design with multiple tables, foreign keys, and the JOIN operation..\n", "video": ["Relational Database Design", "Normalization and Foreign Keys", "Building a Physical Data Schema", "Relational Database Design #4", "Database Models", "Assignment Specifications", "Peer Grader: Multi-Table Databases (Tracks)"]}, {"title": "Many-To-Many", "description": "We learn how to model many-to-many relationships like those needed to represent users, roles, and courses.", "video": ["Many-to-Many Relationships", "Assignment Specifications: Many-to-Many Databases", "Autograder: Many-to-Many Databases"]}]}, {"title": "How To Create a Website in a Weekend! (Project-Centered Course)", "course_info": "About this course: What you’ll achieve:\n\nIn this project-centered course*, you’ll design, build, and publish a basic website that incorporates text, sound, images, hyperlinks, plug-ins, and social media interactivity. We’ll provide you with step-by-step instructions, exercises, tips, and tools that enable you to set up a domain name, create an attractive layout for your pages, organize your content properly, ensure that your site functions well across different operating systems and on mobile devices, keep your site safe, and finally, let people know your site is online. We’ll even show you how to track your visitors. Throughout the course, you'll engage in collaboration and discussion with other learners through course forums and peer review.\n\nOnce you complete your first website project using Wordpress, you can move on to our optional, extended module that covers more advanced techniques such as using a simple text editor, coding in HTML, CSS, and Javascript, and more.\n\nWhat you’ll need to get started:\n\nThis project-centered course is designed for learners who have little or no prior experience developing a web site. You will need a computer with a stable Internet connection. We’ll use Wordpress to get you started, provide lots of downloadable examples, and guide you through the process of giving and receiving constructive peer-to-peer feedback.\n\n*About Project-Centered Courses: Project-centered courses are designed to help you complete a personally meaningful real-world project, with your instructor and a community of learners with similar goals providing guidance and suggestions along the way. By actively applying new concepts as you learn, you’ll master the course content more efficiently; you’ll also get a head start on using the skills you gain to make positive changes in your life and career. When you complete the course, you’ll have a finished project that you’ll be proud to use and share.", "target_audience": null, "created_by": "The State University of New York", "teach_by": [{"name": "Dr.  Margaret Anne Schedel", "department": "Music"}, {"name": "Melissa Clarke", "department": null}], "package_num": null, "package_name": null, "level": null, "rating": "3.3", "week_data": [{"title": "Module 1: Prepping Your Site", "description": "In Module 1 you will learn the mechanics of the internet, and start planning your own site. You'll articulate a purpose for your design and pick fonts and a color scheme to match. We won't use Wordpress yet; next module you will learn how to create your vision on the web.", "video": ["Module 1 Introduction", "Important Note about Course Deadlines and Timing", "Working with the Internet", "Getting Ready", "Website Design Discussion", "DESIGN", "Instructions for Assignment 1: Finding Inspiration", "Assignment 1 Discussion: Finding Inspiration", "Instructions for Assignment 2: Create a Mood Board", "Assignment 2 Discussion: Creating your Mood board  ", "Assignment 1: Find Inspiration", "Assignment 2: Create a Mood Board  "]}, {"title": "Module 2: Starting to work with Wordpress", "description": "Module 2 contains the bulk of the work for this course. In this module you'll create an outline for your site, set up Wordpress, choose a theme and publish your first page. Then we'll show you how to add links to other pages on the internet.", "video": ["Module 2 Introduction", "Mapping your Site", "Create and Customize ", "Adding Media", "Linking", "Innovative Organization Discussion", "ORGANIZING", "Instructions for Assignment 3: Create a Sitemap", "Assignment 3 Discussion: Creating your Sitemap", "Instructions for Assignment 4: Create your Homepage", "Assignment 4 Discussion: Creating your Homepage", "Instructions for Assignment 5: Add Hyperlinks", "Assignment 5 Discussion: Adding Hyperlinks ", "Assignment 3: Create a Sitemap", "Assignment 4: Create your Homepage", "Assignment 5: Add Hyperlinks"]}, {"title": "Module 3: Add Media, Social Media and Launch", "description": "In Module 3 you'll add media such as images, videos and sound to your site. You'll also learn how to incorporate social media. Once you're happy with your site, you'll test it on mobile platforms and multiple browsers before you go public and start counting the visitors to your site.", "video": ["Introduction to Module 3", "Lesson 7 - Plugins", "Lesson 8 - Finishing Touches ", "Social Media Discussion", "MEDIA & SOCIAL MEDIA", "Instructions for Assignment 6: Add Media and Social Media", "Assignment 6 Discussion: Adding Media & Social Media", "Instructions for Assignment 7: Complete Homepage, & Add More Pages", "Assignment 7: Complete Homepage, & Add More Pages", "Assignment 7: Completing your Homepage and More", "Instructions for Assignment 8: Check Compatibility Across Platforms", "Assignment 8 Discussion: Checking Compatibility ", "Instructions for Assignment 9: Go Public!", "Assignment 9 Discussion: Going Public", "Assignment 6: Add Media and Social Media", "Assignment 8: Check Compatibility Across Platforms", "Assignment 9: Go Public!"]}, {"title": "Module 4: Go Deeper with Further Customization", "description": "Module 4 contains more resources for you to customize your site, with some information about backend programming such as CSS and HTML. We will be adding more resources as we (and some Coursera web developers) create them.  ", "video": ["Introduction to Module 4", "Principles of Good Web Design, Part I (Guest Lecture: Melody Kim, Coursera)", "Principles of Good Web Design, Part II (Guest Lecture: Melody Kim, Coursera)", "How to Use Your Web Browser to Inspect Website Elements (Guest Lecture: Archana Sankaranarayanan, Coursera)", "Using Browser Extensions to Learn About Font and Color (Guest Lecture: Archana Sankaranarayanan, Coursera)", "Font Color, Size and Family (Guest Lecture: Joel Aguero, Coursera)", "Color on the Web (Guest Lecture: Joel Aguero, Coursera)", "Images on the Web (Guest Lecture: Joel Aguero, Coursera)"]}]}, {"title": "HTML, CSS, and Javascript for Web Developers", "course_info": "About this course: Do you realize that the only functionality of a web application that the user directly interacts with is through the web page? Implement it poorly and, to the user, the server-side becomes irrelevant! Today’s user expects a lot out of the web page: it has to load fast, expose the desired service, and be comfortable to view on all devices: from a desktop computers to tablets and mobile phones.\n\nIn this course, we will learn the basic tools that every web page coder needs to know. We will start from the ground up by learning how to implement modern web pages with HTML and CSS. We will then advance to learning how to code our pages such that its components rearrange and resize themselves automatically based on the size of the user’s screen. You’ll be able to code up a web page that will be just as useful on a mobile phone as on a desktop computer. No “pinch and zoom” required! Last but certainly not least, we will get a thorough introduction to the most ubiquitous, popular, and incredibly powerful language of the web: Javascript. Using Javascript, you will be able to build a fully functional web application that utilizes Ajax to expose server-side functionality and data to the end user.", "target_audience": "Who is this class for: WE ARE NOT COVERING RUBY ON RAILS IN THIS COURSE AND NO RUBY ON RAILS KNOWLEDGE IS REQUIRED TO COMPLETE IT!\n\nThis course is geared to ANYONE who is interested in starting in Web Development. It starts with the basics and methodically goes to a fair amount of depth on each of the subjects. Most importantly, it allows the students to follow a real-world project with a real client from beginning of talking to the customer to fully coding their website. The portion on Javascript does require you to be at least familiar with some programming concepts like looping, variable storage, etc.", "created_by": "Johns Hopkins University", "teach_by": [{"name": "Yaakov Chaikin", "department": "Whiting School of Engineering"}], "package_num": "4", "package_name": "Ruby on Rails Web Development Specialization ", "level": null, "rating": "4.9", "week_data": [{"title": "Introduction to HTML5", "description": "In this module we will learn the basics of HTML5. We'll start with instructional videos on how to set up your development environment, go over HTML5 basics like valid document structure, which elements can be included inside other elements and which can not, discuss the meaning and usefulness of HTML5 semantic tags, and go over essential HTML5 tags.", "video": ["Course Introduction", "How Grading and Being Late on Assignments Works", "Recommended Books", "CHECK OUT MY SITE!", "ALL of the EXAMPLE SOURCE CODE for this Course", "Optional Practice Quiz", "Welcome to Module 1: Introduction to HTML5", "Development Environment Setup, Part 1", "Development Environment Setup, Part 2: MacOS", "Development Environment Setup, Part 2: Windows", "Optional Practice Quiz", "Development Environment Setup, Part 3: Github and Browser Sync", "Resources for Asking Questions", "Lecture 1: What is HTML?", "Optional Practice Quiz", "Lecture 2: Relevant History of HTML", "Optional Practice Quiz", "Lecture 3: Anatomy of an HTML Tag", "Optional Practice Quiz", "Lecture 4: Basic HTML Document Structure", "Optional Practice Quiz", "Lecture 5: HTML Content Models", "Optional Practice Quiz", "Lecture 6: Heading Elements (and some new HTML5 semantic comments)", "Optional Practice Quiz", "Lecture 7: Lists", "Lecture 8: HTML Character Entity References", "Optional Practice Quiz", "Lecture 9: Creating Links", "Optional Practice Quiz", "Lecture 10: Displaying Images", "Frequently Asked Questions", "Optional Practice Quiz", "CONNECT WITH ME!", "Module 1 Wrap-Up", "Module 1 Quiz"]}, {"title": "Introduction to CSS3", "description": "A lot of people \"tinker\" with CSS. In this module, we'll take you from the very basics of CSS3 to some fairly advanced concepts like floating and CSS rule conflict resolution. We'll go over the 'box model', background property, etc. We'll finish off the module with learning about Responsive Design using our own CSS code as well as start introducing Twitter Bootstrap with its essential Grid System.", "video": ["Welcome to Module 2: Introduction to CSS3", "Recommended Books", "ENTER RAFFLE (ends April 23rd, 2017)", "Lecture 11: Power of CSS", "Lecture 12: Anatomy of a CSS Rule", "Optional Practice Quiz", "Lecture 13: Element, Class, and ID Selectors", "Optional Practice Quiz", "Lecture 14: Combining Selectors", "Optional Practice Quiz", "Lecture 15: Pseudo-Class Selectors", "Optional Practice Quiz", "Lecture 16: Style Placement", "Optional Practice Quiz", "Lecture 17, Part 1: Conflict Resolution", "Lecture 17, Part 2: Conflict Resolution", "Optional Practice Quiz", "Lecture 18, Part 1: Styling Text", "Lecture 18, Part 2: Styling Text", "CONNECT WITH ME!", "Optional Practice Quiz", "Lecture 19, Part 1: The Box Model", "Lecture 19, Part 2: The Box Model", "Lecture 19, Part 3: The Box Model", "Optional Practice Quiz", "Lecture 20: The background Property", "Optional Practice Quiz", "Lecture 21: Positioning Elements by Floating", "Optional Practice Quiz", "Lecture 22, Part 1: Relative and Absolute Element Positioning", "Lecture 22, Part 2: Relative and Absolute Element Positioning", "Optional Practice Quiz", "Lecture 23, Part 1: Media Queries", "Lecture 23, Part 2: Media Queries", "Optional Practice Quiz", "Lecture 24, Part 1: Responsive Design", "Lecture 24, Part 2: Responsive Design", "Optional Practice Quiz", "Lecture 25, Part 1: Introduction to Twitter Bootstrap", "Lecture 25, Part 2: Introduction to Twitter Bootstrap", "Lecture 26, Part 1: The Bootstrap Grid System", "Lecture 26, Part 2: The Bootstrap Grid System", "Optional Practice Quiz", "Frequently Asked Questions", "Module 2 Wrap-Up", "Module 2 Coding Assignment"]}, {"title": "Coding the Static Restaurant Site", "description": "Ready for some REAL fun? This module is it! We'll go over some basics of interacting with a client when managing a web site project and then go visit a real client at their place of business (a Chinese restaurant), help the owner figure out what she wants in a site, and get acquainted with the restaurant in general. We'll spend the rest of the module building a real web site for this business from scratch and you'll get to sit next to me and watch as the site comes together.", "video": ["Welcome to Module 3: Coding the Static Restaurant Site", "Recommended Books", "Lecture 27, Part 1: Visit with the Client", "Lecture 27, Part 2: Visit with the Client (Field Trip)", "ENTER RAFFLE (ends April 23rd, 2017)", "Lecture 28: Design Overview", "Lecture 29: Some Ground Rules and Overview of Setup", "Optional Practice Quiz", "Lecture 30, Part 1: Coding Basics of Navbar Header", "Lecture 30, Part 2: Coding Basics of Navbar Header", "Optional Practice Quiz", "Lecture 31: Coding Button for Future Collapsible Menu", "Optional Practice Quiz", "Lecture 32, Part 1: Coding Nav Menu Buttons", "Lecture 32, Part 2: Coding Nav Menu Buttons", "Lecture 33, Part 1: Fixing Navbar Layout, Text, and Dropdown Menus", "Lecture 33, Part 2: Fixing Navbar Layout, Text, and Dropdown Menus", "Lecture 34: Coding the Jumbotron", "Optional Practice Quiz", "Lecture 35, Part 1: Coding Navigation Tiles", "Lecture 35, Part 2: Coding Navigation Tiles", "Lecture 36, Part 1: Coding the Footer", "Lecture 36, Part 2: Coding the Footer", "Optional Practice Quiz", "Lecture 37, Part 1: Coding the Menu Categories", "Lecture 37, Part 2: Coding the Menu Categories", "Lecture 38, Part 1: Coding the Single Menu Category Page", "Lecture 38, Part 2: Coding the Single Menu Category Page", "Lecture 38, Part 3: Coding the Single Menu Category Page", "Lecture 39: Testing the Mobile Version on a Real Phone", "Frequently Asked Questions", "Module 3 Wrap-Up", "Module 3 Coding Assignment"]}, {"title": "Introduction to Javascript", "description": "What fun would a web site be if there was no functionality to it? In this module, we are going to concentrate on learning the fundamentals of the Javascript language. A lot of even seasoned developers “tinker” with Javascript without really understanding how the language works. That leads to viewing the language as more of a nuisance instead of a powerful tool. That is why we are going to concentrate not only on the “how” but also on the “why”, so you are empowered by the Javascript language features, not confused by them. We’ll cover just about everything - from common language constructs and Javascript types to objects, functions, arrays, closures, and scope isolation.", "video": ["Welcome to Module 4: Introduction to Javascript", "Recommended Books", "Lecture 40, Part 1: Adjusting Development Environment for Javascript Development", "Lecture 40, Part 2: Where to Place Javascript Code", "Lecture 41, Part 1: Defining Variables, Function, and Scope", "Lecture 41, Part 2: Defining Variables, Function, and Scope", "Optional Practice Quiz", "Lecture 42, Part 1: Javascript Types", "Lecture 42, Part 2: Javascript Types", "Optional Practice Quiz", "Lecture 43, Part 1: Common Language Constructs", "Lecture 43, Part 2: Common Language Constructs", "Lecture 43, Part 3: Common Language Constructs", "Lecture 44: Handling Default Values", "Optional Practice Quiz", "Lecture 45, Part 1: Creating Objects Using 'new Object()' Syntax", "Lecture 45, Part 2: Creating Objects Using Object Literal Syntax", "Optional Practice Quiz", "Lecture 46: Functions Explained", "Optional Practice Quiz", "Lecture 47, Part 1: Passing Variables by Value vs. by Reference", "Lecture 47, Part 2: Passing Variables by Value vs. by Reference", "Optional Practice Quiz", "Lecture 48: Function Constructors, prototype, and the 'this' Keyword", "Lecture 49: Object Literals and the 'this' Keyword", "ENTER RAFFLE (ends April 23rd, 2017)", "Optional Practice Quiz", "Lecture 50, Part 1: Arrays", "Lecture 50, Part 2: Arrays", "Optional Practice Quiz", "Lecture 51: Closures", "Lecture 52, Part 1: Fake Namespaces", "Lecture 52, Part 2: Immediately Invoked Function Expressions (IIFEs)", "Optional Practice Quiz", "Frequently Asked Questions", "Module 4 Wrap-Up", "Module 4 Coding Assignment"]}, {"title": "Using Javascript to Build Web Applications", "description": "In this module, we are going to take all those newly learned Javascript language skills and learn how to utilize them within the context of a web page. We’ll start by learning how to properly manipulate the web page components using the Javascript Document Object Model API. We will then move on to learning one of the most popular ways of serving up data to a web site - Ajax. We'll learn about the protocol that the language of the web speaks in (HTTP), how to set up and handle Ajax requests and responses, as well as how to process JSON data. We'll finish the module by connecting our restaurant web site from Module 3 to a real backend service that will allow us to pull the data for the restaurant menu dynamically from the server without having to reload the entire page.", "video": ["Welcome to Module 5: Using Javascript to Build Web Applications", "Recommended Books", "Lecture 53, Part 1: DOM Manipulation", "Lecture 53, Part 2: DOM Manipulation", "Lecture 54: Handling Events", "Lecture 55: The 'event' Argument", "CONNECT WITH ME!", "Optional Practice Quiz", "Lesson 56: HTTP Basics", "Lesson 57, Part 1: Ajax Basics", "Lesson 57, Part 2: Ajax Basics", "Lesson 57, Part 3: Ajax Basics", "Optional Practice Quiz", "Lecture 58: Processing JSON", "Optional Practice Quiz", "Lecture 59: Fixing Mobile Nav Menu Automatic Collapse", "Lecture 60: Dynamically Loading Home View Content", "Lecture 61, Part 1: Dynamically Loading Menu Categories View", "Lecture 61, Part 2: Dynamically Loading Menu Categories View", "Lecture 62: Dynamically Loading Single Category View", "Lecture 63: Changing 'active' Button Style Through Javascript", "Check out the final deployed site", "Frequently Asked Questions", "ENTER RAFFLE (ends April 23rd, 2017)", "Course Wrap-Up", "CONNECT WITH ME!", "Module 5 Coding Assignment"]}]}, {"title": "Front-End Web UI Frameworks and Tools: Bootstrap 4", "course_info": "About this course: This course will give you an overview of client-side web UI frameworks, in particular Bootstrap 4. You will learn about grids and responsive design, Bootstrap CSS and JavaScript components. You will learn about CSS preprocessors, Less and Sass. You will also learn the basics of Node.js and NPM and task runners like Grunt and Gulp.\nAt the end of this course, you will be able to a)Set up, design and style a web page using Bootstrap 4 and its components, b) Create a responsive web page design, and c) Make use of web tools to setup and manage web sites.\nThis course also includes an honors track that enables you to work on your own project developing a website using Bootstrap 4.\nStudents enrolling in this course should have prior good working knowledge of HTML, CSS and JavaScript.", "target_audience": "Who is this class for: This course is aimed at students who have prior working knowledge of HTML, CSS and JavaScript.", "created_by": "The Hong Kong University of Science and Technology", "teach_by": [{"name": "Jogesh K. Muppala", "department": "Department of Computer Science and Engineering"}], "package_num": "1", "package_name": "Full Stack Web and Multiplatform Mobile App Development Specialization ", "level": "Intermediate", "rating": "4.8", "week_data": [{"title": "Front-end Web UI Frameworks Overview: Bootstrap", "description": "This module gives you a quick introduction to full-stack web development and the outline of the course. Then you will learn the basics of Bootstrap, setting up a web project using Bootstrap. You will learn about responsive design and the Bootstrap grid system. At the end of this module, you need to complete your first assignment.", "video": ["Front-End Web UI Frameworks and Tools: Bootstrap 4: Course Overview", "How to Use the Learning Resources", "Full Stack Web Development: The Big Picture: Objectives and Outcomes", "What is Full-Stack Web Development?", "Full Stack Web Development: Additional Resources", "Setting up Your Development Environment: Git and Node: Objectives and Outcomes", "Setting up your Development Environment", "Exercise (Video): Setting up Git", "Exercise (Instructions): Setting up Git", "Exercise (Video): Basic Git Commands", "Exercise (Instructions): Basic Git Commands", "Exercise (Video): Online Git Repositories", "Exercise (Instructions): Online Git Repositories", "Node.js and NPM", "Exercise (Video): Setting up Node.js and NPM", "Exercise (Instructions): Setting up Node.js and NPM", "Exercise (Video): Basics of Node.js and NPM", "Exercise (Instructions): Basics of Node.js and NPM", "Setting up your Development Environment: Git and Node: Additional Resources", "Introduction to Bootstrap: Objectives and Outcomes", "Front-end Web UI Frameworks", "Introduction to Bootstrap", "Exercise (Video): Getting Started with Bootstrap", "Exercise (Instructions): Getting Started with Bootstrap", "Introduction to Bootstrap: Additional Resources", "Responsive Design and Bootstrap Grid System: Objectives and Outcomes", "Responsive Design", "Bootstrap Grid System", "Exercise (Video): Responsive Design and Bootstrap Grid System Part 1", "Exercise (Instructions): Responsive Design and Bootstrap Grid System Part 1", "Exercise (Video): Responsive Design and Bootstrap Grid System Part 2", "Exercise (Instructions): Responsive Design and Bootstrap Grid System Part 2", "Responsive Design and Bootstrap Grid System: Additional Resources", "Assignment 1 Requirements (Video)", "Assignment 1 Resources", "Ideation: Objectives and Outcomes", "Ideation Report Template", "Ideation: Additional Resources", "Assignment 1: Bootstrap and Responsive Design", "Ideation"]}, {"title": "Bootstrap CSS Components", "description": "This module concentrates on Bootstrap's components that are designed using pure CSS classes.  You will learn about Navigation and Navigation bar. Then, you will learn about buttons, forms, tables, cards, images and media, tags, alerts and progress bars. At the end of this module you need to complete your second assignment.", "video": ["Navigation and Navigation Bar: Objectives and Outcomes", "Navigation and Navigation Bar", "Exercise (Video): Navbar and Breadcrumbs", "Exercise (Instructions): Navbar and Breadcrumbs", "Icon Fonts", "Exercise (Video): Icon Fonts", "Exercise (Instructions): Icon Fonts", "Navigation and Navigation Bar: Additional Resources", "User Input: Buttons and Forms: Objectives and Outcomes", "User Input", "Exercise (Video): Buttons", "Exercise (Instructions): Buttons", "Exercise (Video): Forms", "Exercise (Instructions): Forms", "User Input: Additional Resources", "Displaying Content: Tables and Cards: Objectives and Outcomes", "Bootstrap Tables and Cards", "Exercise (Video): Displaying Content: Tables and Cards", "Exercise (Instructions): Displaying Content: Tables and Cards", "Displaying Content: Additional Resources", "Images and Media: Objectives and Outcomes", "Images and Media", "Exercise (Video): Images and Media", "Exercise (Instructions): Images and Media", "Images and Media: Additional Resources", "Alerting Users: Objectives and Outcomes", "Alerting Users", "Exercise (Video): Alerting Users", "Exercise (Instructions): Alerting Users", "Alerting Users: Additional Resources", "Assignment 2: Bootstrap CSS Components", "Assignment 2: Resources", "UI Design and Prototyping: Objectives and Outcomes", "UI Design and Prototyping Report Template", "UI Design and Prototyping: Additional Resources", "Assignment 2: Bootstrap CSS Components", "UI Design and Prototyping"]}, {"title": "Bootstrap Javascript Components", "description": "This module concentrates on Bootstrap's JavaScript based components. You will learn about tabs, pills and tabbed navigation, collapse, accordion, scrollspy, affix, tooltips, popovers, modals and the carousel. At the end of this module you need to complete the third assignment.", "video": ["Bootstrap JavaScript Components: Objectives and Outcomes", "Bootstrap JavaScript Components", "Bootstrap JavaScript Components: Additional Resources", "Tabs and Tabbed Navigation: Objectives and Outcomes", "Tabs, Pills and Tabbed Navigation", "Exercise (Video): Tabs", "Exercise (Instructions): Tabs", "Tabs and Tabbed Navigation: Additional Resources", "Hide and Seek: Objectives and Outcomes", "Collapse and Accordion", "Exercise (Video): Accordion", "Exercise (Instructions): Accordion", "Hide and Seek: Additional Resources", "Revealing Content: Objectives and Outcomes", "Tooltips, Popovers and Modals", "Exercise (Video): Tooltips and Modals", "Exercise (Instructions): Tooltips and Modals", "Revealing Content: Additional Resources", "Carousel: Objectives and Outcomes", "Carousel", "Exercise (Video): Carousel", "Exercise (Instructions): Carousel", "Carousel: Additional Resources", "Assignment 3: Bootstrap JavaScript Components", "Assignment 3: Resources", "Assignment 3: Bootstrap JavaScript Components"]}, {"title": "Web Tools", "description": "This module rounds out our discussions on Bootstrap JavaScript components. Then we discuss CSS preprocessors, Less and Sass. Finally, we discuss building and deployment of our Web projects through task automation using NPM scripts, and task runners like Grunt and Gulp. The final assignment of this course needs to be completed at the end of this module.", "video": ["Bootstrap and JQuery: Objectives and Outcomes", "Bootstrap and JQuery", "Exercise (Video): Bootstrap and JQuery", "Exercise (Instructions): Bootstrap and JQuery", "Exercise (Video): More Bootstrap and JQuery", "Exercise (Instructions): More Bootstrap and JQuery", "Bootstrap and JQuery: Additional Resources", "CSS Preprocessors: Objectives and Outcomes", "CSS Preprocessors: Less and Sass", "Exercise (Video): Less", "Exercise (Instructions): Less", "Exercise (Video): Scss", "Exercise (Instructions): Scss", "CSS Preprocessors: Additional Resources", "Building and Deployment: Objectives and Outcomes", "Building and Deployment", "NPM Scripts", "Exercise (Video): NPM Scripts Part 1", "Exercise (Instructions): NPM Scripts Part 1", "Exercise (Video): NPM Scripts Part 2", "Exercise (Instructions): NPM Scripts Part 2", "Building and Deployment: NPM Scripts: Additional Resources", "Building and Deployment: Task Runners", "Task Runners", "Exercise (Video): Grunt Part 1", "Exercise (Instructions): Grunt Part 1", "Exercise (Video): Grunt Part 2", "Exercise (Instructions): Grunt Part 2", "Exercise (Video): Gulp Part 1", "Exercise (Instructions): Gulp Part 1", "Exercise (Video): Gulp Part 2", "Exercise (Instructions): Gulp Part 2", "Building and Deployment: Task Runners: Additional Resources", "Assignment 4: Bootstrap, JQuery and Sass", "Assignment 4: Additional Resources", "Front-End Web UI Frameworks: Bootstrap 4: Conclusions", "Front-End Web UI Frameworks and Tools: Bootstrap 4: Conclusions", "Project Implementation: Objectives and Outcomes", "Final Report Template", "Assignment 4: Bootstrap, JQuery and Sass", "Project Implementation and Final Report"]}]}, {"title": "Programming Languages, Part A", "course_info": "About this course: This course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones.\n\nThis course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.\n\nThe course assumes some prior experience with programming, as described in more detail in the first module.\n\nThe course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  The three parts are not quite equal in length: Part A is almost as substantial as Part B and Part C combined.\n\nWeek 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.", "target_audience": "Who is this class for: The course assumes students are familiar with programming covered by most introductory courses, but it is explicitly designed not to be a particularly advanced course. Students should be comfortable with variables, conditionals, arrays, linked lists, stacks, and recursion (though recursion will be reviewed and expanded upon), and the difference between an interface and an implementation. Students should be eager to write programs in languages new to them. Part C of the course analyzes basic object-oriented concepts and contrast them with those of other languages, so familiarity with Java or a closely related language (e.g., C#) might be helpful for Part C, but it is not necessary for the assignments.\n\nThis course is based on a course designed for second- and third-year undergraduates: not a first computer science course, but not an advanced course either. So it certainly will not cover everything in the beautiful world of programming languages, but it is a solid introduction.  It is designed to be eye-opening and fascinating both for learners seeking a \"third or fourth programming course\" and for learners with more experience who are looking for a clear and precise foundation in programming languages.\n\nThe assignments in the course are designed to be challenging, but with everything you need in the course content.\n\nAn introductory video and another reading discuss assumed background in some more detail in Week 1 of the course.", "created_by": "University of Washington", "teach_by": [{"name": "Dan  Grossman", "department": "Computer Science & Engineering"}], "package_num": null, "package_name": null, "level": "Intermediate", "rating": "4.9", "week_data": [{"title": "Introduction and Course-Wide Information (Start Here)", "description": "Welcome! Start here!  Learn about this course and how it's organized.", "video": ["Start here!", "Welcome! (And Some Course Mechanics)", "Optional: Who I Am / Acknowledgments", "What the Course is About / Initial Motivation", "Recommended Background", "Why Part A, Part B, Part C", "Grading Policy", "Optional: Very High-Level Outline", "About the Course", "Some More Perspective on Recommended Background", "Why are there 3 courses (Part A, Part B, Part C)?", "Grading Policy Details", "Discussion Forums: Why Are You Participating?"]}, {"title": "Software Installation and Homework 0", "description": "This module contains two things: (1) The information for the [unusual] software you need to install for Programming Languages Part A. (2) An optional \"fake\" homework that you can turn in for auto-grading and peer assessment to get used to the mechanics of assignment turn-in that we will use throughout the course. You can do this module either before or after watching the first few \"actual course content\" videos in the next module, but you will want to get the software installed soon so you can learn by actively trying out variations on the code in the videos.  You will need to install the software to do the homework.", "video": ["Part A Software Installation and Use: SML and Emacs", "Why Emacs? (Optional)", "Software Installation Introduction", "Emacs installation", "SML installation", "SML Mode installation", "Homework 0 (Auto-Grader)", "Homework 0 Detailed Peer-Assessment Instructions", "Homework 0 (Peer Assessment) "]}, {"title": "Section 1 and Homework 1", "description": "It's time to dive in!  Start with a careful reading of the \"Section 1 Welcome Message\" and go from there.", "video": ["Section 1 Welcome Message", "Section 1 Reading Notes", "Code Files for All Section 1 Videos", "ML Variable Bindings and Expressions", "Rules for Expressions", "The REPL and Errors", "Shadowing", "Functions Informally", "Functions Formally", "Pairs and Other Tuples", "Introducing Lists", "List Functions", "Let Expressions", "Nested Functions", "Let and Efficiency", "Options", "Booleans and Comparison Operations", "Benefits of No Mutation", "Optional: Java Mutation", "Pieces of a Language", "Homework 1 Detailed Guidelines for Peer Assessment", "Hints and Gotchas for Homework 1", "Extra Practice Problems", "Homework 1 (Auto-Grader)", "Homework 1"]}, {"title": "Section 2 and Homework 2", "description": "This section is a particularly rewarding one where a lot of ideas come together to reveal a surprisingly elegant underlying structure in ML.  As usual, start with the welcome reading, dive into the material, and leave plenty of time to approach the programming assignment methodically.", "video": ["Section 2 Welcome Message", "Section 2 Reading Notes", "Code Files for All Section 2 Videos", "Building Compound Types", "Records", "Tuples as Syntactic Sugar", "Datatype Bindings", "Case Expressions", "Useful Datatypes", "Pattern Matching So Far", "Another Expression Example", "Type Synonyms", "Lists and Options are Datatypes", "Polymorphic Datatypes", "Each of Pattern Matching / Truth About Functions", "A Little Type Inference", "Polymorphic and Equality Types", "Nested Patterns", "More Nested Patterns", "Nested Patterns Precisely", "Optional: Function Patterns", "Exceptions", "Tail Recursion", "Accumulators for Tail Recursion", "Perspective on Tail Recursion", "Homework 2 Detailed Guidelines for Peer Assessment", "Hints and Gotchas for Homework 2", "Extra Practice Problems", "Homework 2", "Homework 2"]}, {"title": "Section 3 and Homework 3 -- and Course Motivation", "description": "This section is all about higher-order functions -- the feature that gives functional programming much of its expressiveness and elegance -- and its name!  As usual, the first reading below introduces you to the section, but it will make more sense once you dive in to the lectures.  \n\nAlso be sure not to miss the material on course motivation that we have put in a \"lesson\" between the other videos for this week and the homework assignment.  The material is \"optional\" in the sense that it is not needed for the homeworks or next week's exam, but it is still very highly encouraged to better understand why the course (including Parts B and C) covers what it does and, hopefully, will change the way you look at software forever.  ", "video": ["Section 3 Welcome Message", "Section 3 Reading Notes", "Code Files for All Section 3 Videos", "Introduction to First-Class Functions", "Functions as Arguments", "Polymorphic Types and Functions as Arguments", "Anonymous Functions", "Unnecessary Function Wrapping", "Map and Filter", "Generalizing Prior Topics", "Lexical Scope", "Lexical Scope and Higher-Order Functions", "Why Lexical Scope", "Closures and Recomputation", "Fold and More Closures", "Closure Idiom: Combining Functions", "Closure Idiom: Currying", "Partial Application", "Currying Wrapup", "Mutable References", "Closure Idiom: Callbacks", "Standard-Library Documentation", "Optional: Abstract Data Types With Closures", "Optional: Closure Idioms Without Closures", "Optional: Java Without Closures", "Optional: C Without Closures", "Course-Motivation Introduction", "Why Study General PL Concepts?", "Are All PLs the Same?", "Why Functional Languages?", "Why ML, Racket, and Ruby?", "Homework 3 Detailed Guidelines for Peer Assessment", "Hints and Gotchas for Section 3", "Extra Practice Problems", "Homework 3", "Homework 3"]}, {"title": "Section 4 and Part-A Exam", "description": "We finish Part A of the course with this module.  As explained in more detail in the welcome message, we discuss type inference, ML's module system, and the fundamental idea in computing of two computations being equivalent.  There is no programming assignment -- instead there is an exam covering all of Part A.  Finally, there is a brief wrap-up video for the end of Part A that also looks ahead to Part B and Part C -- we have put it after the exam, so don't overlook it.", "video": ["Section 4 Welcome Message", "Section 4 Reading Notes", "Code Files for All Section 4 Videos", "Section Introduction", "What is Type Inference", "ML Type Inference", "Type Inference Examples", "Polymorphic Examples", "Optional: The Value Restriction and  Other Type-Inference Challenges", "Mutual Recursion", "Modules for Namespace Management", "Signatures and Hiding Things", "A Module Example", "Signatures for Our Example", "Signature Matching", "An Equivalent Structure", "Another Equivalent Structure", "Different Modules Define Different Types", "Equivalent Functions", "Standard Equivalences", "Equivalence Versus Performance", "Nothing (yet) (explanation)", "Information About the Exam (Required Reading)", "Practice Exam for Part A", "Part A Wrap-Up & Parts B&C Preview", "Exam for Part A"]}]}, {"title": "Java for Android", "course_info": "About this course: This MOOC teaches you how to program core features and classes from the Java programming language that are used in Android, which is the dominant platform for developing and deploying mobile device apps. \n\nIn particular, this MOOC covers key Java programming language features that control the flow of execution through an app (such as Java’s various looping constructs and conditional statements), enable access to structured data (such as Java's built-in arrays and common classes in the Java Collections Framework, such as ArrayList and HashMap), group related operations and data into classes and interfaces (such as Java's primitive and user-defined types, fields, methods, generic parameters, and exceptions), customize the behavior of existing classes via inheritance and polymorphism (such as subclassing and overriding virtual methods). Learners will apply these Java features in the context of core Android components (such as Activities and basic UI elements) by applying common tools (such as Android Studio) needed to develop Java programs and useful Android apps.  \n\nLearners will work on several hands-on projects throughout the MOOC, i.e., each week will require learners to write solutions to programming assignments that reinforce the material covered in the lecture videos. There will be roughly 4-6 hours of student engagement time per week, including video lectures, quizzes, and programming assignments.", "target_audience": "Who is this class for: The intended audience of learners for this MOOC includes those with basic computing skills who have little/no programming experience. This MOOC is intended both for beginners to programming or those switching to Java and/or Android for the first time.", "created_by": "Vanderbilt University", "teach_by": [{"name": "Dr. Jerry Roth", "department": "Electrical Engineering and Computer Science"}, {"name": "Dr. Julie L. Johnson", "department": "EECS"}, {"name": "Michael Walker", "department": "EECS"}, {"name": "Dr. Douglas C. Schmidt", "department": "Electrical Engineering and Computer Science"}], "package_num": "1", "package_name": "Android App Development Specialization ", "level": "Beginner", "rating": "4.5", "week_data": [{"title": "Module 1: MOOC Overview", "description": "Module 1 summarizes the organization of the MOOC and the topics it covers.  It also discusses the MOOC prerequisites, workload, and learning strategies needed to complete the MOOC successfully.  It then presents an overview of key features in the Java language, outlining its support for object-oriented programming concepts that guide the development of Android apps.", "video": ["Overview of Java for Android MOOC", "Responses to Frequently Asked Questions (FAQ) and PDF Versions of Slides", "Module 1: Overview", "MOOC Contents, Organization, and Learning Strategies", "Overview of the Java Programming Language (Part 1)", "Overview of the Java Programming Language (Part 2)", "Overview Summary", "Module 1 Quiz"]}, {"title": "Module 2: Introduction to Android Studio", "description": "Module 2 provides an overview of Android Studio, explaining how to install it and apply it to develop a simple app using basic Java and Android features presented in this MOOC.", "video": ["Module 2 Introduction", "Installing Java and Android Studio", "Creating and Importing Projects", "Introducing the Editor", "Project File Organization", "Creating and Editing Source Code and Resource Files", "Creating and Running a Virtual Device", "Debugging Syntax Errors", "Logging with Logcat", "TODO Statements", "Testing Your Code: Self Assessment Via Unit Tests", "Making Zip File for Uploading Multiple Files At Once", "Module 2 Summary", "Module 2 Quiz"]}, {"title": "Module 3: Writing a Simple Android App Using Basic Java Features", "description": "Module 3 shows how to write a simple Android app that defines variables using primitive Java data types, shows how to assign values to those variables, and output them to the Android display using Java classes and methods.", "video": ["Module Introduction", "Main Components in a Computing System", "Slide deck", "Variables and Types", "Expressions", "Slide deck", "Printing data", "Printing slide deck", "The Math Class", "Math slide deck", "The String Class", "String slide deck", "Methods", "Slide deck", "Module Conclusion", "Module 3 Quiz", "Geometry Calculations - Auto Graded"]}, {"title": "Module 4: Control Flow", "description": "Module 4 covers Java’s looping constructs (e.g., for loops, while loops, and do/while loops), as well as its conditional statements (e.g., if/else statements).", "video": ["Introduction to Control Flow", "If-statement Part 1", "If-statement L1 slide deck", "If-statement Part 2", "If-Statement L2 slide deck", "If-statement Code Walkthrough", "If-statement Code Walkthrough:  Code Copy", "If-statement Code Walkthrough: Slide Deck", "Module 4 practice quiz on IF statements", "For-loops Part 1", "Part 1 slide deck", "For-loops Part 2", "Part 2 slide deck", "For-loops Part 3", "Part 3 slide deck", "For-loops Code Walkthrough", "Code walkthrough slide deck", "Indefinite loops", "Indefinite loop slide deck", "Module 4 practice quiz on indefinite loops", "Random number generation", "Slide deck", "Drawing ASCII Art - Peer Review Portion", "Module Summary", "Module 4 quiz on FOR loops", "Drawing ASCII Art - Auto Graded Portion"]}, {"title": "Module 5: Structured Data", "description": "Module 5 provides more detail on common data structures supported by Java, including built-in arrays, as well as core classes in the Java Collections Framework, such as ArrayList and HashMap.", "video": ["Structured Data", "Slide deck", "Arrays: Part 1", "Part 1 slide deck", "Arrays: Part 2", "Part 2 slide deck", "Arrays: Part 3", "Part 3 slide deck", "The for-each loop", "Slide deck", "The Collections Framework: Part 1", "Part 1 slide deck", "The Collections Framework: Part 2", "Part 2 slide deck", "ArrayLists", "Slide deck", "HashMaps", "Slide deck", "Structured Data WrapUp", "The Birthday Problem - Auto Graded", "Module 5 Quiz"]}, {"title": "Module 6: Classes and Interfaces", "description": "Module 6 covers Java classes and interfaces, focusing on data types, fields, methods, generic parameters, and exceptions.", "video": ["Java: Classes and Objects, an overview", "Motivating Classes and Objects", "Slide deck", "Building your own Classes and Objects", "Slide deck", "Example files: Account", "Refining your Classes: Part 1", "Slide deck", "Refining your Classes: Part 2", "Slide deck", "New Objects in Old Places", "Slide deck", "Overview of Java Generics", "Slide deck", "Gate.java", "HerdManager.java", "FillTheCorral.java", "Module 6 quiz on Object Oriented Programing concepts", "Module 6 quiz on methods and classes", "Module 6 quiz on arrays and parameters", "Building your own class pt 1 - Auto Graded", "Building your own Classes pt 2 - Auto Graded"]}, {"title": "ModuIe 7: Inheritance and Polymorphism", "description": "Module 7 examines Java's inheritance and polymorphism features (e.g., extending classes and virtual methods).", "video": ["Class Hierarchy and Interfaces: Overview", "Class Hierarchy and Interfaces", "Slide deck", "Inheritance at Work", "Slide deck: Inheritance at Work", "Polymorphism", "Slide deck: Polymorphism", "Java Interfaces", "Slide deck: Java Interfaces", "Self-Assessment quiz code", "Advanced Class Interface features", "Slide deck: Advanced Class Interface Features", "Exception Handling", "Slide deck", "Inheritance and Polymorphism Assignment - Peer Review", "Module 7 quiz on inheritance", "Module 7 quiz on code \"dissection\"", "Inheritance and Polymorphism Assignment - Auto Graded"]}, {"title": "Module 8: Android Calculator App Mini-Project Assignment", "description": "Module 8 guides learners through the creation of an Android app that implements a simple calculator, which provides features for adding, subtracting, multiplying, and dividing numbers input by various means (e.g., via numbers and buttons on the Android user interface).", "video": ["Overview of the Calculator App Mini-Project Assignment", "Mini-Project Assignment Walkthrough", "Peer Review: Mini-Project: Calculator App"]}]}, {"title": "Front-End JavaScript Frameworks: Angular", "course_info": "About this course: This course concentrates mainly on Javascript based front-end frameworks, and in particular the Angular framework (Currently Ver. 4.x). This course will use Typescript for developing Angular application. Typescript features will be introduced in the context of Angular as part of the exercises. You will also get an introduction to the use of Angular Material and Angular Flex-Layout for responsive UI design. You will be introduced to various aspects of Angular including components, directives and services. You will learn about data binding, Angular router and its use for developing single-page applications. You will also learn about designing both template-driven forms and reactive forms. A quick introduction to Observables, reactive programming and RxJS in the context of Angular is included. You will then learn about Angular support for client-server communication and the use of REST API on the server side. You will use Restangular for communicating with a server supporting the REST API. A quick tour through Angular animation support and Angular testing rounds off the course. You must have either completed the previous course in the specialization on Bootstrap 4, or have a working knowledge of front end web-UI frameworks to be able to navigate this course. Also a good working knowledge of JavaScript, especially ES 5 is strongly recommended.\n\nAt the end of this course you will:\n\n- Be familiar with client-side Javascript frameworks and the Angular framework\n- Be able to implement single page applications in Angular\n- Be able to use various Angular features including directives, components and services\n- Be able to implement a functional front-end web application using Angular\n- Be able to use Angular Material and Angular Flex-Layout for designing responsive Angular applications\n- Be able to use Observables and RxJS in the context of Angular applications", "target_audience": "Who is this class for: This course is aimed at students with sufficient knowledge of Web technologies like HTML, CSS and JavaScript. A good working knowledge of JavaScript, especially ES 5 is strongly recommended. ", "created_by": "The Hong Kong University of Science and Technology", "teach_by": [{"name": "Jogesh K. Muppala", "department": "Department of Computer Science and Engineering"}], "package_num": "2", "package_name": "Full Stack Web and Multiplatform Mobile App Development Specialization ", "level": "Intermediate", "rating": "4.8", "week_data": [{"title": "Front-End JavaScript Frameworks Overview: Angular", "description": "In this module we get a quick introduction to front-end JavaScript frameworks, followed by an introduction to Angular. We will also learn about Angular components and their templates.", "video": ["Welcome to Front-End JavaScript Frameworks: Angular", "How to Use the Learning Resources", "Welcome to Front-End JavaScript Frameworks: Angular: Additional Resources", "Full Stack Web Development: The Big Picture: Objectives and Outcomes", "What is Full-Stack Web Development?", "Full Stack Web Development: Additional Resources", "Setting up Your Development Environment: Git and Node: Objectives and Outcomes", "Setting up your Development Environment", "Exercise (Video): Setting up Git", "Exercise (Instructions): Setting up Git", "Exercise (Video): Basic Git Commands", "Exercise (Instructions): Basic Git Commands", "Exercise (Video): Online Git Repositories", "Exercise (Instructions): Online Git Repositories", "Node.js and NPM", "Exercise (Video): Setting up Node.js and NPM", "Exercise (Instructions): Setting up Node.js and NPM", "Exercise (Video): Basics of Node.js and NPM", "Exercise (Instructions): Basics of Node.js and NPM", "Setting up your Development Environment: Git and Node: Additional Resources", "Introduction to Angular: Objectives and Outcomes", "Front-end JavaScript Frameworks Overview", "Introduction to Angular", "Exercise (Video): Getting Started with Angular", "Exercise (Instructions): Getting Started with Angular", "Angular Application Architecture Overview", "Exercise (Video): Configuring your Angular Application", "Exercise (Instructions): Configuring your Angular Application", "Introduction to Angular: Additional Resources", "Angular Components: Objectives and Outcomes", "Angular Components", "Exercise (Video): Angular Components Part 1", "Exercise (Instructions): Angular Components Part 1", "Structural Directives", "Exercise (Video): Angular Components Part 2", "Exercise (Instructions): Angular Components Part 2", "Angular Components: Additional Resources", "Assignment 1 Requirements (Video): Angular Components", "Assignment 1: Angular Components: Additional Resources", "Ideation: Objectives and Outcomes", "Ideation Report Template", "Ideation: Additional Resources", "Angular Components", "Ideation"]}, {"title": "Angular Services, Routing and Single Page Applications", "description": "In this week, you learn about data binding in Angular. You will learn how to design basic services. You will learn about Angular router and its use in designing single page applications. You will also learn about single page applications and use Angular Router to design single page applications.", "video": ["Data Binding: Objectives and Outcomes", "Data Binding", "Exercise (Video): Data Binding", "Exercise (Instructions): Data Binding", "Data Binding: Additional Resources", "Angular Service Basics: Objectives and Outcomes", "MVC and MVVM", "Angular Services", "Dependency Injection", "Exercise (Video): Angular Service Basics", "Exercise (Instructions): Angular Service Basics", "Angular Service Basics: Additional Resources", "Angular Routing: Objectives and Outcomes", "Exercise (Video): Header and Footer", "Exercise (Instructions): Header and Footer", "Angular Routing Basics", "Exercise (Video): Angular Routing Basics", "Exercise (Instructions): Angular Routing Basics", "Angular Routing: Additional Resources", "Single Page Applications: Objectives and Outcomes", "Single Page Applications", "Exercise (Video): Single Page Applications Part 1", "Exercise (Instructions): Single Page Applications Part 1", "Angular Router: Parameters", "Exercise (Video): Single Page Applications Part 2", "Exercise (Instructions): Single Page Applications Part 2", "Single Page Applications: Additional Resources", "Assignment 2 Requirements (Video): Angular Services, Routing and Single Page Applications", "Assignment 2: Angular Services, Routing and Single Page Applications: Additional Resources", "UI Design and Prototyping: Objectives and Outcomes", "UI Design and Prototyping Report Template", "UI Design and Prototyping: Additional Resources", "Angular Services, Routing and Single Page Applications", "UI Design and Prototyping"]}, {"title": "Angular Forms, Angular and Reactive JavaScript", "description": "In this module we study Angular support for forms and form validation. Both template-driven forms and reactive forms will be introduced. You will also learn about Promises. Then you will learn briefly about reactive programming, RxJs and its use in Angular.", "video": ["Angular Template-driven Forms: Objectives and Outcomes", "Angular Template-driven Forms", "Exercise (Video): Angular Template-driven Forms Part 1", "Exercise (Instructions): Angular Template-driven Forms Part 1", "Angular Template-driven Form Validation", "Exercise (Video): Angular Template-driven Forms Part 2", "Exercise (Instructions): Angular Template-driven Forms Part 2", "Angular Template-driven Forms: Additional Resources", "Angular Reactive Forms: Objectives and Outcomes", "Angular Reactive Forms", "Exercise (Video): Angular Reactive Forms Part 1", "Exercise (Instructions): Angular Reactive Forms Part 1", "Angular Reactive Form Validation", "Exercise (Video): Angular Reactive Forms Part 2", "Exercise (Instructions): Angular Reactive Forms Part 2", "Angular Reactive Forms: Additional Resources", "Angular and Promise: Objectives and Outcomes", "Promises", "Exercise (Video): Angular and Promise Part 1", "Exercise (Instructions): Angular and Promise Part 1", "Exercise (Video): Angular and Promise Part 2", "Exercise (Instructions): Angular and Promise Part 2", "Angular and Promise: Additional Resources", "Angular and RxJS: Objectives and Outcomes", "Angular and RxJS", "Exercise (Video): Angular and RxJS Part 1", "Exercise (Instructions): Angular and RxJS Part 1", "Exercise (Video): Angular and RxJS Part 2", "Exercise (Instructions): Angular and RxJS Part 2", "Exercise (Video): Angular Reactive Forms Part 3", "Exercise (Instructions): Angular Reactive Forms Part 3", "Angular and RxJS: Additional Resources", "Assignment 3 Requirements (Video): Single Page Applications and Angular Forms", "Assignment 3: Single Page Applications and Angular Forms: Additional Resources", "Angular Forms and Reactive Programming"]}, {"title": "Client-Server Communication", "description": "In this module you will explore client-server communication using both Angular HTTP module and the REST API. You will get a brief introduction to animation support in Angular and create a custom attribute directive. You will also learn about testing, building and deploying Angular applications.", "video": ["Client-Server Communication: Objectives and Outcomes", "Networking Essentials", "Exercise (Video): Setting up a Server using json-server", "Exercise (Instructions): Setting up a Server using json-server", "Client-Server Communication: Additional Resources", "Angular HTTP Client: Objectives and Outcomes", "Angular HTTP Client", "Exercise (Video): Angular HTTP Client", "Exercise (Instructions): Angular HTTP Client", "Exercise (Video): Angular HTTP Client: Error Handling", "Exercise (Instructions): Angular HTTP Client: Error Handling", "Angular HTTP Client: Additional Resources", "Angular and REST: Objectives and Outcomes", "Brief Representational State Transfer (REST)", "Restangular", "Exercise (Video): Angular and REST", "Exercise (Instructions): Angular and REST", "Exercise (Video): Angular and REST: Saving Changes to Server", "Exercise (Instructions): Angular and REST: Saving Changes to Server", "Angular and REST: Additional Resources", "Animation and Directives: Objectives and Outcomes", "Attribute Directives", "Exercise (Video): Custom Attribute Directives", "Exercise (Instructions): Custom Attribute Directives", "Angular Animations", "Exercise (Video): Angular Animations Part 1", "Exercise (Instructions): Angular Animations Part 1", "Exercise (Video): Angular Animations Part 2", "Exercise (Instructions): Angular Animations Part 2", "Animation and Directives: Additional Resources", "Testing Angular Applications: Objectives and Outcomes", "Angular Testing", "Exercise (Video): Angular Testing", "Exercise (Instructions): Angular Testing", "End-to-End Testing Angular Applications", "Exercise (Video): End-to-End Testing Angular Applications", "Exercise (Instructions): End-to-End Testing Angular Applications", "Testing Angular Applications: Additional Resources", "Building and Deployment: Objectives and Outcomes", "Introduction to Webpack", "Exercise (Video): Building and Deploying the Angular Application", "Exercise (Instructions): Building and Deploying the Angular Application", "Building and Deployment: Additional Resources", "Assignment 4 Requirements (Video): Client-Server Communication", "Assignment 4: Client-Server Communication: Additional Resources", "Conclusions", "Conclusions: Additional Resources", "Project Implementation: Objectives and Outcomes", "Final Report Template", "Client-Server Communication", "Project Implementation and Final Report"]}]}, {"title": "Building Web Applications in PHP", "course_info": "About this course: In this course, you'll explore the basic structure of a web application, and how a web browser interacts with a web server. You'll be introduced to the request/response cycle, including GET/POST/Redirect. You'll also gain an introductory understanding of Hypertext Markup Language (HTML), as well as the basic syntax and data structures of the PHP language, variables, logic, iteration, arrays, error handling, and superglobal variables, among other elements. An introduction to Cascading Style Sheets (CSS) will allow you to style markup for webpages. Lastly, you'll gain the skills and knowledge to install and use an integrated PHP/MySQL environment like XAMPP or MAMP.", "target_audience": "Who is this class for: Students who would like to learn more about web application development; specifically HTML, CSS, and using PHP/MySQL environments like XAMPP or MAMP", "created_by": "University of Michigan", "teach_by": [{"name": "Charles Severance", "department": "School of Information"}], "package_num": "1", "package_name": "Web Applications for Everybody Specialization ", "level": "Intermediate", "rating": "4.8", "week_data": [{"title": "Introduction to Dynamic Web Content", "description": "We look at the basic structure of a web application and how a web browser interacts with a web server. We explore the Request-Response Cycle that is the basis of the Hypertext Transfer Protocol (HTTP).", "video": ["Why PHP?", "Welcome to Course 1 In the Specialization", "Textbook & Course Resources", "Introduce Yourself/Experience", "Our Technologies", "HyperText Transfer Protocol (HTTP)", "Request/Response Cycle", "Request-Response", "Assignment Specification: Request-Response Cycle", "Autograder: Request-Response Cycle", "Bonus: Office Hours in San Francisco"]}, {"title": "HyperText Markup Language (HTML)", "description": "We briefly cover the basics of the HyperText Markup Language (HTML) that is the markup for web pages.  We hope that you already have some expertise in HTML and that this is mostly review.", "video": ["HyperText Markup Language", "HTML Tags", "Code Walkthrough: HTML", "HTML", "Assignment Specification: HyperText Markup Language (HTML)", "Bonus Video: Office Hours in Raleigh, NC", "Autograder: HyperText Markup Language (HTML)"]}, {"title": "Cascading Style Sheets (CSS)", "description": "We briefly cover the basics of cascading Style Sheets (CSS) that allow us to style the markup for web pages.", "video": ["Cascading Style Sheets (CSS)", "Code WalkThrough: CSS Basics", "Styling with CSS", "Images, Colors, and Links in CSS", "Code WalkThrough: Styling with CSS", "CSS", "Assignment Specification: Cascading Style Sheets (CSS)", "Peer Graded: Cascading Style Sheets (CSS)"]}, {"title": "Installing PHP and SQL", "description": "Our first technical task is to work through the installation steps including installing a text editor, installing MAMP or XAMPP (or equivalent), creating a MySql Database, and writing a PHP program.\n\n", "video": ["Installation Handouts", "Installing MAMP on Macintosh", "Installing MAMP on Windows10", "Installing XAMPP on Windows10", "Installing LAMP On Linux", "Assignment Specifications: Installing PHP/MySQL", "Peer Graded: Installing PHP/MySQL", "Bonus: Brian Behlendorf - Apache Foundation"]}, {"title": "Introduction to PHP", "description": "We begin learning PHP.", "video": ["Introduction to PHP", "PHP - Basics", "PHP - Keywords", "PHP - Expressions", "PHP - Control Structures", "PHP", "Assignment Specification: Our First PHP Application", "Bonus: Rasmus Lerdorf - Inventing PHP", "Our First PHP Application"]}, {"title": "PHP Arrays", "description": "We look at unique aspects of arrays in the PHP language.\n", "video": ["PHP - Arrays", "PHP - Array Functions", "HTTP & PHP Arrays", "PHP Arrays", "Submitting your code to the autograder", "Windows: Using NGrok with the Autograder", "Windows: Using LocalTunnel with the Autograder", "Macintosh: Using NGrok with the Autograder", "Macintosh: Using LocalTunnel with the Autograder", "Auto-grader: Guessing Game"]}, {"title": "PHP Functions", "description": "We look at unique aspects of functions in PHP.", "video": ["PHP - Functions", "PHP - Variable Scope", "PHP - Modularity", "Functions", "Assignment Specification: Reversing an MD5 hash (password cracking)", "Reversing an MD5 hash (password cracking)"]}, {"title": "PHP and HTML Forms", "description": "We look at how HTML forms are created and processed in the PHP language.", "video": ["HTML Forms", "Using GET and POST with Forms", "HTML Input Types", "Code Walkthrough - HTML Input Types", "HTML5 Input Types", "Processing Form Data and HTML Injection", "Code Walkthough Forms and HTML Injection (1)", "Guessing Game", "Code Walkthrough - Guessing Game", "Model View Controller (MVC)", "Forms", "Assignment Specification: Rock Paper Scissors", "Autograder: Rock Paper Scissors", "Peer grader: Rock Paper Scissors"]}]}, {"title": "Introduction to CSS3", "course_info": "About this course: The web today is almost unrecognizable from the early days of white pages with lists of blue links.  Now, sites are designed with complex layouts, unique fonts, and customized color schemes.   This course will show you the basics of Cascading Style Sheets (CSS3).  The emphasis will be on learning how to write CSS rules, how to test code, and how to establish good programming habits.     \n\nWhen done correctly, the styling of a webpage can take enhance your page.   When done incorrectly the result can be worse than no styling at all.    To ensure that your sites do not put up  barriers for people with cognitive and/or physical disabilities, you will learn how to evaluate pages using the standardized POUR accessibility guidelines.    Upon completion of the course, learners will be able to sketch a design for a given HTML page.  Using that design they will use CSS to implement the design by adding fonts, colors, and  layouts.    \n\nThis is the second course in the Web Design For Everybody specialization.   Subsequent courses focus on adding interaction with JavaScript and enhancing the styling with responsive design.\n\nIt will be difficult to complete this course if you do not have access to a laptop or desktop computer for the homework.", "target_audience": null, "created_by": "University of Michigan", "teach_by": [{"name": "Colleen van Lent, Ph.D.", "department": "School of Information"}], "package_num": "2", "package_name": "Web Design for Everybody (Basics of Web Development and Coding) Specialization ", "level": null, "rating": "4.8", "week_data": [{"title": "Week One: Getting Started with Simple Styling", "description": "Welcome to Introduction to CSS3!  In this course you will learn how to style your pages by taking advantage of the power of CSS3.   We will focus on both proper syntax (how to write your styling rules) and the importance of accessibility design (making sure that your style enhances your site, not make it harder to navigate).  It is so important that you jump in ready to make mistakes and typos in this course.  The only way you will really understand the material is to practice typing it in on your own as often as possible.", "video": ["Syllabus", "01.01 Course Welcome", "Resources", "Help us learn more about you!", "Building Your First Web Page", "01-02 Cascading Style Sheets", "01-03 Colors", "01-04 Styling Your Text", "Early coding", "01-05 Code Together", "01-06a Display and Visibility - Part 1", "01-06b Display and Visibility - Part 2", "Code Placement", "Homework One Description", "Peer Review", "01-07 Optional -- Homework Description", "Styling Syntax and Theory", "Your First Styled Site"]}, {"title": "Week Two: Advanced Styling", "description": "Colors and fonts are just the start to styling your page.  The nice thing about starting with these properties is that they are usually very straightforward to implement.  You pick a color and boom - instant, expected results.  This week we move on to new properties that tend to require a little bit of tweaking to get the desired results.  In particular we will talk about the Box Model, background images, opacity, float, columns, visibility, and designing for different browsers.", "video": ["Resources", "02-01 Box Model", "Coding Together", "02-02 Code Together", "02-03 Styling Links and Lists", "02-04 Advanced Selectors", "Supplemental reading on complex selectors", "Optional Practice Quiz: Review", "Shorthand rules", "02-05 Browser Capabilites", "Browsers", "Code Together", "02-06 Code Together", "Background Images and Opacity", "02-07 Designing For Accessibility", "Optional - The importance of headings", "Homework Two Description", "02-08 Optional - Homework Description", "Advanced Selectors Quiz", "Advanced Style"]}, {"title": "Week Three:  Psuedo-classes, Pseudo-elements, Transitions, and Positioning", "description": "Have you ever noticed on a web page that some links are blue and others are purple, depending upon if you have clicked on the links?  How is it possible to style some anchor tags and not others?  This week you will learn how to style pseudo-classes (e.g. a link that has been visiting, an element that has the mouse hovering over it) and pseudo-elements (e.g. the first-letter of a heading, the first line of a paragraph).  These elements are not difficult to style, but do require careful coding.  It is also the first step to adding simple animation to your site.  We end this week with the subject of positioning -- how to get elements to stick to a certain part of your page.  Think about annoying pop-up ads.  How do the programmers get them to stay RIGHT IN THE MIDDLE OF THE SCREEN despite the fact that you keep trying to scroll them away.", "video": ["Resources", "03-01 Pseudo Classes and Elements", "03-02 Transitions", "03-03 Transforms", "OPTIONAL READINGS - Transitions, Transforms, and Animation", "03-04 Code together - Transitions", "Positioning", "03-05 Positioning", "Why not a Peer Assignment this week?", "Some Fun Links", "Final Quiz"]}, {"title": "Week Four: Putting It All Together", "description": "This week I am going to do some code review.  I will show you how I used pseudo-classes and pseudo-elements to style a table.  Then I give you a demonstration of three different navigation bars that utilize different styling options.   We will want to step back and talk about how these different options may affect the accessibility of our site.  The final step to completing this course is the completion of the peer-graded project.  You will have the chance to demonstrate the ability to follow styling guidelines while still putting your own personal touch on the project.  Just remember, you need to validate your work for proper syntax and accessibility.", "video": ["Resources", "04-01 Styling Tables", "04-02 Creating Navigation Menus", "04-03 Accessible Navigation", "OPTIONAL:  A Change to the Accessibility of Headings", "04-04 Creating Navigation Menus 2", "04-05 Creating Navigation Menus 3", "Final Project Description", "04-06 Optional - Homework Description", "04-07 Conclusion", "Styling A Table"]}, {"title": "Where To Go From Here?", "description": "If you would like to do more now that you have finished this course, I have a few recommendations.  The most important thing is that you continue to practice your skills and always have \"something\" that you are working on.", "video": ["Coursera Options", "CodeAcademy - other badge tutorials", "Meetups", "Post-course Survey"]}]}, {"title": "Server-side Development with NodeJS, Express and MongoDB", "course_info": "About this course: This course deals with all things server-side. We base the entire course around the NodeJS platform. We start with a brief overview of the Web protocols: HTTP and HTTPS. We examine NodeJS and NodeJS modules: Express for building web servers. On the database side, we review basic CRUD operations, NoSQL databases, in particular MongoDB and Mongoose for accessing MongoDB from NodeJS. We examine the REST concepts and building a RESTful API. We touch upon authentication and security. Finally we review backend as a service (BaaS) approaches, including mobile BaaS, both open-source and commercial BaaS services.\n\nAt the end of this course, you will be able to:\n\n- Demonstrate an understanding of server-side concepts, CRUD and REST\n- Build and configure a backend server using NodeJS framework\n- Build a RESTful API for the front-end to access backend services", "target_audience": "Who is this class for: This course is aimed at students with sufficient knowledge of Web technologies like HTML, CSS and JavaScript. A good working knowledge of JavaScript, especially ES 5 is strongly recommended. ", "created_by": "The Hong Kong University of Science and Technology", "teach_by": [{"name": "Jogesh K. Muppala", "department": "Department of Computer Science and Engineering"}], "package_num": "5", "package_name": "Full Stack Web and Multiplatform Mobile App Development Specialization ", "level": "Intermediate", "rating": "5.0", "week_data": [{"title": "Introduction to Server-side Development", "description": "In this module you will be introduced to Node, Node modules and the Node HTTP server. You will learn about the Express framework and how to set up a REST API using Express.", "video": ["Welcome to Server-Side Development with NodeJS, Express and MongoDB", "How to Use the Learning Resources", "Welcome to Server-Side Development with NodeJS, Express and MongoDB: Additional Resources", "Full Stack Web Development: The Big Picture: Objectives and Outcomes", "What is Full-Stack Web Development?", "Full Stack Web Development: Additional Resources", "Setting up Your Development Environment: Git: Objectives and Outcomes", "Setting up your Development Environment", "Exercise (Video): Setting up Git", "Exercise (Instructions): Setting up Git", "Exercise (Video): Basic Git Commands", "Exercise (Instructions): Basic Git Commands", "Exercise (Video): Online Git Repositories", "Exercise (Instructions): Online Git Repositories", "Setting up your Development Environment: Git: Additional Resources", "Introduction to Node.js and NPM: Objectives and Outcomes", "Node.js and NPM", "Exercise (Video): Setting up Node.js and NPM", "Exercise (Instructions): Setting up Node.js and NPM", "Introduction to Node.js and NPM: Additional Resources", "Node Modules: Objectives and Outcomes", "Node Modules", "Exercise (Video): Understanding Node Modules", "Exercise (Instructions): Understanding Node Modules", "Node Modules: Callbacks and Error Handling", "Exercise (Video):Node Modules: Callbacks and Error Handling", "Exercise (Instructions):Node Modules: Callbacks and Error Handling", "Node Modules: Additional Resources", "Node and HTTP: Objectives and Outcomes", "Networking Essentials", "Node and the HTTP Module", "Exercise (Video): Node and the HTTP Module", "Exercise (Instructions): Node and the HTTP Module", "Node and HTTP: Additional Resources", "Introduction to Express: Objectives and Outcomes", "Introduction to Express", "Exercise (Video): Introduction to Express", "Exercise (Instructions): Introduction to Express", "Brief Representational State Transfer (REST)", "Express Router", "Exercise (Video): Express Router", "Exercise (Instructions): Express Router", "Introduction to Express: Additional Resources", "Assignment 1 Requirements (Video): Node Modules, Express and REST API", "Assignment 1: Node Modules, Express and REST API: Additional Resources", "Ideation: Objectives and Outcomes", "Ideation Report Template", "Ideation: Additional Resources", "Assignment 1: Node Modules, Express and REST API", "Ideation"]}, {"title": "Data, Data, Where art Thou Data?", "description": "This module looks in detail at data storage with MongoDB, the popular NoSQL database. You will learn first about Express generator for scaffolding an Express application. Then you will learn about MongoDB. You will learn how to interact with MongoDB from a Node application. Then you will learn the Mongoose ODM to create schemas and models, and interact with MongoDB server.", "video": ["Express Generator: Objectives and Outcomes", "Express Generator", "Exercise (Video): Express Generator", "Exercise (Instructions): Express Generator", "Express Generator: Additional Resources", "Introduction to MongoDB: Objectives and Outcomes", "Introduction to MongoDB", "Exercise (Video): Introduction to MongoDB", "Exercise (Instructions): Introduction to MongoDB", "Introduction to MongoDB: Additional Resources", "Node and MongoDB: Objectives and Outcomes", "Node and MongoDB", "Exercise (Video): Node and MongoDB Part 1", "Exercise (Instructions): Node and MongoDB Part 1", "Exercise (Video): Node and MongoDB Part 2", "Exercise (Instructions): Node and MongoDB Part 2", "Callback Hell and Promises", "Exercise (Video): Callback Hell and Promises", "Exercise (Instructions): Callback Hell and Promises", "Node and MongoDB: Additional Resources", "Mongoose ODM: Objectives and Outcomes", "Mongoose ODM", "Exercise (Video): Mongoose ODM Part 1", "Exercise (Instructions): Mongoose ODM Part 1", "Exercise (Video): Mongoose ODM Part 2", "Exercise (Instructions): Mongoose ODM Part 2", "Mongoose ODM: Additional Resources", "REST API with Express, MongoDB and Mongoose: Objectives and Outcomes", "REST API with Express, MongoDB and Mongoose", "Exercise (Video): REST API with Express, MongoDB and Mongoose Part 1", "Exercise (Instructions): REST API with Express, MongoDB and Mongoose Part 1", "Exercise (Video): REST API with Express, MongoDB and Mongoose Part 2", "Exercise (Instructions): REST API with Express, MongoDB and Mongoose Part 2", "REST API with Express, MongoDB and Mongoose: Additional Resources", "Assignment 2 Requirements (Video): MongoDB: Requirements", "Assignment 2: MongoDB: Additional Resources", "Architecture Design and Software Structure: Objectives and Outcomes", "Architecture Design and Software Structure Report", "Architecture Design and Software Structure: Additional Resources", "Assignment 2: MongoDB", "Architecture Design and Software Structure Report"]}, {"title": "Halt! Who goes there?", "description": "This module is dedicated to user authentication. We first develop a full-fledged REST API server with Express, Mongo and Mongoose. Thereafter we examine basic authentication and session-based authentication briefly. We then develop token-based authentication with the support of JSON web tokens and the Passport module.", "video": ["Basic Authentication: Objectives and Outcomes", "Basic Authentication", "Exercise (Video): Basic Authentication", "Exercise (Instructions): Basic Authentication", "Basic Authentication: Additional Resources", "Cookies, Tea and err ... Express Sessions: Objectives and Outcomes", "Cookies, Tea and err ... Express Sessions", "Exercise (Video): Using Cookies", "Exercise (Instructions): Using Cookies", "Exercise (Video): Express Sessions Part 1", "Exercise (Instructions): Express Sessions Part 1", "Exercise (Video): Express Sessions Part 2", "Exercise (Instructions): Express Sessions Part 2", "Cookies, Tea and err . . . Express Sessions: Additional Resources", "User Authentication with Passport: Objectives and Outcomes", "Passport", "Exercise (Video): User Authentication with Passport", "Exercise (Instructions): User Authentication with Passport", "Token Based Authentication", "Exercise (Video): User Authentication with Passport and JSON Web Token", "Exercise (Instructions): User Authentication with Passport and JSON Web Token", "User Authentication with Passport: Additional Resources", "Mongoose Population: Objectives and Outcomes", "Mongoose Population", "Exercise (Video): Mongoose Population", "Exercise (Instructions): Mongoose Population", "Mongoose Population: Additional Resources", "Assignment 3 Requirements (Video): User Authentication", "Assignment 3: Additional Resources", "User Authentication"]}, {"title": "Backend as a Service (BaaS)", "description": "In this module we learn about Mongoose population, a way of cross-referencing documents and populating the documents from other documents. We then review secure communication using HTTPS. We look at Backend as a Service (BaaS) and take a brief look at Loopback.", "video": ["HTTPS and Secure Communication: Objectives and Outcomes", "HTTPS and Secure Communication", "Exercise (Video): HTTPS and Secure Communication", "Exercise (Instructions): HTTPS and Secure Communication", "HTTPS and Secure Communication: Additional Resources", "Uploading Files: Objectives and Outcomes", "Uploading Files", "Exercise (Video): Uploading Files", "Exercise (Instructions): Uploading Files", "Uploading Files: Additional Resources", "Cross-Origin Resource Sharing: Objectives and Outcomes", "Cross-Origin Resource Sharing", "Exercise (Video): Cross-Origin Resource Sharing", "Exercise (Instructions): Cross-Origin Resource Sharing", "Cross-Origin Resource Sharing: Additional Resources", "OAuth and User Authentication: Objectives and Outcomes", "OAuth and User Authentication", "Exercise (Video): Using OAuth with Passport and Facebook", "Exercise (Instructions): Using OAuth with Passport and Facebook", "OAuth and User Authentication: Additional Resources", "Assignment 4 Requirements (Video): Backend as a Service", "Assignment 4: Additional Resources", "ConFusion: Integrating the Client and Server: Objectives and Outcomes", "ConFusion: Integrating the Client and Server", "Exercise (Video): Integrating the Client and Server: Updating the REST Server", "Exercise (Instructions): Integrating the Client and Server: Updating the REST Server", "Exercise (Video): Integrating the Client and Server: The Angular Client", "Exercise (Instructions): Integrating the Client and Server: The Angular Client", "ConFusion: Integrating the Client and Server: Additional Resources", "Backend as a Service: Objectives and Outcomes", "Backend as a Service", "Exercise (Video): Firebase", "Exercise (Video): Angular Application using Firebase as BaaS", "Exercise (Instructions): Angular Application using Firebase as BaaS", "Backend as a Service (BaaS): Firebase: Additional Resources", "Backend as a Service: Loopback: Objectives and Outcomes", "Exercise (Video): Getting Started with Loopback", "Exercise (Instructions): Getting Started with Loopback", "Exercise (Video): Loopback Data Sources and Access Control", "Exercise (Instructions): Loopback Data Sources and Access Control", "Exercise (Video): Loopback Relations", "Exercise (Instructions): Loopback Relations", "Exercise (Video): Angular Application using Loopback as BaaS", "Exercise (Instructions): Angular Application using Loopback as BaaS", "Backend as a Service: Loopback: Additional Resources", "Project Implementation: Objectives and Outcomes", "Final Report Template", "Backend as a Service", "Project Implementation and Final Report"]}]}, {"title": "Interactivity with JavaScript", "course_info": "About this course: If you want to take your website to the next level, the ability to incorporate interactivity is a must.    But adding some of these types of capabilities requires a stronger programming language than HTML5 or CSS3, and JavaScript can provide just what you need.  With just a basic understanding of the language, you can create a page that will react to common events such as page loads, mouse clicks & movements, and even keyboard input.      \n\nThis course will introduce you to the basics of the JavaScript language.  We will cover concepts such as variables, looping, functions, and even a little bit about debugging tools.  You will understand how the Document Object Model (DOM) is used by JavaScript to identify and modify specific parts of your page.  After the course, learners will be able to react to DOM Events and dynamically alter the contents and style of their page.   The class will culminate in a  final project - the creation of an interactive HTML5 form that accepts and verifies input.\n\nThis is the third course in the Web Design For Everybody specialization.  A basic understanding of HTML and CSS is expected when you enroll in this class.    Additional courses focus on enhancing the styling with responsive design and completing a capstone project.", "target_audience": null, "created_by": "University of Michigan", "teach_by": [{"name": "Colleen van Lent, Ph.D.", "department": "School of Information"}], "package_num": "3", "package_name": "Web Design for Everybody (Basics of Web Development and Coding) Specialization ", "level": null, "rating": "4.6", "week_data": [{"title": "Week One: Introduction to JavaScript", "description": "If you haven't use a traditional programming language before, this first week is key.  Before we begin with the how, we will talk about the why, mainly why we want to use JavaScript.  The main reason is that it is very easy for JavaScript to work with the DOM.  And easy is always a great way to start.  Speaking of starting out, it is also always more fun when our code actually does something we can see, so we will jump quickly into different ways we can generate output.  It won't be flashy yet, but it will be a great way to get your feet wet with traditional programming.  After that we go back to the basics of how a computer uses data.  We begin with variables, expressions, and operators.  ", "video": ["Syllabus", "Help us learn more about you!", "Resources", "\"What are these deadlines?\"", "Introduction", "Link to All of the Code for Week One", "The Document Object Model (DOM)", "DOM Review with Object Oriented Programming", "Output", "Trying to Create and Debug Your Own Output", "Variables", "Data Types", "Operators and Expressions", "Notice for Auditing Learners: Assignment Submission", "Optional Discussion - CodePen", "Optional Materials", "The History of \"Debugging\"", "Week One"]}, {"title": "Week Two: Reacting to Your Audience", "description": "If you have written HTML code in the past, hopefully you have fallen into the great habit of validating your code -- making sure that you close all of your open tags.  There are other rules that you may or may not have been following as well, for instance the importance of using each id attribute only once per page. This is called writing \"clean\" code.  The reasoning and importance of following these rules becomes clear as we begin to manipulate the different components of your webpage based on the the actions of the person interacting with your page.  In particular you will learn about the JavaScript Mouse Events and Touch Events.  This week's materials will end with a photo gallery example that you can create along with me.", "video": ["Link to All of the Code for Week Two", "Functions", "Functions", "Code Placement", "Organizing Your Code", "Folder Structure / Organizing Your Code", "Events", "Mastering Events and Functions", "Code With Me - Events", "Just a little note before the next video", "\"this\"", "Homework Time!!", "Photo Gallery", "Optional - Week Two Review", "JavaScript Interactive Photo Gallery"]}, {"title": "Week Three: Arrays and Looping", "description": "This week we will delve into more complex programming concepts: arrays and looping.  Arrays allow you to represent groups of related information.  Looping provides efficiency and flexibility to your programs.  Using both we will expand upon the photo gallery example.", "video": ["Link to All of the Code for Week Three", "A JavaScript Cheat Sheet", "Arrays", "JavaScript Arrays", "Code With Me - Arrays", "Advanced Coding Techniques", "JavaScript Iteration", "Flow Of Control", "Code With Me - Combining Loops and Conditionals", "Advanced Conditionals", "Common Errors", "JavaScript Review"]}, {"title": "Week Four: Validating Form Data", "description": "This week we will put a number of the concepts from this course together to tackle a new project - creating and validating input entered into an HTML5 form.  Forms are extremely common elements used to input and send data to via a webpage.  We will look at how you can use JavaScript to add options to your forms, to pre-fill data based on previous input, and even to check that passwords match.", "video": ["Link to All of the Code for Week Four", "Introduction to Forms", "Simple Forms", "Simple Validation", "\"Cool Stuff\" - Friend or Foe?", "Comparing Two Inputs", "Checkboxes and Radio Buttons", "Using Forms on Your Site", "More Code Examples", "Conclusion", "Intro to JQuery", "Post-course Survey", "Autocomplete with JavaScript"]}]}, {"title": "Introduction to Web Development", "course_info": "About this course: This course is designed to start you on a path toward future studies in web development and design, no matter how little experience or technical knowledge you currently have. The web is a very big place, and if you are the typical internet user, you probably visit several websites every day, whether for business, entertainment or education. But have you ever wondered how these websites actually work? How are they built? How do browsers, computers, and mobile devices interact with the web? What skills are necessary to build a website? With almost 1 billion websites now on the internet, the answers to these questions could be your first step toward a better understanding of the internet and developing a new set of internet skills.  \n\nBy the end of this course you’ll be able to describe the structure and functionality of the world wide web, create dynamic web pages using a combination of HTML, CSS, and JavaScript, apply essential programming language concepts when creating HTML forms, select an appropriate web hosting service, and publish your webpages for the world to see. Finally, you’ll be able to develop a working model for creating your own personal or business websites in the future and be fully prepared to take the next step in a more advanced web development or design course or specialization.", "target_audience": "Who is this class for: This course is primarily aimed at the complete novice interested in learning about web development or for someone with some previous experience and would like a refresher of the basics.", "created_by": "University of California, Davis", "teach_by": [{"name": "Daniel Randall", "department": "UC Davis Extension"}], "package_num": null, "package_name": null, "level": "Beginner", "rating": "4.5", "week_data": [{"title": "Course Overview and Website Structure and Hosting", "description": "This first module provides an overview of how websites function, their structure, and the ins and outs of choosing a website name and selecting an online host to house your website. By the end of this module, you'll be able to: find and select a web hosting company; choose an effective domain name; use the host to manage your websites; and discuss how networks and the internet function at a high level.", "video": ["Course Overview", "Module 1 Introduction", "What is a Web Hosting Company?", "How to Find and Select a Web Hosting Company", "Naming a Website", "Website Name Registration", "Networks and the Internet", "First Look at a Website Control Panel", "Web Development Tools", "Web Hosting Additional Resources", "Why are you here?", "Suggested Activity: Website Hosting and Naming", "Hosting a Website", "Module 1 Quiz"]}, {"title": "Designing Your Own Website: HTML Basics", "description": "In this module, we'll begin to explore how to design and create websites by exploring the base language used to power all websites: HTML. By the end of this lesson, you'll be able to: identify and use common HTML tags; add an image to a webpage; create HTML-formatted tables; use hyperlinks to connect a series of webpages; upload your finished HTML pages to a web host; and, learn some tips and tricks for styling pages and practicing your coding.", "video": ["Module 2 Introduction", "Components and Structure of a Website", "Creating Your Own HTML: Setting Up a Template", "Creating Your Own HTML: Creating Links and Formatting Text", "Creating Your Own HTML: Working with Images", "Creating Your Own HTML: Working with Tables", "Creating HTML - How to Practice", "How to Put Your HTML on the Internet", "How to Test Your HTML", "Basic Styling in Webpages", "HTML Additional Resources", "Do you have a favorite tag?", "Telling a Friend about HTML", "Setting Up Your Own HTML Template", "Module 2 Quiz"]}, {"title": "Introduction to Programming Using JavaScript", "description": "Now that you know some basic HTML, it's time to turn our attention to another common scripting language used to make websites dynamic - that is allowing users to interact with your webpages - JavaScript. While learning about JavaScript, you'll also gain some foundational knowledge common to all programming languages. By the end of this module, you'll be able to: discuss what is meant by dynamic content; perform essential programming language tasks; create simple JavaScript programs; use JavaScript to set up alerts and respond to events, to read input, and to change HTML; and conduct basic JavaScript testing.", "video": ["Module 3 Introduction", "Static vs. Dynamic Webpages", "The Value of JavaScript to Our Websites", "JavaScript Basics: Fundamental Syntax, Part 1", "JavaScript Basics: Fundamental Syntax, Part 2", "Putting JavaScript to Work: Using Alerts and Prompts", "Putting Javascript to Work: Events", "Putting JavaScript to Work: Gathering Additional User Input and Dynamically Modifying HTML", "Testing JavaScript", "JavaScript Additional Resources", "JavaScript and HTML", "Tell a Friend About JavaScript", "Our First JavaScript Program", "Module 3 Quiz"]}, {"title": "Websites with Style: CSS Properties, Colors and Fonts", "description": "While HTML and JavaScript are very useful for web development, they don't exactly make websites look attractive - that's where cascading style sheets, or CSS, comes into play. While HTML is used to build the structure of our pages and JavaScript is used to provide interactive functionality, CSS is used to graphically design and layout webpages. By the end of this module, you'll be able to: discuss common mistakes in designing a website; identify and apply CSS basics like purpose and syntax; use CSS properties to control fonts, colors, layouts, and other common properties; differentiate between in-line, internal, and external CSS; and practice and test your cascading style sheets.", "video": ["Module 4 Introduction", "Plain Websites are Boring", "CSS Basics, Part 1", "CSS Basics, Part 2", "Putting CSS to Work: Getting Started with External CSS", "Putting CSS to Work: Setting Colors with CSS", "Putting CSS to Work: Controlling Your Page Layout", "Putting CSS to Work: Common CSS Properties", "How to Practice CSS", "Testing Website Styles", "CSS Additional Resources", "HTML, CSS, and JavaScript", "Enhancing a Webpage with CSS", "Module 4 Quiz"]}, {"title": "Creating HTML Forms", "description": "In this lesson, we're going to learn to apply all of the skills we've acquired so far to make a very common, and very useful type of webpage - an HTML form. HTML forms are seen everywhere on the internet and are used to capture particular information from users in a variety of ways. By the end of this module you'll be able to: create basic HTML forms; identify and appropriately use different types of HTML input; validate user input; submit HTML forms; and test how your forms are working and troubleshoot errors.", "video": ["Module 5 Introduction", "HTML Forms User Input", "HTML Form Elements", "HTML Form Validation: JavaScript", "HTML Form Validation: Complex Form Example", "HTML Form Validation: Additional Features", "HTML Form Validation: Processing", "HTML Forms Additional Resources", "Exploring HTML Forms", "HTML Form Practice", "Module 5 Quiz"]}, {"title": "Creating Web Applications", "description": "In our final module, we're going to explore the basics of designing web applications - programming useful and dynamic webpages that allow our users to interact with them. By the end of this lesson you'll be able to: distinguish between client and server-side development; apply advanced JavaScript programming skills to create logic with selection and iteration; create new features for applications; create more advanced HTML forms; and practice and learn additional troubleshooting and problem-solving techniques. The module wraps with a final peer review activity that will draw upon all of the skills you've learned in this course.", "video": ["Module 6 Introduction", "Client-side versus Server-side Application Development", "Features in Web Applications: The While Loop", "Features in Web Applications: The For Loop", "Creating New Features in Web Applications", "Guided Practice with HTML Form Validation, Part 1", "Guided Practice with HTML Form Validation, Part 2", "Validating HTML Forms", "Wrapping Up", "Course Summary", "Module 6 Quiz", "Complete HTML Form"]}]}, {"title": "JavaScript, jQuery, and JSON", "course_info": "About this course: In this course, we'll look at the JavaScript language, and how it supports the Object-Oriented pattern, with a focus on the unique aspect of how JavaScript approaches OO. We'll explore a brief introduction to the jQuery library, which is widely used to do in-browser manipulation of the Document Object Model (DOM) and event handling. You'll also learn more about JavaScript Object Notation (JSON), which is commonly used as a syntax to exchange data between code running on the server (i.e. in PHP) and code running in the browser (JavaScript/jQuery).\n\nIt is assumed that learners have already taken the Building Web Applications and Building Database Applications in PHP courses in this specialization.", "target_audience": "Who is this class for: Students who want to learn browser-based programming and how it works as part of a solution to web applications", "created_by": "University of Michigan", "teach_by": [{"name": "Charles Severance", "department": "School of Information"}], "package_num": "4", "package_name": "Web Applications for Everybody Specialization ", "level": "Intermediate", "rating": "4.7", "week_data": [{"title": "Introduction to JavaScript", "description": "We talk a quick look at the JavaScript language. We assume that you already know PHP - so it is a pretty quick introduction focusing on what is different about JavaScript.", "video": ["Textbook & Course Resources", "Your Own Application", "Welcome to the Course", "JavaScript Overview", "Basic JavaScript", "JavaScript - Core Language Features", "JavaScript - Variables and Expressions", "JavaScript - Arrays and Control Structures", "Code Walkthrough: JavaScript", "JavaScript - Document Object Model", "Code Walkthrough: Document Object Model (DOM)", "JavaScript", "Bonus: Brendan Eich - Inventing JavaScript", "Code Walkthrough - Javascript/Profiles", "Assignment Specification: JavaScript/Profiles", "Auto-Grader: JavaScript / Profiles", "Peer-Grader: JavaScript / Profiles"]}, {"title": "JavaScript Objects", "description": "We do a quick look at how the JavaScript language supports the Object-Oriented pattern.  This is the second time we look at the OO pattern so we focus on the unique aspect of how JavaScript approaches OO.", "video": ["JavaScript - Object Oriented Concepts", "JavaScript - Building Objects", "JavaScript - Object Life Cycle", "JavaScript Objects"]}, {"title": "Using JQuery", "description": "This is a brief introduction to the JQuery library which is widely used to do in-browser manipulation of the Document Object Model(DOM) and event handling.", "video": ["jQuery Basics", "Code Walkthrough: jQuery Basics", "Forms and jQuery", "Code Walkthrough: Forms and JQuery", "JQuery", "Bonus: John Resig - JQuery", "Code Walkthrough: Profiles, Positions and JQuery", "Assignment Specification: Profiles, Positions and JQuery", "Auto-Grader: Profiles, Positions and jQuery", "Peer-Grader: Profiles, Positions and jQuery"]}, {"title": "JSON - JavaScript Object Notation", "description": "In this section we look at JavaScript Object Notation (JSON). JSON is commonly used as a syntax to exchange data between code running on the server (i.e. in PHP) and code running in the browser (JavaScript/JQuery).", "video": ["JavaScript Object Notation (JSON)", "JSON and jQuery", "Code Walkthrough: JavaScript Object Notation", "JSON Chat", "Code Walkthrough: JSON Chat", "Code WalkThrough - JSON CRUD", "Code Walkthrough: Profile, Positions, Education, and JSON", "Assignment Specification: Profiles, Positions, and Education", "Auto-Grader: Profiles, Positions, and Education", "Peer-Grader: Profiles, Positions, and Education"]}]}, {"title": "Programming Mobile Applications for Android Handheld Systems: Part 1", "course_info": "About this course: This course introduces you to the design and implementation of Android applications for mobile devices. You will develop an app from scratch, assuming a basic knowledge of Java, and learn how to set up Android Studio, work with various Activities and create simple user interfaces to make your apps run smoothly.", "target_audience": null, "created_by": "University of Maryland, College Park", "teach_by": [{"name": "Dr. Adam Porter", "department": "Computer Science"}], "package_num": null, "package_name": null, "level": null, "rating": "4.6", "week_data": [{"title": "Android Platform and Development Environment", "description": " ", "video": ["Overview", "Introduction to the Android Platform", "The Android Development Environment - Part 1", "The Android Development Environment - Part 2", "Android Platform and Development Environment", "Lab - Learn to Submit", "Lab - Development Environment"]}, {"title": "Application Fundamentals and the Activity Class", "description": " ", "video": ["Application Fundamentals - Part 1", "Application Fundamentals - Part 2", "The Activity Class - Part 1", "The Activity Class - Part 2", "Introduction to Amazon Guest Lecture - AppStores and Free Ebook", "Introduction to Amazon Guest Lecture - App Monetization", "Preview - Programming Mobile Services for Android Handheld Systems", "Application Fundamentals and the Activity Class", "Lab - The Activity Class"]}, {"title": "Intents, Permissions, and Fragments", "description": "", "video": ["The Intent Class - Part 1", "The Intent Class - Part 2", "Permissions", "The Fragment Class - Part 1", "The Fragment Class - Part 2", "Intents, Permissions, and Fragments", "Lab - Intents", "Lab - Permission", "Lab - Fragments"]}, {"title": "User Interface Classes", "description": " ", "video": ["User Interface Classes - Part 1", "User Interface Classes - Part 2", "User Interface Classes - Part 3", "User Interface Classes - Part 4", "Part 1 Closing", "User Interface Classes", "Lab - User Interface Classes"]}, {"title": "Build From Scratch Assignment", "description": "", "video": ["Modern Art UI"]}]}, {"title": "Design Patterns", "course_info": "About this course: This course extends object-oriented analysis and design by incorporating design patterns to create interactive applications. Through a survey of established design patterns, you will gain a foundation for more complex software applications. Finally, you will identify problematic software designs by referencing a catalog of code smells.\n\nYou will be challenged in the Capstone Project to redesign an existing Java-based Android application to implement a combination of design patterns. You will also critique a given Java codebase for code smells.\n\nAfter completing this course, you will be able to: \n• Demonstrate how to use design patterns to address user interface design issues.\t\n• Identify the most suitable design pattern to address a given application design problem.\t\n• Apply design principles (e.g., open-closed, dependency inversion, least knowledge).\t\n• Critique code by identifying and refactoring anti-patterns.\n• Apply the model-view-controller architectural pattern.", "target_audience": null, "created_by": "University of Alberta", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "package_num": "2", "package_name": "Software Design and Architecture Specialization ", "level": "Intermediate", "rating": "4.6", "week_data": [{"title": "Introduction to Design Patterns: Creational & Structural Patterns", "description": "Design patterns help to solve common design issues in object-oriented software. You will learn what they are and how they can be applied. In this module you will learn the creational and structural design patterns. You will continue to learn and practice expressing designs in UML, and code some of these patterns in Java.", "video": ["Meet Your Presenter – Sam Jeffery", "Meet Your Facilitator – Christopher Djuric", "2.1.1 – What is a Design Pattern?", "Discussion: Introduce Yourself", "Discussion: Design Pattern Examples", "Design Patterns Glossary", "2.1.2 – Creational, Structural, and Behavioural Patterns", "2.1.3 – Singleton Pattern", "2.1.4 – Factory Method Pattern", "2.1.5 – Facade Pattern", "2.1.6 – Adapter Pattern", "Ungraded Assignment – Adapter Pattern", "Ungraded Assignment - Adapter Pattern (Solution)", "2.1.7 – Composite Pattern", "Ungraded Assessment – Composite Pattern", "Ungraded Assignment - Composite Pattern (Solution)", "2.1.8 – Proxy Pattern", "2.1.9 – Decorator Pattern", "Module 1 Review"]}, {"title": "Behavioural Design Patterns", "description": "You will continue learning useful design patterns and add them to your toolbox. In this module, you will learn the behavioural patterns. This will include communicating them in UML and coding them in Java!", "video": ["2.2.1 – Template Method Pattern", "2.2.2 – Chain of Responsibility Pattern", "2.2.3 – State Pattern", "Discussion: Undo/Redo As a Pattern", "2.2.4 – Command Pattern", "Mediator Pattern", "Capstone Assignment 2.1 - Implement the Command Pattern (Solution)", "2.2.5 – Observer Pattern", "Ungraded Assignment – Observer Pattern", "Ungraded Assignment - Observer Pattern (Solution)", "Capstone Assignment 2.1– Implement the Command Pattern", "Module 2 Review"]}, {"title": "Working with Design Patterns & Anti-patterns", "description": "You will learn a design pattern that is very useful for user interfaces: model-view-controller, or MVC. Then you will learn some principles underlying the design patterns, to create software that is flexible, reusable, and maintainable. Finally, you will learn some of the symptoms of bad design, which we call code smells or antipatterns.", "video": ["2.3.1 – MVC Pattern", "Ungraded Assignment – MVC Pattern", "Ungraded Assignment - MVC Pattern (Solution)", "Capstone Assignment 2.2 - Implement MVC Pattern (Solution)", "Liskov Substitution Principle", "2.3.2 – Open/Closed Principle", "2.3.3 – Dependency Inversion Principle", "2.3.4 – Composing Objects Principle", "2.3.5 – Interface Segregation Principle", "2.3.6 – Principle of Least Knowledge", "Discussion: Stories of Bad Coding", "2.3.7 – Part 1 - Code Smells", "2.3.7 – Part 2 - Code Smells", "Capstone Assignment 2.2 – Implement MVC Pattern", "Module 3 Review"]}, {"title": "Capstone Challenge", "description": "In the previous modules, you were introduced to a variety of design patterns, and applied two of these to the example Android code base. Now, in the final module of the course, you will identify and fix specific code smells in this code base. After completing these tasks, you will be ready to complete the final exam.", "video": ["Capstone Assignment 2.3 - Identify and Fix Code Smells (Solution)", "Discussion: Last Word – Design Patterns", "Acknowledgements", "Credits", "Capstone Assignment 2.3 – Identify and Fix Code Smells", "Final Exam"]}]}, {"title": "Responsive Website Basics: Code with HTML, CSS, and JavaScript ", "course_info": "About this course: In this course you will learn three key website programming and design languages: HTML, CSS and JavaScript. You will create a web page using basic elements to control layout and style.  Additionally, your web page will support interactivity. \n\nAt the end of the course, you will be able to:\n\n1. Define the purpose of HTML, CSS and JavaScript\n2. Make a simple web page using HTML\n3. Use CSS to control text styles and layout\n4. Use CSS libraries such as Bootstrap to create responsive layouts\n5. Use JavaScript variables and functions\n6. Manipulate web page content using JavaScript\n7. Respond to user input using JavaScript\n\nIn this course, you will complete: \n2 assignments writing HTML, CSS and JavaScript, each taking ~1 hour to complete\n4 quizzes, each taking ~20 minutes to complete\n1 programming exercise~30 minutes to complete\nmultiple practice quizzes, each taking ~5 minutes to complete\n\nParticipation in or completion of this online course will not confer academic credit for University of London programmes", "target_audience": null, "created_by": "University of London, Goldsmiths, University of London", "teach_by": [{"name": "Dr Matthew Yee-King", "department": "Computing Department, Goldsmiths, University of London"}, {"name": "Dr Marco Gillies", "department": "Computing Department, Goldsmiths, University of London"}, {"name": "Dr Kate Devlin", "department": "Department of Computing, Goldsmiths"}], "package_num": "1", "package_name": "Responsive Website Development and Design Specialization ", "level": null, "rating": "4.5", "week_data": [{"title": "Course introduction", "description": "Welcome to the first course of the 'Responsive website development and design' specialisation! ", "video": ["Course introduction", "Course outline", "Grading and assessment information"]}, {"title": "HTML ", "description": "We start the course by looking at how to set up a dev environment, build a HTML navbar and how to embed images and create lists using HTML.<p>Also we'll create properly structured HTML documents and have a look at the world's first web page. <p> Looking forward to working with you this week! <p> Matthew, Marco and Kate", "video": ["Overview", "Code for this module", "Web basics", "Web basics", "URLs for this lecture", "Set up the dev environment", "Set up the dev environment", "Write some HTML", "HTML", "Build a Nav bar", "Navigation bar", "Images and lists", "Images and lists", "Properly structured documents", "Properly structured documents", "URL for this lecture", "The world's first web page revisited", "The world's first web page", "What does 'responsive' mean?", "HTML summary", "HTML summary quiz", "Make a web page"]}, {"title": "CSS", "description": "Welcome to the second module of 'Responsive website basics'. <p>In this section of the course we will have a look at linking external CSS files to your HTML documents, controlling fonts with CSS and using CSS to customise hyperlink formatting and to control text layout. We will also install the bootstrap library and implement a responsive grid layout- Enjoy!  <p> - Matthew, Marco and Kate", "video": ["Overview", "Code for this module", "External CSS file", "External CSS file", "Fonts", "Fonts", "Customising links", "Customising links", "Layout control", "CSS media queries", "Layout control", "URL for this lecture", "Install Bootstrap", "Install Bootstrap", "Responsive grid", "Responsive Grid", "CSS summary", "CSS summary quiz", "Test your CSS and HTML"]}, {"title": "Beginning JavaScript ", "description": "Welcome to the third module of 'Responsive website basics'. <p>In this module we will write simple JavaScript programs and learn how to write programs that can respond to user input such as clicking on HTML elements. We will also take a look at JavaScript functions and use jQuery to manipulate web pages.</p>Finally, you will learn how to write your own javaScript functions including anonymous functions.  <p> Looking forward to working with you this week! <p> - Matthew and Marco", "video": ["Overview", "JavaScript Resources", "Introduction to JavaScript", "Introduction to JavaScript", "Responding to mouse clicks", "Code for this lesson", "Responding to mouse clicks", "The Console", "Code for this lesson", "The Console", "jQuery", "Manipulating HTML elements", "Code for this lesson", "Manipulating HTML elements", "Script tag", "Code for this lesson", "Script tag", "Anonymous functions", "Code for this lesson", "Anonymous functions", "Image gallery example", "Image gallery code", "Beginning JavaScript summary", "Beginning JavaScript summary quiz", "Download and edit the example gallery code."]}, {"title": "Going deeper into JavaScript ", "description": "Welcome to the final module of 'Responsive website basics'. <p>In this final section of the course we will define JavaScript variables and write simple JavaScript programs that use and change the values of variables. </p>We'll also write if statements to control the flow of a JavaScript program,  use boolean variables in conjunction with if statements and write javaScript in the context of moderately complex web applications.  <p> Enjoy! <p> - Matthew and Marco", "video": ["Overview", "Variables", "Variables", "Using variables", "Code from this lesson", "Using variables", "Slide Show Example Code", "Variables in practice", "Variables in practice", "If statements", "If statements", "Boolean variables", "Slide Show Example Code", "Boolean variables", "eReader example", "eReader Example Code", "eReader example", "Going deeper into JavaScript summary", "Course summary", "Going deeper into JavaScript summary quiz", "Make a night mode for the ereader"]}]}, {"title": "Ruby on Rails: An Introduction", "course_info": "About this course: Did you ever want to build a web application?  Perhaps you even started down that path in a language like Java or C#, when you realized that there was so much “climbing the mountain” that you had to do? Maybe you have heard about web services being all the rage, but thought they were too complicated to integrate into your web application. Or maybe you wondered how deploying web applications to the cloud works, but there was too much to set up just to get going.\n \nIn this course, we will explore how to build web applications with the Ruby on Rails web application framework, which is geared towards rapid prototyping.  Yes, that means building quickly! At the conclusion of this course, you will be able to build a meaningful web application and deploy it to the “cloud” using a Heroku PaaS (Platform as a Service). Best of all, it will almost feel effortless… Really!\n \n“But wait”, you will say, “there is no way that we can build a useful application if there is no database involved. You need the data for an application to be useful.” Great point! But what if… instead of getting the data from the database, we get it from the internet by tapping into one of the web services out there that readily provides data needed by our application? “Ok, but that’s probably very complicated”, you will say. Take this course and you will be pleasantly surprised at just how easy it is!", "target_audience": null, "created_by": "Johns Hopkins University", "teach_by": [{"name": "Kalman Hazins", "department": "Whiting School of Engineering"}], "package_num": "1", "package_name": "Ruby on Rails Web Development Specialization ", "level": null, "rating": "4.5", "week_data": [{"title": "Welcome and Setting Up the Development Environment", "description": "In this module, we will install software required to develop Ruby on Rails applications. We will also demonstrate the use of a popular Ruby on Rails editor called “Sublime Text”. We will finish the module by familiarizing ourselves with a version control system called “Git” that will be used later in the course to submit assignments, as well as to deploy Ruby on Rails applications to a PaaS (platform as a service) called “Heroku”.", "video": ["Course Introduction", "Grading", "Welcome to Module 1: Setting Up the Development Environment", "Github Repository for Module 1", "Recommended Books", "Software Installation For Linux Users", "Software Installation for Mac Users", "Software Installation for Windows Users", "Editors & IDEs for Ruby on Rails", "Introduction to Git", "Introduction to Git", "Local Git Repository", "Remote Repos and Github", "Module 1 Quiz"]}, {"title": "Introduction to Ruby", "description": "In this module, we will explore the different areas of the Ruby programming language.<p>We will start with the basics and continue with more advanced topics, such as arrays and hashes. We will also spend time exploring object oriented programming in Ruby, and finish the module by demonstrating how to perform unit testing.</p>", "video": ["Welcome to Module 2: Introduction to Ruby", "GitHub Repository for Module 2", "Recommended Books", "Ruby Basics", "Flow of Control", "Functions", "Blocks", "Files", "Practice Programming Assignment - Case Statement", "Strings", "Arrays", "Ranges", "Hashes", "Practice Programming Assignment: Collections", "Classes", "Class Inheritance", "Modules", "Scope", "Access Control", "Practice Programming Assignment: Classes", "Introduction to Unit Testing", "Introduction to RSpec", "RSpec Matchers", "Calculating Maximum Word Frequency"]}, {"title": "Introduction to Ruby on Rails", "description": "In this module, we will become familiar with core concepts behind Ruby on Rails, such as CoC (Convention Over Configuration) and MVC (Model-View-Controller). <p>We will then learn about consuming JSON API with HTTParty, a Ruby gem.  We will then integrate this ability to consume JSON API to serve as the data layer for our Rails application.</p>Finally, to conclude this module we will deploy the application to Heroku and write a unit test that will verify the desired functionality.", "video": ["Welcome to Module 3: Introduction to Ruby on Rails", "Github Repository for Module 3", "Recommended Books", "Introduction to Rails", "Creating your First Application", "Controller and View", "Routes", "Moving Business Logic Out of View", "Helpers", "Introduction to HTTParty", "Bundler", "Rails & HTTParty Integration", "CSS, Parameters & Root Path", "Practice Programming Assignment: HTTP Client", "Deploying to Heroku", "Blackbox Testing", "Debugging Rails Applications", "Coding Assignment - Recipe Hunter"]}]}, {"title": "Control of Mobile Robots", "course_info": "About this course: Control of Mobile Robots is a course that focuses on the application of modern control theory to the problem of making robots move around in safe and effective ways. The structure of this class is somewhat unusual since it involves many moving parts - to do robotics right, one has to go from basic theory all the way to an actual robot moving around in the real world, which is the challenge we have set out to address through the different pieces in the course.", "target_audience": null, "created_by": "Georgia Institute of Technology", "teach_by": [{"name": "Dr. Magnus Egerstedt", "department": "School of Electrical and Computer Engineering"}], "package_num": null, "package_name": null, "level": null, "rating": "4.8", "week_data": [{"title": "Introduction to Robots", "description": "", "video": ["Getting Started", "Control of Mobile Robots", "Preparing for Programming Assignments", "What's Control Theory, Anyway?", "On the Need for Models", "Cruise-Controllers", "Control Design Basics", "Performance Objectives", "PID Control", "Implementation", "Glue Lecture 1", "Programming & Simulation Lecture 1", "Optional Programming Assignment 1: Instructions", "Get More From Georgia Tech", "Module 1 Lecture Slides", "MATLAB Tutorials", "Quiz 1"]}, {"title": "Mobile Robots", "description": "The description goes here", "video": ["Driving Robots Around?", "Differential Drive Robots", "Odometry", "Sensors", "Behavior-Based Robotics", "Go-to-Goal", "The GRITS Simulator", "Obstacle Avoidance", "Glue Lecture 2", "Programming & Simulation Lecture 2", "Optional Programming Assignment 2: Instructions", "Earn a Georgia Tech Badge/Transcript/CEUs", "Installing MATLAB", "Module 2 Lecture Slides", "Quiz 2"]}, {"title": "Linear Systems", "description": "", "video": ["A Simple Robot", "State-Space Models", "Linearizations", "LTI Systems", "Stability", "Swarm Robotics", "Output Feedback", "State Feedback", "Glue Lecture 3", "Programming & Simulation Lecture 3", "Optional Programming Assignment 3: Instructions", "Module 3 Lecture Slides", "Quiz 3"]}, {"title": "Control Design", "description": "", "video": ["Stabilizing the Point Mass", "Pole-Placement", "Controllability", "Segway Robots", "Observers", "Observability", "The Separation Principle", "Practical Considerations", "Glue Lecture 4", "Programming & Simulation Lecture 4", "Optional Programming Assignment 4: Instructions", "Module 4 Lecture Slides", "Quiz 4"]}, {"title": "Hybrid Systems", "description": "", "video": ["Switches Everywhere", "Hybrid Automata", "A Counter-Example", "Danger - Beware!", "The Bouncing Ball", "The Zeno Phenomenon", "Sliding Mode Control", "Regularizations", "Glue Lecture 5", "Programming & Simulation Lecture 5", "Optional Programming Assignment 5: Instructions", "Module 5 Lecture Slides", "Quiz 5"]}, {"title": "The Navigation Problem", "description": "", "video": ["Behaviors Revisited", "Hard Switches vs Blending", "Convex and Non-Convex Worlds", "Boundary Following", "The Induced Mode", "A Complete Navigation System", "Practical Considerations", "Let's Do it!", "Glue Lecture 6", "Programming & Simulation Lecture 6", "Optional Programming Assignment 6: Instructions", "Module 6 Lecture Slides", "Quiz 6"]}, {"title": "Putting It All Together", "description": "", "video": ["Approximations and Abstractions", "A Layered Architecture", "Differential-Drive Trackers", "A Clever Trick", "Other Robot Classes", "Car-Like Robots", "To Probe Further", "In Conclusion", "Glue Lecture 7", "Programming & Simulation Lecture 7", "Optional Programming Assignment 7: Instructions", "Module 7 Lecture Slides", "Quiz 7"]}]}, {"title": "Single Page Web Applications with AngularJS", "course_info": "About this course: Do you want to write powerful, maintainable, and testable front end applications faster and with less code? Then consider joining this course to gain skills in one of the most popular Single Page Application (SPA) frameworks today, AngularJS. Developed and backed by Google, AngularJS is a very marketable skill to acquire.\n\nIn this course, we will explore the core design of AngularJS 1.x (latest version of AngularJS 1), its components and code organization techniques. We will enhance the functionality of our web app by utilizing dependency injection to reuse existing services as well as write our own. We will create reusable HTML components that take advantage of AngularJS data binding as well as extend HTML syntax with a very powerful feature of AngularJS called directives. We’ll set up routing so our SPA can have multiple views. We will also learn how to unit test our functionality. At the end of this course, you will build a fully functional, well organized and tested web application using AngularJS and deploy it to the cloud.", "target_audience": null, "created_by": "Johns Hopkins University", "teach_by": [{"name": "Yaakov Chaikin", "department": "Whiting School of Engineering"}], "package_num": "5", "package_name": "Ruby on Rails Web Development Specialization ", "level": "Intermediate", "rating": "4.9", "week_data": [{"title": "Introduction to AngularJS", "description": "In this module, we are going to start by going over how grading works for this course, will introduce some recommended books, as well as give you the information on how to find all of the source code that you will see throughout the course.\n\nWe will then dive into the development environment setup for both Mac and Windows.\nThe core of this module will be the introduction not only to the basics of AngularJS, but more importantly, the concepts that back AngularJS as a good solution for developing front-end web applications.\n\nTo become a good software developer and not just with AngularJS, you will need to understand these concepts. But for becoming a good AngularJS developer, these concepts are essential, because they will allow you to understand the issues the framework is addressing and therefore get a good grasp on the solutions AngularJS is offering.", "video": ["Course Introduction", "Welcome to Module 1", "How Grading and Being Late on Assignments Works", "Recommended Books", "CHECK OUT MY SITE!", "ALL of the EXAMPLE CODE for this course", "Is It Worth It To Learn Angular 1 Since Angular 2 Already Came Out?", "Quiz 1 - Very Important Quiz!", "Development Environment Setup - What We Will Need", "Development Environment Setup for Mac, Part 1", "Development Environment Setup for Mac, Part 2", "Development Environment Setup for Windows, Part 1", "Development Environment Setup for Windows, Part 2", "Quiz 2", "Lecture 1: Why NOT Keep Things Simple?", "Quiz 3", "Lecture 2, Part 1: Why Does Code Get Complex?", "Lecture 2, Part 2: Why Does Code Get Complex?", "Quiz 4", "Lecture 3: Model-View-ViewModel (MVVM)", "Quiz 5", "Lecture 4: AngularJS Installation and First Simple App", "Quiz 6", "Lecture 5: Sharing Data With The View Through Scope", "Lecture 6: Implementing NameCalculator Example in AngularJS", "Lecture 7: What’s Behind the “Magic”: Custom HTML Attributes", "Quiz 7", "Lecture 8: Dependency Injection", "Lecture 9: How Dependency Injection Works in Javascript", "Quiz 8", "Lecture 10: Protecting Dependency Injection from Minification", "Quiz 9", "Lecture 11, Part 1: Expressions and Interpolation", "Lecture 11, Part 2: Expressions and Interpolation", "Frequently Asked Questions", "ENTER RAFFLE (ends April 23rd, 2017)", "Module 1 Wrap-up", "Module 1 Coding Assignment"]}, {"title": "Module 2 - Filters, Digest Cycle, Controller Inheritance, and Custom Services", "description": "We will start this module by learning how to use Angular filters to manipulate our data into the format we want and learn how to create our own custom filters. We will then dive deep into the digest cycle, which is the process AngularJS uses to magically update our web page with the bound data from our ViewModel or the controller. Understanding this process is crucial in getting comfortable with AngularJS. We'll also see some cases where we'll need to assist that process somewhat and understand why that is. After that, we'll learn one of the most fundamental concepts in the Javascript programming language, which is Prototypal Inheritance. Clear understanding of that topic is a must before we talk about inheritance between AngularJS controllers in our application. We'll finish off the module by learning how to create our own custom Angular services as well as how to configure them. With custom Angular services we'll be able to share data across different controllers or other components in our application. We will also learn a few useful Angular directives that allow us to place looping and conditional logic direction into our HTML. You'll see that by the end of this module, you'll have the skills to create a fairly sophisticated web application that starts to use some of the more advanced software architecture techniques.", "video": ["Welcome to Module 2", "Recommended Books", "Lecture 12: Filters", "Quiz 10", "Lecture 13, Part 1: Creating Custom Filters", "Lecture 13, Part 2: Creating Custom Filters", "Lecture 13, Part 3: Creating Custom Filters", "Quiz 11", "Lecture 14, Part 1: Digest Cycle", "Quiz 12", "Lecture 14, Part 2: Digest Cycle", "Lecture 14, Part 3: Digest Cycle", "Quiz 13", "Lecture 15: $digest and $apply", "Lecture 16: 2-way, 1-way and 1-time Binding", "Quiz 14", "Lecture 17: ng-repeat", "Lecture 18: Filtered ng-repeat", "Quiz 15", "Lecture 19, Part 1: Prototypal Inheritance", "Lecture 19, Part 2: Prototypal Inheritance", "Quiz 16", "Lecture 19, Part 3: Scope Inheritance", "Lecture 19, Part 4: Scope Inheritance", "Lecture 19, Part 5: Controller As Syntax", "CONNECT WITH ME!", "Quiz 17", "Lecture 20, Part 1: Custom Services", "Lecture 20, Part 2: Custom Services", "Quiz 18", "Lecture 21, Part 1: Custom Services with .factory()", "Lecture 21, Part 2: Custom Services with .factory()", "Quiz 19", "Lecture 22, Part 1: Custom Services with .provider()", "Lecture 22: Part 2: Custom Services with .provider()", "Quiz 20", "Lecture 23: ng-if, ng-show and ng-hide", "Frequently Asked Questions", "Module 2 Wrap-Up", "Quiz 21", "Module 2 Assignment"]}, {"title": "Week 3 - Promises, Ajax, and Custom Directives", "description": "Welcome to module 3! In this module, we go over a lot of essential features of AngularJS. We will start with learning about the Promise API. While Promises are essential to Angular, this topic reaches far beyond Angular. It's really an essential topic to understanding modern web development with Javascript. We will also learn about making calls to the server through the built in Angular service called the HTTP service. We'll finish off the module by spending a considerable amount of time on THE crown feature of AngularJS: directives. Directives are really at the core of the entire framework. They not only allow us to extend the functionality of existing HTML elements, which is already pretty amazing in an of itself, but they also allow us to create our own element with custom view and custom behavior. Pretty exciting stuff! ", "video": ["Welcome to Module 3", "Recommended Books", "Lecture 24, Part 1: Asynchronous Behavior with Promises and $q", "Quiz 22", "Lecture 24, Part 2: Asynchronous Behavior with Promises and $q", "Quiz 23", "Lecture 25, Part 1: Ajax with $http Service", "Quiz 24", "Lecture 25, Part 2: Ajax with $http Service", "ENTER RAFFLE (ends April 23rd, 2017)", "Quiz 25", "Lecture 26, Part 1: Directives: Dynamic HTML", "Lecture 26, Part 2: Directives: Dynamic HTML", "Quiz 26", "Lecture 27: restrict Property", "Lecture 28, Part 1: Directive’s Isolate Scope: “=” and “@”", "Lecture 28, Part 2: Directive’s Isolate Scope: “=” and “@”", "Quiz 27", "Lecture 29, Part 1: Using Controllers Inside Directives", "Lecture 29, Part 2: Using Controllers Inside Directives", "Quiz 28", "Lecture 30, Part 1: Directive APIs and “&”", "Lecture 30, Part 2: Directive APIs and “&”", "Quiz 29", "Lecture 31, Part 1: Manipulating the DOM with link", "Lecture 31, Part 2: Manipulating the DOM with link", "Quiz 30", "Lecture 32, Part 1: Using Directive’s transclude to Wrap Other Elements", "Lecture 32, Part 2: Using Directive’s transclude to Wrap Other Elements", "Quiz 31", "Frequently Asked Questions", "Module 3 Wrap-Up", "Module 3 Assignment"]}, {"title": "Module 4 - Components, Events, Modules, and Routing", "description": "In this module, we start by introducing the idea of Component-based architecture. We will then delve into the AngularJS component API. The component API is something that was just recently added into Angular 1 and it's not only supposed to improve your application through the use of Component-based architecture, but also prepare you for an upgrade to Angular version 2, which uses components almost exclusively. We will then learn about the AngularJS event system and how to split up our application into smaller modules that can then be glued together to produce our final application. We'll finish off the module by diving fairly deep into Routing between views in your application and, specifically, into the use of the ui-router module, which is one of the most popular open source routing solutions within the AngularJS ecosystem. In fact, it's so popular that even the main Google documentation for routing in Angular links to ui-router. Routing is a very important topic. Without it, your Single Page Application is stuck displaying just 1 view, without an elegant way to display other views.", "video": ["Welcome to Module 4", "Recommended Books", "Lecture 33, Part 1: Components & Component-Based Architecture", "Lecture 33, Part 2: Components & Component-Based Architecture", "Lecture 33, Part 3: Components & Component-Based Architecture", "Lecture 33, Part 4: Components & Component-Based Architecture", "CONNECT WITH ME!", "Quiz 32", "Lecture 34, Part 1: AngularJS Event System", "Lecture 34, Part 2: AngularJS Event System", "Quiz 33", "Lecture 35, Part 1: Modules", "Lecture 35, Part 2: Modules", "Quiz 34", "Lecture 36, Part 1: Routing", "Lecture 36, Part 2: Routing", "Quiz 35", "Lecture 37, Part 1: Routing State with Controller", "Lecture 37, Part 2: Routing State with Controller", "Quiz 36", "Lecture 38, Part 1: Routing State with resolve", "Lecture 38, Part 2: Routing State with resolve", "Quiz 37", "Lecture 39, Part 1: Routing State with URL Parameters", "Lecture 39, Part 2: Routing State with URL Parameters", "Quiz 38", "Lecture 40, Part 1: Routing State with Nested Views", "Lecture 40, Part 2: Routing State with Nested Views", "Quiz 39", "Lecture 41, Part 1: Router State Transition Events", "Lecture 41, Part 2: Router State Transition Events", "Quiz 40", "Frequently Asked Questions", "Module 4 Wrap-Up", "Module 4 Assignment"]}, {"title": "Module 5 - Form Validation, Testing, and Restaurant Site Development", "description": "Welcome to module 5! This is the last module in the course. We'll start this module by learning just how easy it is to validate forms with Angular. We will then delve into unit testing our AngularJS code. We will go over how to set up tests for every type of major Angular artifact: controller, service, directive, and component, as well as how to test services that access the network through the HTTP service. However, the last part of the module is the most fun. We will take the site that was developed for our real client in my previous course and re-write the entire thing using AngularJS. However, the coding fun doesn't have to stop there. After you finish the required part of the course, you can move on to the optional bonus part where we take our newly developed AngularJS application and enhance with it even more features that will allow the restaurant owners to administer their own data. We'll go over setting up authentication, editing restaurant menu items, uploading menu item pictures and so on.", "video": ["Welcome to Module 5", "Recommended Books", "Lecture 42, Part 1: Form Validation", "Lecture 42, Part 2: Form Validation", "Quiz 41", "Lecture 43, Part 1: Testing Javascript with Jasmine", "Lecture 43, Part 2: Testing Javascript with Jasmine", "ENTER RAFFLE (ends April 23rd, 2017)", "Quiz 42", "Lecture 44, Part 1: Testing AngularJS Controllers", "Lecture 44, Part 2: Testing AngularJS Controllers", "Lecture 44, Part 3: Testing AngularJS Controllers", "Lecture 44, Part 4: Testing AngularJS Controllers", "Quiz 43", "Lecture 45, Part 1: Testing AngularJS Services and $http", "Lecture 45, Part 2: Testing AngularJS Services and $http", "Quiz 44", "Lecture 46, Part 1: Testing AngularJS Directives", "Lecture 46, Part 2: Testing AngularJS Directives", "Quiz 45", "Lecture 47, Part 1: Testing AngularJS Components", "Lecture 47, Part 2: Testing AngularJS Components", "Quiz 46", "(OPTIONAL) Lecture 48, Part 1: Visit With The Client", "(OPTIONAL) Lecture 48, Part 2: Visit With The Client", "CONNECT WITH ME!", "(OPTIONAL) Lecture 49, Part 1: Non-AngularJS Website Overview", "(OPTIONAL) Lecture 49, Part 2: Non-AngularJS Website Overview", "Lecture 50 (Mac Version): Restaurant Server Setup", "Lecture 50 (Windows Version): Restaurant Server Setup", "Lecture 51, Part 1: Basic Structure of the Restaurant App", "Lecture 51, Part 2: Basic Structure of the Restaurant App", "Lecture 52: Coding Up a Loader/Spinner", "Lecture 53: Coding Up $http Interceptor", "Quiz 47", "Lecture 54: Coding Up Menu Categories View - Part 1", "Lecture 55: Coding Up Menu Categories View - Part 2", "Lecture 56: Coding Up Menu Categories View - Part 3", "Lecture 57: Single Category View - Part 1", "Lecture 58: Single Category View - Part 2", "Lecture 59: Single Category View - Part 3", "Frequently Asked Questions", "Keep In Touch with Me!  (LINKS)", "Course Wrap-Up", "CONNECT WITH ME!", "Module 5 Assignment"]}]}, {"title": "Service-Oriented Architecture", "course_info": "About this course: Based on an understanding of architectural styles, you will review architectures for web applications, then explore the basics of Service-Oriented Architecture (SOA) in two approaches: Web Services (WS*) and Representational State Transfer (REST) architecture. \n\nIn the Capstone Project you will connect a Java-based Android application with Elasticsearch, a web service with a REST application programmer interface (API).\n\nAfter completing this course, you will be able to: \n• Describe SOA (Service-Oriented Architecture) to structure web-based systems.\n• Explain WS* services (i.e., SOAP over HTTP, WSDL, UDDI, BPEL).\t\n• Apply REST architecture (i.e., JSON over HTTP, URI).\t\n• Identify REST design principles.\t\n• Create a system using REST interfaces.\t\n• Apply microservice architecture.", "target_audience": null, "created_by": "University of Alberta", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "package_num": "4", "package_name": "Software Design and Architecture Specialization ", "level": "Intermediate", "rating": "4.2", "week_data": [{"title": "Web Technologies", "description": "In this module, we will introduce you to service-oriented architectures and their basic principles. Then, you will get a crash course on the technologies that underpin the Web, so that you are ready to learn about web services in the next module. This module also covers some earlier precursors of service-oriented architecture.", "video": ["Meet Your Presenter – Sam Jeffrey", "Meet Your Facilitator - Christopher Djuric", "Discussion: Introduce Yourself", "Service-Oriented Architecture Glossary", "4.1.1 – Introduction to Service-Oriented Architecture", "4.1.2 – Service Principles", "4.1.3 - Web Systems Evolution", "4.1.4 – Web Systems Architecture", "4.1.5 – HTML / XML / JSON", "4.1.6 – HTTP", "4.1.7 – JavaScript", "4.1.8 – Remote Procedure Call (RPC)", "4.1.9 – Object Brokers", "Module 1 Review"]}, {"title": "Web Services", "description": "WS*-style web services are a \"first generation\" group of specifications that work together to allow developers to develop and use web services. They are all based on XML. In this module you will learn some of the most important specifications of WS*-style web services: SOAP, WSDL, UDDI, and BPEL.", "video": ["4.2.1 – Introduction to Web Services", "4.2.2 – Service Invocation (SOAP)", "4.2.3 – Service Description (WSDL)", "4.2.4 – Service Publication and Discovery (UDDI)", "4.2.5 – Service Composition (BPEL)", "Discussion: Experience with Internal Web Services", "Capstone Assignment 4.1 - Determine the app's information needs", "Capstone Assignment 4.1 – Determine the app's information needs", "Module 2 Review"]}, {"title": "REST Architecture for SOA", "description": "RESTful web services are another style of web services based on lightweight HTTP methods. They have largely superseded WS*-style services because of their relative simplicity. In this module, you will learn about RESTful services and how to design them. You will also learn a bit about microservices, a software architecture for applications that is based on services.", "video": ["4.3.1 – Introduction to REST", "4.3.2 – Designing a REST Service", "4.3.3 – Introduction to Microservices", "REST Services (Practice)", "Answer to REST service ungraded assignment", "Discussion: Ideas for REST Web Services", "Module 3 Review"]}, {"title": "Capstone Challenge", "description": "In the previous modules, you determined an Android application’s information needs when storing data remotely. Now, in the final module of the course, you will fully connect the application to a remote Elasticsearch server to allow users to share information across their devices. After completing this task, you will be ready to complete the final exam.", "video": ["Capstone Assignment 4.2 - Connect app to Elasticsearch", "Discussion: Last Word – Service Oriented Architecture", "Acknowledgements", "Capstone Assignment 4.2 – Connect app to Elasticsearch", "Final Exam"]}]}, {"title": "Building Database Applications in PHP", "course_info": "About this course: In this course, we'll look at the object oriented patterns available in PHP. You'll learn how to connect to a MySQL using the Portable Data Objects (PDO) library and issue SQL commands in the the PHP language. We'll also look at how PHP uses cookies and manages session data. You'll learn how PHP avoids double posting data, how flash messages are implemented, and how to use a session to log in users in web applications. We'll then build the first 'complete' application that has multiple screens to Create, Read, Update and Delete (CRUD) our data. This brings all the previous concepts together and will form the basis for all later web applications.", "target_audience": "Who is this class for: Students who would like to learn to build database-backed web applications", "created_by": "University of Michigan", "teach_by": [{"name": "Charles Severance", "department": "School of Information"}], "package_num": "3", "package_name": "Web Applications for Everybody Specialization ", "level": "Intermediate", "rating": "4.9", "week_data": [{"title": "PHP Objects", "description": "We look at the object oriented patterns available in PHP.", "video": ["Textbook", "Your Own PHP/SQL/HTML/CSS Experience", "Welcome to the Course", "Object Oriented Concepts", "Creating Objects in PHP", "Object Oriented Libraries in PHP", "Object Life Cycle in PHP", "Object Inheritance in PHP", "PHP Objects"]}, {"title": "Connecting PHP and MySQL", "description": "We look at how we connect to a MySQL using the Portable Data Objects (PDO) library and issue SQL commands in the the PHP language.\n", "video": ["PHP Database Libraries", "Running SQL Queries in PHP", "Accessing MySQL Using PDO: Inserting Data", "Security Issue: Avoiding SQL Injection", "Error Handling with PDO", "Code Walkthrough - PHP, MySQL, and PDO", "Code Walkthrough - Inserting and Deleting Data", "Code Walkthrough - Security and SQL Injection", "PDO", "Assignment Specification: Autos Database", "Autograder: Autos Database", "Peer graded: Autos Database"]}, {"title": "PHP Cookies and Sessions", "description": "We look at how PHP uses cookies and manages session data.\n", "video": ["Cookies", "Sessions", "Sessions Without Cookies", "Code Walkthrough - Cookies and Sessions", "Sessions", "Auto-Grader: Cookies and Session"]}, {"title": "PHP Redirect, Routing, and Authentication", "description": "We look at how PHP avoids double posting data, how flash messages are implemented, and how we use a session to log in users in web applications.", "video": ["Redirect, Routing, and Authentication", "Code Walkthrough - Routing and Redirect", "POST / Refresh / Redirect", "Code Walkthrough - POST / Redirect", "Implementing Login and Logout", "Code Walkthrough - Login and Logout (3)", "Routing", "Assignment Specification: Autos with Post-Redirect", "Auto-Grader: Autos with Post-Redirect", "Peer-Grader: Autos with Post-Redirect"]}, {"title": "Building a CRUD Application", "description": "Now we build our first 'complete' application that has multiple screens to Create, Read, Update and Delete (CRUD) our data. This brings all the previous concepts together and will form the basis for all later web applications.", "video": ["Create, Read, Update and Delete (CRUD)", "Code Walkthrough - CRUD in PHP", "Assignment Specification: Autos C.R.U.D.", "Auto-Grader: Autos CRUD", "Peer-Grader: Autos CRUD"]}]}, {"title": "Software Architecture", "course_info": "About this course: The way that software components — subroutines, classes, functions, etc. —  are arranged,  and the interactions between them, is called architecture. In this course you will study the ways these architectures are represented, both in UML and other visual tools. We will introduce the most common architectures, their qualities, and tradeoffs. We will talk about how architectures are evaluated, what makes a good architecture, and an architecture can be improved. We'll also talk about how the architecture touches on the process of software development.\n\nIn the Capstone Project you will document a Java-based Android application with UML diagrams and analyze evaluate the application’s architecture using the Architecture Tradeoff Analysis Method (ATAM).\n\nAfter completing this course, you will be able to: \n• Compare and contrast the components, connections, protocols, topologies, constraints, tradeoffs, and variations of different types of architectural styles used in the design of applications and systems (e.g., main program and subroutine, object-oriented, interpreters, pipes and filters, database centric, event-based).\t\n• Describe the properties of layered and n-tier architectures.\t\n• Create UML ipackage, component, and deployment diagrams to express the architectural structure of a system.\t\n• Explain the behaviour of a system using UML activity diagrams.\t\n• Document a multi-application system with a layered architecture.", "target_audience": null, "created_by": "University of Alberta", "teach_by": [{"name": "Kenny Wong", "department": "Computing Science, Faculty of Science"}], "package_num": "3", "package_name": "Software Design and Architecture Specialization ", "level": "Intermediate", "rating": "4.4", "week_data": [{"title": "UML Architecture Diagrams", "description": "In this module you will learn about software architecture. You will learn why architecture is important, what perspectives need to be considered, and how to communicate architecture using UML.", "video": ["Meet Your Presenter – Sam Jeffery", "Meet Your Facilitator – Christopher Djuric", "Software Architecture – Course Notes", "Software Architecture Glossary", "3.1.1 – Architecture Overview and Process", "Discussion: Introduce Yourself", "3.1.2 – Kruchten's 4 + 1 Model View", "3.1.3 – UML Component Diagram", "3.1.4 – UML Package Diagram", "3.1.5 – UML Deployment Diagram", "3.1.6 – UML Activity Diagram", "Capstone Assignment 3.1 - Draw a Component Diagram (Solution)", "Capstone Assignment 3.2 - Draw a Deployment Diagram (Solution)", "Capstone Assignment 3.1 – Draw a Component Diagram", "Capstone Assignment 3.2 – Draw a Deployment Diagram", "Module 1 Review"]}, {"title": "Architectural Styles", "description": "Software comes in all shapes and sizes. The architecture you choose will affect every part of your software, from its security and efficiency, to its modularity and maintainability. In this module we will examine the different architectures that you have to choose from to shape your software.", "video": ["3.2.1 – Abstract Data Types and Object-Oriented", "3.2.2 – Main Program and Subroutine", "3.2.3 – Databases", "3.2.4 – Layered Systems", "3.2.5 – Client Server n-Tier", "3.2.6 – Interpreters", "State Transition Systems", "3.2.7 – Pipes and Filters", "3.2.8 – Event Based", "Publish–Subscribe", "3.2.9 – Process Control", "Discussions: Architectural Styles", "Module 2 Review"]}, {"title": "Architecture in Practice", "description": "The architecture is the most fundamental aspect of software. You will learn how development teams describe architectures, plan successful architectures based on quality attributes, and evaluate the resulting architecture. You will also learn how architecture relates to organization structure and even product planning!", "video": ["3.3.1 – Quality Attributes", "3.3.2 – Analyzing and Evaluating an Architecture", "3.3.3 – Relationship to Organizational Structure", "3.3.4 – Product Lines and Product Families", "Module 3 Review"]}, {"title": "Capstone Challenge", "description": "Now, in the final module of the course, you will evaluate the proposed architecture to extend the functionality of the example Android code base.", "video": ["Capstone Assignment 3.3 - Analyze and Evaluate an Architecture (Solution)", "Discussion: Last Word – Software Architecture", "Acknowledgements", "Credits", "Capstone Assignment 3.3 – Analyze and Evaluate an Architecture", "Final Exam"]}]}, {"title": "Introduction to Virtual Reality", "course_info": "About this course: This course will introduce you to Virtual Reality (VR). The course will teach you everything from the basics of VR- the hardware and the history of VR- to different applications of VR, the psychology of Virtual Reality, and the challenges of the medium.\n\nThe course is designed for people who are new to VR as a medium. You may have experienced some virtual reality before, and may have some hardware- but this course is suitable to individuals who have never experienced VR and those who do not have much hardware- we will explain Mobile VR as well as devices such as the Oculus Rift and HTC Vive.\n\nIntroduction to Virtual Reality is the first course in the Virtual Reality Specialisation. A learner with no previous experience in Virtual Reality and/or game programming will be able to evaluate existing VR applications, and design, test, and implement their own VR experiences/games using Unity by the end of the specialisation.", "target_audience": "Who is this class for: This course is primarily aimed at anyone with no or little previous experience in Virtual Reality, interested in how to bring their ideas onto this new platform.", "created_by": "University of London, Goldsmiths, University of London", "teach_by": [{"name": " Dr Sylvia Xueni Pan", "department": "Goldsmiths, University of London"}, {"name": "Dr Marco Gillies", "department": "Computing Department, Goldsmiths, University of London"}], "package_num": "1", "package_name": "Virtual Reality Specialization ", "level": "Beginner", "rating": "4.7", "week_data": [{"title": "Virtual Reality- Hardware and History", "description": "In this week, we’ll cover the basics of VR. We’ll start by sharing a definition of Virtual Reality, and exploring VR hardware, and then you’ll see demonstrations of a range of VR Head Mounted Devices. In the latter part of the week, you will hear more about the history of Virtual Reality and finish the week by drafting your ideas for a VR application.", "video": ["Welcome to the Virtual Reality Specialisation!", "Welcome to Introduction to Virtual Reality!", "Introduction to Week 1", "Introduce Yourself!", "Course blog", "What Do You Think VR Is?", "What is VR and How is it Different from Other Media?", "Displays | CAVE and HMDs", "Head Tracking", "Controllers", "VR Head Mounted Devices (HMDs)", "Choosing your VR Device", "HMD | Oculus Rift", "HMD | HTC Vive", "HMD | Sony PlayStation VR", "HMD | Mobile VR | Google Cardboard and Samsung Gear", "CAVE VR Systems", "Where to Download VR Apps", "Summary | How To Choose Your VR HMD", "When Was the First Time You Heard About the Concept of Virtual Reality?", "Part 1 | VR in the Analogue Age", "Part 2 | VR in the Digital Age", "VR History", "VR HMDs and VR History"]}, {"title": "VR Applications", "description": "This week, you’ll learn more about the different applications of VR- from news and documentaries, to sports, therapy, and games. You will also learn more about the VR Technical Framework, and will have the opportunity to share your thoughts on VR applications with your peers.", "video": ["Introduction to Week 2", "Introduction to the VR Technical Framework", "360 Video and Model Based VR", "Further Reading on 360 Video", "Being Someone Else", "Being Someone Else", "VR Applications", "Sports", "VR in Sports", "News and Documentary Films", "VR in News and Documentary Films", "Scientific Data Visualisation", "Medical Training", "Medical Training", "Physical Rehabilitation and Psychotherapy", "VR in Physical Rehabilitation and Psychotherapy", "The Future of VR Applications", "Enhancing Our Lives with Virtual Reality", "VR Applications", "Design Your VR Application | First Draft"]}, {"title": "The Psychology of VR: the Three Illusions ", "description": "In this week, Professor Mel Slater will take us through the Three Illusions. We’ll discuss Place Illusion, Plausibility Illusion, and Embodiment Illusion, with some interesting tricks along the way! ", "video": ["Introduction to Week 3", "A Brief History of VR", "Levels of Immersion in VR Systems", "Levels of Immersion of VR Systems", "Sensorimotor Contingency (SC)", "Sensorimotor Contingency in VR", "Why Do We Need Immersive VR?", "Introduction to the Three Illusions", " VR Hardware and Immersion ", "Introduction to Place Illusion (PI)", "Does Immersion Cause PI?", "Introduction to Plausibility Illusion (Psi)", "Necessary Conditions for Psi", "Plausibility Illusion", "Break of Presence", "Presence, Immersion, PI, and Psi", "The Three Illusions", "The Pinocchio Illusion", "The Rubber Hand Illusion", "Embodiment Illusion in Real Life", "Psychological Effects of Embodiment Illusion", "Visual-Tactile and Visual-Motor Synchrony", "The Technical Setup of VR Embodiment", "The Technical Setup of VR Embodiment", "Changes in Attitude, Behaviours, and Cognition", "Changing Bodies Changes Minds: Owning Another Body Affects Social Cognition", "Self-Counselling and Treating Depression", "Embodiment in Self-Counselling and Treating Depression", "Comparing CGI and 360 Video", "The Future of Embodiment in VR", "The Three Illusions of Virtual Reality"]}, {"title": "Challenges in Virtual Reality", "description": "", "video": ["Introduction to Week 4", "Realism | Graphics", "Real-Time 3D Graphics in Games", "Basic Concepts in 3D Computer Graphics", "Realism | Animation", "Navigation", "Nausea", "Simulation Sickness", "Meeting Other People", "Haptic Feedback", "Thank You and Course Blog", "Challenges in VR", "Design a VR application"]}]}, {"title": "Web Application Development: Basic Concepts", "course_info": "About this course: This is the first course in a Coursera Specialization track involving Web Application Architectures.  This course will give you the basic background, terminology and fundamental concepts that you need to understand in order to build modern full stack web applications. A full stack web developer is familiar with each \"layer\"  of the software technologies involved in a web application, including data modeling and database technologies, the web server environment and middleware components, network protocols, the user interface and basic visual design and user interaction concepts. \n\nIn this course we will learn by doing.  We will start by learning the major components of web application architectures, along with the fundamental design patterns and philosophies that are used to organize them.  You will build and continually refine a fully functional full-stack web application as we progress through the modules in this course.  Along the way you will be exposed to agile software development practices, numerous tools that software engineers are expected to know how to use, and a modern web application development framework.\n\nThis course is also available in Spanish. To join the Spanish version, visit this page: https://www.coursera.org/learn/apliweb.", "target_audience": null, "created_by": "University of New Mexico", "teach_by": [{"name": "Greg Heileman", "department": "Electrical and Computer Engineering"}, {"name": "Manel Martínez-Ramón", "department": "Electrical and Computer Engineering"}], "package_num": null, "package_name": null, "level": null, "rating": "4.5", "week_data": [{"title": "Welcome", "description": "", "video": ["Welcome"]}, {"title": "Module #1 - Web Applications in Context", "description": "This module sets the context for what we will study in this specialization by first providing a historical perspective on computing and web applications.  Next we provide an overview of how the Internet works, and then we discuss how web applications have evolved over the past few decades. After that we’ll discuss some of the elements of modern software practice, including the typical tools that software engineers now use and the agile development practices they follow. The notion of software design patterns will introduced, and the n-tier architecture design pattern, fundamental to modern web application design, is then presented. Will also discuss a few current topics related to web application development. Finally, we will show you how to set up the software development environment you will use throughout the remainder of the courses in this. ", "video": ["Learning Outcomes", "Lesson #1 - Web Applications: An Overview", "Web Applications - An Overview", "Video 1: Modern Web Applications", "Video 2: Historical Perspectives", "Reflection #1", "Video 3: Web App Characteristics", "Reflection #2", "Video 4: Course Overview", "Video 5: Interview with Edwin Agbenyega", "How the Internet Works: An Overview", "Video 1: Networking Concepts", "Video 2: The Internet", "Video 3: Internet Hot Topics", "Video 4: Interview -Brian Pietrewicz", "What is a Web Application? - An Overview", "Video 1: Web Apps - A Model", "Video 2: Web App Definition", "Video 3: Evolution of Web Apps", "Video 4: Design Patterns", "Video 5: n-Tier Architecture", "Setting up your Development Environment - An Overview", "Video 1: Setting up your Development Environment", "Video 2: Ruby and Rails", "Video 3: Editors, GIT, SQLiteBrowser", "Video 4: Web Developer Tools", "Video 5: Interview - Melanie Moses", "Web Applications in Context"]}, {"title": "Module #2 - Web Applications Frameworks", "description": "In this module you will learn about web application frameworks. We will start by talking about the evolution of software and programming languages, and then talk about software application frameworks.  The fundamental trade-off we will consider is programmer productivity versus program efficiency.  Next you will learn about web application frameworks, as well as the model-view-controller design pattern that is the backbone for many of these frameworks.  We will also consider how these frameworks support the agile programming principles associated with modern software practice. This will include a discussion of distributed version control systems and you will learn how to use the popular Git system.  We will also demonstrate how to use Git with a Ruby on Rails application.  We will use Git to submit all of the programming applications in this specialization. ", "video": ["Learning Outcomes", "What are Web App Frameworks? - An Overview", "Video 1: What is Programming?", "Video 2: Application Frameworks", "Video 3: Web Application Frameworks", "Video 4: The Model-View-Controller Design Pattern", "The Ruby on Rails Framework - An Overview", "Video 1: Your First Rails Program", "Video 2: Scaffolding", "Video 3: Ruby Programming I: Objects, Classes and Inheritance", "Video 4: Ruby Programming II: Strings, Regular Expressions and Symbols", "Video 5: Ruby Programming III: Expressions and Control Structures", "Modern Software Practices - An Overview", "Video 1 -Software Processes", "Video 2 - Agile Development", "Video 3 - The Blog App", "Version Control - An Overview", "Video 1 - Why Version Control", "Video 2 - Version Control Basics", "Video 3 - Git Introduction", "Video 4 - Git in Practice", "Blog App Iteration 1"]}, {"title": "Module #3 - Managing Data", "description": "A successful web application provides information t\no users that is (1) useful, and also (2) \neasy to access and understand.  This information is\n often collected from users, as well as \nfrom other information sources, and must be stored \nin a manner that allows it to be \nmanipulated by the web application. The typical app\nroach is to store this data in a \nrelational database.  In this module you will learn\n some basic concepts associated with \nmodeling the data in a web application, including h\now to specify the relationships between \nvarious data entities.  We will also investigate ho\nw to hook a web application up to a back-\nend data store, along with good design techniques t\nhat will make it easier to use the data in \nyour web applications by maintaining consistency th\nroughout the entire web stack.  ", "video": ["Learning Outcomes", "Relational Databases in Web Apps - An Overview", "Video #1 - Data Management in Web Apps", "Video #2 - Relational Databases: Basic Concepts", "Video #3 - Database Schema I", "Video #4 - Database Schema II", "Database Integration in Web Apps - An Overview", "Video #1 - Application Environments", "Video #2 - Database Configuration", "Video #3 - Database Management", "Video #4 - Blog App Databases", "Active Record Design Pattern - An Overview", "Video #1 - Active Record Design - An Overview", "Video #2 - Active Record in Rails", "Video #3 - Database Migrations", "Video #4 - Blog - Iteration 2", "Database Associations and Validations - An Overview", "Video #1 - Associations", "Video #2 -Blog App - Iteration 3", "Video #3 - Validations", "Video #4 - Blog App - Iteration 4", "Blog App - Iteration 2, 3, & 4"]}, {"title": "Module #4 - Middleware", "description": "Middleware is an abstraction layer that hides details about hardware devices and other lower-level software services from an application.  Middleware services implement common low-level functions, such as communication with the operating system, application servers, database servers, etc., so that application developers do not need to concern themselves with these details, and can instead focus on the application functionality they are trying to provide.  In a web application, these services generally make use of the HTTP protocol, and in a web application framework, the MVC design pattern can be thought of as being implemented over the middleware.", "video": ["Learning Outcomes", "Middleware an Introduction - An Overview", "Video 1: What is Middleware?", "Video 2: Middleware in Web Apps", "Video 3: Middleware Frameworks", "The HTTP Protocal - An Overview", "Video 1: HTTP Overview", "Video 2: HTTP Request", "Video 3: HTTP Response", "Video 4: HTTP Sessions and Cookies", "MVC Over Rails Middleware- An Overview", "Video 1: Request Processing", "Video 2: RESTful Web Services", "Video 3: Response Processing", "Video 4: MVC in Rails", "Middleware"]}, {"title": "Module #5 - The User Interface", "description": "In our final module we will discuss the User Interface. We will touch on CSS and JavaScript, and how these are used to add style to layout and design of HTML documents. We will also learn about Ajax and how it improves user requests.  ", "video": ["Learning Outcomes", "Presentation Tier Overview - An Overview", "Video 1: The Presentation Tier", "Video 2: Layout and Design", "Video 3: HTML: History and Philosophy", "Video 4: HTML CSS and JavaScript", "HTML CSS and JavaScript Overview - An Overview", "Video 1: HTML Overivew", "Video 2: CSS Overview", "Video 3: JavaScript Overview", "Dynamic Content and Ajax Overview - An Overview", "Video 1: Ajax Background", "Video 2: Ajax Cycle", "Video 3: Dynamic Content Creation", "Video 4: Blog App - Iteration 5", "Blog App - Iteration 5"]}]}, {"title": "Multiplatform Mobile App Development with Web Technologies: Ionic and Cordova", "course_info": "About this course: This course focuses on developing multiplatform mobile applications using the Web technologies (HTML5, CSS and Javascript). In particular we make use of the Cordova hybrid application framework to develop and target multiple mobile platforms with a single codebase. We make use of the Ionic framework (Ionic Ver 3.x), one of the most popular mobile application frameworks, that is built with mobile-optimized HTML5 and CSS based components and Angular. You will learn about UI development with Ionic and then using Cordova's modules to access the native mobile platform's capabilities from Javascript. You should have already completed the Bootstrap 4 and the Angular courses in this specialization before proceeding with this course.\n\nAt the end of this course you will be able to (a) Build mobile applications targeting multiple platforms with a single codebase, (b) Leverage your HTML5, CSS, Javascript and Angular skills, and (c) Use various features of the Ionic framework to build hybrid mobile applications", "target_audience": "Who is this class for: This course is aimed at students with sufficient knowledge of Web technologies like HTML, CSS and JavaScript. A good working knowledge of JavaScript, especially ES 5  and the Angular framework is strongly recommended. ", "created_by": "The Hong Kong University of Science and Technology", "teach_by": [{"name": "Jogesh K. Muppala", "department": "Department of Computer Science and Engineering"}], "package_num": "3", "package_name": "Full Stack Web and Multiplatform Mobile App Development Specialization ", "level": null, "rating": "4.8", "week_data": [{"title": "Hybrid Mobile App Development Frameworks: An Introduction", "description": "This module introduces you to hybrid mobile application development. You will learn about the Ionic framework and explore some of the features of the Ionic framework to implement an Ionic app based on the Angular application that was implemented in the previous course on Angular.", "video": ["Welcome to Multiplatform Mobile App Development with Web Technologies: Ionic and Cordova", "How to Use the Learning Resources", "Welcome to Multiplatform Mobile App Development with Web Technologies: Ionic and Cordova: Additional Resources", "Full Stack Web Development: The Big Picture: Objectives and Outcomes", "What is Full-Stack Web Development?", "Full Stack Web Development: Additional Resources", "Setting up Your Development Environment: Git and Node: Objectives and Outcomes", "Setting up your Development Environment", "Exercise (Video): Setting up Git", "Exercise (Instructions): Setting up Git", "Exercise (Video): Basic Git Commands", "Exercise (Instructions): Basic Git Commands", "Exercise (Video): Online Git Repositories", "Exercise (Instructions): Online Git Repositories", "Node.js and NPM", "Exercise (Video): Setting up Node.js and NPM", "Exercise (Instructions): Setting up Node.js and NPM", "Exercise (Video): Basics of Node.js and NPM", "Exercise (Instructions): Basics of Node.js and NPM", "Setting up your Development Environment: Git and Node: Additional Resources", "Hybrid Mobile App Development: An Overview: Objectives and Outcomes", "Hybrid Mobile App Development", "Introduction to the Ionic Framework", "Exercise (Video): Setting up the Ionic Framework", "Exercise (Instructions): Setting up the Ionic Framework", "Hybrid Mobile App Development: An Overview: Additional Resources", "Setting up a Simple Server: Objectives and Outcomes", "Exercise (Video): Setting up a Server using json-server", "Exercise (Instructions): Setting up a Server using json-server", "Setting up a Simple Server: Additional Resources", "Ionic and Angular: Objectives and Outcomes", "Ionic and Angular", "Exercise (Video): Getting Started with your Ionic App", "Exercise (Instructions): Getting Started with your Ionic App", "Exercise (Video): Ionic and Angular", "Exercise (Instructions): Ionic and Angular", "Ionic and Angular: Additional Resources", "Ionic Navigation: Objectives and Outcomes", "Ionic Navigation", "Exercise (Video): Ionic Navigation", "Exercise (Instructions): Ionic Navigation", "Ionic Navigation: Additional Resources", "Assignment 1 Requirements (Video): Introduction to Ionic Framework", "Assignment 1: Introduction to Ionic Framework: Additional Resources", "Ideation: Objectives and Outcomes", "Ideation Report Template", "Ideation: Additional Resources", "Introduction to Ionic Framework", "Ideation"]}, {"title": "Ionic Components", "description": "This module explores the Ionic support for forms. Advanced features of Ionic lists are discussed. In addition all the different methods of overlaying information on the screen like modals, popups, popovers, action sheets, and loading are examined. Ionic support for gestures is also briefly considered.", "video": ["Floating Action Buttons: Objectives and Outcomes", "Floating Action Buttons", "Exercise (Video): Floating Action Button", "Exercise (Instructions): Floating Action Button", "Exercise (Video): FAB and Favorites", "Exercise (Instructions): FAB and Favorites", "Floating Action Buttons: Additional Resources", "Ionic Lists: Advanced Features: Objectives and Outcomes", "Ionic Lists: Advanced Features", "Exercise (Video): Ionic Lists: Advanced Features", "Exercise (Instructions): Ionic Lists: Advanced Features", "Ionic Lists: Advanced Features: Additional Resources", "Ionic Forms and Modals: Objectives and Outcomes", "Ionic Forms and Modals", "Exercise (Video): Modal", "Exercise (Instructions): Modal", "Exercise (Video): Forms", "Exercise (Instructions): Forms", "Ionic Forms and Modals: Additional Resources", "Alerts, Popovers, ActionSheets, Loading and Gestures: Objectives and Outcomes", "Alerts, Toasts, Popovers, ActionSheets and Loading", "Exercise (Video): Alerts, Toasts and Loading", "Exercise (Instructions): Alerts, Toasts and Loading", "Alerts, Popovers, ActionSheets, Loading and Gestures: Additional Resources", "Assignment 2: Ionic Components", "Assignment 2: Ionic Components: Additional Resources", "UI Design and Prototyping: Objectives and Outcomes", "UI Design and Prototyping Report Template", "UI Design and Prototyping: Additional Resources", "Ionic Components", "UI Design and Prototyping"]}, {"title": "Ionic Split Pane, Grid and Storage, and Deploying your App", "description": "In this module you will learn about using local storage within your app. You will then learn about configuring your machine for building your app for various platforms, and deploying your app to emulators and devices.", "video": ["Adapting to Large Screens: Objectives and Outcomes", "Adapting to Large Screens", "Exercise (Video): Ionic Split Pane", "Exercise (Instructions): Ionic Split Pane", "Exercise (Video): Ionic Grid", "Exercise (Instructions): Ionic Grid", "Adapting to Large Screens: Additional Resources", "Ionic Storage: Objectives and Outcomes", "Ionic Storage", "Exercise (Video): Ionic Storage", "Exercise (Instructions): Ionic Storage", "Ionic Storage: Additional Resources", "Installing Android and iOS SDK and Platforms: Objectives and Outcomes", "Installing Android Studio and  Android SDK", "Installing Android Studio and  Android SDK: Ionic and Cordova Guides", "Installing Xcode on Mac and  iOS SDK", "Installing Xcode on Mac and iOS SDK: Ionic and Cordova Guides", "Installing Android and iOS SDK and Platforms: Additional Resources", "Ionic Adding Platforms, Building and Deploying the App: Objectives and Outcomes", "Introduction to Cordova", "Exercise (Video): Building and Deploying to Android Emulator", "Exercise (Instructions): Building and Deploying to Android Emulator and Android Device", "Exercise (Video): Building and Deploying to iOS Emulator", "Exercise (Instructions): Building and Deploying to iOS Emulator", "Ionic Adding Platforms, Building and Deploying the App: Additional Resources", "Assignment 3 Requirements: Grid and Storage", "Assignment 3: Grid and Storage: Additional Resources", "Assignment 3: Grid and Storage"]}, {"title": "Accessing Native Capabilities of Devices: Cordova and Ionic Native", "description": "In this module you will explore Cordova and the Ionic Native wrappers that enable you to access the native capabilities of the mobile devices. You will use a few plugins in order to understand the general concepts and the patterns for using these plugins within your Ionic application", "video": ["Introduction to Ionic Native: Objectives and Outcomes", "Introduction to Ionic Native", "Exercise (Video): Customizing the SplashScreen", "Exercise (Instructions): Customizing the SplashScreen", "Introduction to Ionic Native: Additional Resources", "Notifying the User: Objectives and Outcomes", "Notifying the User", "Exercise (Video): Notifying the User", "Exercise (Instructions): Notifying the User", "Notifying the User: Additional Resources", "Social Sharing: Objectives and Outcomes", "Social Sharing", "Exercise (Video): Sending Email", "Exercise (Instructions): Sending Email", "Exercise (Video): Social Sharing", "Exercise (Instructions): Social Sharing", "Social Sharing: Additional Resources", "Using the Camera: Objectives and Outcomes", "Using the Camera", "Exercise (Video): Using the Camera", "Exercise (Instructions): Using the Camera", "Using the Camera: Additional Resources", "Network Status: Objectives and Outcomes", "Network Status", "Exercise (Video): Network Status", "Exercise (Instructions): Network Status", "Network Status: Additional Resources", "Assignment 4 (Requirements): Ionic Native and Cordova", "Assignment 4: Ionic Native and Cordova: Additional Resources", "Conclusions", "Conclusions: Additional Resources", "Project Implementation: Objectives and Outcomes", "Final Report Template", "Assignment 4: Ionic Native and Cordova", "Project Implementation and Final Report"]}]}, {"title": "Developing Android Apps with App Inventor", "course_info": "About this course: The course will give students hands-on experience in developing interesting Android applications. No previous experience in programming is needed, and the course is suitable for students with any level of computing experience. MIT App Inventor will be used in the course. It is a blocks-based programming tool that allows everyone, even novices, to start programming and build fully functional apps for Android devices. Students are encouraged to use their own Android devices for hands-on testing and exploitation.", "target_audience": null, "created_by": "The Hong Kong University of Science and Technology", "teach_by": [{"name": "Kenneth W T Leung", "department": "Computer Science and Engineering"}], "package_num": null, "package_name": null, "level": "Beginner", "rating": "4.8", "week_data": [{"title": "Introduction of MIT App Inventor", "description": "", "video": ["Introduction Video", "Course Introduction", "Unit 1 Intro Hello World", "Introduction to App Inventor", "Introduction to App Inventor", "Hello World App", "Project creation question", "Android Application", "Adding Component & Button Component", "Add component quiz", "Component Property", "Component Property Question", "Label Component", "Homework 1", "Quiz 1"]}, {"title": "Application Coding", "description": "", "video": ["Unit 2 Intro Code Blocks Features", "Introduction to Code Blocks", "Event Handler", "Code Deletion", "Method Call", "Code Block Question", "Property Getter and Setter", "Built-In Text Code Block", "Property and Text Code Block Question", "Application Testing", "Android Emulator", "Using Emulator", "Testing HelloWorld Project", "Create APK", "Project Sharing", "Homework 2", "Quiz 2"]}, {"title": "Programming Basics & Dialog", "description": "", "video": ["Unit 3 Intro Maths, Notifier, Boolean and Logics", "Numbers", "Math Code Blocks", "Evaluation Order", "Using Math Code Blocks Question", "Mutator", "Formatting Number", "Notifier", "Notifier Component & Starting UsingMath Project", "Choice Dialog & Starting UsingIfThen Project", "Boolean Values", "Boolean Value & Canceling Dialog", "Logical Operators", "if-then Code & Logic Code Blocks", "Using if-then-else code question", "else-if socket", "Homework 3", "Quiz 3", "Math Quiz App Assignment"]}, {"title": "More Programming Basics", "description": "", "video": ["Unit 4 Intro Variables, Loops and Other Techniques", "Variable", "Loop", "While Loop", "Using While Loop Question", "Starting Usingloop Project", "Comments", "Code Comment", "Duplicate Blocks", "Backpack", "Code Duplication", "Collapse Code Blocks", "Collapsing Code Blocks", "Collapsing Code Blocks Question", "Homework 4", "Quiz 4", "Sequence Calculator Assignment"]}, {"title": "Alarm Clock Application", "description": "", "video": ["Unit 5 Intro Timepicker, Sound and Clock", "Starting AlarmClock Project", "TimePicker", "TimePicker Component", "Timepicker Component Question", "Project Asset", "Sound Component", "Sound Component Question", "Clock Component", "Clock component question", "Audio Alarm", "Alarm Clock Coding", "Homework 5", "Quiz 5"]}, {"title": "Audio & Video", "description": "", "video": ["Unit 6 Intro Sound, Audio and Video", "Audio", "Audio Question", "Video", "Video Question", "Media Source Specification", "Player Component", "Player Component Question", "Music Alarm", "Starting MusicAlarmClock Project", "Radio Alarm", "Starting RadioAlarmClock Project", "VideoPlayer Component", "VideoPlayer Component Question", "Starting VideoAlarmClock Project", "Video Alarm", "Homework 6", "Quiz 6"]}, {"title": "Drawing Application", "description": "", "video": ["Unit 7 Intro Components for a Drawing App", "Spinner", "Spinner Component", "Spinner Component Question", "Slider", "Slider Component", "Slider Component Question", "Text Box", "TextBox Component", "Textbox Component Question", "Canvas Component", "Canvas Component Question", "Component Layout", "Component Layout Question", "Drawing Canvas", "Starting DrawingApp Project", "Handling Slider's Selection", "Canvas touching & Color code block", "Canvas Drawing", "Homework 7", "Quiz 7"]}, {"title": "File", "description": "", "video": ["Unit 8 Intro File Component and Notebook App", "File and Its Formats", "File Component & App Inventor Storage Structure", "Notebook Project", "Notebook Project", "Homework 8"]}, {"title": "Game", "description": "", "video": ["Unit 9 Intro Making an Interactive Game", "ImageSprite Component", "ImageSprite Component Question", "Random Numbers", "Random Real Numbers", "Random Number", "Random Number Question", "Accelerometer and Shaking", "Device Shaking and Vibration", "Device Shaking and Vibration Question", "Starting Superdolphin Project & Game Assets", "Application Interface", "Dolphin Game", "Using Clock, Sound and File Components", "Game Score & Game Start", "Random Dolphin Appearance", "Touching Dolphin", "Stopping Game", "Number Matching Game Assignment", "Homework 9", "Quiz 9"]}, {"title": "Device Location", "description": "", "video": ["Unit 10 Intro Location Component and Lost & Found Project", "Location Information", "Device Location", "LocationSensor Component", "Lost and Found", "Starting LostFound Project", "Application Location Input", "Homework 10", "Quiz 10"]}, {"title": "Web Browsing", "description": "", "video": ["Unit 11 Intro Web Viewer and Lost & Found Project", "Web Viewer", "WebViewer Component", "Webviewer Component Question", "Google Maps", "Google Maps Question", "Finishing LostFound Project", "Homework 11"]}, {"title": "Capstone Project", "description": "", "video": ["Capstone Project Assessment"]}]}, {"title": "Introduction To Swift Programming", "course_info": "About this course: Introduction to Swift Programming is the first course in a four part specialization series that will provide you with the tools and skills necessary to develop an iOS App from scratch. By the end of this first course you will be able to demonstrate intermediate application of programming in Swift, the powerful new programming language for iOS. Guided by best practices you will become proficient with syntax, object oriented principles, memory management, functional concepts and more in programming with Swift. \n\nThis course is unique in its dedication to teaching Swift programming. With new features and capabilities you will be at the forefront of writing iOS apps.\n\nCurrently this course is taught using Swift 2. The team is aware of the release of Swift 3 and will be making edits to the course in time. Please be aware that at this time the instruction is entirely with Swift 2. \n\nPlease note that to take part in this course (and the full specialization) it is required to have a Mac computer and, though not required, ideally an iPhone, iPod, or an iPad. NOTE: This course has been designed and tested (and content delivered) on a Mac. While we are aware of hacks and workarounds for running Mac in a virtual machine on windows we do not recommended a PC. \n\nWe hope you have fun on this new adventure.", "target_audience": null, "created_by": "University of Toronto", "teach_by": [{"name": "Parham Aarabi", "department": "Department of Electrical and Computer Engineering"}], "package_num": "1", "package_name": "iOS App Development with Swift Specialization ", "level": null, "rating": "3.9", "week_data": [{"title": "Introductions and Getting Started", "description": "Meet the teaching staff, get oriented to the platform, set up your work environment and get ready to program! We wish to remind you from the start that to take part in this course (and the full specialization) it is required to have Mac computer and, though not required, ideally an iPhone, iPod, or an iPad. This course has been designed and tested (and content delivered) on a Mac. While we are aware of hacks and workarounds for running OSX in a virtual machine on Windows, we do not recommended a PC. To find out of this specialization is for you, download the SHIFT Photo Editing app at http://beautifulapps.mobi and try it out.  If you take this specialization, then you will learn to create an app similar to SHIFT.", "video": ["Welcome to the Course and Intro to the Module", "Meet and Greet", "MIXIT", "Get Xcode - VERSION 7.3.1", "Setting Up Playground", "Overview of Projects", "Follow Up Reading", "Debugging", "Setting Preferences", "Set Up Course Quiz (For Grades)"]}, {"title": "Swift Basics", "description": "In this module we will introduce the basic concepts of Swift. To begin you will learn variable declaration, different types, and program control mechanisms. Here we start to build the foundation of iOS app development with Swift. We hope you enjoy the journey.", "video": ["Introduction to the Module", "Setting Up Playground", "Simple Control Flow", "Arrays and Dictionaries", "Functions", "2D Arrays", "Follow Up Reading", "Swift Basics Quiz"]}, {"title": "Advanced Swift", "description": "This unit continues with further exploration of swift programming. Building on our current skill set we will work with Classes, Structs, Enums, Protocols, and object-oriented principles.", "video": ["Introduction to the Module", "Optionals, Closures, and Properties", "Follow Up Reading", "Value Types", "Cheat Sheet", "Advanced Swift Quiz"]}, {"title": "Image Processing In Swift", "description": "In this module we will wrap up with lessons targeting advanced examples in Swift. We’ll look at a detailed example of an image filter which will allow us to manipulate pixels and create filter effects (such as change contrast).", "video": ["Introduction to the Module", "Introduction to Image Processing", "Follow Up Reading", "Image Processing In Swift Quiz"]}, {"title": "Final Peer Assignment", "description": "You did it! You've come to the end of this first course. We sum up with a capstone peer assessment assignment where you will create your own filter and demonstrate what you've learned over these weeks. Please read the instructions carefully, and have fun!", "video": ["Using Xcode 7.3.1 for Peer Assignment", "InstaFilter Processor", "InstaFilter Agreement (For Grade)", "InstaFilter Processor"]}, {"title": "OPTIONAL - Swift vs Objective C", "description": "OPTIONAL - In this module we compare some of the differences between Swift and Objective C programming languages. Join us as we migrate those of you familiar with Objective C to the world of Swift. Hopefully you find programming in Swift fast, easy and interactive. ", "video": ["Introduction to the Module", "Files, Naming and Class Differences", "Types and Initializers Differences", "Methods, Arrays and Control Flow Differences", "Properties, Getters and Computed Properties Differences", "Instantiating Objects and Calling Methods Differences", "Follow Up Reading"]}]}, {"title": "Advanced Styling with Responsive Design", "course_info": "About this course: It used to be the case that everyone viewed webpages on about the same size screen.  But with the explosion of the use of smartphones to access the Internet, the landscape of design has completely changed.  People viewing your site will now expect that it will perform regardless of the platform (smartphone, tablet, laptop, or desktop computer).  This ability to respond to any platform is called responsive design.\n\nThis course will expand upon the basic knowledge of CSS3 to include topics such as wireframes, fluid design, media queries, and the use of existing styling paradigms such as Bootstrap.  After the course, learners will be able to:\n** Explain the mobile-first paradigm and the importance of wireframes in the design phase\n** Create sites that behave across a range of platforms\n** Utilize existing design frameworks such as Bootstrap\n\nThis is the fourth course in the Web Design For Everybody specialization.  A basic understanding of HTML and CSS is expected when you enroll in this class. Additional courses focus on adding interactivity with the JavaScript Programming Language and completing a capstone project.", "target_audience": null, "created_by": "University of Michigan", "teach_by": [{"name": "Colleen van Lent, Ph.D.", "department": "School of Information"}], "package_num": "4", "package_name": "Web Design for Everybody (Basics of Web Development and Coding) Specialization ", "level": null, "rating": "4.7", "week_data": [{"title": "Week One:  Style with Responsive Design", "description": "What does it mean to have responsive design for your site?  How can you tell if your existing site is responsive?  This week we will begin with the theories behind the \"mobile-first paradigm\" -  the idea that your mobile site should provide everything needed, not a pared-down version of a good page.  We end the week by taking the first concrete step of using fluid measurements in your CSS.", "video": ["Syllabus", "Resources", "Frequently Asked Questions (FAQ)", "Introduction to Responsive Design", "Help us learn more about you!", "What is Responsive Design?", "Testing Existing Sites", "Benefits of Responsive Design", "Optional Discussion: Site reviews", "Fluid Measurements background readings", "Fluid Measurements", "Code With Me: Fluid Measurements", "Optional Discussion: Can a file use fluid and absolute measurements together?", "Notice for Auditing Learners: Assignment Submission", "Pixel to Em conversion tool", "Dynamically change the size of font with sliders", "Optional: CSS definitions of relative and absolute", "Your personal Responsive Design Story", "Basic Concepts in Responsive Design approaches"]}, {"title": "Week Two: Basic Concepts", "description": "This week you will get a chance to put the theories into practice using media queries in your CSS.  These queries can automatically detect the size of the browser being used to view the page so that you can decide what type of look you want to achieve.  There will also be a discussion on common practices for designing your different views at various screen sizes (\"viewports\").", "video": ["Media Queries", "Code With Me: Fluid Measurements and Media Queries", "Practice Quiz -- Challenge Problem", "Wire Frames", "Breakpoints", "Media Queries Part Two", "Code With Me: Responsive Navigation", "OPTIONAL -- Create a responsive style sheet ", "OPTIONAL: Good examples of responsive design", "Week Two Review: Media Queries and breakpoints"]}, {"title": "Week Three: Use Existing Frameworks", "description": "After every good programmer has put in time creating sites from scratch, it is common to utilize existing tools out there.  After all, why recreate the wheel?  The work you have done up to this point will give you the knowledge needed to craft your own unique sites from these frameworks.  This week we will work with Bootstrap, a framework that uses HTML5, CSS, and JavaScript (but don't worry if you have never used JavaScript yourself).", "video": ["Frameworks", "Introduction to Twitter Bootstrap 3", "Bootstrap Breakpoints", "Getting Started with Twitter Bootstrap", "Bootstrap Grid System", "OPTIONAL - Grid System Check", "Code With Me: Grid Example", "Bootstrap Navigation", "Optional Discussion: Standards vs Convenience", "OPTIONAL - Use Bootstrap to create a responsive page", "Optional - Demystifying Bootstrap", "Week Three Review: Bootstrap"]}, {"title": "Week Four: Experiment!", "description": "This week is dedicated to solving those little issues that pop up when you move from theory to practice.  We look at more advanced framework options and also hear from people who are using the techniques covered in this course.", "video": ["Responsive Images", "Bootstrap Tables", "Code With Me: Advanced Navigation", "What Are Templates?", "Optional Interview: M W", "Optional Interview: H W", "Optional: Interview with H N", "Bootstrap 4", "Conclusion", "OPTIONAL: Photo Gallery", "Optional: The Evolution of the Airbnb front-end deveopment", "OPTIONAL - Debugging your style", "OPTIONAL - More resources for learning to debug/develop", "Post-course Survey", "Responsive Design Final Assessment"]}]}, {"title": "Programming Languages, Part C", "course_info": "About this course: [As described below, this is Part C of a 3-part course.  Participants should complete Parts A and B first -- Part C \"dives right in\" and refers often to material from Part A and Part B.]\n\nThis course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones.\n\nThis course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.\n\nThe course assumes some prior experience with programming, as described in more detail in the first module of Part A.  Part B assumes successful completion of Part A.\n\nThe course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  \n\nWeek 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.", "target_audience": "Who is this class for: The course assumes students are familiar with programming covered by most introductory courses, but it is explicitly designed not to be a particularly advanced course. Students should be comfortable with variables, conditionals, arrays, linked lists, stacks, and recursion (though recursion will be reviewed and expanded upon), and the difference between an interface and an implementation. Students should be eager to write programs in languages new to them. Part C of the course analyzes basic object-oriented concepts and contrast them with those of other languages, so familiarity with Java or a closely related language (e.g., C#) might be helpful for Part C, but it is not necessary for the assignments.\n\nThis course is based on a course designed for second- and third-year undergraduates: not a first computer science course, but not an advanced course either. So it certainly will not cover everything in the beautiful world of programming languages, but it is a solid introduction.  It is designed to be eye-opening and fascinating both for learners seeking a \"third or fourth programming course\" and for learners with more experience who are looking for a clear and precise foundation in programming languages.\n\nThe assignments in the course are designed to be challenging, but with everything you need in the course content.\n\nAn introductory video and another reading discuss assumed background in some more detail in Week 1 of Part A of the course.", "created_by": "University of Washington", "teach_by": [{"name": "Dan  Grossman", "department": "Computer Science & Engineering"}], "package_num": null, "package_name": null, "level": null, "rating": "4.9", "week_data": [{"title": "Introduction, Course-Wide Information, and Software Installation (Start Here)", "description": "Welcome! Start here!  Learn about this course and how it's organized. ", "video": ["Start Here!", "Welcome to Part C", "Overview of Part C Concepts", "Part C Course Structure", "Part C Software Installation and Use: Ruby and irb", "Installing and Using SML and Emacs"]}, {"title": "Section 8 and Homework 6 (First Module with Ruby)", "description": "Let's get started programming with Ruby, including learning about Ruby's variant of (almost) function closures and the \"inheritance and overriding\" that is the essence of object-oriented programming.  The welcome message has a few additional comments about \"what makes Ruby different\" and how to approach the (rather different) homework assignment, so let's get started...", "video": ["Section 8 Welcome Message", "Section 8 Reading Notes", "Code Files for All Section 8 Videos", "Introduction to Ruby", "Classes and Objects", "Object State", "Visibility", "A Longer Example", "Everything is an Object", "Class Definitions are Dynamic", "Duck Typing", "Arrays", "Blocks", "Using Blocks", "Procs", "Hashes and Ranges", "Subclassing", "Why Use Subclassing?", "Overriding and Dynamic Dispatch", "Method-Lookup Rules, Precisely", "Dynamic Dispatch Versus Closures", "Optional: Dynamic Dispatch Manually in Racket", "Explanation of \"Lesson Choices\"", "Homework 6 Instructions", "Homework 6 Detailed Peer-Assessment Instructions", "Practice Problems for Another Game in Ruby", "Homework 6 (Ruby 2.0)", "Homework 6 Peer Review"]}, {"title": "Section 9 and Homework 7 (Second Module With Ruby)", "description": "Welcome to the second week of Part C where we will focus on how functional programming and object-oriented programming encourage such \"exactly opposite\" decompositions of problems that they are \"more alike than you might realize\".  This is a key opportunity to synthesize much of what we have learned so far.  As the welcome message discusses in more detail, we will go a bit beyond this to touch on some related advanced topics and then dive into the last -- and challenging -- programming assignment, which involves porting an interpreter from ML to Ruby.", "video": ["Section 9 Welcome Message", "Section 9 Reading Notes", "Code Files for All Section 9 Videos", "OOP Versus Functional Decomposition", "Adding Operations or Variants", "Binary Methods with Functional Decomposition", "Double Dispatch", "Optional: Multimethods", "Multiple Inheritance", "Mixins", "Interfaces", "Optional: Abstract Methods", "Explanation of \"Lesson Choices\"", "Homework 7 Instructions", "Homework 7 Peer Review Detailed Instructions", "Practice Problem for Double Dispatch and ML-to-Ruby", "Homework 7 (Ruby 2.0 and SML)", "Homework 7"]}, {"title": "Section 10, Final Exam, and Course Wrap-Up", "description": "We have reached the last module of Programming Languages!  We first study subtyping, how it relates to static types for object-oriented programming, and how it relates to generics.  There is no assignment or quiz devoted only to this last \"new material\", but there is a \"final exam\" covering Part B and Part C of the course.  Enjoy studying for the exam, and don't miss the final \"wrap-up\" lesson when you're all done!", "video": ["Section 10 Welcome Message", "Section 10 Reading Notes", "(Lack of) Section 10 Code Files", "Subtyping From the Beginning", "The Subtype Relation", "Depth Subtyping", "Optional: Java/C# Arrays", "Function Subtyping", "Subtyping for OOP", "Generics Versus Subtyping", "Bounded Polymorphism", "Information About the Exam (Required Reading)", "Practice Final Exam", "Summarizing All We Have Learned", "Saying Good-Bye :-)", "Actual Final Exam"]}]}, {"title": "Responsive Web Design", "course_info": "About this course: In this course you will learn how to apply concepts from interaction design and human computer interaction in order to design and build an interactive, professional looking website. You will learn how to make your web page designs adapt to different screen sizes using responsive grid layouts. You will learn how to add navigation and other design elements, and you will learn how to separate data and display using JavaScript objects and templates. \n\nAt the end of the course, you will be able to:\n1. Explain why users need to know where they are, where they can go and what is on a web page\n2. Create wireframe mockups of web pages \n3. Identify the key functional elements of web pages\n4. Use Bootstrap components to realise page designs\n5. Use JavaScript data structures such as arrays and objects to define the data used in a web page\n6. Use the Handlebars template library to convert data to HTML \n7. Add interactivity to templates using JavaScript event listeners\n\nIn this course, you will complete:\n1 website design assignment taking ~1 hour to complete\n1 programming assignment taking ~1 hour to complete\n4 quizzes, each taking ~20 minutes to complete\nmultiple practice quizzes, each taking ~5 minutes to complete\n\nParticipation in or completion of this online course will not confer academic credit for University of London programmes", "target_audience": null, "created_by": "University of London, Goldsmiths, University of London", "teach_by": [{"name": "Dr Matthew Yee-King", "department": "Computing Department, Goldsmiths, University of London"}, {"name": "Dr Kate Devlin", "department": "Department of Computing, Goldsmiths"}, {"name": "Dr Marco Gillies", "department": "Computing Department, Goldsmiths, University of London"}, {"name": "Dr Mick Grierson", "department": "Computing Department, Goldsmiths, University of London"}], "package_num": "2", "package_name": "Responsive Website Development and Design Specialization ", "level": null, "rating": "4.5", "week_data": [{"title": "Responsive Web Design: Course overview", "description": "In this course you will learn how to apply concepts from interaction design and human computer interaction in order to design and build an interactive, professional looking website. You will learn how to make your web page designs adapt to different screen sizes using responsive grid layouts. You will learn how to add navigation and other design elements, and you will learn how to separate data and display using Java\nScript objects and templates.", "video": ["Course outline", "Grading and assessment", "Learning outcomes"]}, {"title": "Web design principles ", "description": "Welcome to the first module of 'Responsive Web Design'. By the end of this module you will be able to understand the basic concepts of usability and user experience and tell the user where they can go with navbars. In addition you will be able to tell the user what is here with effective layout and understand the high level requirements of creating an accessible website. We hope you enjoy the module! ", "video": ["Overview", "Lecture slides", "Usability and user experience", "Usability and user experience", "Where can you go?", "Where can you go?", "What is here?", "What is here?", "URL for this lesson", "Accessibility", "Accessibility", "URLs for this lesson", "Lecture slides", "Guidelines for design", "Guidelines for design", "URL for this lesson", "Lecture slides", "Design examples", "Design examples", "Summary", "Web design principles summary quiz", "Design principles on your favourite website"]}, {"title": "Realising design principles in code", "description": " Welcome to the second module of 'Responsive Web Design'. By the end of this module you will be able to set up a basic Bootstrap site and build Bootstrap collapsible, responsive navbars using titles and breadcrumb trails and you'll also be able to build multiple layouts in one with a responsive grid. We'll also be looking at installing Bootstrap themes. Enjoy!", "video": ["Code for this module", "Overview", "URL for this lesson", "Basic Bootstrap set up", "Basic Bootstrap starter code (inc. images)", "Basic Bootstrap set up", "URL for this lesson", "Where can you go?", "Where can you go?", "Collapsible navbars", "Collapsible navbars", "Building out the site", "Building out the site", "URL for this lesson", "Where am I?", "Where am I?", "URL for this lesson", "Responsive grid", "Responsive grid", "URLs for this lesson", "Bootstrap themes", "Bootstrap themes", "Summary", "Realising design principles in code summary quiz", "Working with navbars"]}, {"title": "Adding content to websites", "description": "Welcome to the third module of 'Responsive Web Design' By the end of this module, you will be able to separate page structure from page content, use JavaScript objects and implement JavaScript templates with Handlebars as well as being able to display different data with the same template and the same data with different templates. Finally we will be looking at using a Bootstrap modal. We hope you enjoy the module!", "video": ["Overview", "URL for this module", "Separating structure and content", "Separating structure and content", "JavaScript objects", "JavaScript objects", "URL for this lesson", "JavaScript templates with Handlebars", "JavaScript templates with Handlebars", "Source Code", "Putting data into templates", "Putting data into templates", "Source Code", "Displaying different data with the same template", "Displaying different data with the same template", "Source Code", "Displaying the same data with different templates, Use a Bootstrap modal", "Displaying the same data with different templates, Use a Bootstrap modal", "Summary", "Adding content to websites summary quiz", "Edit a template"]}, {"title": "Building a full gallery app", "description": "Welcome to the fourth module of 'Responsive Web Design'. By the end of this module you will be able to store objects in an array and display them with a template, and dynamically display single images from an array. We will also be looking at implementing a search function, and by working with complex data structures, switching between different templates. Enjoy!", "video": ["Overview", "Source Code for this module", "URL for this lesson", "JavaScript arrays", "JavaScript arrays", "Storing objects in arrays and displaying them with a template", "Storing objects in arrays and displaying them with a template", "Dynamically displaying single images from an array", "Dynamically displaying single images from an array", "Source Code", "Implementing a search function", "Implementing a search function", "Source code for the gallery", "Data structure for a complete image gallery", "Data structure for a complete image gallery", "Writing the templates for the gallery", "Writing the templates for the gallery", "Switching displays in the gallery", "Building a full gallery app summary quiz", "Animal gallery"]}]}, {"title": "Programming Languages, Part B", "course_info": "About this course: [As described below, this is Part B of a 3-part course.  Participants should complete Part A first -- Part B \"dives right in\" and refers often to material from Part A.]\n\nThis course is an introduction to the basic concepts of programming languages, with a strong emphasis on functional programming. The course uses the languages ML, Racket, and Ruby as vehicles for teaching the concepts, but the real intent is to teach enough about how any language “fits together” to make you more effective programming in any language -- and in learning new ones.\n\nThis course is neither particularly theoretical nor just about programming specifics -- it will give you a framework for understanding how to use language constructs effectively and how to design correct and elegant programs. By using different languages, you will learn to think more deeply than in terms of the particular syntax of one language. The emphasis on functional programming is essential for learning how to write robust, reusable, composable, and elegant programs. Indeed, many of the most important ideas in modern languages have their roots in functional programming. Get ready to learn a fresh and beautiful way to look at software and how to have fun building it.\n\nThe course assumes some prior experience with programming, as described in more detail in the first module of Part A.  Part B assumes successful completion of Part A.\n\nThe course is divided into three Coursera courses: Part A, Part B, and Part C.  As explained in more detail in the first module of Part A, the overall course is a substantial amount of challenging material, so the three-part format provides two intermediate milestones and opportunities for a pause before continuing.  The three parts are designed to be completed in order and set up to motivate you to continue through to the end of Part C.  \n\nWeek 1 of Part A has a more detailed list of topics for all three parts of the course, but it is expected that most course participants will not (yet!) know what all these topics mean.", "target_audience": "Who is this class for: The course assumes students are familiar with programming covered by most introductory courses, but it is explicitly designed not to be a particularly advanced course. Students should be comfortable with variables, conditionals, arrays, linked lists, stacks, and recursion (though recursion will be reviewed and expanded upon), and the difference between an interface and an implementation. Students should be eager to write programs in languages new to them. Part C of the course analyzes basic object-oriented concepts and contrast them with those of other languages, so familiarity with Java or a closely related language (e.g., C#) might be helpful for Part C, but it is not necessary for the assignments.\n\nThis course is based on a course designed for second- and third-year undergraduates: not a first computer science course, but not an advanced course either. So it certainly will not cover everything in the beautiful world of programming languages, but it is a solid introduction.  It is designed to be eye-opening and fascinating both for learners seeking a \"third or fourth programming course\" and for learners with more experience who are looking for a clear and precise foundation in programming languages.\n\nThe assignments in the course are designed to be challenging, but with everything you need in the course content.\n\nAn introductory video and another reading discuss assumed background in some more detail in Week 1 of Part A of the course.", "created_by": "University of Washington", "teach_by": [{"name": "Dan  Grossman", "department": "Computer Science & Engineering"}], "package_num": null, "package_name": null, "level": "Intermediate", "rating": "4.9", "week_data": [{"title": "Introduction, Course-Wide Information, and Software Installation (Start Here)", "description": "Welcome! Start here!  Learn about this course and how it's organized. ", "video": ["Start Here!", "Welcome to Part B", "Overview of Part B Concepts", "Part B Course Structure", "Part B Software Installation and Use: Racket and DrRacket"]}, {"title": "Section 5 and Homework 4 (First Module with Racket)", "description": "Let's get started programming with Racket and then learning idioms related to delaying evaluation.  The welcome message has a few additional comments about picking up a new language and how to approach the homework assignment, so let's get started...", "video": ["Section 5 Welcome Message", "Section 5 Reading Notes", "Code Files for All Section 5 Videos", "Introduction to Racket", "Racket Definitions, Functions, Conditionals", "Racket Lists", "Syntax and Parentheses", "Parentheses Matter! (Debugging Practice)", "Dynamic Typing", "Cond", "Local Bindings", "Toplevel Bindings", "Mutation with set!", "The Truth About Cons", "mcons For Mutable Pairs", "Delayed Evaluation and Thunks", "Avoiding Unnecessary Computations", "Delay and Force", "Using Streams", "Defining Streams", "Memoization", "Macros: The Key Points", "Optional:  Tokenization, Parenthesization, and Scope", "Optional: Racket Macros With define-syntax", "Optional: Variables, Macros, and Hygiene", "Optional: More Macro Examples", "Homework 4 Detailed Guidelines for Peer Assessment", "Notes and Tips for Section 5", "Extra Practice Problems", "Homework 4 (Auto-Grader)", "Homework 4"]}, {"title": "Section 6 and Homework 5 (Second Module with Racket)", "description": "Welcome to the second week of Part B where we will focus on (a) building data structures in dynamically typed languages and (b) implementing programming languages with interpreters.  Most of the programming assignment is focused on (b) -- implementing a small programming language that has function closures.  As usual, start with the welcome message and enjoy!", "video": ["Section 6 Welcome Message", "Section 6 Reading Notes", "Code Files for All Section 6 Videos", "Datatype-Programming in Racket Without Structs", "Datatype-Programming in Racket With Structs", "Advantages of Structs", "Implementing Programming Languages", "What Your Interpreter Can and Cannot Assume", "Implementing Variables and Environments", "Implementing Closures", "Optional: Are Closures Efficient?", "Racket Functions As “Macros”  For Interpreted Language", "Homework 5 Detailed Guidelines for Peer Assessment", "Notes and Tips for Section 6", "Extra Practice Problems", "Homework 5 (Auto-Grader)", "Homework 5"]}, {"title": "Section 7 Including a Quiz", "description": "In the last module of Part B we will use our experience programming in ML and Racket to \ncompare and contrast static typing and dynamic typing.  This is not only the most important difference between these two languages, but it is a fundamental topic in the study of programming languages.  Learning it can help you program more effectively in both kinds of languages.  After completing this week's quiz, don't forget to watch the Part B Wrap-Up and Part C Preview video.", "video": ["Section 7 Welcome Message", "Section 7 Reading Notes", "Code Files for All Section 7 Videos", "ML Versus Racket", "What is Static Checking?", "Soundness and Completeness", "Weak Typing", "Static Versus Dynamic Typing, Part One", "Static Versus Dynamic Typing, Part Two", "Optional: eval and quote", "Quiz Instructions", "Nothing (yet) (explanation)", "Part B Wrap-Up and Part C Preview", "Section 7 Quiz"]}]}, {"title": "Android App Components - Intents, Activities, and Broadcast Receivers", "course_info": "About this course: This 4 week MOOC builds upon the overview of Java and Android covered in Course 1 by delving deeper into core Android app components, such as intents, activities, and broadcast receivers.  You will learn by example how to program these core Android components together with Android concurrency frameworks and basic Java file I/O classes (such as File and InputStream) and Android storage mechanisms (such as Shared Preferences). You'll also learn how to use the Git source code management system. Throughout this MOOC you'll work incrementally on a project involving downloading, storing, and display images from remote websites. Each week you will add additional capabilities to the project, based on material covered in the lecture videos. You'll spend roughly 4 hours per week watching video lectures, taking quizzes, and programming assignments with Java and Android.", "target_audience": null, "created_by": "Vanderbilt University", "teach_by": [{"name": "Dr. Douglas C. Schmidt", "department": "Electrical Engineering and Computer Science"}, {"name": "Michael Walker", "department": "EECS"}, {"name": "Dr. C. Jules White", "department": "Electrical Engineering and Computer Science"}], "package_num": "2", "package_name": "Android App Development Specialization ", "level": null, "rating": "4.0", "week_data": [{"title": "MOOC Overview", "description": "This module provides an introduction to the contents of the MOOC and summarizes effective learning strategies", "video": ["MOOC 2 Overview", "Responses to Frequently Asked Questions (FAQ) and PDF Versions of Slides", "Module 1 Introduction", "MOOC Contents, Organization, and Learning Strategies (Part 1)", "MOOC Contents, Organization, and Learning Strategies (Part 2)", "Overview of Android (Part 1):\u000bHardware & OS Kernel", "Overview of Android (Part 2):\u000bMiddleware Infrastructure", "Overview of Android (Part 3):\u000b Application Framework & Apps", "Module 1 Quiz"]}, {"title": "Introduction to Git", "description": "This module provides an overview of the Git version control system.", "video": ["Git Module Introduction", "Git Introduction", "Git Basics", "Working With Remote Repositories", "Git Branching", "Git Merge Conflicts", "Git in Android Studio", "Git Module Outro", "Git Module Quiz"]}, {"title": "Android Intents", "description": "This module describes the structure, functionality, and use of Android intents that provide an abstract description of an operation to perform or an event that has occurred.. Android uses intents as the \"glue\" that simplifies the integration of apps that reuse existing components, such as activities, services, and broadcast receivers. ", "video": ["Introduction to the Module on Android Intents", "Overview of Android Intents (Part 1)", "Overview of Android Intents (Part 2)", "Elements of an Android Intent (Part 1)", "Elements of an Android Intent (Part 2)", "Android Intent Resolution and Filtering (Part 1)", "Android Intent Resolution and Filtering (Part 2)", "Concurrent Programming with Android Intents", "MapLocation App Case Study", "Assignment 1: Downloader Introduction (Optional)", "How to Peer Evaluate an Android Assignment (Optional)", "Module 3 Quiz"]}, {"title": "Android Activities", "description": "This module describes the structure, functionality, and use of Android activities, which define user-facing operations that are displayed on a device screen.  Activities are the most common type of Android component and are at the heart of app Android apps.", "video": ["Introduction to the Module on Android Activities", "Introduction to Android Activities (Part 1)", "Introduction to Android Activities (Part 2)", "Activity Lifecycle Operations (Part 1)", "Activity Lifecycle Operations (Part 2)", "Activity Lifecycle Operations (Part 3)", "Managing Multiple Activities and Task", "Concurrent Programming with Android Activities (Part 1)", "Concurrent Programming with Android Activities (Part 2)", "Case Study: ImageDownloader App (Part 1)", "Case Study: ImageDownloader App (Part 2)", "Case Study: ImageDownloader App (Part 3)", "Assignment 2: HaMeRDownloader (optional)", "Module 4 Quiz"]}, {"title": "Android Broadcast Receivers", "description": "", "video": ["Module Introduction", "Introduction to Android Broadcast Receivers (Part 1)", "Introduction to Android Broadcast Receivers (Part 2)", "Registering, Implementing, & Invoking Broadcast Receivers (Part 1)", "Registering, Implementing, & Invoking Broadcast Receivers (Part 2)", "Registering, Implementing, & Invoking Broadcast Receivers (Part 3)", "Android Broadcast Receiver Security", "Case Study: ImageDownloader \u000bBroadcast Receiver Apps (Part 1)", "Case Study: ImageDownloader \u000bBroadcast Receiver Apps (Part 2)", "Assignment 3: AsyncTaskDownloader (optional)", "Module 5 Quiz"]}]}, {"title": "Multiplatform Mobile App Development with NativeScript", "course_info": "About this course: This course focuses on developing truly cross-platform, native iOS and Android apps using NativeScript (Ver 3.x). The framework uses Angular, TypeScript or modern JavaScript to get truly native UI and performance while sharing skills and code with the web. You will learn about UI development with NativeScript UI and layout support and access the native mobile platform's capabilities from Javascript. You should have already completed the Bootstrap 4 and the Angular courses in this specialization before proceeding with this course.\n\nAt the end of this course you will be able to (a) Build mobile applications targeting multiple platforms with a single codebase, (b) Leverage your Angular, TypeScript and Javascript skills, and (c) Use various features of the Ionic framework to build truly cross-platform mobile applications", "target_audience": "Who is this class for: This course is aimed at students with sufficient knowledge of Web technologies like HTML, CSS and JavaScript. A good working knowledge of JavaScript, especially ES 5  and the Angular framework is strongly recommended. ", "created_by": "The Hong Kong University of Science and Technology", "teach_by": [{"name": "Jogesh K. Muppala", "department": "Department of Computer Science and Engineering"}], "package_num": "4", "package_name": "Full Stack Web and Multiplatform Mobile App Development Specialization ", "level": "Intermediate", "rating": "4.5", "week_data": [{"title": "Hybrid Mobile App Development Frameworks: NativeScript: An Introduction", "description": "This module introduces you to hybrid mobile application development. You will learn about the NativeScript framework and explore some of the features of the NativeScript framework to implement a mobile app based on the Angular application that was implemented in the previous course on Angular.", "video": ["Welcome to Multiplatform Mobile App Development with Web Technologies: NativeScript", "How to Use the Learning Resources", "Welcome to Multiplatform Mobile App Development with Web Technologies: NativeScript: Additional Resources", "Full Stack Web Development: The Big Picture: Objectives and Outcomes", "What is Full-Stack Web Development?", "Full Stack Web Development: Additional Resources", "Setting up Your Development Environment: Git and Node: Objectives and Outcomes", "Setting up your Development Environment", "Exercise (Video): Setting up Git", "Exercise (Instructions): Setting up Git", "Exercise (Video): Basic Git Commands", "Exercise (Instructions): Basic Git Commands", "Exercise (Video): Online Git Repositories", "Exercise (Instructions): Online Git Repositories", "Node.js and NPM", "Exercise (Video): Setting up Node.js and NPM", "Exercise (Instructions): Setting up Node.js and NPM", "Exercise (Video): Basics of Node.js and NPM", "Exercise (Instructions): Basics of Node.js and NPM", "Setting up your Development Environment: Git and Node: Additional Resources", "Hybrid Mobile App Development: An Overview: Objectives and Outcomes", "Hybrid Mobile App Development", "Introduction to the NativeScript Framework", "Exercise (Video): Setting up the NativeScript Framework", "Exercise (Instructions): Setting up the NativeScript Framework", "Exercise (Video): Creating your First NativeScript Project", "Exercise (Instructions): Creating your First NativeScript Project", "Hybrid Mobile App Development: An Overview: Additional Resources", "Setting up a Simple Server: Objectives and Outcomes", "Exercise (Video): Setting up a Server using json-server", "Exercise (Instructions): Setting up a Server using json-server", "Setting up a Simple Server: Additional Resources", "NativeScript and Angular: Objectives and Outcomes", "NativeScript and Angular", "Exercise (Video): NativeScript and Angular", "Exercise (Instructions): NativeScript and Angular", "NativeScript Layouts", "NativeScript and Angular: Additional Resources", "NativeScript Navigation: Objectives and Outcomes", "NativeScript Navigation", "Exercise (Video): NativeScript Navigation Part 1", "Exercise (Instructions): NativeScript Navigation Part 1", "Exercise (Video): Telerik Progress NativeScript UI SideDrawer", "Exercise (Instructions): Telerik Progress NativeScript UI SideDrawer", "Exercise (Video): NativeScript Navigation Part 2", "Exercise (Instructions): NativeScript Navigation Part 2", "NativeScript Navigation: Additional Resources", "Assignment 1 Requirements (Video): Introduction to NativeScript", "Assignment 1: Introduction to NativeScript: Additional Resources", "Ideation: Objectives and Outcomes", "Ideation Report Template", "Ideation: Additional Resources", "Introduction to NativeScript", "Ideation"]}, {"title": "NativeScript UI Elements", "description": "This module introduces you to various NativeScript UI elements. We will look at how we can make use of these elements in designing the various views of our application.", "video": ["Buttons and Icon Fonts: Objectives and Outcomes", "Icon Fonts and Buttons", "Exercise (Video): Icon Fonts", "Exercise (Instructions): Icon Fonts", "Exercise (Video): Buttons", "Exercise (Instructions): Buttons", "Buttons and Icon Fonts: Additional Resources", "Advanced Lists: Objectives and Outcomes", "Advanced Lists Using Telerik Progress NativeScript UI ListView", "Exercise (Video): Advanced Lists Using Telerik Progress NativeScript UI ListView", "Exercise (Instructions): Advanced Lists Using Telerik Progress NativeScript UI ListView", "Advanced Lists: Additional Resources", "Dialogs: Objectives and Outcomes", "Dialogs", "Exercise (Video): Dialogs and Toasts", "Exercise (Instructions): Dialogs and Toasts", "Dialogs and Toasts: Additional Resources", "\"Forms\" and Modals: Objectives and Outcomes", "NativeScript \"Forms\" and Modal Dialogs", "Exercise (Video): Data Entry and \"Forms\"", "Exercise (Instructions): Data Entry and \"Forms\"", "Exercise (Video): Modal Dialogs", "Exercise (Instructions): Modal Dialogs", "\"Forms\" and Modals: Additional Resources", "Assignment 2: NativeScript UI Elements", "Assignment 2: Additional Resources", "UI Design and Prototyping: Objectives and Outcomes", "UI Design and Prototyping Report Template", "UI Design and Prototyping: Additional Resources", "NativeScript UI Elements", "UI Design and Prototyping"]}, {"title": "NativeScript Animations, Gestures, Storage and Image Resources", "description": "In this module we look at enhancing the user experience through the use of animations and support for gesture-based interaction. We also look at leveraging the storage for persisting data, and the customization of splash screens, icons and the use of other image resource in the app", "video": ["NativeScript Storage: Objectives and Outcomes", "Persisting Data: NativeScript Storage", "Exercise (Video): Application Settings", "Exercise (Instructions): Application Settings", "Exercise (Video): NoSQL Storage with Couchbase Lite", "Exercise (Instructions): NoSQL Storage with Couchbase Lite", "NativeScript Storage: Additional Resources", "Animations and Gestures: Objectives and Outcomes", "Animations and Gestures", "Exercise (Video): Animations and Gestures Part 1", "Exercise (Instructions): Animations and Gestures Part 1", "Exercise (Video): Animations and Gestures Part 2", "Exercise (Instructions): Animations and Gestures Part 2", "Animations and Gestures: Additional Resources", "Splash Screens, Icons and Image Resources: Objectives and Outcomes", "Splash Screens, Icons and Image Resources", "Exercise (Video): Customizing App Icons and Launch Screens for Android", "Exercise (Instructions): Customizing App Icons and Launch Screens for Android", "Exercise (Video): Customizing App Icons and Launch Screens for iOS", "Exercise (Instructions): Customizing App Icons and Launch Screens for iOS", "Exercise (Video): Image Resources", "Exercise (Instructions): Image Resources", "Splash Screens, Icons and Image Resources: Additional Resources", "Assignment 3: Animations and Storage", "Assignment 3: Additional Resources", "Assignment 3: Animations and Storage"]}, {"title": "Accessing Native Capabilities of Devices: NativeScript Plugins", "description": "In this module you will explore NativeScript Plugins that enable you to access the native capabilities of the mobile devices. You will use a few plugins in order to understand the general concepts and the patterns for using these plugins within your NativeScript application", "video": ["NativeScript Plugins: Objectives and Outcomes", "NativeScript Plugins", "Exercise (Video): Notifying the User", "Exercise (Instructions): Notifying the User", "NativeScript Plugins: Additional Resources", "Social Sharing: Objectives and Outcomes", "Social Sharing", "Exercise (Video): Sending Email", "Exercise (Instructions): Sending Email", "Exercise (Video): Social Sharing", "Exercise (Instructions): Social Sharing", "Social Sharing: Additional Resources", "Using the Camera: Objectives and Outcomes", "Using the Camera", "Exercise (Video): Using the Camera", "Exercise (Instructions): Using the Camera", "Using the Camera: Additional Resources", "Platform and Network Status: Objectives and Outcomes", "Platform and Network Status", "Exercise (Video): Platform and Network Status", "Exercise (Instructions): Platform and Network Status", "Platform and Network Status: Additional Resources", "Assignment 4: NativeScript Plugins", "Assignment 4: NativeScript Plugins: Additional Resources", "Conclusions", "Conclusions: Additional Resources", "Project Implementation: Objectives and Outcomes", "Final Report Template", "NativeScript Plugins", "Project Implementation and Final Report"]}]}, {"title": "Agile Software Development", "course_info": "About this course: Software industry is going crazy on agile methods.  It is rapidly becoming the choice for software development where requirements are unpredictable or is expected to change over time. This course will help you gain knowledge on what is agile? Why agile is better suited for these situations?  We will also cover some of the most common agile frameworks like scrum and XP in depth.  \n\nPrerequisite: You need basic knowledge of software development process and software development methodologies. \n\nAfter completing this course, you will be able to :\n1) Demonstrate the ability to participate effectively in agile practices/process for software development.  \n2) Explain the purpose behind common agile practices.\n3) Ability to apply agile principles and values to a given situation.\n4) Ability to identify and address most common problems encountered in adopting Agile methods. \n\nProject: You will also be given opportunity to apply what you learn in this course.  You will be given fictional case studies, where after studying the case study, you will have to exercise some of the practices, techniques, etc that team members of an agile team members are expected to know.", "target_audience": "Who is this class for: It is designed for individuals who are new to agile software development methods or have been developing software using agile and lean methods but wants to gain deeper understanding of these methods and/or getting academic context on these methods", "created_by": "University of Minnesota", "teach_by": [{"name": "Praveen Mittal", "department": "College of Science and Engineering"}], "package_num": "2", "package_name": "Software Development Lifecycle Specialization ", "level": "Intermediate", "rating": "4.1", "week_data": [{"title": "Agile Fundamentals", "description": "In this module, we will learn about agile mindset, the core behind many agile methods.  How agile methods are different than traditional methods and when to use agile methods. We will learn about how to apply agile mindset and finally review different frameworks available to implement agile.", "video": ["Welcome and Course Intro", "Course Learning Plan", "What software development looks like?", "Intro to Software Development Models", "Why Agile?", "Video: Agile Manifesto : Values", "Agile Manifesto: Principles", "Agile Manifesto Explained", "Agile Values and Principles", "Benefits and Challenges of Agile", "Agile: When to Use and When NOT to!", "Using Agile Methods", "Applying an Agile Mindset to a Project", "Agile Frameworks", "Applying an Agile Mindset", "Agile Fundamentals"]}, {"title": "Requirements and Planning", "description": "In this module we will  learn about user stories and agile estimation and planning techniques. ", "video": ["Gathering Requirements: The agile way", "User Stories: The currency of agile development", "Characteristics of good user stories", "User Stories", "Generating User Stories", "Gathering User Needs", "Agile Estimation and Planning", "Estimation Styles and Process", "Video: Planning Poker", "Agile Estimation", "Velocity", "Release Planning", "Release Tracking", "Release Planning and Tracking", "Requirements and Planning"]}, {"title": "Scrum", "description": "In this module we will learn about Scrum which is one of the most popular agile framework.  We will learn about scrum practices and the purpose behind these practices. ", "video": ["Scrum Overview", "Scrum Overview", "Sprint Planning", "Sprint Tracking", "Sprint Planning and Tracking", "Sprint Execution and Daily Standups", "Sprint Review", "Sprint Retrospective", "Sprint Review, Retrospective and Execution", "Scrum", "Applying the Agile Mindset and Techniques"]}, {"title": "XP and Course Wrap-up", "description": "In this module, we will compare Scrum to XP and learn about some of the engineering practices from XP. ", "video": ["XP Overview", "XP Values", "XP Practices - Part 1", "XP Practices - Part 2", "XP Process Model", "Scrum vs XP", "XP", "Story Mapping"]}]}, {"title": "Web Application Development with JavaScript and MongoDB", "course_info": "About this course: In this course, you will develop more advanced web application programming skills. You will learn how to control data read and write access using methods, publish and subscribe. You will learn how to access your database and server shells using command line tools. You will use the SimpleSchema system to validate data and generate input forms automatically. You will see a complete collaborative code editing environment, TextCircle, being built from scratch. \n\nAt the end of this course, you will be able to:\n- use Meteor methods to control data write access\n- use publish and subscribe to control data read access\n- install and use advanced Meteor packages\n- add user accounts to your applications\n- implement complex MongoDB filters\n- use the MongoDB and meteor server shells\n- define data validations schemas using SimpleSchema\n- generate data input forms automatically using SimpleSchema\n\nIn this course, you will complete:\n2 programming assignments taking ~4 hours each to complete\n4 quizzes, each taking ~20 minutes to complete\nmultiple practice quizzes, each taking ~5 minutes to complete\n\nParticipation in or completion of this online course will not confer academic credit for University of London programmes", "target_audience": null, "created_by": "University of London, Goldsmiths, University of London", "teach_by": [{"name": "Dr Matthew Yee-King", "department": "Computing Department, Goldsmiths, University of London"}], "package_num": "4", "package_name": "Responsive Website Development and Design Specialization ", "level": null, "rating": "4.6", "week_data": [{"title": "Web Application Development with JavaScript and MongoDB: Course overview", "description": "Welcome to 'Web Application Development with JavaScript and MongoDB'! In this course we will be creating native mobile apps using Meteor.js, implementing social media features, such as following as well as writing and running unit tests on your JavaScript code. Finally you will set up your own server environment to run Meteor applications and you will implement the publish and subscribe data control model. I hope you enjoy the course! -Matthew ", "video": ["Course introduction", "Course outline", "Grading and assessment information", "Prerequisite quiz"]}, {"title": "MongoDB, Meteor and reactive data", "description": "Welcome to the first module of 'Web Application Development with JavaScript and MongoDB!' In this module we will look at accessing MongoDB on the command line, we will understand how to check for valid returns from find queries and identify reactive data sources within the Meteor framework. Finally we learn how to use the Session object to store user data, understand variable scope and use iframes to create separate DOMs. Enjoy! ", "video": ["Overview", "Starter code", "TextCircle", "TextCircle", "Reactive data", "Reactive data", "Reactive sessions", "Reactive sessions", "Scope", "Scope", "Bootstrap it!", "Bootstrap it!", "HTML preview", "HTML preview", "MongoDB, Meteor and reactive data summary", "MongoDB, Meteor and reactive data summary quiz", "M-Instant part 1: working with Session"]}, {"title": "User accounts, packages and methods", "description": "Welcome to the second module of 'Web Application Development with JavaScript and MongoDB!' In this module we will learn how to use the core user accounts packages, customise the user accounts UI using third party packages and search for and add packages to an application. We will also look at how to query MongoDB collections from the command line and learn how to control data write access using methods. Enjoy! ", "video": ["Overview", "Source code", "User accounts", "User accounts", "MongoDB shell", "MongoDB shell", "Customise the accounts UI", "Customise the accounts UI", "Who is editing? working with methods", "Who is editing? DB", "Who is editing? UI", "Who is editing? UI", "Improve the UI", "Improve the UI", "User accounts, packages and methods summary", "User accounts, packages and methods summary quiz", "M-instant part 2: working with methods"]}, {"title": "Publish and subscribe model and MongoDB filters", "description": "Welcome to the third module of 'Web Application Development with JavaScript and MongoDB!' In this module we will use bootstrap icons and use the publish and subscribe model to control data read access. We will understand the concept of asynchronous execution and work with template data contexts and helper functions. Finally we will use packages to implement in-place content editing and use complex MongoDB filters. Enjoy! ", "video": ["Overview", "Source code", "More docs!", "More docs!", "Docs in the DB", "Docs in the DB", "Using Session", "Using Session", "Loading the new doc", "Loading the new doc", "Document list", "Document list", "Editable title", "Editable title", "Controlling document access", "Controlling document item", "Publish and subscribe", "Publish and subscribe", "Final polish", "Final polish", "Publish and subscribe MongoDB filters summary", "Publish and subscribe MongoDB filters summary quiz", "M-instant part 3: publish and subscribe"]}, {"title": "SimpleSchemas, autoform and code re-organisation", "description": "Welcome to the final module of 'Web Application Development with JavaScript and MongoDB!' In this module we will create a well organised application using special Meteor folders and we will organise templates into multiple files. We will also learn how to use the iron:router package to create multiple page applications and we will generate data entry forms automatically using SimpleSchema and autoform. Finally, we will validate user data automatically using SimpleSchema. Enjoy! ", "video": ["Overview", "Learning outcomes", "Source code", "Reorganising the code", "Reorganising the code", "Fixing bugs", "Fixing bugs", "Routing", "Routing", "Iron:router", "Iron:router", "Grid layout", "Grid layout", "Find and FindOne", "Find and FindOne", "Comment box", "Comment box", "Comment list", "Comment list", "SimpleSchemas, autoform and code re-organisation summary", "Final version of source code", "SimpleSchemas, autoform and code re-organisation summary quiz", "M-Instant part 4 - multiple chatrooms!"]}, {"title": "Summary", "description": "", "video": ["Summary"]}]}, {"title": "Android App Components - Services, Local IPC, and Content Providers", "course_info": "About this course: This 4 week MOOC builds upon the core Android app components and concurrency frameworks covered in Course 2 by focusing on started and bound services, local inter-process communication (IPC), and content providers. Case study apps will be examined from multiple perspectives to learn how to program these app components using Android's material design paradigm. Students will work incrementally on a hands-on project involving a material design-based RSS reader app. Each week you will add additional capabilities to the project, based on material covered in the lecture videos. You'll spend roughly 4 hours per week watching video lectures, taking quizzes, and programming assignments with Java and Android.", "target_audience": null, "created_by": "Vanderbilt University", "teach_by": [{"name": "Dr. Douglas C. Schmidt", "department": "Electrical Engineering and Computer Science"}], "package_num": "3", "package_name": "Android App Development Specialization ", "level": "Beginner", "rating": "4.3", "week_data": [{"title": "MOOC Overview", "description": "This module provides an introduction to the contents of the MOOC and summarizes effective learning strategies. Learning objectives are presented in the Module Introduction video lecture.", "video": ["MOOC 3 Overview", "Responses to Frequently Asked Questions (FAQ) and PDF Versions of Slides", "Module Introduction", "MOOC Contents, Organization, and Learning Strategies (Part 1)", "MOOC Contents, Organization, and Learning Strategies (Part 2)", "Overview of Layered Architectures", "Primary and Secondary Storage Mechanisms", "Kernel IPC and Processing Mechanisms", "Android Kernel Extensions", "An Introduction to Key Concepts", "Android Hardware Abstraction Layer (HAL)", "Android Runtime: Execution Environments", "Android Runtime: Core and Native Libraries", "Overview of Object-Oriented Frameworks", "Service Frameworks and Packaged Apps", "Module 1 - Overview of the Android App Components"]}, {"title": "Android Started and Bound Services", "description": "Learning objectives are presented in the Module Introduction video lecture.", "video": ["Module Introduction", "Overview of Android Services (Part 1)", "Overview of Android Services (Part 2)", "Overview to Android Services (Part 3)", "Service Lifecycle Operations (Part 1)", "Service Lifecycle Operations (Part 2)", "Service Lifecycle Operations (Part 3)", "The IntentService Framework", "Service Deployment and Communication Models", "Case Study: PingPongReceiverService App", "Peer Review: Peer Review: Assignment 1: IntentServices (Optional)", "Module 2 - Started and Bound Services"]}, {"title": "Android Local Inter-Process Communication (IPC)", "description": "Learning objectives are presented in the Module Introduction video lecture.", "video": ["Module Introduction", "Overview of Android Local Inter-Process Communication (IPC) (Part 1)", "Overview of Android Local Inter-Process Communication (IPC) (Part 2)", "Service and Activity Communication\u000b Via Android Messengers (Part 1)", "Service and Activity Communication\u000b Via Android Messengers (Part 2)", "Programming Started Services with Intents & Messengers  (Part 1)", "Programming Started Services with Intents & Messengers (Part 2)", "Programming Started Services with Intents & Messengers (Part 3)", "Programming Started Services with Intents & Messengers (Part 4)", "Programming Bound Services with Messengers (Part 1)", "Programming Bound Services with Messengers (Part 2)", "Programming Bound Services with Messengers (Part 3)", "Programming Bound Services with Messengers (Part 4)", "Peer Review: Assignment 2: IntentService & Messages (Optional)", "Module 3 - Android: Local Inter-Process Communication (IPC)"]}, {"title": "Android Content Providers", "description": "Learning objectives are presented in the Module Introduction video lecture.", "video": ["Module Introduction", "Overview of Content Providers & Content Resolvers (Part 1)", "Overview of Content Providers & Content Resolvers (Part 2)", "Overview of SQLite (Part 1)", "Overview of SQLite (Part 2)", "Developing a Content Provider (Part 1)", "Developing a Content Provider (Part 2)", "Case Study: The HobbitContentProvider App (Part 1)", "Case Study: The HobbitContentProvider App (Part 2)", "Case Study: The HobbitContentProvider App (Part 3)", "Assignment 3: Content Providers (Optional)", "Module 4 - Android Content Providers"]}]}, {"title": "Smartphone Emerging Technologies", "course_info": "About this course: Smartphones are one of the most influential devices that we use in our everyday lives. Smartphones consist of the most advanced hardware and software technologies that exist in the world, all combined together into a miraculous single easy-to-use portable system.\n\nThese lectures focus on the specifications, hardware modules, and OS (Operating System) iOS & Android that enable smartphones to perform various features and functionalities. Since there are so many smartphone types, in the lectures, three smartphones were selected and compared. The lecture covers the specifications of the Samsung Galaxy S6 edge, LG G4, and the iPhone 6 plus, which are among the most popular recently released smartphones in the world!\n\nWith this new knowledge on Cellular Networks, Wi-Fi, Bluetooth, Platform, OS (Operating System), Chipsets, CPU (Central Processing Unit), GPU (Graphics Processing Unit), Display, Location & Navigation system, and new Wireless Charging systems, you will be able to analyze, design, and plan new smartphones for the future.", "target_audience": null, "created_by": "Yonsei University", "teach_by": [{"name": "Jong-Moon Chung", "department": "Director, Communications & Networking Laboratory"}], "package_num": "1", "package_name": "Emerging Technologies: From Smartphones to IoT to Big Data Specialization ", "level": null, "rating": "4.0", "week_data": [{"title": "Specialization Introduction", "description": "This specialization covers the concepts of the most important information technologies that you have been using and will be using throughout your entire life! This specialization course is specifically designed for beginners to make it as easy as possible to learn about IT (Information Technology) services, business models, and the most important operations. With the knowledge of this specialization, you will be able to discuss at an expert level with engineers and business professionals on the topics of Cloud Computing (including SaaS, PaaS, IaaS), Big Data (including Hadoop, MapReduce, HDFS), CDN (Content Delivery Network), Smartphone specifications and OSs (Operating Systems) iOS & Android, Wi-Fi, Bluetooth, Mobile Communication (including LTE and LTE-Advanced), IoT (Internet of Things), AR (Augmented Reality), and Internet technologies (including IPv4, IPv6, TCP, and UDP). Upon completion, you will understand these technologies and how they can work together to provide services to our smartphones, laptops, PCs, and TVs. With this new knowledge you will be able to analyze, design, and plan new IT devices and services for the future.", "video": ["Specialization Syllabus", "Specialization Intro video"]}, {"title": "Smartphone Specifications", "description": "These lectures provide more details on some of the most essential smartphone system components that are used in the Samsung Galaxy S6 edge, LG G4, and the iPhone 6 plus. The lectures cover the specifications of GPS (Global Positioning System), A-GPS (Assisted GPS), DLNA (Digital Living Network Alliance), RDS (Radio Data System), Shatterproof Glass, Gorilla Glass, Oleophobic Coating, Super AMOLED (Active-Matrix Organic Light-Emitting Diode), IPS (In-Plane Switching), LED-Backlit LCD Display, Qi wireless charging, WPC (Wireless Power Consortium), and PMA (Power Matters Alliance).", "video": ["Course Syllabus", "Smartphone Specs Part 1", "Smartphone Specs Part 2", "Smartphone Specs Part 3", "Smartphones & Chipsets (Dec. 2015)", "Lecture Note", "Smartphone Specifications Quiz"]}, {"title": "iOS", "description": "These lectures focus on the major features and functionalities of the iPhone OS (Operating System) starting from iOS 1 and going all the way to iOS 8. The lectures start with iOS 1 which was the OS of the first iPhone, and continue down the path of evolution with iOS 2 which newly included the App Store and SDK (Software Development Kit), iOS 3 which newly included Voice Control and Find my iPhone, iOS 4 which newly included FaceTime video chat, iOS 5 which newly included iCloud and Siri, iOS 6 which newly included Passbook, iOS 7 which newly included Touch ID, and iOS 8 which newly included HealthKit & HomeKit.", "video": ["iOS Evolution Part 1", "iOS Evolution Part 2", "iOS Quiz"]}, {"title": "Android", "description": "These lectures focus on the major features and functionalities of the Android OS (Operating System) starting from Android 1.0 and going all the way to 5.0.2. The lectures start with Android Beta which is the beginning of the Android mobile OS, and continues down the path of evolution with Android 1.0 which was the first commercial Android OS, Android 1.5 Cupcake, Android 1.6 Donut, Android 2.0 Éclair, Android 2.2 Froyo, Android 2.3 Gingerbread, Android 3.0 Honeycomb, Android 4.0 Ice Cream Sandwich, Android 4.1 Jelly Bean, Android 4.4 KitKat, and Android 5.0 Lollipop.", "video": ["Android Evolution Part 1", "Android Evolution Part 2", "Android Evolution Part 3", "Android Evolution Part 4", "Android Quiz"]}, {"title": "Android vs. iOS", "description": "This lecture focuses on the major features and functionalities of the Android and iOS OSs (Operating Systems) based on the Programming Language, Source model, Internet Browsing, Voice Commands, Video Chat, App Store, and Mobile Payments. Then some of the essential characteristics of Android and iOS are compared.", "video": ["Android vs. iOS", "You're Almost There!"]}]}, {"title": "Programming Mobile Applications for Android Handheld Systems: Part 2", "course_info": "About this course: This course introduces you to the design and implementation of Android applications for mobile devices. You will build upon concepts from the prior course, including handling notifications, using multimedia and graphics and incorporating touch and gestures into your apps.", "target_audience": null, "created_by": "University of Maryland, College Park", "teach_by": [{"name": "Dr. Adam Porter", "department": "Computer Science"}], "package_num": null, "package_name": null, "level": null, "rating": "4.7", "week_data": [{"title": "Threads and Networking", "description": " ", "video": ["Overview ", "Threads, AsyncTasks & Handlers - Part 1", "Threads, AsyncTasks & Handlers - Part 2", "Networking - Part 1", "Networking - Part 2", "Threads, AsyncTasks and Handlers, and Networking", "Lab - AsyncTasks"]}, {"title": "User Notifications, BroadcastReceivers, and Alarms", "description": " ", "video": ["User Notifications - Part 1", "User Notifications - Part 2", "BroadcastReceiver - Part 1", "BroadcastReceiver - Part 2", "Alarms", "User Notifications, BroadcastReceivers, and Alarms", "Lab - Notifications"]}, {"title": "Graphics, Touch, and Multimedia", "description": " ", "video": ["Graphics and Animation - Part 1", "Graphics and Animation - Part 2", "Graphics and Animation - Part 3", "Touch and Gestures - Part 1", "Touch and Gestures - Part 2", "Multimedia - Part 1", "Multimedia - Part 2", "Preview: Programming Cloud Services for Android Handheld Systems", "Introduction to Amazon Guest Lecture - Analytics and A/B Testing", "Graphics, Touch, and Multimedia", "Lab - Graphics"]}, {"title": "Sensors, Location and Maps, and Data Management", "description": " ", "video": ["Sensors - Part 1", "Sensors - Part 2", "Location and Maps - Part 1", "Location and Maps - Part 2", "Data Management - Part 1", "Data Management- Part 2", "Closing", "Sensors, Location and Maps, and Data Management", "Lab - Location"]}, {"title": "Build From Scratch", "description": "Build an app completely from scratch", "video": ["Daily Selfie"]}]}, {"title": "Engineering Maintainable Android Apps", "course_info": "About this course: Engineering Maintainable Android Apps, which is a 4 week MOOC that shows by example various methods for engineering maintainable Android apps, including test-driven development methods and how to develop/run unit tests using JUnit and Robotium (or equivalent automated testing frameworks for Android), as well as how to successfully apply common Java/Android software patterns to improve the extensibility and clarity of Android apps. Students will work on the appropriate automated unit quizzes, based on the material covered in the lecture videos. These lessons will demonstrate the benefits of good software engineering practices that are targeted at creating maintainable code for mobile apps.\n\nThere will be roughly 3-4 hours of student engagement time per week, including video lectures, and quizzes. The ordering of the modules within the course is designed to be flexible.  In particular, students can watch the videos in whatever order suits their experience and needs, e.g., they may want to watch the unit testing videos prior to the software pattern videos if they prefer to learn about unit testing first.", "target_audience": null, "created_by": "Vanderbilt University", "teach_by": [{"name": "Dr. Douglas C. Schmidt", "department": "Electrical Engineering and Computer Science"}, {"name": "Michael Walker", "department": "EECS"}, {"name": "Dr. C. Jules White", "department": "Electrical Engineering and Computer Science"}], "package_num": "4", "package_name": "Android App Development Specialization ", "level": null, "rating": "4.3", "week_data": [{"title": "MOOC Overview", "description": "Engineering Maintainable Android Apps, which is a 4 week MOOC that shows by-example various methods for engineering maintainable Android apps, including test-driven development methods and how to develop/run unit tests using JUnit and Robotium (or equivalent automated testing frameworks for Android), as well as how to successfully apply common Java/Android software patterns to improve the extensibility and clarity of Android apps. ", "video": ["Course Intro"]}, {"title": "Software Engineering & Testing I", "description": "", "video": ["Software Engineering as Search", "Why Test?", "Unit Testing", "Unit Testing with Android Studio", "The Importance of Test Automation", "Code Coverage", "Styles of Testing", "Assignment: Testing (Optional)", "Testing I Quiz"]}, {"title": "Software Engineering & Testing II", "description": "", "video": ["Functional & Non-functional Properties", "Refactoring", "Refactoring and Regression Testing", "Integration Testing", "Integration Testing with Android Studio", "Mock Objects with Android Studio", "UI Testing with Espresso in Android Studio", "Optional Assignment 1: Android Test Driven Development (Programming)", "Testing II Quiz"]}, {"title": "Security & Sustainability I", "description": "", "video": ["Security & Sustainability", "Economy of Mechanism", "Economy of Mechanism Example", "Least Privilege", "Least Privilege Example", "Complete Mediation", "Complete Mediation Example", "Secure Defaults", "Secure Defaults Example", "Security I Quiz"]}, {"title": "Security & Sustainability II", "description": "This module provides an introduction to Unit Testing using the Junit 4.0 Framework in Android, as well as an introduction to Testing Frameworks using the Robotium open-source test framework for writing graybox testing cases to automate the testing of multi-Activity Android apps.", "video": ["Traditional App Accounts", "Traditional vs. Mobile App Accounts", "App Account Mapping to Linux Users", "Apps Lie & Steal", "How Android Protects Apps", "What Android Does Not Protect", "The Challenges of Secure Coding", "Security Vulnerability Walkthrough", "The iRemember App Example", "Privilege Escalation I", "Privilege Escalation II", "Privilege Escalation III", "Course Wrap-up", "Security II Quiz"]}]}, {"title": "Ruby on Rails Web Services and Integration with MongoDB", "course_info": "About this course: In this course, we will explore MongoDB, a very popular NoSQL database and Web Services concepts and integrate them both with Ruby on Rails. MongoDB is a used to handle documents with a pre-defined schema which will give the developers an ability to store, process and use data using it’s rich API. The modules will go in-depth from installation to CRUD operations, aggregation, indexing, GridFS and various other topics where we continuously integrate MongoDB with RailsRuby.  We will be covering the interface to MongoDB using the Mongo Ruby API and the Mongoid ORM framework (the MongoDB access counterpart to RDBMS/ActiveRecord within Rails).  The last portion of the course will focus on Web Services with emphasis on REST, its architectural style and integration of Web Services with Rails.  Core concepts of Web Services like request/response, filters, data representation (XML/JSON), web linking and best practices will covered in depth.\n\nThis course is ideal for students and professionals who have some programming experience and a working knowledge of databases.", "target_audience": null, "created_by": "Johns Hopkins University", "teach_by": [{"name": "Kiran Chittargi", "department": "Whiting School of Engineering"}], "package_num": "3", "package_name": "Ruby on Rails Web Development Specialization ", "level": null, "rating": "4.3", "week_data": [{"title": "Introduction to MongoDB, MongoDB-Ruby API, and CRUD", "description": "In this module, we’re going to explore the history and the rationale behind NoSQL databases, their relationship to RDBMS, and dive into the basics of MongoDB. We will install MongoDB, create a database, collections and perform CRUD operations. We will end this module by integrating MongoDB with Ruby Shell and try out some simple examples.", "video": ["Course Introduction", "Grading", "Welcome to Module 1: Introduction to MongoDB, Mongo-Ruby API, and CRUD", "Github Repository for Module 1", "Introduction to NoSQL", "Categories of NoSQL", "Introduction to MongoDB", "Mongo Installation", "MongoDB Basics", "Practice Programming Assignment - MongoDB Ruby Driver Connection", "Inserting Documents", "Practice Programming Assignment - MongoDB Ruby Driver CRUD", "Find", "Paging", "Advanced Find", "Replace, Update, and Delete", "Introduction: Integrating MongoDB with Ruby Driver", "Rails Setup", "DAO Class Infrastructure", "CRUD", "Scaffolding", "MVC Application", "MongoLab Setup", "Heroku Setup", "Integrating MongoDB Ruby Driver and Rails"]}, {"title": "Aggregation Framework, Performance, and Advanced MongoDB", "description": "In this module, we’re going to explore the fundamentals of the Aggregation framework in MongoDB.  We will work on examples where you will process data records and return computed results. You will learn about and get to work on hands-on examples where you will be grouping values from multiple documents and performing a variety of operations on the grouped data to get a single result. We will look at a number of aggregation commands and paging. We will explore some advanced concepts like full text search, GridFS, Geospatial API, and wrap up the module with detailed demonstrations of all the capabilities presented in this module.", "video": ["Welcome to Module 2: Aggregation Framework, Performance, and Advanced MongoDB", "Github Repository for Module 2", "Introduction to Aggregation", "Practice Programming Assignment - Aggregation Framework", "$project", "$group", "$match", "$unwind", "Schema Design", "Normalization", "Relationships", "Practice Programming Assignment: Schema Design", "GridFS", "GridFS Demo 1", "GridFS Demo 2", "GridFS Demo 3", "Geospatial", "Geospatial Demo", "Introduction to Indexes", "Creating Indexes", "Listing & Deleting Indexes", "Unique, Sparse & TTL Indexes", "Advanced MongoDB Ruby Driver Topics"]}, {"title": "Mongoid", "description": "In this module, we’re going to explore Mongoid, which is an Object-Document-Mapper (ODM) for MongoDB written in Ruby. We will learn to integrate Mongoid with Rails and work to understand document and relationship mapping, as well. We will work on a number of queries using the Mongoid API and wrap up the module by implementing Rails/Mongoid Model View Controller.", "video": ["Welcome to Module 3: Mongoid", "Github Repository for Module 3", "Introduction to Mongoid", "Document Class", "Mongoid CRUD", "Movie Application Setup", "Practice Programming Assignment: Mongoid Setup and Document CRUD", "1:1 Embedded Relationship", "M:1 Linked Relationship", "1:M Embedded Relationship", "M:1 Embedded Relationship", "1:1 Linked Relationship", "M:M Linked Relationship", "Constraints and Validation", "Constraints and Validation: Demo", "Practice Programming Assignment: Mongoid Relationships", "Queries (Find)", "Queries (Where)", "Pluck and Scope", "Scaffolding", "Mongoid and Rails Scaffold"]}, {"title": "Web Services", "description": "In this module, we’re going to explore Web Services with a focus on caching and security. We will start off by looking at REST fundamentals, RMM (Richardson Maturity Model) and URI best practices. We will wrap up the topic by covering Client and Server Caching along with Web Service Security (OAuth 2).", "video": ["Welcome to Module 4: Web Services", "Github Repository for Module 4", "Introduction to Web Services", "REST and RMM", "Resources", "URIs", "Nested URIs", "Query Parameters", "Methods", "Web Services and REST", "Idempotence", "Representations", "Versioning", "Content Negotiations", "Headers and Status", "Interfaces", "Client Caching", "Cache Revalidation Headers", "Cache Controls", "Server Caching", "Caching", "OAuth2", "Assembly", "Devise", "Integrated Authentication", "OAuth Integration", "Web Services"]}]}, {"title": "Introduction to Meteor.js Development  ", "course_info": "About this course: In this course, you will learn how to create a complete, multi-user web site using the Meteor.js framework and MongoDB. You will implement user authentication, security features, reactive templates and routing using iron router. You will carry out key database operations such as inserting, removing and updating data as well as sorting and filtering. You will see how a complete application can be built, line by line. \n\nAt the end of the course, you will be able to:\n1. Install the Meteor.js system and create a web application\n2. Work with the Meteor.js packaging system\n3. Write Meteor.js templates that can reactively display data\n4. Use insert, remove and update operations on MongoDB\n5. Write MongoDB data filters to search for and sort data\n6 .Add  user authentication functionality to a website\n7. Control what is displayed on the page using iron:router \n8. Implement basic security features \n\nIn this course, you will complete:\n1 server install assignment taking ~1 hour to complete\n1 programming assignment taking ~8 hours to complete\n4 quizzes, each taking ~20 minutes to complete\nmultiple practice quizzes, each taking ~5 minutes to complete\n\nPrerequisites\n\nThis course is designed to build on top of the material delivered in the previous two courses in this specialisation. Therefore, we recommend that if you find this course too technically challenging that you first complete the previous courses before re-commencing this one. Specifically, we expect you to be able to code basic HTML, CSS and Javascript before you take this course. \n\nParticipation in or completion of this online course will not confer academic credit for University of London programmes", "target_audience": null, "created_by": "University of London, Goldsmiths, University of London", "teach_by": [{"name": "Dr Matthew Yee-King", "department": "Computing Department, Goldsmiths, University of London"}], "package_num": "3", "package_name": "Responsive Website Development and Design Specialization ", "level": null, "rating": "4.6", "week_data": [{"title": "Introduction to Meteor.js Development course overview", "description": "Welcome to 'Introduction to Meteor.js Development'! In this course, you will learn how to create a complete, multi-user web site using the Meteor.js framework and MongoDB. You will implement user authentication, security features, reactive templates and routing using iron router. You will also carry out key database operations such as inserting, removing and updating data as well as sorting and filtering. Finally, you will see how a complete application can be built, line by line. I hope you enjoy the course!  ", "video": ["Guidance for the prerequisite quiz", "Prerequisite quiz", "Overview", "Course outline", "Grading and assessment information", "Why meteor?"]}, {"title": "Introduction to Meteor ", "description": "Welcome to the first module of 'Introduction to Meteor.js Development'! In this module we'll be installing Meteor tools, editing a template and learning how to define a template helper and template event listeners. I hope you enjoy this module! ", "video": ["Overview", "URL for this module", "Code for this module", "From one to many users", "From one to many users", "URL for this lesson", "Install Meteor", "Install Meteor", "URL for this lesson", "Editing a template", "Editing a template", "Sending data to templates with helpers", "Sending data to templates with helpers", "URL for this lesson", "Convert to a Bootstrap grid", "Convert to a Bootstrap grid", "Responding to user actions", "Responding to user actions", "Introduction to Meteor Summary", "Introduction to Meteor  summary quiz", "Install meteor and edit some templates"]}, {"title": "Databases and collections", "description": "Welcome to the second module of 'Introduction to Meteor.js Development'! In this course we will be creating Mongo Collections and using Mongo find and insert operations. In addition, we will be looking at how to control a Bootstrap modal from Meteor and we will be using third party Meteor packages to add functionality. Enjoy!", "video": ["Overview", "URL for this module", "Code for this module", "Meteor distributed data model", "Meteor distributed data model", "Create a collection of images", "Create a collection of images", "Better start up script, removing items from a collection", "Better start up script, removing items from a collection", "URL for this lesson", "Add an image rating function: Updating and sorting", "Add an image rating function: Updating and sorting", "Implement image adding with a Bootstrap modal (part 1)", "Implement image adding with a Bootstrap modal (part 2)", "Implement image adding with a Bootstrap Modal", "Databases and collections summary", "Databases and collections summary quiz", "Siteace part 1: edit an event and a template"]}, {"title": "User authentication", "description": "Welcome to the third module of 'Introduction to Meteor.js Development!'. In this module we will be looking at adding a user authentication to your Meteor app and learning how to use Mongo filters. Finally, we will be using the Meteor reactive Session variable and we will implement an infinite scroll. Enjoy!", "video": ["Overview", "Code for this module", "User authentication with Meteor.js", "User authentication with Meteor.js", "Tidying up the design with a navbar", "Tidying up the design with a navbar", "URL for this lesson", "Accessing user information", "Accessing user information", "URL for this lesson", "Customising the user registration form", "Customising the user registration form", "Attaching users to images", "Attaching users to images", "URLs for this lesson", "Filtering images by user", "Filtering images by user", "Removing the image filter", "Removing the image filter", "Infinite scroll", "Infinite scroll", "User authentication summary", "User authentication summary quiz", "Siteace part 2: user authentication"]}, {"title": "Security and routing", "description": "Welcome to the final module of 'Introduction to Meteor.js Development!'. In this module we will show you how to perform basic security testing on your app and how to implement basic data security features. In addition, we will look at how to organise Meteor application code and how to implement multiple routes using iron:router. Enjoy!", "video": ["Overview", "Code for this module", "How to organise your code", "How to organise your code", "Hack into your site!", "Hack into your site!", "URL for this lesson", "Make your site more secure", "Make your site more secure", "Tidy up the project", "Tidy up the project", "URL for this lesson", "Routing with iron: router", "Routing with iron:router", "Better routing", "Better routing", "Security and routing summary", "Security and routing summary quiz", "SiteAce - implementing discussions"]}]}, {"title": "Responsive Website Tutorial and Examples", "course_info": "About this course: In this course, we will show you exciting examples of collaborative, interactive web applications that use various types of media including sound, images and big data. \n\nWe will show you how to build sites that provide precisely this functionality, using Meteor. We will also provide fully working example application code that you can use for your own commercial web projects. \n\nThe course also provides a range of advice and suggestions about how to develop bespoke web applications which match the requirements of clients, where clients are people who commission the product or people who use the product.  \n\nWe will take you through the development of the following applications:\n\n1.\tA portfolio website with collaborative blogging functionality.\n2.\tAn interactive, realtime, multi user music remixing system.\n3.\tAn interactive, online graffiti wall where users can collaborate to create graphics.\n4.\tAn interactive data visualisation platform for exploring and plotting big data in exciting ways.\n\nAt the end of this course, you will be able to:\n\n•\tImplement animated data visualisations and graphics using advanced user interface libraries such as vis.js \n•\tWork with external data sources \n•\tCreate multi user, realtime, collaborative environments\n•\tUse media APIs such as the Web Audio API\n\nParticipation in or completion of this online course will not confer academic credit for University of London programmes", "target_audience": null, "created_by": "University of London, Goldsmiths, University of London", "teach_by": [{"name": "Dr Matthew Yee-King", "department": "Computing Department, Goldsmiths, University of London"}, {"name": "Dr Mick Grierson", "department": "Computing Department, Goldsmiths, University of London"}], "package_num": "5", "package_name": "Responsive Website Development and Design Specialization ", "level": null, "rating": "4.2", "week_data": [{"title": "Responsive Website Tutorials and Examples outline: Course overview", "description": "", "video": ["Course outline", "Course overview", "Grading and assessment information", "Prerequisite quiz"]}, {"title": "Creating a Portfolio Website with a Blog", "description": "Welcome to the first module of 'Responsive Website Tutorial and Examples!'. In this session we will be exploring a real-world web development task based on a common brief that web developers have to respond to every day – producing a portfolio website with both static and dynamic content features. I hope you enjoy the module! -Mick", "video": ["Introduction", "Introduction", "Source code", "Slides for this module", "Recap", "Recap", "Getting started: learning outcomes", "Getting started", "Getting started", "Adding a page: learning outcomes", "Adding a page", "Adding a page", "Administrating the blog and making it responsive: learning outcomes", "Administrating the blog and making it responsive", "Administration", "Creating A Portfolio Website with Blog summary", "Creating A Portfolio Website with Blog summary quiz", "Customise the portfolio site"]}, {"title": "Collaborative Apps 1 : Music Machine", "description": "Welcome to the second module of 'Responsive Website Tutorial and Examples!'. Meteor is great at making collaboration simple. You can make collaborative sites in a day or so that work across many devices including mobile. By the end of this session you will understand how to structure and build collaborative, real-time applications, how to integrate the web audio API, and how to specifically set and get variables stored in the database using basic interface elements.", "video": ["Module introduction", "Introduction: Music Machine", "Introduction", "Source code", "Slides for this module", "Project structure: learning outcomes", "Project structure", "Project structure", "Adding sound: learning outcomes", "Adding sound", "Adding sound", "Adding interaction : learning outcomes", "Adding interaction", "Adding interaction", "Making it collaborative: learning outcomes", "URL in lecture video", "Collaboration", "Making it collaborative", "Collaborative Apps 1 : Music Machine 2015 summary", "Collaborative Apps 1 : Music Machine 2015 summary quiz", "Customise the music machine"]}, {"title": "Collaborative Apps 2 : Drawing Machine", "description": "Welcome to the third module of 'Responsive Website Tutorial and Examples!'.Meteor allows us to make creative, collaborative apps that work in real-time. Both the Client and the Server can insert information into a Mongo collection. Ordinary web users can do this interactively, without having to program the database manually. In this session we will look at this approach through the lens of collaborative drawing. You will learn how to create a canvas using d3.js, change attributes of the canvas, create client code for inserting data into the database and how to render database entries as a drawing. ", "video": ["Module introduction", "Drawing machine", "Drawing machine introduction", "Source code", "Slides for this module", "Drawing machine example: learning outcomes", "Drawing machine: worked example", "Drawing machine- worked example", "Creating the application: learning outcomes", "Creating the application", "Creating the application", "Creating and serving data: learning outcomes", "Creating and serving data", "Creating and serving data", "Review: learning outcomes", "Review", "Review", "Collaborative Apps 2 : Drawing Machine summary", "Collaborative Apps 2 : Drawing Machine summary quiz", "Customise the drawing machine"]}, {"title": "Creating a Data Visualisation Application", "description": "Welcome to the final module of 'Responsive Website Tutorial and Examples!'.In this session we will be looking at how to use data from external sources to create interactive  visualisations for the purposes of creating an interactive data visualisation web app.", "video": ["Recap of previous modules", "Module introduction", "Introduction", "Source code", "Slides for this module", "Setting up the interface: learning outcomes", "Setting up the interface", "Setting up the interface", "Getting data: learning outcomes", "Getting data", "Getting data", "Rendering data on the page: learning outcomes", "Rendering data on the page", "Rendering data on the page", "Review: learning outcomes", "Review", "Review", "Creating a Data Visualisation Application summary", "Creating a Data Visualisation Application summary quiz", "Customise the data visualisation"]}]}, {"title": "iOS App Development Basics", "course_info": "About this course: iOS App Development Basics, the second course in the iOS App Development with Swift specialization, expands your programming skills and applies them to authentic app development projects. The topics covered in this course include Xcode basics, Core iOS and Cocoa Touch frameworks, simple user interface creation, MVC Architecture and much more.  With a focus on using Apple’s components to access sensors like camera, microphone and GPS, by the end of this course you will be able to create a basic App according to specified parameters and guidelines.\n\nCurrently this course is taught using Swift 2. The team is aware of the release of Swift 3 and will be making edits to the course in time. Please be aware that at this time the instruction is entirely with Swift 2.", "target_audience": null, "created_by": "University of Toronto", "teach_by": [{"name": "Parham Aarabi", "department": "Department of Electrical and Computer Engineering"}], "package_num": "2", "package_name": "iOS App Development with Swift Specialization ", "level": null, "rating": "4.2", "week_data": [{"title": "Welcome to iOS App Development Basics", "description": "", "video": ["Welcome to iOS App Development Basics", "Introducing Mixit", "Mixit App"]}, {"title": "Further Introduction to XCode", "description": "In this unit we will describe basic functions of XCode and other tools.  Within a guided tutorial process, create a simple app from beginning through to compilation that runs on a device.", "video": ["Course 2 Introduction", "RGBAImage Class for Moving Forward", "Running Code in an App", "Creating Interfaces", "Using Buttons", "Further XCode Unit Quiz (For Grades)"]}, {"title": "UIKit and the Interface Builder", "description": "Here we dive into layouts and some user interface elements.", "video": ["Intro to Auto Layout", "Beginning Auto Layout", "In-Depth Auto Layout", "Intro to UI Elements", "Basic UI Elements", "Intro to UIStackView", "UIStackView", "UIKit Unit Quiz (For Grades)"]}, {"title": "Advanced UI Concepts", "description": "Here we begin to really add elegance to our UI", "video": ["Modifying the View Hiearchy in Code", "Basic Animations", "Tableviews and The Delegate Pattern", "Intro to Camera and Emailing", "Action Sheet, Image Picker and Activity Controller", "Advanced UI Unit Quiz (For Grades)"]}, {"title": "Final Peer Assignment - App Functionality", "description": "At this point we have written the basic user interface for our image filtering app.  In this assignment you will implement remaining functionality, and then extend and refine the UI. For bonus marks you can try implementing a more advanced filter selection UI using the UICollectionView API.", "video": ["Read First: Full Instructions", "Starter Code Download for Peer Assessment", "Course 2 Closing Remarks", "App Functionality"]}]}, {"title": "Rails with Active Record and Action Pack", "course_info": "About this course: You already know how to build a basic web application with the Ruby on Rails framework. Perhaps, you have even taken Course 1, \"Ruby on Rails: An Introduction\" (we highly recommend it) where you relied on external web services to be your “data layer”. But in the back of your mind, you always knew that there would come a time when you would need to roll up your sleeves and learn SQL to be able to interact with your own relational database (RDBMS). But there is an easier way to get started with SQL using the Active Record Object/Relational (ORM) framework. In this course, we will be able to use the Ruby language and the Active Record ORM framework to automate interactions with the database to quickly build the application we want.\n \nIn Rails with Active Record and Action Pack, we will explore how to interact with relational databases by using Active Record, a Ruby gem, which Rails uses by default for database access. We will then take a look at what role Active Record plays in the overall request-response cycle, when a client (the browser) requests data from the server, as well as how to submit the data to the server.  Of course, when accessing data, security is of paramount importance! We will talk about vulnerabilities such as SQL injection, as well as how to secure access to data by authenticating and authorizing users accessing the data. Take this course to build a Ruby on Rails application with Active Record to automate the detailed SQL interactions with our database.", "target_audience": null, "created_by": "Johns Hopkins University", "teach_by": [{"name": "Kalman Hazins", "department": "Whiting School of Engineering"}], "package_num": "2", "package_name": "Ruby on Rails Web Development Specialization ", "level": null, "rating": "4.7", "week_data": [{"title": "Introduction to Active Record", "description": "In this module, we will begin exploring the database-interaction portion of Rails. We will start off with migrations that enable you to create and modify the schema of the database. We will then move on to discussing the Active Record gem Rails uses, which enables you to create, retrieve, update, and delete the data from the database. Before looking at Active Record, we will talk about some advanced Ruby features of meta-programming that will help facilitate our Active Record journey.", "video": ["Course Introduction", "Grading", "Welcome to Module 1: Introduction to Active Record", "Github Repository for Module 1", "Recommended Books", "Scaffolding", "Database Setup and SQLite", "Introduction to Migrations", "Creating and Modifying Tables and Columns", "Scaffold and Migrations", "Dynamic Dispatch", "Dynamic Methods", "Ghost Methods", "Introduction to Active Record", "Active Record CRUD: Part 1", "Active Record CRUD: Part 2", "Active Record Queries", "Basic Active Record CRUD"]}, {"title": "Deep Dive into Active Record", "description": "In this module, we will continue exploring Active Record and look at ways to code advanced queries without exposing ourselves to risk from SQL injection (as well as what SQL injection actually is). We will then look at expressing relationships between entities in Active Record and validating the data being saved to the database.", "video": ["Welcome to Module 2: Deep Dive into Active Record", "GitHub Repository for Module 2", "Recommended Books", "Seeding the Database", "SQL Fragments and Dangers of SQL Injection", "Array and Hash Condition Syntax", "Advanced Querying", "One-to-One Association", "One-to-Many Association", "Many-to-Many Association", "Rich Many-to-Many Association", "Relationships", "Active Record Scopes", "Validations", "N+1 Queries Issue and DB Transactions", "Active Record Relationships"]}, {"title": "Introduction to Action Pack", "description": "In this module, we will introduce Rails' Action Pack, which is a combination of Action Controller and Action View. We will see how REST has influenced routing in a Rails application and also talk about partials, form helpers, and layouts.", "video": ["Welcome to Module 3: Introduction to Action Pack", "GitHub Repository for Module 3", "Recommended Books", "Introduction to Action Pack", "REST and Rails", "Action Pack", "Restful Actions: Index", "Restful Actions: Show and Destroy", "Restful Actions: New and Create", "Strong Parameters and Flash", "Restful Actions: Edit and Update", "Restful Actions", "Partials", "Form Helpers and Layouts", "ActionPack"]}, {"title": "Security and Nested Resources in Action Pack", "description": "In this module, we will talk about how to deal with nested resources in Rails. We will then talk about securing your app with a username and password combination for authentication purposes and making sure that users are only authorized to make changes to and view their own resources. We will finish off the module by discussing pagination and deploying to Heroku Paas (Platform as a Service).", "video": ["Welcome to Module 4: Security and Nested Resources in Action Pack", "GitHub Repository for Module 4", "Recommended Books", "Building an App with Multiple Resources", "Nested Resources: Part 1", "Nested Resources: Part 2", "Nested Resources", "Authentication", "HTTP Sessions and Cookies", "Sessions Controller and View", "Authorization", "Authentication", "Pagination", "Deploying to Heroku and Enabling SSL", "Nested Resources, Security, and Pagination"]}]}, {"title": "Foundations of Objective-C App Development", "course_info": "About this course: An introduction to the Objective-C programming language.  This will prepare you for more extensive iOS app development and build a foundation for advanced iOS development topics.\n\nObjective-C programming requires a Mac laptop or desktop computer.  An iOS device is optional if the learner is willing to working exclusively with the simulator.  Some learners have been able to work with an OS X virtual machine on Windows, but explaining how to do that is beyond the scope of this course.\n\nUpon completing this course, you will be able to:\n1.       Read and write Objective-C\n2.       Have a strong grasp of Objective-C objects\n3.       Organize their code professionally using objects and blocks\n4.       Prototype several entry-level apps", "target_audience": null, "created_by": "University of California, Irvine", "teach_by": [{"name": "Don Patterson", "department": "Informatics and Computer Science"}, {"name": "Sam Kaufman", "department": null}], "package_num": "1", "package_name": "iOS Development for Creative Entrepreneurs Specialization ", "level": null, "rating": "4.7", "week_data": [{"title": "Get Ready. Get Set. Go!", "description": "Welcome to Week 1!  This week we will be discussing a variety of topics including the tools that we will be using, a basic orientation to the programming environment and the very basic programming syntax that Objective-C inherits from the C language.", "video": ["Welcome! (Video)", "Course Syllabus", "Getting Help", "Pre-Course Survey", "Tools (Video)", "Your First App (Video)", "Xcode Tour (Video)", "What programming does (Video)", "Peer Review 01 (Video)", "Peer Review Assignment # 1 – Make Your First iOS App", "Variables and Types (Video)", "Conditionals (Video)", "Command-line project (Video)", "Loops (Video)", "Assignment #1 - Make Your First iOS App", "Week 1 Quiz"]}, {"title": "Functions, Scopes and Encapsulation - oh my!", "description": "Welcome to Week 2!  This week we will be learning about how functions are defined in C and then how methods are defined in Objective-C.  We will look at the more complex rules surrounding scoping and encapsulation of variables and functions.  We'll end the week learning about Objective-C objects and memory.", "video": ["Functions 1 (Video)", "Functions 2 (Video)", "Scope (Video)", "Frames and Recursion (Video)", "Structs (Video)", "Peer Review 02 (Video)", "Peer Review Assignment # 2 – Unit Conversion App", "Peer Review Assignment #2 - Unit Conversion App"]}, {"title": "Object Lesson", "description": "Welcome to Week 3!  At the end of this week you will be able to use Objective-C objections by defining them, instantiating them and passing messages to them.  We will also introduce you to some of the objects that are build into the language.", "video": ["Objects (Video)", "Pointers (Video)", "Heap Memory (Video)", "Message Passing (Video)", "Properties (Video)", "Peer Review 03 (Video)", "Peer Review Assignment # 3 – Currency Conversion App", "Peer Review Assignment #3 - Currency Conversion App"]}, {"title": "System Libraries to the Rescue", "description": "Welcome to Week 4!  This week we will be learning about built-in features that help to manage data structures and memory", "video": ["Format Strings (Video)", "NSString (Video)", "Using NSString (Video)", "NSArray (Video)", "NSSet (Video)", "NS Dictionary (Video)", "Mutables (Video)", "ARC (Video)", "Callbacks and Blocks (Video)", "Inheritance (Video)", "Peer Review 04 (Video)", "Peer Review Assignment # 4 – Distance Calculation App", "Peer Review Assignment #4 - Distance Calculation App"]}]}, {"title": "CODAPPS: Coding mobile apps for entrepreneurs", "course_info": "About this course: This course will teach you how to create mobile apps for Android, iOS and Windows Phone. No prerequisite in coding knowledge is required.\n\nIn progressive steps, we will first learn how to create a simple and useful app: your own curriculum vitae.\nWe will discover how to test the app on phones, and how to distribute it on the Play Store, Apple's App Store and the Windows Store.\n\nLater in the course, we will also cover the basics of coding, because it will enable us to create richer apps with more functions: storing text and data on the phone, connecting to the Internet, and other useful features.\n\nThis course is created to make you able to create your own apps, fully functional and for all major mobile platforms. This is useful if you have a business project which involves launching an app, or to get acquainted with mobile technologies in an easy and hands-on manner.", "target_audience": null, "created_by": "emlyon business school", "teach_by": [{"name": "Clement Levallois", "department": "Markets and Innovation"}], "package_num": null, "package_name": null, "level": null, "rating": "4.2", "week_data": [{"title": "1. Installation of useful tools for the course", "description": "Welcome to CODAPPS! Let's install some tools, then create our 1st project and preview our app.", "video": ["Video - Welcome!", "A one minute video: let's create apps with CODAPPS!", "summary of the lesson in pdf", "Video - How to install NetBeans and the Codename One plugin on a MAC", "Video - How to install NetBeans and the Codename One plugin on a PC", "summary of the lesson in pdf", "Video - How to create a new project in NetBeans and preview your app", "Show your first app!", "How to update the Codename One plugin"]}, {"title": "2. How to add text, pics, links and extra screens to your app", "description": "We will learn the essential steps of creating an app: how to put stuff on a screen!", "video": ["summary of the lesson in pdf", "Video: How to create the first screen of your app - start here!!", "summary of the lesson in pdf", "Video - How to add text", "summary of the lesson in pdf", "Video - How to add links to web pages", "summary of the lesson in pdf", "Video - How to add more screens to the app and navigate between them", "summary of the lesson in pdf", "Video - How to add a pic to the screen of the app", "Graded quiz", "Graded quiz", "Graded quiz"]}, {"title": "3. Designing your app", "description": "Here we learn how to control and change the appearance of our app to design exactly what we want", "video": ["Careful! New way to use layout!", "summary of the lesson in pdf", "Video - How to arrange things where we want on a screen: layouts", "summary of the lesson in pdf", "Video - How to style any component (Labels, Buttons, etc.)", "Graded quiz", "Graded quiz"]}, {"title": "4. Testing your app on a phone / distributing it on a store", "description": "It gets real: in this module, we learn how to install your app on your phone, and how to put it on the app stores of Apple, Google (Android) and Windows. Your app is about to become available to billions of users!", "video": ["Advice to make your app smaller", "summary of the lesson in pdf", "Video - Installing your app on your own Android phone", "Video - Installing your app on your own Windows phone (needs a PC!)", "How to install your app on an iPhone", "Summary in pdf for publishing an app for Android", "Video - How to distribute your app on Google's Play Store", "Video - How to distribute your app on Apple's App Store (you need a Mac!)", "Video - How to distribute your app on Windows Store (you need a PC!)", "How to publish the updated version of an app", "Graded quiz"]}, {"title": "5. Initiation to coding to create an amazing app", "description": "In this module you will learn the basics of coding in 3 short videos and their pdfs", "video": ["summary of the lesson in pdf", "Video - coding for beginners, part 1", "summary of the lesson in pdf", "Video - coding for beginners, part 2", "summary of the lesson in pdf", "Video - coding for beginners, part 3", "Bill and Mark explain \"if\" and \"loops\" just for you", "summary of the lesson in pdf", "Video - coding like a boss and secret tricks", "Graded quiz", "Graded quiz", "Graded quiz", "Graded quiz"]}, {"title": "6. Creating successfull apps: ROAR like a LION", "description": "Roar is a messaging app, like Twitter or Facebook messenger. It sends and receives \"roars\".\n\nIn this module, we will build the first part of this mobile app: we design the 3 screens, and write the code to send roars to the Internet.", "video": ["summary of the lesson in pdf", "Video - JSON: a useful way to format text", "Video: creating the screens of the ROOOAR app", "each line of code commented and explained", "Video How to send a ROAR from the app to the Internet", "check the code of the lesson on Github", "Graded quiz", "Graded quiz"]}, {"title": "7. Creating successful apps: receive ROARS and add useful functions to your app", "description": "Here we learn how receive information from the Internet and use it in our app, and how to add a couple of functions to make our app more powerful", "video": ["Before all: we need to enable JSON objects in our app", "each line of code commented and explained", "Video - receiving ROARS from the Internet and showing them in the app", "check the code of the lesson on Github", "Video - How to add Google Analytics to your app", "How to make an app multi languages?"]}, {"title": "8. Wrap up and next steps", "description": "This is the final module of the course, we leave you with good pieces of advice to continue advancing your projects", "video": ["Video - introduction to module 8", "Video - Sources of information", "For French speakers", "slide of the lesson", "slide of the lesson", "Video - A panorama of technos for mobile app development", "What programming language did we use in CODAPPS? + important precisions on the vocabulary.", "Video - Resources to conduct a project in mobile app development", "slide of the lesson"]}]}, {"title": "Getting Started With Application Development", "course_info": "About this course: In this course, application developers learn how to design, develop, and deploy applications that seamlessly integrate components from the Google Cloud ecosystem. Through a combination of presentations, demos, and hands-on labs, participants learn how to use GCP services and pre-trained machine learning APIs to build secure, scalable, and intelligent cloud-native applications\n\nCourse objectives\n\nThis course teaches participants the following skills:\nUse best practices for application development.\nChoose the appropriate data storage option for application data.\nImplement federated identity management.\nDevelop loosely coupled application components or microservices.\nIntegrate application components and data sources.\nDebug, trace, and monitor applications.\nPerform repeatable deployments with containers and deployment services.\nChoose the appropriate application runtime environment; use Google Container Engine as a runtime environment and later switch to a no-ops solution with Google App Engine flexible environment.", "target_audience": "Who is this class for: This course is primarily aimed at application developers who want to build cloud-native applications or redesign existing applications that will run on Google Cloud Platform.", "created_by": "Google Cloud", "teach_by": [{"name": "Google Cloud Training", "department": null}], "package_num": "2", "package_name": "Developing Applications with Google Cloud Platform Specialization ", "level": "Intermediate", "rating": "4.5", "week_data": [{"title": "Introduction to Getting Started With Application Development", "description": "", "video": ["Welcome to the Specialization", "Course Information", "Topics covered in the course"]}, {"title": "Best Practices for Application Development", "description": "", "video": ["Loosely Coupled Microservices and API Gateways", "Security, Reliability, and Migration", "Best Practices for Application Development Quiz"]}, {"title": "Google Cloud Client Libraries, Google Cloud SDK, and Google Firebase SDK", "description": "", "video": ["Google Cloud SDK, Google Cloud Client Libraries, & Firebase SDK", "Demo: API Explorer Walkthrough", "Lab Overview", "Qwiklabs – Setting Up a Development Environment", "Module Review", "Google Cloud Client Libraries, Google Cloud SDK, and Google Firebase SDK Quiz"]}, {"title": "Data Storage Options", "description": "", "video": ["Cloud Storage, Cloud Datastore, Cloud Bigtable, Cloud SQL, and Cloud Spanner", "BigQuery, Microsoft SQL Server images on GCP, and Firebase Storage Options", "Demo: Connecting Securely to a Cloud SQL Database", "Module Review", "Data Storage Options Quiz"]}, {"title": "Best Practices for Using Cloud Datastore", "description": "", "video": ["Cloud Datastore Concepts and Indexes", "Demo: Explore Cloud Datastore", "Design Considerations & Sharding", "Replication, Query Types, Transactions, and Handling Errors", "Demo: Use Cloud Dataflow to bulk-load data into Cloud Datastore", "Lab Overview", "Qwiklabs – Storing Application Data in Cloud Datastore", "Module Review", "Using Cloud Datastore Quiz"]}, {"title": "Best Practices for Using Cloud Storage", "description": "", "video": ["Cloud Storage Concepts & Classes", "Demo: Explore Cloud Storage", "Bucket / Object Operations and Truncated Exponential Backoff", "Demo: Enable CORS configuration in Cloud Storage", "Best Practices for Cloud Storage", "Lab Overview", "Qwiklabs – Storing Image and Video Files in Cloud Storage", "Module Review", "Using Cloud Storage Quiz"]}, {"title": "Wrap Up", "description": "", "video": ["Course Conclusion"]}]}, {"title": "App Design and Development for iOS", "course_info": "About this course: In App Design and Development for iOS, the third course of the iOS App Development with Swift specialization, you will be developing foundational programming skills to support graphical element presentation and data manipulation from basic functions through to advanced processing. You will continue to build your skill set to use and apply core graphics, touch handling and gestures, animations and transitions, alerts and actions as well as advanced algorithms, threading and more. By the end of this course you will be able to develop a more advanced, fully functioning app.\n\nCurrently this course is taught using Swift 2. The team is aware of the release of Swift 3 and will be making edits to the course in time. Please be aware that at this time the instruction is entirely with Swift 2.", "target_audience": null, "created_by": "University of Toronto", "teach_by": [{"name": "Parham Aarabi", "department": "Department of Electrical and Computer Engineering"}], "package_num": "3", "package_name": "iOS App Development with Swift Specialization ", "level": null, "rating": "4.1", "week_data": [{"title": "Welcome to App Design and Development for iOS", "description": "Get oriented to the course.", "video": ["Welcome to the Course", "Demo Project File"]}, {"title": "User Interactivity", "description": "In this module you'll learn how to design for your users' interactions", "video": ["ScrollViews", "Gesture Recognizers", "Handling Touches", "Follow Up Reading", "User Interactivity Quiz (For Grades)"]}, {"title": "Multiple View Controllers & Navigation", "description": "In this module we explore different controllers for navigating your app", "video": ["Segues", "Navigation Controllers", "Tab Bar Controllers", "Follow Up Reading", "Multiple View Controllers & Navigation Quiz (For Grades)"]}, {"title": "Persistence & Networking", "description": "Learn how to customize behavior to match a user’s preferences.", "video": [".zip file to be used in the module", "Module Introduction", "NSUserDefaults", "NSURLSession", "NSKeyedArchiver", "CoreData", "Follow Up Reading", "Persistence & Networking Quiz (For Grades)"]}, {"title": "Introduction to developing for watchOS 2", "description": "In this module we give you some of the tools for designing for watchOS 2", "video": ["Setting up a watch target", "Basic concepts & architecture", "Creating UI for the watch", "Navigation on the watch", "Follow Up Reading", "Introduction to developing for watchOS 2 Quiz (For Grades)"]}, {"title": "Introduction to Developing for tvOS", "description": "In this module you will gain insight into developing for tvOS", "video": ["Module Introduction", ".zip file to be used in the module", "Creating a tvOS Project", "Basic Concepts", "Creating a UI for tvOS", "Understanding the Focus Engine", "Follow Up Reading", "Introduction to Developing for tvOS Quiz (For Grades)"]}, {"title": "Peer Assessment", "description": "Final Assessment for the Course", "video": ["Functional App"]}]}, {"title": "Best Practices for iOS User Interface Design", "course_info": "About this course: You will learn to develop sophisticated user interfaces for iOS, with a focus on user interface design best practices, UI animations, and responsive design. You will learn about the key UI widgets, mapping interfaces and view restoration.", "target_audience": null, "created_by": "University of California, Irvine", "teach_by": [{"name": "Don Patterson", "department": "Informatics and Computer Science"}, {"name": "Sam Kaufman", "department": null}], "package_num": "3", "package_name": "iOS Development for Creative Entrepreneurs Specialization ", "level": null, "rating": "4.6", "week_data": [{"title": "Getting to know iOS Design Concepts", "description": "Welcome to Best Practices for iOS User Interface Design!  This week, we will take a deep dive into getting to know iOS design concepts.  We will cover iOS, HCI, and HIG plus complete a peer review assignment called Layout with Dynamic Constraints that, as the name suggests, uses the auto-layout engine to make dynamic user interfaces.", "video": ["Pre-Course Survey", "Course Overview", "Welcome!", "Intro to iOS Design", "iOS Design Concepts", "iOS UI Composition", "Device Adaptivity", "Device Adaptivity Demo", "Launch Screen Demo", "Case Study: Constraint Layouts Part 1", "Case Study: Constraint Layouts Part 2", "Week 1 Peer Review Directions", "Layout with Dynamic Constraints"]}, {"title": "The Design Solutions that come with iOS", "description": "In week 2, we will discuss the design solutions that come with iOS.  We will cover HIG and HCI principles plus learn how to achieve the design.  We will wrap up this week with a quiz to test your knowledge on what you have learned this week.", "video": ["Starting and Stopping", "Navigation Styles", "Gestures and Touch", "Leveraging iOS", "Some HCI Principles", "Bars", "Controls", "Temporary Views", "Week 2 Quiz"]}, {"title": "View Controllers and Map Interfaces", "description": "This week, we will look at view controllers and map interfaces.  We will cover user interface construction plus complete a peer review assignment called The Basic Map View.  Who doesn't want to be able to put locations on a map!", "video": ["UIScrollView", "Navigation View Controller", "Working with the Keyboard", "Intro to MapView", "MapView Case Study: Part 1", "MapView Case Study: Part 2", "MapView Case Study: Part 3", "Week 3 Peer Review Directions", "Basic Map Interface"]}, {"title": "Table Views, Core Data and User Interface Integration", "description": "In week 4, we will look at table views, core data, and user interface integration.  We will cover table views, table views plus core data, and you will finally learn how to put it all together.  We will end the course with a peer review assignment called To Do Manager.", "video": ["UITableView: Part 1", "UITableView: Part 2", "UITableView: Part 3", "UITableView: Part 4", "UITableView: Part 5", "UITableView with CoreData: Part 1", "UITableView with CoreData: Part 2", "UITableView with CoreData: Part 3", "UITableView with CoreData: Part 4", "Case Study: To Do List Part 1", "Case Study: To Do List Part 2", "Case Study: To Do List Part 3", "Case Study: To Do List Part 4", "Case Study: To Do List Part 5", "Case Study: To Do List Part 6", "Case Study: To Do List Part 7", "Week 4 Peer Review Directions", "To Do List Manager"]}]}, {"title": "Toward the Future of iOS Development with Swift", "course_info": "About this course: An introduction to the Swift programming language.  This will prepare you for more extensive iOS app development and build a foundation for advanced iOS development topics.\n\nUpon completing this course, you will be able to:\n1.       Associate the relationship of Swift and Objective-C and their use in iOS and Mac (OS X) programming\n2.       Develop the ability to read and write Swift code\n3.       Distinguish how both programming languages can be used together in applications\n4.       Demonstrate how to write applications entirely in Swift with the help from several iOS programming samples\n5.       Determine how Swift can be used for development on new platforms such as Apple Watch and Apple TV\n6.       Create a working client-server iPhone application with location services that you can add to your portfolio.", "target_audience": null, "created_by": "University of California, Irvine", "teach_by": [{"name": "Justin-Nicholas Toyama ", "department": "Lead iOS Developer at Smilefish Corporation"}, {"name": "Frank Ayars ", "department": "CTO and Director of Software Development at Smilefish Corporation"}, {"name": "Ralf Brockhaus ", "department": "Founder and CEO at Smilefish Corporation"}], "package_num": "5", "package_name": "iOS Development for Creative Entrepreneurs Specialization ", "level": null, "rating": "3.8", "week_data": [{"title": "Introduction to Swift", "description": "In this first week, you will get a first look at the programming environment and the Swift programming language. If you have taken the “Foundations of Objective-C App Development” Course in this Specialization, some of this content may be familiar. Students who have not taken that course - no need to worry - you will receive a full introduction to become familiar with programming for iOS or Mac OS X as if Swift is your first programming language.", "video": ["Course Overview", "Welcome!", "Introduction to Swift", "Getting Started with XCode", "Swift Basics Part 1: Types, Constants, Variables", "Swift Basics Part 2: Control Flow - Part 1", "Swift Basics Part 3: Control Flow - Part 2", "Swift Basics Part 4: Numbers", "Swift Basics Part 5: Loops", "Swift Basics Part 6: Strings", "How to Create an Array", "Using Arrays /Modifying Values of Arrays", "Comparing Arrays", "How to Create a Dictionary", "Using and Modifying Dictionaries Part 1", "Using and Modifying Dictionaries Part 2", "Properties of Dictionaries", "Using and Modifying Sets Part 1", "Using and Modifying Sets Part 2", "Using and Modifying Sets Part 3", "How to Create a Basic Function", "Function with Parameters Part 1", "Function with Parameters Part 2", "Function with Parameters Part 3", "Functions that Return a Value(s) Part 1", "Functions that Return a Value(s) Part 2", "Scope / Improper Conditions", "A Word on Function Types", "Using Closures", "More Closure Syntax", "Properties of Closures", "Week 1 Quiz"]}, {"title": "Looking Further into Swift", "description": "The content for this week will build on the knowledge and examples from the previous week. You will start combining the basic programming skills studied in the previous week to start manipulating data in functions and learn how functions can be used in different Types (i.e. enums, structs, classes). This will prepare you for working in a full application setting, which will be the focus of Week 4. You will learn about some of the more advanced Swift programming language features that are often useful in bringing together a complete system like a full-blown iPhone application.", "video": ["How to Create Basic Enumerations", "How to Create Raw-Value Enumerations", "Using Enumerations Part 1", "Using Enumerations Part 2", "Using Enumerations Part 3", "Enumerations Methods and Limitations", "How to Create Structures", "Structures Methods and Limitations", "Creating Classes in Source Files", "Working with Classes Part 1", "Working with Classes Part 2", "Creating Properties Part 1", "Creating Properties Part 2", "Working with Properties Part 1", "Working with Properties Part 2", "Access Control", "Default Initializers Part 1", "Default Initializers Part 2", "Default Initializers Part 3", "Creating and Working With Initializers Part 1", "Creating and Working With Initializers Part 2", "Playing with Swift (Playground Assignment) Instructions", "Playing with Swift (Playground Assignment)"]}, {"title": "From Programmer to Developer", "description": "This week, you will take steps into really developing their first, simple iPhone project with Swift. This will introduce some topics not limited to Swift itself, but also really start looking into bigger topics for iOS application development to prepare you to write a more complex application in Week 4.", "video": ["Note", "Protocols Part 1", "Protocols Part 2", "Protocols Part 3", "Error Handling Part 1", "Error Handling Part 2", "Extensions", "Generics Part 1", "Generics Part 2", "Memory Management and Arc Part 1", "Memory Management and Arc Part 2", "Equatable and Comparable", "Interoperability Part 1", "Interoperability Part 2", "Interoperability Part 3", "Cocoa Application Speaking Text Editor Sample", "Writing Speaking Text Editor Part 1", "Writing Speaking Text Editor Part 2", "Writing Speaking Text Editor Part 3", "Event Driven Applications with Swift and XCode Part 1", "Event Driven Applications with Swift and XCode Part 2", "Event Driven Applications with Swift and XCode Part 3", "Writing an iOS Application (Cocoa Touch Applications) Part 1", "Writing an iOS Application (Cocoa Touch Applications) Part 2", "Writing an iOS Application (Cocoa Touch Applications) Part 3", "Writing an iOS Application (Cocoa Touch Applications) Part 4", "Writing an iOS Application (Shopping List Sample)", "Week 3 Quiz"]}, {"title": "iPhone Applications and More", "description": "In this last week of the course, you will follow along and create a more full-fledged application called HoBshare. This is a more complex application that is intended to help you use many of the different techniques and language features introduced in the previous weeks and see how they can be used as tools to develop an application. We will also explore some of the new and exciting consumer technologies that developers can now work with using Swift.", "video": ["Starter Kit for Week 4", "Note", "HoBshare Overview Part 1", "HoBshare Overview Part 2", "HoBshare Overview Part 3", "HoBshare Overview Part 4", "HoBshare pt II UI and Class Setup Part 1", "HoBshare pt II UI and Class Setup Part 2", "HoBshare pt II UI and Class Setup Part 3", "HoBshare pt II UI and Class Setup Part 4", "HoBshare pt II UI and Class Setup Part 5", "HoBshare pt II UI and Class Setup Part 6", "HoBshare pt II UI and Class Setup Part 7", "HoBshare pt II UI and Class Setup Part 8", "MeViewController and SuperClass Part 1", "MeViewController and SuperClass Part 2", "MeViewController and SuperClass Part 3", "MeViewController and SuperClass Part 4", "MeViewController and SuperClass Part 5", "MeViewController and SuperClass Part 6", "MeViewController and SuperClass Part 7", "MeViewController and SuperClass Part 8", "MeViewController and SuperClass Part 9", "MeViewController and SuperClass Part 10", "Models and Data Providers Part 1", "Models and Data Providers Part 2", "Models and Data Providers Part 3", "Models and Data Providers Part 4", "Models and Data Providers Part 5", "Models and Data Providers Part 6", "Models and Data Providers Part 7", "EditHobbiesViewController Part 1", "EditHobbiesViewController Part 2", "EditHobbiesViewController Part 3", "EditHobbiesViewController Part 4", "EditHobbiesViewController Part 5", "NeighborsViewController Part 1", "NeighborsViewController Part 2", "NeighborsViewController Part 3", "NeighborsViewController Part 4", "NeighborsViewController Part 5", "NeighborsViewController Part 6", "Fun Stuff: iWatch Installing HoBshare", "Fun Stuff: iWatch Configuring HoBshare", "Fun Stuff: iWatch Sending Hobbies from the iPhone", "Fun Stuff. iWatch. Make A Call", "hoBshare Enhancements Assignment Instructions", "hoBshare Enhancements Assignment"]}]}, {"title": "Networking and Security in iOS Applications", "course_info": "About this course: You will learn to extend your knowledge of making iOS apps so that they can securely interact with web services and receive push notifications. You'll learn how to store data securely on a device using Core Data.  You’ll also learn to securely deploy apps to the App Store and beta users over-the-air.\n\nThe format of the course is through a series of code tutorials.  We will walk you through the creation of several apps that you can keep as a personal app toolbox.  When you make your own apps after this course, you can bring in these capabilities as needed.  When necessary we pop out of the code tutorials to talk about concepts at a higher level so that what you are programming makes sense.\n\nUpon completing this course, you will be able to:\n1.       Post Facebook, Twitter, Sina Weibo, Tencent Weibo messages to social media using single sign-on on behalf of a user.\n2.       Use OAuth 2.0 to securely authenticate to Instagram and retrieve photos on behalf of a user\n3.       JSON\n4.       Describe JSON’s syntax\n5.       Write well-formed JSON\n6.       Work with JSON data objects in Objective-C\n7.       Appropriately set the security settings for App Transport Security in iOS 9.0\n8.       Use http, https and https with perfect forward secrecy to fetch web resources\n9.       Obtain permissions to receive local push notifications\n11.       Write an app that can send and receive local push notifications\n12.       Obtain permissions to receive remote push notifications\n13.       Write an app that can receive remote push notifications\n14.       Authenticate using Apple’s cryptographic services such that the developer can use 3rd party infrastructure to send remote push notifications to their app.\n15.       Securely store data on the user’s device.\n16.       Authenticate using Apple’s cryptographic services such that they can deploy an app to the app store", "target_audience": null, "created_by": "University of California, Irvine", "teach_by": [{"name": "Don Patterson", "department": "Informatics and Computer Science"}, {"name": "Sam Kaufman", "department": null}], "package_num": "2", "package_name": "iOS Development for Creative Entrepreneurs Specialization ", "level": null, "rating": "4.6", "week_data": [{"title": "Welcome!", "description": "Welcome to this course on Networking and Security in iOS Applications.  Our focus in this course is very practitioner oriented.  We want to get you up and running using social networking integration with single sign-on, basic OAuth2 functionality, secure JSON web APIs, cryptographically secured push notifications, and secure data storage so that you can get apps into the iTunes ecosystem and out into the marketplace.  This course will have several code sessions in which we walk you through the process of building apps, some of which you will also build for peer review assignments.  Interspersed with the tutorials we will take time-outs to cover the basics of some concepts that might be mysterious without a more formal treatment.   Our hope is that you come out of this course knowing more (of course!) and having several projects that you can refer to in the future when you want to incorporate these techniques into your apps - your personal app toolbox.  The intensity picks up from the previous course in this Specialization, so get ready!", "video": ["Course Overview", "Welcome!", "Pre-Course Survey", "Getting Help", "Twitter App Orientation", "Twitter App: Setting up the User Interface", "Twitter App: Connecting the U/I", "Twitter App: Styling the U/I via \".layer\"", "Twitter App: Social.Framework and building a UIAlertController", "Twitter App: Closing a window with UIAlertAction", "Twitter App: Checking for \"Single Sign On\"", "A general pattern for pop-up alerts", "Twitter App: Tweet with SLComposeViewController", "Twitter App: Reviewing what we accomplished", "Facebook Orientation", "Facebook: Adding an additional UIAlertAction", "Facebook: Using SLComposeViewController to Post", "Future proofing", "Future Proofing with the UIActivityViewController", "Simplifying the Interface - Less Clicks!", "Peer-Review 01: Your turn!", "Social Networking App"]}, {"title": "Using Secure Web APIs: an Instagram Case Study", "description": "Now it's time to consider what we are going to do if we want to work with web services that aren't deeply integrated into iOS.  There are hundreds (thousands?!?!) of them.   Most of them require authentication via the OAuth 2.0 protocol.  In this week's lessons we will walk through an example of getting a photo from Instagram on behalf of a user.   This week is also a code tutorial in preparation for your peer review assignment, but in the middle we need to step back from coding to cover some basics:  How do we use a UIImageView?  What is OAuth 2.0 anyway?  What is JSON and how do we read it? What's the big deal about http vs https anyway?", "video": ["Overview of Instagram App", "Building the project with Cocoapods", "Intro to UIImageView", "Laying out the Interface", "OAuth 2.0", "Accessing a web service API", "JSON", "Custom URL Schemes", "NSAppTransport in iOS 9", "Network Security Considerations", "Getting data with NSURLSession", "Calling and Parsing API JSON data", "Two Updates on the Instagram API", "02 Instagram Network API App"]}, {"title": "Don't be so pushy!", "description": "In this week we will look at several aspects of push notifications.   Those are those alerts that show up at the top of your iOS interface when an app wants to get your attention.   There are several ways that they can be initiated.  They can be initiated from an app on a local device, or they can be initiated by a remote server somewhere on the internet.  Obtaining permission to post those notifications requires lots of steps, certificates, passwords etc.   We'll walk you through it all.   This week we start with a high-level overview of the iOS app lifecycle.  Then we will do three code tutorials.  The first will be the one that you will need to do the peer-review assessment.  It's a basic countdown timer that sends a notification at a specific time.  The second will show you how to make it all fancy with custom actions.  The final one will be for remote notifications.  Since remote notifications require an Apple developer account ($$$) we won't assess you on it, but if you have one you can try it out on your own and add it to your personal app toolbox.", "video": ["App Lifecycle", "Push notifications: local Part 1", "Push notifications: local Part 2", "Push notifications: actions", "Remote Push Notification Has Changed", "Push notifications: remote Part 01", "Push notifications: remote Part 02", "Push notifications: remote Part 03", "Push notifications: remote Part 04", "Push notifications: remote Part 05", "Push notifications: remote Part 06", "Intro to Peer Review Assignment 03", "03 Push Notification Alarm"]}, {"title": "Storing Data", "description": "In this week we look at method of securely storing data on the iOS platform called Core Data.  ", "video": ["Core Data: Introduction", "Core Data: Setting Up Your Project", "Core Data: Building the Model", "Core Data: Wiring the UI to CoreData", "The Full Core Data Example", "Enrichment: The Full Core Data Example 1", "Enrichment: The Full Core Data Example 2", "Peer Review 04 Instructions: Storing Data App", "Deploying to the App Store", "App Store Analytics", "04 Secure Data Storage App", "Final Exam"]}]}, {"title": "Interfaz de usuario en iOS", "course_info": "About this course: En este curso podrás crear una interfaz gráfica para una aplicación móvil de iOS. Aplicarás el patrón de diseño Modelo-Vista-Controlador, el cual te permitirá crear aplicaciones fácilmente actualizables. Asimismo, emplearás los principales componentes gráficos que casi siempre aparecen en una interfaz y podrás identificar los principios básicos de diseño recomendados por Apple en la creación de aplicaciones exitosas. \n\nHacia el final del curso te guiaremos para que puedas crear tu primera aplicación móvil completa, la cual será tu llave de entrada al mundo de las aplicaciones comerciales en iOS.\n\nPara asegurar una experiencia exitosa en el estudio de este curso, es importante que tengas una experiencia previa en el lenguaje Swift y en el desarrollo de aplicaciones a través de Xcode.", "target_audience": null, "created_by": "Tecnológico de Monterrey", "teach_by": [{"name": "Dr. José Martín Molina Espinosa", "department": "Programas de Posgrado en Tecnologías de la Información"}], "package_num": "2", "package_name": "Desarrollo de Aplicaciones iOS Specialization ", "level": null, "rating": "4.3", "week_data": [{"title": "Introducción y bienvenida", "description": "La interfaz gráfica, una pieza fundamental en la creación de apps. Introducción al curso, presentación de los temas centrales del curso.", "video": ["Bienvenidos al curso"]}, {"title": "La interfaz gráfica, la cara que enamora", "description": "La relación entre usuarios y apps se realiza a través de la interfaz gráfica. De ahí, la vital importancia en cuidar la creación y diseño de las mismas. En este módulo inicial identificarás los principales componentes gráficos para que los usuarios puedan introducir y desplegar información.", "video": ["La experiencia gráfica", "Plantillas prefabricadas de proyectos en Xcode", "Los widgets visuales en iOS", "Vistas web y textos", "Comportamiento de componentes gráficos básicos", "Definición de una calculadora de índice de masa corporal", "Uso de etiquetas y campos de texto", "Uso de botones", "Patrón de diseño MVC", "Restricciones en componentes gráficos", "Definición de delegados en las propiedades", "Manejo del teclado", "Las vistas gráficas y sus componentes visuales"]}, {"title": "Creación de apps multivistas", "description": "Las apps normalmente ofrecen una gran variedad de funciones a través de grupos de componentes gráficos. La gran mayoría de las veces no es posible que toda la aplicación esté contenida en una sola pantalla. En este módulo realizarás la creación de apps con funcionalidad rica expresada a través de varias pantallas.", "video": ["Las apps necesitan más de una pantalla", "Creación de app con varias vistas", "Tipos de comunicación entre vistas", "Creación de app multipantalla", "Comunicación de datos entre vistas", "Proyecto app basada en pestañas", "Carga de imágenes para pestañas", "La vida de una vista", "Principios de diseño de GUI en iOS", "Creación de apps multivista", "App para crear una pizza desde iPhone"]}, {"title": "La interfaz gráfica en Apple Watch", "description": "El Apple Watch ha creado nuevas formas de comunicación con el usuario. Este nuevo dispositivo funciona de manera amalgamada con el iPhone, logrando así nuevas posibilidades de comunicación con el usuario ampliando las funciones ofrecidas por las apps.", "video": ["Tipos de apps en Apple Watch", "Creación de un proyecto Apple Watch", "Componentes gráficos en Apple Watch", "Componentes hardware y software del Apple Watch", "Creación de app para Apple Watch a través de calculadora de IMC", "Manejo de sliders en Apple Watch", "Creación funcionalidad de la calculadora de IMC en Apple Watch", "Creación de apps con más de una pantalla en Apple Watch", "Comunicación de datos entre pantallas", "Diseño visual de apps en Apple Watch", "La interfaz gráfica en Apple Watch"]}, {"title": "Depuración y pruebas de apps", "description": "Las etapas de depuración y pruebas de apps son muy importantes en el ciclo de vida de desarrollo. Estas actividades permiten la verificación de la app para determinar si esta realiza correctamente las funciones para las cuales fue diseñada.", "video": ["Introducción a las pruebas unitarias", "Creación y ejecución de pruebas unitarias en una app", "La depuración de apps mediante puntos de interrupción", "Manejo de puntos de interrupción", "Puntos de interrupción: acciones y condiciones", "Depuración y pruebas de apps", "App para crear una pizza desde Apple Watch"]}, {"title": "Cierre del curso", "description": "", "video": ["Hasta pronto"]}]}, {"title": "Interactuando con el hardware del dispositivo iOS", "course_info": "About this course: En este curso construirás aplicaciones que logren interactuar con el hardware del dispositivo, con el propósito de crear aplicaciones más interesantes, atractivas y útiles.\n\nEl hardware del dispositivo incluye aditamentos como bocinas, GPS, acelerómetro, cámara, etc., por lo que las aplicaciones pueden interactuar con este hardware para reproducir música, conocer la posición del dispositivo en el Globo Terráqueo, conocer la aceleración a la que está sujeto el dispositivo debido al movimiento que se realiza con él, o agregar fotografías del usuario a sus aplicaciones.", "target_audience": null, "created_by": "Tecnológico de Monterrey", "teach_by": [{"name": "Dr. Víctor Manuel de la Cueva Hernández", "department": "Tecnologías de Información y Computación"}], "package_num": "4", "package_name": "Desarrollo de Aplicaciones iOS Specialization ", "level": null, "rating": "4.7", "week_data": [{"title": "Creando mejores Apps", "description": "¡Hola a todos! Este módulo establece algunas características que debe cumplir una app exitosa, con base en el análisis de algunas apps de ejemplo. También revisa la importancia del trabajo en equipo para el desarrollo de una buena aplicación.Como siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros.) Vayamos a revisar el material preparado para esta semana, suerte.", "video": ["Bienvenida", "Características de una buena app", "Ejemplos de aplicaciones exitosas", "Mejores Apps"]}, {"title": "Media", "description": "¡Hola a todos! Este módulo trata del proceso para agregar media a una aplicación. Particularmente, se incluye la reproducción de sonido y video. Como siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros). Vayamos a revisar el material preparado para esta semana, suerte.", "video": ["Media: Audio y video", "Audio: Audio Toolbox", "Reproducción de sonido corto", "Reproducción de sonido largo", "Reproducción de video", "Framework Audio Toolbox", "Framework AVFoundation", "Framework AVKit", "Media", "Reproductor de Música"]}, {"title": "Movimiento", "description": "¡Hola a todos! Este módulo utiliza el acelerómetro para obtener datos del movimiento del dispositivo, los cuales se usan para lanzar algunas acciones en la aplicación. Particularmente, se logran detectar sacudidas, un gesto muy común para lanzar acciones. Esto se hace por medio de lecturas del acelerómetro y, alternativamente, como un gesto.Como siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros.) Vamos a revisar el material preparado para esta semana, suerte.", "video": ["Movimiento en el dispositivo", "Acceso al acelerómetro", "Lectura del acelerómetro", "Detección de “sacudida” del dispositivo", "Detección de “sacudida” como un gesto", "Framework Core Motion", "Clase UIResponder", "Movimiento"]}, {"title": "Localización", "description": "¡Hola a todos! Este módulo utiliza los diferentes medios de posicionamiento (e.g. GPS) que tiene el dispositivo para establecer las coordenadas esféricas del mismo en el Globo Terráqueo. También lee valores de la brújula para conocer la orientación del dispositivo con respecto al norte, tanto geográfico como magnético. \nLa aplicación realizará ciertas acciones dependiendo de los valores obtenidos por estos sensores. \n\nComo siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros.) Vayamos a revisar el material preparado para esta semana, suerte.", "video": ["Localización del dispositivo", "Iniciando las lecturas de localización", "Obteniendo los datos de posición", "Lectura de la localización del dispositivo", "Lectura de la orientación del dispositivo", "Mapas para una app", "Agregando mapas y anotaciones", "Framework Core Location", "Framework Map Kit", "Localización", "Marcando la Ruta"]}, {"title": "Fotos", "description": "¡Hola a todos! Este módulo agregar fotos del usuario a las aplicaciones. Dichas fotos provienen de alguna de las dos fuentes principales del dispositivo, la cámara o el álbum de fotos. También se usa la cámara para crear aplicaciones de realidad aumentada. Como siempre, si tienes duda en un Quiz o Actividad, debes de escribir en el foro de discusión para pedir ayuda. (Y, si terminas temprano, espero que vayas a esta sección para ayudar al resto de tus compañeros.) Vayamos a revisar el material preparado para esta semana, suerte.", "video": ["Manejo de fotos", "El delegado del Image Picker", "Manejo de fotos en una app", "Realidad aumentada", "Una app con realidad aumentada", "Resumen del curso y despedida", "Clase Image Picker", "Fotos"]}]}, {"title": "Capstone MOOC for \"Android App Development\"", "course_info": "About this course: The Capstone project integrates material from throughout the Android App Development Specialization to exercise and assess the ability of learners to create an interesting Android app. Learners will apply knowledge and skills learned in previous MOOCs in this Specialization, including Java programming features; Android activity, broadcast receiver, service, and content provider (plus SQLite) components; and unit, integration, and user interface testing. The project itself is similar in scope to previous assignments in the earlier MOOCs in the Specialization.  However, it is intentionally designed to enable learners to create a customized app that demonstrates their creativity and mastery of the Specialization topics.", "target_audience": null, "created_by": "Vanderbilt University", "teach_by": [{"name": "Dr. Douglas C. Schmidt", "department": "Electrical Engineering and Computer Science"}, {"name": "Michael Walker", "department": "EECS"}, {"name": "Dr. C. Jules White", "department": "Electrical Engineering and Computer Science"}], "package_num": "5", "package_name": "Android App Development Specialization ", "level": null, "rating": "4.1", "week_data": [{"title": "Capstone Overview", "description": "This module provides an introduction to the contents of the MOOC and summarizes effective learning strategies. In particular, it explains the specification and evaluation rubrics for the Android app that will be implemented by learners in the Capstone", "video": ["Overview of the Capstone Project", "Summary of the Capstone Requirements and Evaluation Process", "Milestone 1 Overview", "Capstone Milestone 1 (Mandatory)"]}, {"title": "Week 2 Milestone", "description": "", "video": ["Milestone 2 Overview", "Capstone Milestone 2 (Mandatory)"]}, {"title": "Week 3 Milestone", "description": "", "video": ["Milestone 3 Overview", "Capstone Milestone 3 (Mandatory)"]}, {"title": "Capstone Final Submission", "description": "", "video": ["Final Submission Overview", "Capstone Final Submission (Mandatory)"]}]}, {"title": "Capstone: Photo Tourist Web Application", "course_info": "About this course: In this Capstone project for the Photo Tourist you will implement a Ruby on Rails web application that makes use of both a relational and NoSQL database for the backend and expose the data through services to the Internet using Web services and a responsive user interface operating in a browser from a desktop and mobile device. You will have a chance to revisit and apply what you have learned in our previous courses to build and deploy a fully functional web application to the cloud accessible to your co-workers, future employers, friends, and family.\n\nIn developing the Photo Tourist web application, you will get to work with different data types and data access scenarios (e.g., fielded data display and update, image upload/download, text search, access controlled information) to provide your users the ability to show off their photos and information from trips they have taken and to seek out photos and information from trips taken by others. Using the application you develop, your users will be able to\n•\tCreate an account\n•\tUpload and download photos to the site and make them accessible to others\n•\tProvide descriptions of trips and photos that others can read\n•\tOrganize photos by location and trip, \n•\tFind photos based on location\n•\tFind photos based on text searches of descriptions \n•\tLocate the place where the photo was taken on a map", "target_audience": null, "created_by": "Johns Hopkins University", "teach_by": [{"name": "Jim Stafford", "department": "Computer Science, Whiting School of Engineering"}], "package_num": "6", "package_name": "Ruby on Rails Web Development Specialization ", "level": null, "rating": "4.7", "week_data": [{"title": "Technical Architecture and API Development Setup", "description": "In this module, we will start your journey into being part of an end-to-end application development as a Rails/AngularJS fullstack developer intern. You will learn the technical architecture and software requirements of the targeted application you will be a part of developing. You will also get a chance to shake off any rust that may have accumulated on your Rails development skills. \n\nAs a part of the technical architecture, you will learn of the various layers, technologies, libraries, and services used in the development, deployment, and operation of the targeted application. You will get an early sense that this course is \"no joke\" when it comes to challenges, but you will be shown a path through most of them. You may be able to skip the application installation until the end if you are using the same computer that you used in the first five (5) courses of the specialization. None of the new software installations are required for this module -- but are included in a single lesson for modularity. You will develop an end-to-end, API-to-Database, resource solution for ActiveRecord/RDBMS and Mongoid/MongoDB using Rails scaffold generator. You will establish a Git repository for this work, provision database and Rails resources on the internet for staging and production deployments, and deploy your solution to the Heroku to be accessible from the Internet. \n\nIf you are a seasoned Rails developer and competent with ActiveRecord, Mongoid, and Heroku -- you may want to initially skip the review lectures, review the final Git commit for module one (1), and try your hand at the optional assignment at the end.  Aside from the technical architecture lesson, this module is mostly a quick breeze through many of the topics of courses one (1) through three (3).  A similar, small-scale review of courses four (4) through five (5) will be covered in the next module. Please enjoy! Also, if you have not done so already I recommend that you read the Course Overview description which provides additional context on what you will be doing in this course. To access, please click the Resources tab on the left navigation. ", "video": ["Course Introduction", "Module 1 Introduction", "Technical and Deployment Architecture (Part 1)", "Technical and Deployment Architecture (Part 2)", "Technical and Deployment Architecture (Part 3)", "Development Environment Setup", "Software Installation: MacOS", "Software Installation: Specifics for Windows", "Software Installation: Specifics for Linux and Docker", "Application Setup", "Application Setup Demo", "Example Requirements", "RDBMS-backed Resource", "MongoDB-backed Resource", "Regression Testing", "Web Service Finishing Touches", "CORS", "Alternate Web Servers", "Gemfile Summary", "Provisioning mLab MongoDB", "API Deployment", "Core API Development and Deployment"]}, {"title": "SPA Development Setup", "description": "In this module, you will develop an AngularJS web application for the purposes of managing a resource hosted by a Rails server. As a part of that, you will learn the details of the Rails Asset Pipeline for hosting web applications, key features to address when moving from development to production, and different deployment options that you have within this course. You will complete an end-to-end AngularJS/Rails application to manage the resource on the Rails server you developed and deployed as a part of module one (1). This application will consist of AngularJS 1.x, UI-Router, and ngResource modules as well as a sample service, directive, controller, and web page to manage the resource. You will learn the details of the Rails Asset Pipeline as an option for deploying web assets like AngularJS web applications and what features it provides and how to conform to its conventions to get those features. Novice and intermediate developers are encouraged to use the Asset Pipeline approach in this module and throughout the course for simplicity and consistency with the examples in follow-on modules as this will be the development approach used by all follow-on modules. You will optionally learn how to leverage node package manager, bower, and gulp to establish an external development environment that parallels many of the capabilities provided by Asset Pipeline (e.g., minification to reduce bandwidth requirements and concatenation to reduce the number of separate server HTTP connections). You may leverage this environment to form a deployment to Github, like performed during courses four (4) and five (5) except with deployment considerations addressed. Although there is a functional gulpfile developed during the module, you are encouraged to treat this as an optional topic. Additionally, you can optionally learn how to use a hybrid of external development and Rails by using Rails as a web server and deploying your web application to the public directory and forming a single development tree and deployment artifact to Heroku. Like the pure external development approach, you are encouraged to treat this approach as an optional topic.  ", "video": ["Module 2 Introduction", "Web Resources and Asset Pipeline Background", "Asset Pipeline Packaging", "Asset Pipeline Deployment", "External Web Client Packaging with Gulp", "Gulp Development Setup", "Gulp Installation", "Gulpfile Task Basics", "Gulpfile Definitions", "Gulp Build Tasks", "Gulp Development Runtime Tasks", "Gulp Distribution Tasks", "External Web Client Deployment", "External Web Client Rails Packaging", "External Web Client Rails Deployment", "Merging UI Branches", "SPA Application Module", "SPA Application Module External Packaging", "Sample Resource CRUD Module", "Sample Resource Service Skeleton", "Sample Resource CRUD Controller Skeleton", "Sample Directive and Template Page", "Sample CSS Styling", "List Resource Instances", "Create Resource Instance", "Select and Update/Delete Resource Instance", "Sample Application in External Environments", "SPA Application Deployments", "CORS Revisited", "SPA Development and Deployment"]}, {"title": "Testing", "description": "In this module, you will learn how to development model, request, and feature specs using RSpec and to leverage gems like DatabaseCleaner, FactoryGirl, and Faker in building those specs. You will also learn how to DRY their tests using RSpec shared_contexts and shared_examples as well as Ruby modules for helper methods. All use of tests within the capstone will be \"integration-style\" tests, going to the database and back. We will not have time to implement pure unit tests for individual components. For model testing, we will focus tests on factories, query scopes, relationships, and facade methods interacting directly with PostgreSQL and MongoDB databases. We will address the general purpose and custom techniques for managing the database state during cleanup. For API testing, we will form a hefty set of RSpec shared_contexts and Ruby helper methods for the request specs that will take care of the details of many CRUD behaviors and other tedious, repetitive tasks. The API is not only easier to test than the Web UI, it is a first-class external interface deserving of separate testing. During test coverage, you will learn internal Rails error handling techniques that will provide the web client a proper and sane web reply in the face of errors. For Web UI testing, we will introduce Capybara for building feature tests and the role of the RackTest, Selenium, and Poltergeist/PhantomJS drivers for implementing UI testing with Javascript. Although Capybara provides a nice interface for expressing Web UI tests, the asynchronous nature of Web UIs make them extremely difficult to test without well thought out decisions during development.  This course has a special emphasis on teaching you how to develop automated integration tests at all levels of the architecture, including the Web UIs. It is recommended that you review this module and sample further test-related lectures in follow-on modules to get a good understanding of how testing can best be leveraged in a full stack development (within constraints of the course). Except for the seasoned RSpec and Capybara user, there is no shortcut through this module.", "video": ["Module 3 Introduction", "RSpec DSL", "Spec Anatomy Part 1: Database Interaction and Blocks", "Spec Anatomy Part 2: Thinning Examples", "Spec Anatomy Part 3: Pending Examples and Lazy/Eager Let Blocks", "RSpec with Mongoid", "DatabaseCleaner with ActiveRecord", "DatabaseCleaner and SharedContexts", "DatabaseCleaner with Mongoid", "DatabaseCleaner Optimizations", "FactoryGirl and Faker", "FactoryGirl Factories", "FactoryGirl and Faker Data", "Request Specs Overview", "First Request Spec", "API GET Resource Instances and Helper ApiModule", "API GET Instance and Not Found Error Reporting", "API Create and Wrapped Parameters", "API Update/Delete and DRYing with Ruby Metaprogramming", "DRYing API Tests with RSpec Shared Examples", "More Shared Examples with API GET Instance", "Capybara Setup", "Selenium Webdriver", "Debugging Capybara/Selenium Tests", "Poltergeist/PhantomJS Headless Webdriver", "Capybara Testing with Docker (Optional Lecture)", "Capybara Usage", "Capybara Waits", "Foo Feature Spec: Foo List", "Foo Feature Spec: Create Foo", "Foo UI Helper Module", "Code Coverage", "Testing"]}, {"title": "Security and the Photo Tourist Domain Model", "description": "In this module, you will learn how to implement authenticated interfaces providing role-based authorization required to protect web resources. You will also practice these techniques while implementing the core resources for the Photo Tourist application. You will learn how to manage user accounts with the Devise Ruby gem and how to implement token-based authentication with the devise_token_auth Ruby gem and ng-token-auth AngularJS module. With this starting point -- the student is on a straightforward path to implementing external authentication (e.g., via Facebook, Twitter, Github) through OAuth2 (not part of the capstone). Additionally, how to implement end-to-end account registration from the UI, through the API, to Devise through the intermediate libraries and implement an authenticated session component in Angular and make that available through a Navbar based on a Bootstrap implementation. You will learn how to add role-based security to their resources with the aid of the Pundit Ruby gem to determine access not only on authentication -- but also on assigned roles for the anonymous and authenticated user. The content and code-along exercises provide opportunities to implement role-based access checks within the Web UI to help guide a user to making authorized choices appropriate for their assigned roles. And how to write optimized SQL queries to implement compound, custom resource payloads for efficient expression of related object information -- including mapping roles to resources accessed by specific users. ************* This is a very long module with very important material relative to security and the targeted application. It will likely be broken up into two (2) or more modules in the future. You should budget extra time for this and treat it as if it were two (2) modules for the amount of time spent. Yes -- that means the novice developer could spend upwards to forty-eight (48) hours going through the lectures, performing the optional code-alongs, and completing the mandatory assignment. *************. The mandatory assignment for this module will be posted shortly after the last lectures are posted and there is a Git commit available in Github for that lecture.\n", "video": ["Module 4 Introduction", "BTA Interview", "Token-based Authentication", "Server: Devise Token Auth Setup", "API: Authentication Requirements", "API: Account Signup", "API: Account Signup Failures and Error Payloads", "Server: Devise Setup Errors Discovered/Fixed", "API: Authenticated Access Control", "API: Authenticate", "API: Authenticated Access", "API: DRY Token Authentication Specs", "Server: Domain Model and Authn Policy", "Server: Image (Metadata) and Authn Policy", "Server: Things and Authn Policy", "DB: ThingImages Model", "DB: Custom SQL and Query Scopes", "API: ThingImages Resource and Authn Policy", "API: ThingImages Resource and Authn Specs", "UI: ng-token-auth Setup and Authentication Requirements", "UI: Signup", "UI: Signup Error Handling and Form Feedback", "UI: Navbar and Authn Session", "UI: Successful Login", "UI: Logout and Persisted Session", "UI: Login Error Handling and Styling", "UI: Authenticated Access", "DB: Populating Sample Data with Rakefile", "UI: Images Page and Image Selector Component", "UI: Display Image Metadata", "UI: Image Authz Directive", "UI: Image Authz Policy Enforcement", "UI: Authenticated Things Management", "UI: Displaying Thing/Image Links", "UI: Creating Thing/Image Links", "UI: Managing Thing/Image Links", "Server: Rule-based Authorization with Pundit Gem", "Server: Role Authorization Requirements", "Server: User Roles", "Server: Image Authorization Policy Enforcement", "DB: Image Authorization Policy Enforcement Queries", "Server: Thing Authorization Policy Enforcement", "Server: Thing/Image Links Authorization Policy Enforcement", "API: WhoAmI Service with User Roles", "UI: Authorization Architecture", "UI: Authz Service", "UI: Authorization Policy Services", "UI: Image Authorization", "UI: Thing Authorization", "Fullstack Information"]}, {"title": "Image Content", "description": "In this module, you will implement image content within the end-to-end application.  At the data tier, you will use the BSON::Binary type to store binary data within MongoDB, manipulate image sizes and content using ImageMagick/MiniMagick, implement model validation and content size queries using Mongoid.  At the API tier, you will implement content size queries and web caching of write-once, read-many content using a custom HTTP ETag and Cache-Control headers.  Within the UI, you will  load, manage, edit, and upload new content using AngularJS, ng-file-upload, and ui-cropper modules. You will also implement a re-usable component to vview full size images with embedded information and controls that allow you to cycle through a series of images.", "video": ["Module 5 Introduction", "Image Content Introduction", "DB: Image Content and BSON::Binary", "DB: Read Image Content Size", "DB: Validate Image Content", "DB: Assign Image Content to Image", "DB: Generating Image Content Sizes", "DB: ImageContent Queries and Management", "API: Image Content API Overview", "API: Image Content API Lifecycle - Part I: Create", "API: Image Content API Lifecycle - Part II: (Get) Content", "API: Image Content API Lifecycle - Part III: Destroy, Index, and Show", "API: Image Content Validation", "API: Image Content Queries", "API: Image Content Caching", "UI: Display Existing Image Content", "UI: Upload New Image Content - Part I: Content Preview", "UI: Upload New Image Content - Part II: Create Image", "UI: Edit Image Content", "UI: Image Viewer Content Display", "UI: Image Viewer Information Display and Controls", "UI: Determining Image Query Sizes", "Server: Image Cropping and Marking", "Images"]}, {"title": "Geolocation", "description": "In this module you will add geolocation capabilities to the end-to-end application. This will allow your users to assign a geolocation position to images as well as identify the current origin and distance limits for future API queries. You will implement the model and API queries for subjects within this module and complete the UI components within the next module. At the data tier you will add geolocation coordinates to the Image model, make those geolocation coordinates available to ThingImage though the 1:1 relationship between them, implement geolocation queries using the Geokit Rails gem that determine all items within a distance limit from an origin and supply their distance from origin. These queries will leverage custom SQL selects, joins (inner, right outer, and left outer join) and will be encapsulated within ActiveModel query scopes. At the API tier you will implement API service endpoints to geocode addresses and reverse geocode positions into a resolved location using the Geokit Rails gem and the Google Maps Geocode service,  implement a persistence cache of geocode results using MongoDB to help stay within free service limits and speed up lookups, enable an API service endpoint to query for subjects (ThingImages) of a certain type, within a distance limit, and dynamically annotate them with the distance from the supplied origin, implement HTTP caching headers for both geocode and subject results. At the UI tier you will implement a geocoder service to lookup a location by (partial) address or position from the API implemented on the Rails server, add geocoding to the Image editor to allow a user to specify the Image's position using an address, build a current origin component to express and retain the center origin and distance limits for future subject queries.", "video": ["Module 6 Introduction", "DB: Geolocation Coordinates", "DB: Image Position and Value Objects", "DB: Geolocation Queries with Geokit Rails", "DB: Associated Object Geolocation Queries", "DB: ThingImage Geolocation Query Scopes", "DB: PostalAddress and Location Value Objects", "Server: Geocoding and Setup", "API: Geocode API", "Server: Geocode Cache", "API: Image Position", "API: Subject Queries", "API: Subject Query Results Caching", "UI: Image Position", "UI: Current Origin - Identify Origin by Address", "UI: Current Origin - Identify Origin by Current Location", "UI: Current Location Override and Error Handling", "UI: Distance Limit and Styling", "Heroku Deployment", "Geolocation"]}, {"title": "UI Layout and Subjects Page", "description": "In this module you will add generic UI framework and Subject-specific components to implement a Subjects page that will show the user different views of Subjects (Things and Images) matching query criteria as well as the ability to express and depict the currently selected Subject.  As part of the UI framework you will implement a set of parent/child components to manage areas of the page and tabs within areas. You will make heavy use of transcludes to implement this visual layering and to encapsulate the details away from the Subject-based components. You will implement dynamic styling to shrink and expand areas as directed by the user.  As part of interacting with Subjects you will implement a Subjects page; divide the page up into sides, areas, and tabs; insert a set of Subject/view-specific components (e.g., lists, images, and details); integrate these components with a new Current Subjects service that will enable each of the components to maintain a consistent view of the user's query results and currently selected Subject. At the end of this module you will have implemented a complete UI framework -- ready to implement the visual display of Subjects using maps in the next module.", "video": ["Module 7 Introduction", "UI: Overall Layout", "UI: Subject Page Tabs", "UI: Subject Page Areas", "UI: Area Left/Right Sides", "UI: Subject Page Styling", "UI: Images List View (Part 1)", "UI: Images List View (Part 2)", "UI: Things List View", "UI: Image/Thing Synchronization", "UI: Current Image View, Part 1: Image Display", "UI: Current Image View, Part 2: Image Synchronization", "UI: Current Thing Information View", "UI: Error Fix and Subject Caching", "UI Display"]}, {"title": "Mapping", "description": "In this module you will learn to display and interact with subjects on a map using the Google Javascript Map API. You will learn how to display a map, display markers on the map, customized markers to distinguish different types of subjects, and add display information windows for markers to indicate subject identity and image You will learn how to synchronize elements of the map with the other Subject components. You will learn to clear the map of markers, add new markers, activate marker(s) through a method call, and react to markers being clicked. This will complete our subjects page and course topics and leave you on the doorstep of building more interesting extensions to the example in the assignment. Good luck!", "video": ["Module 8 Introduction", "UI: Display Map, Part 1: Implementation", "UI: Display Map, Part 2: Logistics and Completion", "UI: Display Origin Marker", "UI: Display Subject Markers", "UI: Display Info Windows", "UI: Map/Subject Synchronization, Part 1: Current Subject", "UI: Map/Subject Synchronization, Part 2: Current Origin", "Course Outro", "Fullstack Geolocated Images and Maps"]}]}, {"title": "iOS Project: Transreality Game", "course_info": "About this course: Students will produce a networked game that will leverage sensors on the phone to create a unique gaming experience.  The focus of the game will be to make it physical through real-world gestures, motion and knowledge of other players real-world location.  To do this students will need to integrate knowledge of graphics, networking, sensors, and user interface design alongside a skill set of tool usage.  The final project will involve milestones with opportunities to get ungraded peer review feedback from fellow learners so that they can iterate and improve their game program.  The final networked game that the students produce would be something they could showcase in job application materials, in an interview, or offer in the iTunes store.", "target_audience": null, "created_by": "University of California, Irvine", "teach_by": [{"name": "Don Patterson", "department": "Informatics and Computer Science"}, {"name": "Sam Kaufman", "department": null}], "package_num": "6", "package_name": "iOS Development for Creative Entrepreneurs Specialization ", "level": null, "rating": "4.9", "week_data": [{"title": "The Project and the Plan", "description": "In this module we go through the project that you will be working on for this capstone class.  We look at the details of what the requirements are and talk a little bit about how to go about finding some of the assets that you might want to use.  The first week is all about planning and designing.\n", "video": ["Project Description", "Capstone Grading", "Welcome", "Project Explanation", "Discussion Forum Overview", "Schedule", "Finding Assets", "Example Game 1", "Example Game 2", "Example Game 3", "Side Scrolling Tutorial Part 1", "Side Scrolling Tutorial Part 2", "Side Scrolling Tutorial Part 3", "Side Scrolling Tutorial Part 4", "Deliverable # 1", "Peer Review # 1"]}, {"title": "Basic Scaffold Implementation", "description": "This week we work on scaffolding the project.  We set out the design target last week, now we peer review last week's work and start to code.  Stay flexible, but let's start building", "video": ["Deliverable # 2", "Peer Review # 2"]}, {"title": "Gameplay View", "description": "This week we nail down the touch interaction and the sensor implementation.   We want to keep working on all aspects of your design, but this week you need to turn in the handling of your input, from the user and from the world.  Also make sure you use our MotionHUD Cocoapod so we can see what you are doing in the recordings that you turn in", "video": ["Sensor Cocoapod", "Deliverable # 3", "Peer Review # 3"]}, {"title": "Level Up", "description": "Let's take it to the next level!  This week, as you continue to improve the stability and overall implementation of your game, we want to make sure that you hit the requirements for sound and particle systems.  These are probably pretty easy things to add to your game (depending on your game!) so use the slack to make progress on the other aspects of your game.  Maybe add an extra level if your game has levels.\n", "video": ["Deliverable # 4", "Peer Review # 4"]}, {"title": "Win / Lose / Achievements / Play Test", "description": "This might be a big week.  There are 3 things we are doing this week, adding a game completion screen, implementing achievements, and .... drumroll.....  letting someone else (a real human) that you know play it.   We want to here what you find out.  Playtesting is an important part of any game.  User testing in general is a very important part of any user interaction design process.  Don't procrastinate, this might be more work than you realize.  Let's give it a shot!\n", "video": ["Deliverable # 5", "Peer Review # 5"]}, {"title": "Game Play Clean Up", "description": "It's time to clean up the loose ends.  This is your chance to add the preferences screen and to make sure that you have implemented all of the requirements mentioned in the very beginning.  This is your last full week to just code, so make it work.\n", "video": ["Deliverable # 6", "Peer Review # 6"]}, {"title": "Homestretch", "description": "It's show time.   The MIT media lab is famous for a motto, \"Demo or die!\".  They mean that if you can't demo your technology then you won't graduate.  The stakes aren't *that* high here, but it is time to show us what you have done.  Your job this week is to put the final polish on your game and record a game trailer.   This is like a movie trailer, but it focusses on showing us that you met the requirements.  Hopefully there is a little drama and excitement too.  Time to make your work shine!\n", "video": ["Deliverable # 7", "Peer Review # 7"]}, {"title": "Capstone Completion", "description": "This is the very end!   Thanks for joining us on this long journey.  You get to see what all your peers produced this week.  Maybe one of them will be in the iTunes store soon.  On behalf of Sam and I, it's been an honor to be your teachers!", "video": ["Capstone Completion"]}]}, {"title": "Web Design for Everybody Capstone", "course_info": "About this course: The capstone will develop a professional-quality web portfolio.  Students will demonstrate the ability to design and implement a responsive site for a minimum of three platforms.  Adherence to validation and accessibility standards will be required. The evolving student implementations will be reviewed each week by capstone peers and teaching assistants to make sure that the student keeps up with the agenda of the course. \n\nUpon completion of this course students will feel comfortable creating and/or updating existing front-end sites, utilizing existing frameworks, and testing sites for accessibility compliance.\n\nThis course is only open to students who have completed the first four courses in the Web Design for Everybody specialization: Introduction to HTML5, Introduction to CSS3, Interactivity with JavaScript, and Advanced Styling with Responsive Design.", "target_audience": null, "created_by": "University of Michigan", "teach_by": [{"name": "Colleen van Lent, Ph.D.", "department": "School of Information"}], "package_num": "5", "package_name": "Web Design for Everybody (Basics of Web Development and Coding) Specialization ", "level": null, "rating": "4.7", "week_data": [{"title": "Week One: Introduction", "description": "Welcome to the Web Design for Everyone Capstone!!!  It really is my intention to make sure that everyone who completes this capstone  will have a product they are proud of.  The challenge is that \"everyone\" is actually a very diverse group of people, each person coming in with different skill sets and interests.  So in this course you will pick from one of three portfolio options to complete.  The goal of this approach is to help students self-select into appropriate peer groups.  ", "video": ["Special Announcement for New Capstone Students", "Welcome", "Important FAQs", "Students from earlier cohort - READ ME", "Help us learn more about you!", "Portfolio Objectives", "Portfolio Requirements", "Portfolio Options", "Building your site from scratch", "Building your site from a template", "Building your site using a framework", "Portfolio Grading Rubric", "Previous Week One Office Hours", "Extra Resources", "Template sources", "Framework options", "Introduce yourself"]}, {"title": "Week Two: Design Phase", "description": "Students will submit wireframes for a multi-part online portfolio.  The topic of your site is your choice, but you will be expected to fulfill a small checklist of requirements with respect to the amount of proposed content and the variety of HTML5 tags.  Emphasis will be on ability to demonstrate mobile-first paradigm design.", "video": ["Wireframes/Design Sketches", "What is the topic for your portfolio?", "Previous Week Two Office Hours", "Assessing the Design Sketches", "Notice for Auditing Learners: Assignment Submission", "Design Sketch demo for a site coded from scratch"]}, {"title": "Week Three: Review and Preparation Phase", "description": "This week you will continue to review your fellow students designs.  Feedback will be based on layout, proposed content, and accessibility.  The goal is that these peer reviews will inspire you to attempt something more on your site (or provide the feedback that lets you know you may want to scale down your own expectations.)  You will begin to create the content of your site as you wait for the reviews of your project to be created.", "video": ["Previous Week Three Office Hours", "Using the W3 Validator", "Using the WAVE Tool", "WebAIM quick reference", "OPTIONAL: Recent article on accessibility", "Utilizing Developer Tools", "The Safari Web Inspector Guide", "Firefox Developer Tools", "Sticky Footers", "Embedding a Google Calendar", "Using Bootstrap to Add a Carousel", "Adding a Lightbox Plugin", "Font Awesome", "Preparing your Images"]}, {"title": "Week Four: Coding Phase", "description": "Using the feedback you received from other capstone participants you will begin to style your portfolio.  At the end of Week Five you will have the opportunity to submit your intermediate work for review.", "video": ["Setting Up a Byethost Account", "Uploading Files to Your Account using Byethost", "Working  \"locally\"", "Hosting Options", "Previous Week Four Office Hours"]}, {"title": "Week Five: Validation and Review Phase", "description": "This week you will validate and test your site.   You will write a summary of the results and explain (if necessary) why you needed to violate any coding conventions.", "video": ["Previous Week Five Office Hours", "Why Validate?", "(Optional) Creating a screen capture video", "Validation Issues??  Put them here!", "Demo your portfolio (coded from scratch)", "Demo your portfolio (designed from a template)", "Demo your portfolio (designed using a framework)"]}, {"title": "Week Six: Revise and Submit Phase", "description": "We will conclude with a period of peer-review and modifications to your site. By the end of this week you will have a unique, responsive, accessible portfolio.   Congratulations!!  ", "video": ["Previous Week Six Office Hours", "Congratulations", "Portfolio Grading Rubric", "Post-Course Survey", "Demo you portfolio (designed from scratch)"]}]}, {"title": "Responsive Website Development and Design Capstone ", "course_info": "About this course: For your Responsive Website Development and Design Specialization Capstone Project, you will create a complete, responsive, multi-user, data-driven website which aims to solve a particular problem. We encourage you to create a website addressing a problem that you are interested in!  However, if you don’t have an idea of your own, we have several that we will suggest in the course.  \n\nIn the capstone project, you will:\n1. Develop a complete website using the full range of skills learned during the specialisation\n2. Work through a structured process from idea generation to product delivery\n3. Document and receive feedback on the development of your project from an idea to a fully functional piece of software in a series of structured assignments including peer interactions\n\nParticipation in or completion of this online course will not confer academic credit for University of London programmes", "target_audience": null, "created_by": "University of London, Goldsmiths, University of London", "teach_by": [{"name": "Dr Matthew Yee-King", "department": "Computing Department, Goldsmiths, University of London"}, {"name": "Dr James Ohene-Djan", "department": "Computing Department, Goldsmiths, University of London "}], "package_num": "6", "package_name": "Responsive Website Development and Design Specialization ", "level": null, "rating": "4.8", "week_data": [{"title": "What's the Idea?", "description": "Welcome to the first module of 'Responsive Website Development and Design Capstone!'. In this module you will define what the end point is for your project, brainstorm ideas about your project and conduct a SWOT analysis to clarify aspects of your ideas. In addition, you will define a target audience and list the 4 Ps: Price, Product, Place and Promotion. Finally, you will identify key resources needed for your project and will develop a high level project timeline. ", "video": ["Capstone Activity Plan - READ ME FIRST!", "How will the project be assessed?", "Learning Outcomes", "What's the Idea?", "Example projects", "Example Mission Statement for TextCircle", "Example of 'The Idea'", "Example SWOT Analysis", "How we will use todo lists in this course", "What's the Idea Quiz", "To-Do List"]}, {"title": "Pitching your Idea", "description": "Welcome to the second module of 'Responsive Website Development and Design Capstone!'. By the end of this module, you will transition your idea from the abstract to the concrete, use process analysis to identify the main processes people can carry out in your application and identify primary and secondary processes. In addition, you will develop ideas about user experience through user journeys and describe processes as step by step procedures. Finally, you will be able to explain what an elevator pitch is. ", "video": ["Learning Outcomes", "Pitching your Idea", "Simple Example Pitch Video", "Pitching your Idea Quiz", "Create an Elevator Pitch", "To-Do List"]}, {"title": "Digitising the Idea", "description": "Welcome to the third module of 'Responsive Website Development and Design Capstone!' By the end of this module you will have, put your idea into a digital format, explained the purpose of a site skeleton and defined paths through your site skeleton. In addition, you will have made design wireframes for key pages in your application and developed ideas about the look and feel for your application. ", "video": ["Learning Outcomes", "Digitising the Idea", "Digitising the Idea Quiz", "Create a Design Specification", "To-Do List"]}, {"title": "Building the App I", "description": "Welcome to the fourth module of 'Responsive Website Development and Design Capstone!'. In this module you will describe the iterated project lifestyle, understand the purposes of backup and version control and list the reasons for using APIs. You will also share the experience of development and describe black box user testing using user pathways. Finally, you will use your digitised idea to create weekly tasks, carry out weekly reviews and use basic git and github functionality. ", "video": ["Learning Outcomes", "Building the App", "Github", "Github: further information", "Time Management", "Building the App Quiz", "To-Do List"]}, {"title": "Building the App II", "description": "Welcome to the fifth module of 'Responsive Website Development and Design Capstone!'. This is the second module covering the app development process. As in the previous module, In this module you will describe the iterated project lifestyle, understand the purposes of backup and version control and list the reasons for using APIs. You will also share the experience of development and describe black box user testing using user pathways. Finally, you will use your digitised idea to create weekly tasks, carry out weekly reviews and use basic git and github functionality. ", "video": ["Learning Outcomes", "Keep working on your app!", "To-Do List", "Get some feedback about your application!"]}, {"title": "Presenting your project", "description": "Welcome to the final module of 'Responsive Website Development and Design Capstone!'.In this module you will list the typical components of a technical showcase, consider how to pitch a technical presentation and use the key processes from the design phase to demonstrate your software. Finally, you will explain the basics of user surveys and understand the value of user feedback. ", "video": ["Learning Outcomes", "Presenting your Project", "Example Technical Demo Video", "Example Technical Demo Video: slides", "Final To-Do List", "End of Project Git Log", "Create a Technical Demo Video", "Task Analysis Test"]}]}, {"title": "Build Your Own iOS App", "course_info": "About this course: In the Build Your Own iOS App capstone you will expand your repertoire of additional features and more advanced functions that may be implemented within the iOS environment. You will refine your development skill set and will apply your accumulated skills over the entire specialization series in an applied application development capstone project. This particular course is project based and structured around you building a high quality app as a capstone to the specialization.\n\nCurrently this course is taught using Swift 2. The team is aware of the release of Swift 3 and will be making edits to the course in time. Please be aware that at this time the instruction is entirely with Swift 2.", "target_audience": null, "created_by": "University of Toronto", "teach_by": [{"name": "Parham Aarabi", "department": "Department of Electrical and Computer Engineering"}], "package_num": "4", "package_name": "iOS App Development with Swift Specialization ", "level": null, "rating": "2.8", "week_data": [{"title": "Welcome to Build Your Own iOS App", "description": "Introduction and course roadmap.", "video": ["About the course", "Fun With Selfies", "Fun With Selfies: Module Download for Xcode 7.2", "Fun With Selfies: Module Download for Xcode 7.3", "Fun With Selfies: Module Download for Xcode 8.1/8.2", "Fun With Selfies: Module Download for Xcode 8.3", "Fun With Selfies: Xcode 7.3 & Xcode 8.2", "Fun with Selfies: Using the FaceTracker framework", "Fun with Web Services", "Fun with Web Services: Set up Accounts", "Fun with Web Services: Starter Code", "Fun With Web Services: Practice Playground", "Making Prototypes With Keynote"]}, {"title": "Facetracker Library", "description": "Get the face detector library running and understand its notation/connections", "video": ["Fun With Selfies: Facetracker File Download for Xcode 7.2", "Fun With Selfies: FaceTracker File Download for Xcode 7.3", "Fun With Selfies: FaceTracker File Download for Xcode 8.1/8.2", "Fun With Selfies: FaceTracker File Download for Xcode 8.3", "Fun With Selfies: An important note about using the FaceTracker framework", "Fun With Selfies: Add Facetracker Framework Video", "Fun With Selfies: Add Facetracker Framework", "Fun With Selfies: Facetracker view controller"]}, {"title": "Object Animation (Basic)", "description": "Create a simple animation of an object based on the position of the face", "video": ["Fun With Selfies: Basics of facetracker", "Fun with Web Services: API Documentation", "Fun With Web Services: Making HTTP Requests", "Example - App Prototype", "Peer Check-In: App Prototype"]}, {"title": "Animation Series (Complex)", "description": "Create a series of animations based on the face location and associate these with a certain look", "video": ["Fun With Selfies: Show tracked points"]}, {"title": "Final App Submission", "description": "Create a final app with the ability to take a photo and share the result. Final peer assessment.", "video": ["Farewell from iOS App Team", "Final Project", "Final Example", "Final Project Submission"]}]}, {"title": "Getting started with Augmented Reality", "course_info": "About this course: This course will teach you the basics of developing mobile applications using Mixed and Augmented Reality (MAR) technologies.\n \nThrough hands-on projects, you’ll learn practical techniques to rapidly and easily prototype three different applications for Android smartphones and tablets – even with no previous coding experience.\n\nIf you’re a creative entrepreneur, this is your ideal introduction to today’s trends in the products and technologies of the emerging augmented reality market.\n\nIf you’re a journalist, media/content producer or teacher, you’ll discover how to augment print-based media with sounds, images and videos, and see how to create an augmented city map and geo-located augmented reality game for your audience.\n\nIf you’re a web designer or app developer, you’ll gain a range of technological building blocks that you can integrate into your service portfolio.\n\nWhatever your background, you’ll learn how to design cutting-edge visual experiences that will enhance your job prospects.\n\nWhat you’ll learn\n\n•\tAll about the main MAR products and technologies on the market today\n•\tHow to build three different augmented reality applications using an augmented reality browser and authoring tools\n•\tHow to include image recognition and object tracking \n•\tHow to use geolocation functionality for outdoor augmented reality\n•\tDetails of the ISO-ARAF standard, an innovative language for representing augmented reality content\n\nPrerequisites\n\n•\tYou don’t need any prior technical knowledge to take this course. \n\n•\tIf you’re familiar with markup languages (HTML, XML, etc) and content management systems, you may be more at ease  with the key concepts and techniques.\n\nThis MOOC is supported by the Patrick and Lina Drahi Foundation.\n\nFollow us!\nTwitter : https://twitter.com/MOOCMAR\nFacebook : https://www.facebook.com/MOOCMAR/", "target_audience": null, "created_by": "Institut Mines-Télécom", "teach_by": [{"name": "Marius Preda", "department": "Télécom SudParis"}, {"name": "Veronica Scurtu", "department": "Télécom SudParis"}, {"name": "Traian Lavric", "department": "Télécom SudParis"}], "package_num": null, "package_name": null, "level": "Intermediate", "rating": "4.2", "week_data": [{"title": "Welcome", "description": "Welcome to the \"Getting started with Augmented Reality\" MOOC! We are excited to have you in the class. Let's meet the course team and introduce yourself to the community.", "video": ["Welcome to our course Mixed and Augmented Reality!", "Course overview", "FAQ", "How to use Discussion Forums", "Introduce yourself"]}, {"title": "Introducing Mixed and Augmented Reality", "description": "In this module we will explain the key concepts and techniques at work in Mixed and Augmented Reality. We will also spend some time explaining some business aspects of augmented reality: the AR market, the potential applications and the value chain. At the end of this module, we’ll identify the main characteristics of AR systems and we’ll specify the main components of an AR architecture.", "video": ["What will you learn in this module?", "Definition of Mixed and Augmented Reality", "Mixed Reality Continuum", "In which fields do you consider that AR applications can be applied?", "MAR Market, Actors and Value Chain", "Application vs. Browser", "MAR System Architecture", "Augmented Reality History", "What is the one question that is still on your mind after this module?", "What are the Mixed and Augmented Reality concepts?", "Check your knowledge on MAR Market and System Architecture"]}, {"title": "Augmented Books", "description": "In this module you will create an AR application for printed media: an Augmented Book. For this, in the first part of the module, we shall use an authoring tool and an AR browser.  In the second part, we will have a closer look at the code produced by the authoring tool. If you want to go deeper and learn how to “program” it and change the behavior of the application, you can access the Honors material.  If you have difficulties with the assignments, you should post on the Discussions section to ask for help. To get started, please jump into the first lesson below!  ", "video": ["Welcome", "What will you learn this week?", "Create an Augmented Book using an authoring tool", "How to access project assignments?", "Create an Augmented Book using the authoring tool, step-by-step", "An Augmented Book example", "Share your work for the Augmented Book", "Optional: Submit your work to the Augmented Reality Project Gallery", "Download and install the ARAF browser", "Download the ARAF browser on your mobile device", "Note: How to allow the installation of non-market apps on Android", "Install the ARAF browser on your mobile device", "Open an AR file in the ARAF browser", "Let's take it a step further", "Augmented Book - Inside the ARAF file", "Main modules of the obtained ARAF application", "An Augmented Book template", "Image recognition process", "Image recognition process – inside the ARAF file", "FAQ of Week 2", "What is the one question that is still on your mind after this module?", "Modifying the AR experience: replace a sound with a video", "Modifying the AR experience: replace one sound with a video", "Video resources to be used for the assignment", "Demonstration of the modified AR experience", "Modified Augmented Book code", "Share your modified Augmented Book", "Start making your own Augmented Book", "Quiz about the main modules of the ARAF file", "Quiz about the image recognition process inside the ARAF file", "Start modifying your Augmented Book"]}, {"title": "Augment Your City Map", "description": "In this module you will learn how to use the image recognition and tracking process to enrich an image with a 3D object. At the end of this module, you will have an AR application that will augment a city map with a 3D model.", "video": ["Introduction", "What will you learn in this module?", "3D objects in ARAF", "How to run and visualize ARAF files on your PC", "What is Vuforia?", "Recognition process with Vuforia", "Use the Vuforia descriptor in ARAF", "How to use the Vuforia developer website - Step-by-step", "FAQ of Week 3", "What is the one question that is still on your mind after this module?", "Augment your city map - Step-by-step", "Share your Augmented City Map", "Optional: Submit your work to the Augmented Reality Project Gallery", "3D objects in ARAF", "Recognition process with Vuforia", "Use the Vuforia descriptor in ARAF", "Augment your city map"]}, {"title": "Augmented Reality with Geolocation", "description": "This module concerns the geolocation in Augmented Reality and spans 2 weeks. This week, we walk you step by step in the creation of an AR geolocalized quiz game. ", "video": ["Welcome", "What will you do in this module?", "Preparing the next assignement", "Create an AR Quiz using the authoring tool", "Create an AR Quiz using the authoring tool : step-by-step", "An AR Quiz example", "Share your work for the AR Quiz", "Optional: Submit your work to the Augmented Reality Project Gallery", "Geolocation in ARAF", "What is a prototype? A basic example: Image PROTO", "What is a prototype? A basic example: Image PROTO", "Enriching a prototype: add user interaction", "Source code for adding user interaction to a prototype", "Map PROTO Step-by-Step", "Source code for the Map PROTO", "MapMarker PROTO Step-by-Step", "Source code for the MapMarker PROTO", "MapOverlay PROTO Step-by-Step", "Source code for the MapOverlay PROTO", "MapPlayer PROTO Step-by-Step", "Source code for the MapPlayer PROTO", "An example of a functional map in ARAF", "Source code for the full functional map in ARAF", "FAQ of Week 4", "What is the one question that is still on your mind after this module?", "Create your own AR Quiz", "Quiz about geolocation and prototypes in ARAF", "Quiz about map-related prototypes"]}, {"title": "Customizing an Augmented Reality Game", "description": "In this module, you will have a closer look at the code of the AR Quiz produced by the authoring tool in the previous module. You will spend almost the entire module in understanding the ARAF format for AR Quiz and then you will learn how to “program” it and change the behavior of the application.", "video": ["Welcome", "What will you do in this module?", "AR Quiz - Prototypes part 1", "AR Quiz - Prototypes part 2", "AR Quiz - Game's scene graph", "AR Quiz - The game's behavior", "Source code for the AR Quiz", "FAQ of Week 5", "What is the one question that is still on your mind after this module?", "Closing comments", "Map markers continuously updating their position on the map", "Programming a new behavoir for the AR Quiz : step-by-step", "Source code of the modified AR Quiz", "Share your modified AR Quiz", "Check your knowledge of prototypes used in the AR Quiz", "Check your knowledge of  AR Quiz scene and game behavior", "Modify your AR Quiz"]}]}]